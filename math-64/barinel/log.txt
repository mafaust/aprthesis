[0] INFO ProjectConfiguration - Version of the JVM used: 1.8.0_202
[0] INFO main - Java version of the JDK used to run tests: 1.8.0_202
[1] INFO main - The compliance of the JVM is:  8
[2] INFO main - command line arguments: [-location  /Users/marekmazur/astor/defects4j/math-64  -mode  jgenprog  -package  org.apache.commons  -jvm4testexecution  /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin  -failing  org.apache.commons.math.optimization.general.MinpackTest:org.apache.commons.math.optimization.general.MinpackTest:  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -stopfirst  true  -dependencies  /Users/marekmazur/astor/examples/libs/junit-4.4.jar  -maxgen  1000000  -seed  10  -maxtime  60  -scope  local  -stopfirst  true  -flthreshold  0  -population  1  -faultlocalization  flacoco]
[4] INFO AstorMain - Running Astor on a JDK at /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre
Source folders: [/Users/marekmazur/astor/defects4j/math-64/src/main/java]
Source Test folders: [/Users/marekmazur/astor/defects4j/math-64/src/test]
---- Creating spoon model
Creating model,  Code location from working folder: /Users/marekmazur/astor/defects4j/math-64/src/main/java
building model: /Users/marekmazur/astor/defects4j/math-64/src/main/java, compliance level: 8
Classpath (Dependencies) for building SpoonModel: [/Users/marekmazur/astor/examples/libs/junit-4.4.jar]
Spoon Model built from location: /Users/marekmazur/astor/defects4j/math-64/src/main/java
Number of CtTypes created: 446
Running chosen test detection strategy: CLASSLOADER
Test retrieved from classes: 252
Running Flacoco...
Running spectrum-based fault localization...
FlacocoConfig{workspace='/Users/marekmazur/astor/.', projectPath='/Users/marekmazur/astor/defects4j/math-64', srcJavaDir=[/Users/marekmazur/astor/defects4j/math-64/src/main/java], srcTestDir=[/Users/marekmazur/astor/defects4j/math-64/src/test], binJavaDir=[/Users/marekmazur/astor/defects4j/math-64/target/classes], binTestDir=[/Users/marekmazur/astor/defects4j/math-64/target/test-classes], classpath='/Users/marekmazur/astor/examples/libs/junit-4.4.jar', customJUnitClasspath='null', customJacocoClasspath='null', mavenHome='/Users/marekmazur/.m2/repository/', coverTests=false, testRunnerVerbose=false, testRunnerTimeoutInMs=3600000, testRunnerJVMArgs='null', threshold=0.0, includeZeros=false, complianceLevel=8, testDetectionStrategy=CLASSLOADER, ignoredTests=[], jUnit4Tests=[org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, org.apache.commons.math.linear.QRSolverTest#testOverdetermined, org.apache.commons.math.fraction.BigFractionTest#testPow, org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, org.apache.commons.math.geometry.RotationTest#testCompose, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testAdd, org.apache.commons.math.distribution.PascalDistributionTest#testSampling, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math.stat.StatUtilsTest#testStats, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, org.apache.commons.math.distribution.TDistributionTest#testConsistency, org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, org.apache.commons.math.random.RandomAdaptorTest#testConfig, org.apache.commons.math.complex.ComplexTest#testConstructor, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testGetValues, org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, org.apache.commons.math.random.ValueServerTest#testReplay, org.apache.commons.math.util.MathUtilsTest#testSignInt, org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, org.apache.commons.math.fraction.FractionTest#testDoubleValue, org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHypergeometric, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, org.apache.commons.math.geometry.Vector3DTest#testAdd, org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, org.apache.commons.math.stat.FrequencyTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, org.apache.commons.math.fraction.BigFractionFieldTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, org.apache.commons.math.linear.EigenSolverTest#testSolve, org.apache.commons.math.complex.ComplexTest#testTan, org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, org.apache.commons.math.util.BigRealTest#testConstructor, org.apache.commons.math.linear.AbstractRealVectorTest#testSparseIterator, org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, org.apache.commons.math.distribution.CauchyDistributionTest#testDensities, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, org.apache.commons.math.exception.OutOfRangeExceptionTest#testAccessors, org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest#testAccessors, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, org.apache.commons.math.geometry.Vector3DTest#testNorm, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, org.apache.commons.math.complex.ComplexTest#testCosNaN, org.apache.commons.math.distribution.ZipfDistributionTest#testSampling, org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, org.apache.commons.math.genetics.RandomKeyTest#testIsSame, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.random.RandomDataTest#testNextUniform, org.apache.commons.math.fraction.FractionTest#testCompareTo, org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testSinMin, org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, org.apache.commons.math.util.BigRealTest#testCompareTo, org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, org.apache.commons.math.linear.RealMatrixImplTest#testToString, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testDivideInfinite, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, org.apache.commons.math.complex.ComplexTest#testSubtractNaN, org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest#testPreconditions, org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, org.apache.commons.math.complex.ComplexTest#testSinhNaN, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, org.apache.commons.math.distribution.NormalDistributionTest#testDensities, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, org.apache.commons.math.random.RandomDataTest#testNextHypergeometric, org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, org.apache.commons.math.exception.NotPositiveExceptionTest#testAccessors, org.apache.commons.math.distribution.BinomialDistributionTest#testSampling, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, org.apache.commons.math.geometry.RotationTest#testAngles, org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, org.apache.commons.math.distribution.BetaDistributionTest#testDensity, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest#testParaboloid, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, org.apache.commons.math.random.RandomDataTest#testNextZipf, org.apache.commons.math.linear.EigenDecompositionImplTest#testMathpbx02, org.apache.commons.math.linear.EigenDecompositionImplTest#testMathpbx03, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, org.apache.commons.math.complex.ComplexTest#testTanhCritical, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, org.apache.commons.math.geometry.Vector3DTest#testSubtract, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, org.apache.commons.math.random.RandomAdaptorTest#testNextSample, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, org.apache.commons.math.random.RandomDataTest#testNextChiSquare, org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, org.apache.commons.math.fraction.FractionFieldTest#testSerial, org.apache.commons.math.linear.SparseRealVectorTest#testMisc, org.apache.commons.math.special.GammaTest#testLogGammaPositive, org.apache.commons.math.stat.StatUtilsTest#testProduct, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.complex.ComplexTest#testCosInf, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, org.apache.commons.math.geometry.Vector3DTest#testNormalize, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, org.apache.commons.math.util.MultidimensionalCounterTest#testIterationConsistency, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math.exception.DimensionMismatchExceptionTest#testAccessors, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testPopulation, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, org.apache.commons.math.geometry.Vector3DTest#testAngular, org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3MultipleRoot, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, org.apache.commons.math.util.MathUtilsTest#testGcd, org.apache.commons.math.distribution.GammaDistributionTest#testValues, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, org.apache.commons.math.stat.FrequencyTest#testAdd, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, org.apache.commons.math.random.RandomDataTest#testNextPoisson, org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath290LEQ, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testQuinticMin, org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, org.apache.commons.math.distribution.CauchyDistributionTest#testScale, org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testToString, org.apache.commons.math.fraction.BigFractionTest#testNegate, org.apache.commons.math.complex.ComplexTest#testExpInf, org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.genetics.RandomKeyTest#testDecode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, org.apache.commons.math.linear.RealMatrixImplTest#testTrace, org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, org.apache.commons.math.linear.QRSolverTest#testSolve, org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, org.apache.commons.math.util.TransformerMapTest#testTransformers, org.apache.commons.math.util.OpenIntToFieldTest#testIterator, org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, org.apache.commons.math.optimization.general.PowellOptimizerTest#testSumSinc, org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math.random.MersenneTwisterTest#testNextIntNeg, org.apache.commons.math.complex.ComplexTest#testEqualsTrue, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, org.apache.commons.math.complex.ComplexTest#testEqualsNull, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, org.apache.commons.math.util.BigRealFieldTest#testOne, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testInternalDifferentiation, org.apache.commons.math.complex.ComplexTest#testScalarMultiply, org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, org.apache.commons.math.util.TransformerMapTest#testClear, org.apache.commons.math.complex.ComplexTest#testSqrtPolar, org.apache.commons.math.random.ValueServerTest#testFill, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testWeightedConsistency, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, org.apache.commons.math.linear.AbstractRealVectorTest#testIterator, org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, org.apache.commons.math.distribution.NormalDistributionTest#testMath280, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testFinalResult, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testSerial, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, org.apache.commons.math.ConvergenceExceptionTest#testConstructor, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, org.apache.commons.math.util.MathUtilsTest#testLcmLong, org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest#testAccessors, org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, org.apache.commons.math.analysis.ComposableFunctionTest#testRint, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, org.apache.commons.math.util.TransformerMapTest#testPutTransformer, org.apache.commons.math.optimization.linear.SimplexSolverTest#testDegeneracy, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, org.apache.commons.math.optimization.linear.SimplexTableauTest#testDropPhase1Objective, org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, org.apache.commons.math.MathExceptionTest#testConstructorCause, org.apache.commons.math.complex.ComplexTest#testAbsNaN, org.apache.commons.math.stat.descriptive.rank.MinTest#testWeightedConsistency, org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, org.apache.commons.math.special.GammaTest#testLogGammaZero, org.apache.commons.math.stat.StatUtilsTest#testPercentile, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, org.apache.commons.math.linear.RealMatrixImplTest#testOperate, org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testWeightedConsistency, org.apache.commons.math.random.MersenneTwisterTest#testNexBytes, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, org.apache.commons.math.complex.ComplexTest#testMath221, org.apache.commons.math.complex.ComplexTest#testSqrt1z, org.apache.commons.math.analysis.BinaryFunctionTest#testPow, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, org.apache.commons.math.geometry.RotationTest#testQuaternion, org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, org.apache.commons.math.random.RandomAdaptorTest#testNextInversionDeviate, org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testMinEndpoints, org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.util.TransformerMapTest#testContainsClass, org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, org.apache.commons.math.geometry.RotationTest#testMatrix, org.apache.commons.math.analysis.BinaryFunctionTest#testFix2nd, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math.fraction.FractionFieldTest#testZero, org.apache.commons.math.util.MathUtilsTest#test0Choose0, org.apache.commons.math.util.DefaultTransformerTest#testTransformString, org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBeta, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, org.apache.commons.math.geometry.Vector3DFormatTest#testNan, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math.complex.ComplexTest#testConjugate, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, org.apache.commons.math.fraction.BigFractionTest#testDivide, org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, org.apache.commons.math.random.RandomAdaptorTest#testNextInt, org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, org.apache.commons.math.special.GammaTest#testTrigamma, org.apache.commons.math.fraction.BigFractionTest#testSerial, org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, org.apache.commons.math.complex.ComplexTest#testDivideReal, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testWeightedConsistency, org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testValue02, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testValue01, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testValue03, org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, org.apache.commons.math.complex.ComplexTest#testDivideNaN, org.apache.commons.math.random.RandomDataTest#testNextInversionDeviate, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, org.apache.commons.math.optimization.fitting.CurveFitterTest#testMath304, org.apache.commons.math.optimization.fitting.CurveFitterTest#testMath303, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, org.apache.commons.math.fraction.FractionFormatTest#testParseProper, org.apache.commons.math.analysis.ComposableFunctionTest#testCombine, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, org.apache.commons.math.geometry.RotationTest#testVectorOnePair, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, org.apache.commons.math.complex.ComplexTest#testNegateNaN, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, org.apache.commons.math.util.MathUtilsTest#testCheckOrder, org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, org.apache.commons.math.linear.SingularValueSolverTest#testLeastSquareSolve, org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMissedEndEvent, org.apache.commons.math.complex.ComplexTest#testSinNaN, org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest#testParaboloid2D, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, org.apache.commons.math.optimization.fitting.CurveFitterTest#testMath372, org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, org.apache.commons.math.linear.RealVectorFormatTest#testNan, org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testLogZero, org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, org.apache.commons.math.distribution.GammaDistributionTest#testDensities, org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, org.apache.commons.math.complex.ComplexTest#testCosh, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaN, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math.fraction.BigFractionTest#testSubtract, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, org.apache.commons.math.fraction.FractionFormatTest#testParse, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, org.apache.commons.math.util.MathUtilsTest#testGcdConsistency, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testParaboloid, org.apache.commons.math.linear.BigMatrixImplTest#testNorm, org.apache.commons.math.distribution.GammaDistributionTest#testDensity, org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#test20090720, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest#testLinearFunction2D, org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextChiSquare, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, org.apache.commons.math.linear.ArrayRealVectorTest#testMinMax, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, org.apache.commons.math.random.RandomDataTest#testNextBinomial, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, org.apache.commons.math.linear.FieldMatrixImplTest#testToString, org.apache.commons.math.distribution.PoissonDistributionTest#testSampling, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest#testWave, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPlane, org.apache.commons.math.distribution.WeibullDistributionTest#testDensities, org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, org.apache.commons.math.analysis.BinaryFunctionTest#testAdd, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#testPerformClusterAnalysisDegenerate, org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPascal, org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, org.apache.commons.math.linear.BigMatrixImplTest#testInverse, org.apache.commons.math.linear.SparseRealMatrixTest#testToString, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, org.apache.commons.math.MathExceptionTest#testSerialization, org.apache.commons.math.util.MathUtilsTest#testCosh, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, org.apache.commons.math.util.MathUtilsTest#testScalb, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest#testParaboloid, org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, org.apache.commons.math.analysis.BinaryFunctionTest#testAtan2, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, org.apache.commons.math.linear.BigMatrixImplTest#testToString, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, org.apache.commons.math.random.RandomAdaptorTest#testNextGamma, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, org.apache.commons.math.complex.ComplexTest#testSinh, org.apache.commons.math.linear.MatrixIndexExceptionTest#testParameter, org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, org.apache.commons.math.linear.LUSolverTest#testDeterminant, org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, org.apache.commons.math.stat.descriptive.summary.ProductTest#testWeightedConsistency, org.apache.commons.math.util.MathUtilsTest#testNormalizeArray, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288, org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath286, org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, org.apache.commons.math.util.MathUtilsTest#testSignByte, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextCauchy, org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensities, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath293, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math.special.ErfTest#testErf3291, org.apache.commons.math.optimization.univariate.BracketFinderTest#testCubicMax, org.apache.commons.math.complex.ComplexTest#testHashCode, org.apache.commons.math.linear.EigenDecompositionImplTest#testMath308, org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, org.apache.commons.math.complex.ComplexTest#testAddNaN, org.apache.commons.math.distribution.ExponentialDistributionTest#testSampling, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testDistance, org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPlane, org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math.complex.ComplexTest#testConjugateNaN, org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, org.apache.commons.math.linear.BigMatrixImplTest#testMath209, org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, org.apache.commons.math.complex.ComplexTest#testCos, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testSinMin, org.apache.commons.math.distribution.TDistributionTest#testDensities, org.apache.commons.math.random.RandomDataTest#testConfig, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testWeightedVariance, org.apache.commons.math.complex.ComplexTest#testAsinInf, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, org.apache.commons.math.complex.ComplexTest#testAtanNaN, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, org.apache.commons.math.complex.ComplexTest#testAcosInf, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, org.apache.commons.math.complex.ComplexTest#testDivideImaginary, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, org.apache.commons.math.stat.descriptive.moment.MeanTest#testWeightedMean, org.apache.commons.math.complex.ComplexTest#testPow, org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, org.apache.commons.math.util.MathUtilsTest#testArrayEquals, org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, org.apache.commons.math.random.RandomDataTest#testNextSecureInt, org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, org.apache.commons.math.geometry.Vector3DTest#testDistance, org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, org.apache.commons.math.stat.FrequencyTest#testEmptyTable, org.apache.commons.math.analysis.BinaryFunctionTest#testFix1st, org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest#testPreconditions, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompMeanCutoff, org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, org.apache.commons.math.stat.StatUtilsTest#testVariance, org.apache.commons.math.random.RandomAdaptorTest#testNextF, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest#testAccessors, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, org.apache.commons.math.random.RandomAdaptorTest#testNextT, org.apache.commons.math.geometry.Vector3DTest#testConstructors, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testWeightedConsistency, org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest#testAccessors, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, org.apache.commons.math.random.MersenneTwisterTest#testDouble, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, org.apache.commons.math.stat.FrequencyTest#testPcts, org.apache.commons.math.geometry.Vector3DTest#testAngle, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, org.apache.commons.math.random.MersenneTwisterTest#testGaussian, org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, org.apache.commons.math.optimization.univariate.BracketFinderTest#testCubicMin, org.apache.commons.math.distribution.FDistributionTest#testSampling, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, org.apache.commons.math.random.ValueServerTest#testProperties, org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaNWithAllowedUlps, org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.geometry.Vector3DTest#testNorm1, org.apache.commons.math.complex.ComplexTest#testAtanInf, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, org.apache.commons.math.special.ErfTest#testErf2807, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean, org.apache.commons.math.linear.BigMatrixImplTest#testOperate, org.apache.commons.math.util.TransformerMapTest#testClasses, org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.util.MathUtilsTest#testSignShort, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPreconditions, org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, org.apache.commons.math.special.ErfTest#testErf1960, org.apache.commons.math.util.MathUtilsTest#testHash, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math.fraction.FractionTest#testReciprocal, org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testWeightedConsistency, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, org.apache.commons.math.fraction.BigFractionTest#testConstructor, org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, org.apache.commons.math.stat.FrequencyTest#testIntegerValues, org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testSingleUp, org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, org.apache.commons.math.genetics.BinaryMutationTest#testMutate, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, org.apache.commons.math.fraction.FractionTest#testIntValue, org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, org.apache.commons.math.complex.ComplexTest#testAcosNaN, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, org.apache.commons.math.complex.ComplexTest#testAddInfinite, org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, org.apache.commons.math.random.RandomAdaptorTest#testNextZipf, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, org.apache.commons.math.random.MersenneTwisterTest#testNextInt, org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, org.apache.commons.math.complex.ComplexTest#testLog, org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testHighAccuracyExternalDifferentiation, org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, org.apache.commons.math.fraction.FractionFieldTest#testOne, org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedSum, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testPValueNearZero, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, org.apache.commons.math.util.MathUtilsTest#testGcdLong, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testCopy, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, org.apache.commons.math.complex.ComplexTest#testEqualsSame, org.apache.commons.math.random.EmpiricalDistributionTest#testNext, org.apache.commons.math.util.MathUtilsTest#testRoundDouble, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonConsistency, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math.linear.CholeskySolverTest#testSolve, org.apache.commons.math.fraction.FractionTest#testToString, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, org.apache.commons.math.util.MathUtilsTest#testArrayEqualsIncludingNaN, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, org.apache.commons.math.random.RandomDataTest#testNextExponential, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath290GEQ, org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane, org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, org.apache.commons.math.util.MathUtilsTest#testRoundFloat, org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, org.apache.commons.math.complex.ComplexTest#testLogInf, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, org.apache.commons.math.complex.ComplexTest#testCoshNaN, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, org.apache.commons.math.linear.LUSolverTest#testSolve, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testCentroid, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonConsistency, org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, org.apache.commons.math.optimization.general.PowellOptimizerTest#testMaximizeQuadratic, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, org.apache.commons.math.special.GammaTest#testLogGammaNegative, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testAnalyticalDifferentiation, org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testMath296withoutWeights, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, org.apache.commons.math.fraction.BigFractionTest#testReciprocal, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testInsufficientData, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testWave, org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, org.apache.commons.math.exception.util.ArgUtilsTest#testFlatten, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompNonMeanCutoff, org.apache.commons.math.estimation.EstimatedParameterTest#testBound, org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, org.apache.commons.math.distribution.HypergeometricDistributionTest#testSampling, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextZipf, org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMath341, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, org.apache.commons.math.util.MultidimensionalCounterTest#testIteratorPreconditions, org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math.fraction.FractionFormatTest#testFormat, org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math.fraction.FractionTest#testDivide, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testLowAccuracyExternalDifferentiation, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, org.apache.commons.math.complex.ComplexTest#testAbs, org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares3, org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, org.apache.commons.math.complex.ComplexTest#testGetArgument, org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares1, org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares2, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, org.apache.commons.math.random.RandomDataTest#testNextInt, org.apache.commons.math.util.MultidimensionalCounterTest#testAccessors, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testFit02, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testFit01, org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, org.apache.commons.math.distribution.TDistributionTest#testSampling, org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, org.apache.commons.math.complex.ComplexTest#testSqrtNaN, org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, org.apache.commons.math.random.RandomAdaptorTest#testNextBeta, org.apache.commons.math.linear.AbstractRealVectorTest#testMap, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, org.apache.commons.math.complex.ComplexTest#testEqualsClass, org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, org.apache.commons.math.complex.ComplexTest#testCoshInf, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testNoVariance, org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, org.apache.commons.math.util.MathUtilsTest#testNextAfter, org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, org.apache.commons.math.geometry.Vector3DTest#testCoordinates, org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, org.apache.commons.math.complex.ComplexTest#testAsinNaN, org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, org.apache.commons.math.random.RandomDataTest#testNextSecureLong, org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, org.apache.commons.math.util.BigRealFieldTest#testSerial, org.apache.commons.math.random.RandomAdaptorTest#testNextLong, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testWeightedConsistency, org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, org.apache.commons.math.distribution.PoissonDistributionTest#testMean, org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testPValueNearZero, org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testAdd, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, org.apache.commons.math.distribution.FDistributionTest#testDensities, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, org.apache.commons.math.complex.ComplexTest#testSqrtInf, org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, org.apache.commons.math.complex.ComplexTest#testAbsInfinite, org.apache.commons.math.complex.ComplexFieldTest#testZero, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, org.apache.commons.math.random.MersenneTwisterTest#testFloat, org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, org.apache.commons.math.complex.ComplexTest#testEqualsNaN, org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, org.apache.commons.math.stat.inference.TTestTest#testPaired, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, org.apache.commons.math.random.ValueServerTest#testNextDigestFail, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math.stat.StatUtilsTest#testMax, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testNonMeanCutoffs, org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testQuinticMinStatistics, org.apache.commons.math.stat.FrequencyTest#testToString, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, org.apache.commons.math.complex.ComplexTest#testPowInf, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit06, org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit05, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth1, org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit07, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth2, org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit02, org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit01, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinear, org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit04, org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit03, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, org.apache.commons.math.complex.ComplexTest#testTanh, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, org.apache.commons.math.linear.RealMatrixImplTest#testMath209, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, org.apache.commons.math.random.RandomDataTest#testNextBeta, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest#testPlane, org.apache.commons.math.complex.ComplexTest#testpowNull, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInversionDeviate, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, org.apache.commons.math.fraction.FractionTest#testConstructor, org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, org.apache.commons.math.distribution.FDistributionTest#testConsistency, org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, org.apache.commons.math.util.BigRealTest#testDoubleValue, org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, org.apache.commons.math.complex.ComplexTest#testConstructorNaN, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, org.apache.commons.math.fraction.BigFractionFieldTest#testZero, org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testMissedEndEvent, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, org.apache.commons.math.util.MathUtilsTest#testSignFloat, org.apache.commons.math.util.MathUtilsTest#testSignDouble, org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, org.apache.commons.math.linear.LUSolverTest#testThreshold, org.apache.commons.math.geometry.RotationOrderTest#testName, org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, org.apache.commons.math.util.MathUtilsTest#testSinh, org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, org.apache.commons.math.util.MultidimensionalCounterTest#testPreconditions, org.apache.commons.math.complex.ComplexTest#testTanNaN, org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, org.apache.commons.math.fraction.BigFractionTest#testAdd, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.random.RandomDataTest#testNextSample, org.apache.commons.math.analysis.ComposableFunctionTest#testIdentity, org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaNWithAllowedDelta, org.apache.commons.math.random.RandomDataTest#testNextGamma, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.EigenDecompositionImplTest#testZeroDivide, org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, org.apache.commons.math.linear.QRSolverTest#testRank, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.geometry.RotationTest#testSingularities, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, org.apache.commons.math.util.MathUtilsTest#testFactorialFail, org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, org.apache.commons.math.fraction.BigFractionTest#testAbs, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest#testPreconditions, org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, org.apache.commons.math.complex.ComplexFieldTest#testOne, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, org.apache.commons.math.stat.descriptive.moment.MeanTest#testWeightedConsistency, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, org.apache.commons.math.linear.BigMatrixImplTest#testTrace, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, org.apache.commons.math.distribution.NormalDistributionTest#testDensity, org.apache.commons.math.geometry.Vector3DTest#testNormInf, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, org.apache.commons.math.random.MersenneTwisterTest#testMakotoNishimura, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, org.apache.commons.math.complex.ComplexTest#testLogNaN, org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testStepHandlerResult, org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, org.apache.commons.math.util.MathUtilsTest#testFactorial, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testWeightedConsistency, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, org.apache.commons.math.random.RandomDataTest#testNextF, org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilitySpecial, org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math.MathExceptionTest#testConstructor, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.random.RandomDataTest#testNextLong, org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, org.apache.commons.math.random.RandomAdaptorTest#testNextWeibull, org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, org.apache.commons.math.geometry.RotationTest#testComposeInverse, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, org.apache.commons.math.linear.LUSolverTest#testSingular, org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, org.apache.commons.math.random.RandomDataTest#testNextT, org.apache.commons.math.random.RandomDataTest#testNextSecureHex, org.apache.commons.math.random.RandomAdaptorTest#testNextHex, org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, org.apache.commons.math.util.BigRealFieldTest#testZero, org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.rank.MaxTest#testWeightedConsistency, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testIllegalArguments, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, org.apache.commons.math.fraction.BigFractionTest#testMultiply, org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, org.apache.commons.math.distribution.TDistributionTest#testSmallDf, org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.RealMatrixImplTest#testWalk, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testWeightedConsistency, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, org.apache.commons.math.util.TransformerMapTest#testSerial, org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, org.apache.commons.math.analysis.BinaryFunctionTest#testDivide, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, org.apache.commons.math.random.RandomDataTest#testNextPascal, org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, org.apache.commons.math.complex.ComplexTest#testSinInf, org.apache.commons.math.analysis.BinaryFunctionTest#testSubtract, org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketEndpointRoot, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, org.apache.commons.math.complex.ComplexFormatTest#testParseNan, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math.complex.ComplexTest#testAsin, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBinomial, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testWeightedConsistency, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, org.apache.commons.math.linear.SingularValueSolverTest#testMath320B, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, org.apache.commons.math.geometry.RotationTest#testAxisAngle, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, org.apache.commons.math.geometry.RotationTest#testRevert, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, org.apache.commons.math.util.OpenIntToFieldTest#testRemove, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMath283, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing1, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing2, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math.distribution.GammaDistributionTest#testSampling, org.apache.commons.math.util.MathUtilsTest#testCoshNaN, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, org.apache.commons.math.stat.StatUtilsTest#testSumLog, org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, org.apache.commons.math.ode.events.EventStateTest#closeEvents, org.apache.commons.math.transform.FastSineTransformerTest#testParameters, org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, org.apache.commons.math.linear.BigMatrixImplTest#testAdd, org.apache.commons.math.complex.ComplexTest#testPowZero, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, org.apache.commons.math.geometry.Vector3DTest#testDistance1, org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.linear.BiDiagonalTransformerTest#testSingularMatrix, org.apache.commons.math.fraction.FractionTest#testFloatValue, org.apache.commons.math.complex.ComplexTest#testDivide, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, org.apache.commons.math.random.MersenneTwisterTest#testNextIntN, org.apache.commons.math.complex.ComplexTest#testSubtract, org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testQuinticMin, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest#testCircleFitting, org.apache.commons.math.fraction.FractionTest#testMultiply, org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, org.apache.commons.math.distribution.ExponentialDistributionTest#testDensities, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, org.apache.commons.math.fraction.BigFractionTest#testFloatValue, org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPreconditions, org.apache.commons.math.complex.ComplexTest#testAtan, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math.estimation.MinpackTest#testMinpackBard, org.apache.commons.math.random.MersenneTwisterTest#testNextLong, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, org.apache.commons.math.random.RandomAdaptorTest#testNextBinomial, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, org.apache.commons.math.random.RandomAdaptorTest#testNextChiSquare, org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.RealMatrixImplTest#testSerial, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math.stat.StatUtilsTest#testMean, org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, org.apache.commons.math.analysis.BinaryFunctionTest#testMultiply, org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, org.apache.commons.math.complex.ComplexTest#testSin, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, org.apache.commons.math.analysis.ComposableFunctionTest#testComposition, org.apache.commons.math.linear.RealMatrixImplTest#testExamples, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testSingleDown, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testExpNaN, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, org.apache.commons.math.optimization.general.PowellOptimizerTest#testQuadratic, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, org.apache.commons.math.fraction.BigFractionTest#testIntValue, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, org.apache.commons.math.random.RandomAdaptorTest#testNextCauchy, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, org.apache.commons.math.stat.descriptive.summary.ProductTest#testWeightedProduct, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, org.apache.commons.math.util.BigRealTest#testBigDecimalValue, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextF, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, org.apache.commons.math.linear.EigenSolverTest#testInvertible, org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextT, org.apache.commons.math.util.MathUtilsTest#testPow, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, org.apache.commons.math.analysis.ComposableFunctionTest#testSignum, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, org.apache.commons.math.geometry.RotationTest#testIdentity, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, org.apache.commons.math.random.ValueServerTest#testNextDigest, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, org.apache.commons.math.random.RandomDataTest#testNextGaussian, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, org.apache.commons.math.linear.RealMatrixImplTest#testNorm, org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, org.apache.commons.math.MathExceptionTest#testPrintStackTrace, org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, org.apache.commons.math.complex.ComplexFormatTest#testNan, org.apache.commons.math.random.RandomDataTest#testNextPermutation, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, org.apache.commons.math.special.ErfTest#testErf2576, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, org.apache.commons.math.util.MathUtilsTest#testCompareTo, org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, org.apache.commons.math.util.MathUtilsTest#testArrayHash, org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, org.apache.commons.math.util.MathUtilsTest#testLcm, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testWeightedConsistency, org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, org.apache.commons.math.complex.ComplexTest#testTanInf, org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, org.apache.commons.math.complex.ComplexTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testTanhInf, org.apache.commons.math.stat.FrequencyTest#testCounts, org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, org.apache.commons.math.linear.BigMatrixImplTest#testSolve, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math.fraction.BigFractionFormatTest#testParse, org.apache.commons.math.fraction.BigFractionTest#testCompareTo, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testEventHandler, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testTanhNaN, org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.analysis.ComposableFunctionTest#testCollector, org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, org.apache.commons.math.fraction.FractionTest#testAbs, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, org.apache.commons.math.random.RandomDataTest#testNextWeibull, org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, org.apache.commons.math.util.MathUtilsTest#testLog, org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, org.apache.commons.math.util.MathUtilsTest#testSignLong, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, org.apache.commons.math.analysis.ComposableFunctionTest#testSimpleCombination, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testWeightedConsistency, org.apache.commons.math.complex.ComplexTest#testMultiply, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, org.apache.commons.math.analysis.ComposableFunctionTest#testOne, org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, org.apache.commons.math.fraction.FractionTest#testAdd, org.apache.commons.math.complex.ComplexTest#testNegate, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, org.apache.commons.math.special.ErfTest#testLargeValues, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, org.apache.commons.math.complex.ComplexTest#testSinhInf, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, org.apache.commons.math.stat.StatUtilsTest#testSumSq, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, org.apache.commons.math.complex.ComplexTest#testAcos, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, org.apache.commons.math.util.DefaultTransformerTest#testSerial, org.apache.commons.math.random.RandomDataTest#testNextPoissonConsistency, org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, org.apache.commons.math.stat.descriptive.rank.MedianTest#testWeightedConsistency, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, org.apache.commons.math.util.OpenIntToFieldTest#testCopy, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, org.apache.commons.math.util.MultidimensionalCounterTest#testMulti2UniConversion, org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, org.apache.commons.math.distribution.CauchyDistributionTest#testSampling, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, org.apache.commons.math.distribution.PascalDistributionTest#testDensities, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math.linear.BlockRealMatrixTest#testToString, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGamma, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, org.apache.commons.math.complex.ComplexTest#testTanCritical, org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, org.apache.commons.math.complex.ComplexTest#testExp, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, org.apache.commons.math.stat.StatUtilsTest#testMin, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testMath369, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, org.apache.commons.math.fraction.FractionTest#testConstructorDouble, org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, org.apache.commons.math.fraction.FractionTest#testSubtract, org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, org.apache.commons.math.complex.ComplexTest#testPowNaNBase, org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, org.apache.commons.math.linear.SparseRealVectorTest#testSerial, org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, org.apache.commons.math.complex.ComplexTest#testDivideZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, org.apache.commons.math.special.GammaTest#testLogGammaNan, org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, org.apache.commons.math.util.MathUtilsTest#testSinhNaN, org.apache.commons.math.random.RandomDataTest#testNextHex, org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testWeightedConsistency, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testSample, org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, org.apache.commons.math.fraction.BigFractionTest#testLongValue, org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, org.apache.commons.math.random.EmpiricalDistributionTest#testGetBinUpperBounds, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, org.apache.commons.math.linear.AbstractRealVectorTest#testClone, org.apache.commons.math.random.RandomAdaptorTest#testNextPascal, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, org.apache.commons.math.random.RandomAdaptorTest#testNextHypergeometric, org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, org.apache.commons.math.random.ValueServerTest#testModes, org.apache.commons.math.fraction.FractionTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testQuinticMax, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math.fraction.FractionTest#testLongValue, org.apache.commons.math.fraction.BigFractionTest#testMath340, org.apache.commons.math.random.RandomDataTest#testNextCauchy, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.fraction.BigFractionFieldTest#testOne, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, org.apache.commons.math.stat.data.LewTest#testCertifiedValues, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal3, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal4, org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal5, org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal6, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal1, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal2, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, org.apache.commons.math.distribution.NormalDistributionTest#testSampling, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, org.apache.commons.math.analysis.ComposableFunctionTest#testZero, org.apache.commons.math.linear.SingularValueSolverTest#testSolve, org.apache.commons.math.fraction.FractionTest#testGoldenRatio, org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, org.apache.commons.math.complex.ComplexFieldTest#testSerial, org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPreconditions, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextWeibull, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, org.apache.commons.math.special.ErfTest#testErf0, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, org.apache.commons.math.fraction.FractionTest#testNegate, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], jUnit5Tests=[], jacocoIncludes=[org.apache.commons.*], jacocoExcludes=[java.*], family=SPECTRUM_BASED, spectrumFormula=BARINEL, computeSpoonResults=false}
Computing tests from config.
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.AbstractRealVectorTest#testSparseIterator, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.exception.OutOfRangeExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideInfinite, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.exception.NotPositiveExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testMathpbx02, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testMathpbx03, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testIterationConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.exception.DimensionMismatchExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3MultipleRoot, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath290LEQ, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.PowellOptimizerTest#testSumSinc, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testInternalDifferentiation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.AbstractRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testFinalResult, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcmLong, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.exception.NumberIsTooSmallExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testRint, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testDegeneracy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testDropPhase1Objective, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testPow, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testFix2nd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideReal, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testValue02, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testValue01, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testValue03, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.CurveFitterTest#testMath304, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.CurveFitterTest#testMath303, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testCombine, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCheckOrder, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testLeastSquareSolve, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMissedEndEvent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest#testParaboloid2D, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.CurveFitterTest#testMath372, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcdConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest#testLinearFunction2D, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest#testWave, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPlane, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#testPerformClusterAnalysisDegenerate, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testInverse, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testScalb, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testAtan2, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math.linear.MatrixIndexExceptionTest#testParameter, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath293, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BracketFinderTest#testCubicMax, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testMath308, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testDistance, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testConfig, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testWeightedVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideImaginary, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testWeightedMean, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testFix1st, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompMeanCutoff, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextF, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextT, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.exception.NumberIsTooLargeExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testGaussian, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BracketFinderTest#testCubicMin, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaNWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testSingleUp, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddInfinite, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testHighAccuracyExternalDifferentiation, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedSum, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testPValueNearZero, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcdLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEqualsIncludingNaN, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath290GEQ, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.PowellOptimizerTest#testMaximizeQuadratic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testAnalyticalDifferentiation, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testMath296withoutWeights, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testWave, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.exception.util.ArgUtilsTest#testFlatten, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompNonMeanCutoff, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testBound, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMath341, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testIteratorPreconditions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testLowAccuracyExternalDifferentiation, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testFit02, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testFit01, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math.linear.AbstractRealVectorTest#testMap, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testNoVariance, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testPValueNearZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testNonMeanCutoffs, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testQuinticMinStatistics, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit06, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit05, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth1, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit07, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth2, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit02, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit01, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit04, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit03, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testMissedEndEvent, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignFloat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignDouble, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math.geometry.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinh, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaNWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testZeroDivide, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testMakotoNishimura, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testStepHandlerResult, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextF, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilitySpecial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextT, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketEndpointRoot, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testMath320B, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing1, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing2, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.events.EventStateTest#closeEvents, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testSingularMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testComposition, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testSingleDown, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.PowellOptimizerTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testWeightedProduct, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextF, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextT, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testSignum, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testPrintStackTrace, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testEventHandler, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testCollector, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLog, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testSimpleCombination, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testOne, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testMulti2UniConversion, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testMath369, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideZero, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testSample, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGetBinUpperBounds, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.linear.AbstractRealVectorTest#testClone, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMath340, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal3, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal4, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal5, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal6, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal1, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal2, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@3b9d6699}
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.AbstractRealVectorTest#testSparseIterator, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.exception.OutOfRangeExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideInfinite, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.exception.NotPositiveExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testMathpbx02, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testMathpbx03, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testIterationConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.exception.DimensionMismatchExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3MultipleRoot, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath290LEQ, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.PowellOptimizerTest#testSumSinc, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testInternalDifferentiation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.AbstractRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testFinalResult, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcmLong, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.exception.NumberIsTooSmallExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testRint, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testDegeneracy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testDropPhase1Objective, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testPow, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testFix2nd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideReal, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testValue02, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testValue01, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testValue03, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.CurveFitterTest#testMath304, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.CurveFitterTest#testMath303, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testCombine, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCheckOrder, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testLeastSquareSolve, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMissedEndEvent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest#testParaboloid2D, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.CurveFitterTest#testMath372, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcdConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest#testLinearFunction2D, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest#testWave, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPlane, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#testPerformClusterAnalysisDegenerate, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testInverse, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testScalb, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testAtan2, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math.linear.MatrixIndexExceptionTest#testParameter, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath293, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BracketFinderTest#testCubicMax, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testMath308, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testDistance, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testConfig, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testWeightedVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideImaginary, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testWeightedMean, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testFix1st, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompMeanCutoff, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextF, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextT, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.exception.NumberIsTooLargeExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testGaussian, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BracketFinderTest#testCubicMin, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaNWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testSingleUp, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddInfinite, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testHighAccuracyExternalDifferentiation, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedSum, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testPValueNearZero, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcdLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEqualsIncludingNaN, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath290GEQ, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.PowellOptimizerTest#testMaximizeQuadratic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testAnalyticalDifferentiation, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testMath296withoutWeights, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testWave, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.exception.util.ArgUtilsTest#testFlatten, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompNonMeanCutoff, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testBound, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMath341, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testIteratorPreconditions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testLowAccuracyExternalDifferentiation, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testAccessors, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testFit02, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest#testFit01, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math.linear.AbstractRealVectorTest#testMap, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testNoVariance, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testPValueNearZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testNonMeanCutoffs, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testQuinticMinStatistics, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit06, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit05, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth1, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit07, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth2, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit02, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit01, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit04, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.GaussianFitterTest#testFit03, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testMissedEndEvent, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignFloat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignDouble, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math.geometry.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinh, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaNWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testZeroDivide, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testMakotoNishimura, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testStepHandlerResult, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextF, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilitySpecial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextT, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketEndpointRoot, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testMath320B, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing1, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing2, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.events.EventStateTest#closeEvents, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testSingularMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.analysis.BinaryFunctionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testComposition, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testSingleDown, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.PowellOptimizerTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testWeightedProduct, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextF, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextT, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testSignum, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testPrintStackTrace, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest#testEventHandler, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testCollector, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLog, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testSimpleCombination, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testOne, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math.util.MultidimensionalCounterTest#testMulti2UniConversion, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testMath369, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideZero, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest#testSample, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGetBinUpperBounds, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.linear.AbstractRealVectorTest#testClone, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentOptimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMath340, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal3, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal4, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal5, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal6, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal1, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal2, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.analysis.ComposableFunctionTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@3b9d6699}
Path to runner Classes: /Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
Adding a line where an exception was thrown: org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction@-@576
No source code file was found for stack-trace element: org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction.checkTheoreticalMinParams(MinpackTest.java:576)
Adding a line where an exception was thrown: org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction@-@576
No source code file was found for stack-trace element: org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction.checkTheoreticalMinParams(MinpackTest.java:576)
Tests found: 2274
Tests executed: 2274
Suspicious: 1 line org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction l: 842, susp 1.0
Suspicious: 2 line org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction l: 844, susp 1.0
Suspicious: 3 line org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction l: 848, susp 1.0
Suspicious: 4 line org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction l: 849, susp 1.0
Suspicious: 5 line org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction l: 857, susp 1.0
Suspicious: 6 line org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction l: 858, susp 1.0
Suspicious: 7 line org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction l: 859, susp 1.0
Suspicious: 8 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1155, susp 1.0
Suspicious: 9 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1157, susp 1.0
Suspicious: 10 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1161, susp 1.0
Suspicious: 11 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1162, susp 1.0
Suspicious: 12 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1163, susp 1.0
Suspicious: 13 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1164, susp 1.0
Suspicious: 14 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1165, susp 1.0
Suspicious: 15 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1166, susp 1.0
Suspicious: 16 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1168, susp 1.0
Suspicious: 17 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1173, susp 1.0
Suspicious: 18 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1174, susp 1.0
Suspicious: 19 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1175, susp 1.0
Suspicious: 20 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1176, susp 1.0
Suspicious: 21 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1177, susp 1.0
Suspicious: 22 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1178, susp 1.0
Suspicious: 23 line org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction l: 1180, susp 1.0
Suspicious: 24 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 402, susp 0.125
Suspicious: 25 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 573, susp 0.125
Suspicious: 26 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 574, susp 0.125
Suspicious: 27 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 575, susp 0.125
Suspicious: 28 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 576, susp 0.125
Suspicious: 29 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 525, susp 0.11111111111111116
Suspicious: 30 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 526, susp 0.11111111111111116
Suspicious: 31 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 527, susp 0.11111111111111116
Suspicious: 32 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 528, susp 0.11111111111111116
Suspicious: 33 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 529, susp 0.11111111111111116
Suspicious: 34 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 530, susp 0.11111111111111116
Suspicious: 35 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 531, susp 0.11111111111111116
Suspicious: 36 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 532, susp 0.11111111111111116
Suspicious: 37 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 533, susp 0.11111111111111116
Suspicious: 38 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 536, susp 0.11111111111111116
Suspicious: 39 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 537, susp 0.11111111111111116
Suspicious: 40 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 538, susp 0.11111111111111116
Suspicious: 41 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 542, susp 0.11111111111111116
Suspicious: 42 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 546, susp 0.11111111111111116
Suspicious: 43 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 550, susp 0.11111111111111116
Suspicious: 44 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 562, susp 0.11111111111111116
Suspicious: 45 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 566, susp 0.11111111111111116
Suspicious: 46 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 567, susp 0.11111111111111116
Suspicious: 47 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 568, susp 0.11111111111111116
Suspicious: 48 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 571, susp 0.11111111111111116
Suspicious: 49 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 572, susp 0.11111111111111116
Suspicious: 50 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 582, susp 0.11111111111111116
Suspicious: 51 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction$1 l: 582, susp 0.11111111111111116
Suspicious: 52 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction$1 l: 585, susp 0.11111111111111116
Suspicious: 53 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 627, susp 0.11111111111111116
Suspicious: 54 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 628, susp 0.11111111111111116
Suspicious: 55 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 605, susp 0.09523809523809523
Suspicious: 56 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 606, susp 0.09523809523809523
Suspicious: 57 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 607, susp 0.09523809523809523
Suspicious: 58 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 609, susp 0.09523809523809523
Suspicious: 59 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 610, susp 0.09523809523809523
Suspicious: 60 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 611, susp 0.09523809523809523
Suspicious: 61 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 612, susp 0.09523809523809523
Suspicious: 62 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 613, susp 0.09523809523809523
Suspicious: 63 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 614, susp 0.09523809523809523
Suspicious: 64 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 617, susp 0.09523809523809523
Suspicious: 65 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 618, susp 0.09523809523809523
Suspicious: 66 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 619, susp 0.09523809523809523
Suspicious: 67 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 620, susp 0.09523809523809523
Suspicious: 68 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 622, susp 0.09523809523809523
Suspicious: 69 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 625, susp 0.09523809523809523
Suspicious: 70 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 632, susp 0.09523809523809523
Suspicious: 71 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 530, susp 0.08695652173913049
Suspicious: 72 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 531, susp 0.08695652173913049
Suspicious: 73 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 532, susp 0.08695652173913049
Suspicious: 74 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 534, susp 0.08695652173913049
Suspicious: 75 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 535, susp 0.08695652173913049
Suspicious: 76 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 536, susp 0.08695652173913049
Suspicious: 77 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 537, susp 0.08695652173913049
Suspicious: 78 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 538, susp 0.08695652173913049
Suspicious: 79 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 539, susp 0.08695652173913049
Suspicious: 80 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 541, susp 0.08695652173913049
Suspicious: 81 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 542, susp 0.08695652173913049
Suspicious: 82 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 543, susp 0.08695652173913049
Suspicious: 83 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 545, susp 0.08695652173913049
Suspicious: 84 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 698, susp 0.08695652173913049
Suspicious: 85 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 699, susp 0.08695652173913049
Suspicious: 86 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 700, susp 0.08695652173913049
Suspicious: 87 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 701, susp 0.08695652173913049
Suspicious: 88 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 426, susp 0.08333333333333337
Suspicious: 89 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 427, susp 0.08333333333333337
Suspicious: 90 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 428, susp 0.08333333333333337
Suspicious: 91 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 429, susp 0.08333333333333337
Suspicious: 92 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 431, susp 0.08333333333333337
Suspicious: 93 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 432, susp 0.08333333333333337
Suspicious: 94 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 433, susp 0.08333333333333337
Suspicious: 95 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 528, susp 0.07999999999999996
Suspicious: 96 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 529, susp 0.07999999999999996
Suspicious: 97 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 549, susp 0.07999999999999996
Suspicious: 98 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 550, susp 0.07999999999999996
Suspicious: 99 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 551, susp 0.07999999999999996
Suspicious: 100 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 552, susp 0.07999999999999996
Suspicious: 101 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 553, susp 0.07999999999999996
Suspicious: 102 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 554, susp 0.07999999999999996
Suspicious: 103 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 556, susp 0.07999999999999996
Suspicious: 104 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 557, susp 0.07999999999999996
Suspicious: 105 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 559, susp 0.07999999999999996
Suspicious: 106 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 560, susp 0.07999999999999996
Suspicious: 107 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 561, susp 0.07999999999999996
Suspicious: 108 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 568, susp 0.07999999999999996
Suspicious: 109 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 569, susp 0.07999999999999996
Suspicious: 110 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 573, susp 0.07999999999999996
Suspicious: 111 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 576, susp 0.07999999999999996
Suspicious: 112 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 579, susp 0.07999999999999996
Suspicious: 113 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 580, susp 0.07999999999999996
Suspicious: 114 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 581, susp 0.07999999999999996
Suspicious: 115 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 582, susp 0.07999999999999996
Suspicious: 116 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 584, susp 0.07999999999999996
Suspicious: 117 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 586, susp 0.07999999999999996
Suspicious: 118 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 587, susp 0.07999999999999996
Suspicious: 119 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 588, susp 0.07999999999999996
Suspicious: 120 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 589, susp 0.07999999999999996
Suspicious: 121 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 590, susp 0.07999999999999996
Suspicious: 122 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 591, susp 0.07999999999999996
Suspicious: 123 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 593, susp 0.07999999999999996
Suspicious: 124 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 594, susp 0.07999999999999996
Suspicious: 125 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 595, susp 0.07999999999999996
Suspicious: 126 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 599, susp 0.07999999999999996
Suspicious: 127 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 601, susp 0.07999999999999996
Suspicious: 128 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 662, susp 0.07999999999999996
Suspicious: 129 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 663, susp 0.07999999999999996
Suspicious: 130 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 664, susp 0.07999999999999996
Suspicious: 131 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 665, susp 0.07999999999999996
Suspicious: 132 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 667, susp 0.07999999999999996
Suspicious: 133 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 668, susp 0.07999999999999996
Suspicious: 134 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 672, susp 0.07999999999999996
Suspicious: 135 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 676, susp 0.07999999999999996
Suspicious: 136 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 677, susp 0.07999999999999996
Suspicious: 137 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 678, susp 0.07999999999999996
Suspicious: 138 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 679, susp 0.07999999999999996
Suspicious: 139 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 681, susp 0.07999999999999996
Suspicious: 140 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 686, susp 0.07999999999999996
Suspicious: 141 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 687, susp 0.07999999999999996
Suspicious: 142 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 688, susp 0.07999999999999996
Suspicious: 143 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 692, susp 0.07999999999999996
Suspicious: 144 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 696, susp 0.07999999999999996
Suspicious: 145 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 697, susp 0.07999999999999996
Suspicious: 146 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 702, susp 0.07999999999999996
Suspicious: 147 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 703, susp 0.07999999999999996
Suspicious: 148 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 704, susp 0.07999999999999996
Suspicious: 149 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 709, susp 0.07999999999999996
Suspicious: 150 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 710, susp 0.07999999999999996
Suspicious: 151 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 711, susp 0.07999999999999996
Suspicious: 152 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 712, susp 0.07999999999999996
Suspicious: 153 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 715, susp 0.07999999999999996
Suspicious: 154 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 716, susp 0.07999999999999996
Suspicious: 155 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 717, susp 0.07999999999999996
Suspicious: 156 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 718, susp 0.07999999999999996
Suspicious: 157 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 719, susp 0.07999999999999996
Suspicious: 158 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 727, susp 0.07999999999999996
Suspicious: 159 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 728, susp 0.07999999999999996
Suspicious: 160 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 734, susp 0.07999999999999996
Suspicious: 161 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 735, susp 0.07999999999999996
Suspicious: 162 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 736, susp 0.07999999999999996
Suspicious: 163 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 739, susp 0.07999999999999996
Suspicious: 164 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 743, susp 0.07999999999999996
Suspicious: 165 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 744, susp 0.07999999999999996
Suspicious: 166 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 745, susp 0.07999999999999996
Suspicious: 167 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 746, susp 0.07999999999999996
Suspicious: 168 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 747, susp 0.07999999999999996
Suspicious: 169 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 748, susp 0.07999999999999996
Suspicious: 170 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 750, susp 0.07999999999999996
Suspicious: 171 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 755, susp 0.07999999999999996
Suspicious: 172 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 756, susp 0.07999999999999996
Suspicious: 173 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 759, susp 0.07999999999999996
Suspicious: 174 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 399, susp 0.07692307692307687
Suspicious: 175 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 401, susp 0.07692307692307687
Suspicious: 176 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 404, susp 0.07692307692307687
Suspicious: 177 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 405, susp 0.07692307692307687
Suspicious: 178 line org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction l: 579, susp 0.05882352941176472
Suspicious: 179 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 626, susp 0.05555555555555558
Suspicious: 180 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 440, susp 0.052631578947368474
Suspicious: 181 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 240, susp 0.045454545454545414
Suspicious: 182 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 250, susp 0.045454545454545414
Suspicious: 183 line org.apache.commons.math.optimization.VectorialPointValuePair l: 81, susp 0.04347826086956519
Suspicious: 184 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 849, susp 0.04347826086956519
Suspicious: 185 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 851, susp 0.04347826086956519
Suspicious: 186 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 503, susp 0.04255319148936165
Suspicious: 187 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 436, susp 0.04081632653061229
Suspicious: 188 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 520, susp 0.04081632653061229
Suspicious: 189 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 521, susp 0.04081632653061229
Suspicious: 190 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 837, susp 0.04081632653061229
Suspicious: 191 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 838, susp 0.04081632653061229
Suspicious: 192 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 839, susp 0.04081632653061229
Suspicious: 193 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 841, susp 0.04081632653061229
Suspicious: 194 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 842, susp 0.04081632653061229
Suspicious: 195 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 843, susp 0.04081632653061229
Suspicious: 196 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 275, susp 0.040000000000000036
Suspicious: 197 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 278, susp 0.040000000000000036
Suspicious: 198 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 281, susp 0.040000000000000036
Suspicious: 199 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 282, susp 0.040000000000000036
Suspicious: 200 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 283, susp 0.040000000000000036
Suspicious: 201 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 286, susp 0.040000000000000036
Suspicious: 202 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 290, susp 0.040000000000000036
Suspicious: 203 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 291, susp 0.040000000000000036
Suspicious: 204 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 292, susp 0.040000000000000036
Suspicious: 205 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 293, susp 0.040000000000000036
Suspicious: 206 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 296, susp 0.040000000000000036
Suspicious: 207 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 297, susp 0.040000000000000036
Suspicious: 208 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 298, susp 0.040000000000000036
Suspicious: 209 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 300, susp 0.040000000000000036
Suspicious: 210 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 303, susp 0.040000000000000036
Suspicious: 211 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 308, susp 0.040000000000000036
Suspicious: 212 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 309, susp 0.040000000000000036
Suspicious: 213 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 310, susp 0.040000000000000036
Suspicious: 214 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 311, susp 0.040000000000000036
Suspicious: 215 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 312, susp 0.040000000000000036
Suspicious: 216 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 313, susp 0.040000000000000036
Suspicious: 217 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 314, susp 0.040000000000000036
Suspicious: 218 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 315, susp 0.040000000000000036
Suspicious: 219 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 316, susp 0.040000000000000036
Suspicious: 220 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 318, susp 0.040000000000000036
Suspicious: 221 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 322, susp 0.040000000000000036
Suspicious: 222 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 328, susp 0.040000000000000036
Suspicious: 223 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 329, susp 0.040000000000000036
Suspicious: 224 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 333, susp 0.040000000000000036
Suspicious: 225 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 336, susp 0.040000000000000036
Suspicious: 226 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 337, susp 0.040000000000000036
Suspicious: 227 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 338, susp 0.040000000000000036
Suspicious: 228 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 340, susp 0.040000000000000036
Suspicious: 229 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 341, susp 0.040000000000000036
Suspicious: 230 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 342, susp 0.040000000000000036
Suspicious: 231 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 343, susp 0.040000000000000036
Suspicious: 232 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 346, susp 0.040000000000000036
Suspicious: 233 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 349, susp 0.040000000000000036
Suspicious: 234 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 350, susp 0.040000000000000036
Suspicious: 235 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 351, susp 0.040000000000000036
Suspicious: 236 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 352, susp 0.040000000000000036
Suspicious: 237 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 353, susp 0.040000000000000036
Suspicious: 238 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 354, susp 0.040000000000000036
Suspicious: 239 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 355, susp 0.040000000000000036
Suspicious: 240 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 357, susp 0.040000000000000036
Suspicious: 241 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 359, susp 0.040000000000000036
Suspicious: 242 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 360, susp 0.040000000000000036
Suspicious: 243 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 364, susp 0.040000000000000036
Suspicious: 244 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 365, susp 0.040000000000000036
Suspicious: 245 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 368, susp 0.040000000000000036
Suspicious: 246 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 369, susp 0.040000000000000036
Suspicious: 247 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 370, susp 0.040000000000000036
Suspicious: 248 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 371, susp 0.040000000000000036
Suspicious: 249 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 376, susp 0.040000000000000036
Suspicious: 250 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 377, susp 0.040000000000000036
Suspicious: 251 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 378, susp 0.040000000000000036
Suspicious: 252 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 379, susp 0.040000000000000036
Suspicious: 253 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 380, susp 0.040000000000000036
Suspicious: 254 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 381, susp 0.040000000000000036
Suspicious: 255 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 384, susp 0.040000000000000036
Suspicious: 256 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 385, susp 0.040000000000000036
Suspicious: 257 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 386, susp 0.040000000000000036
Suspicious: 258 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 388, susp 0.040000000000000036
Suspicious: 259 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 389, susp 0.040000000000000036
Suspicious: 260 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 390, susp 0.040000000000000036
Suspicious: 261 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 391, susp 0.040000000000000036
Suspicious: 262 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 392, susp 0.040000000000000036
Suspicious: 263 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 395, susp 0.040000000000000036
Suspicious: 264 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 398, susp 0.040000000000000036
Suspicious: 265 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 406, susp 0.040000000000000036
Suspicious: 266 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 407, susp 0.040000000000000036
Suspicious: 267 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 408, susp 0.040000000000000036
Suspicious: 268 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 412, susp 0.040000000000000036
Suspicious: 269 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 414, susp 0.040000000000000036
Suspicious: 270 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 415, susp 0.040000000000000036
Suspicious: 271 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 416, susp 0.040000000000000036
Suspicious: 272 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 417, susp 0.040000000000000036
Suspicious: 273 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 418, susp 0.040000000000000036
Suspicious: 274 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 420, susp 0.040000000000000036
Suspicious: 275 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 435, susp 0.040000000000000036
Suspicious: 276 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 449, susp 0.040000000000000036
Suspicious: 277 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 452, susp 0.040000000000000036
Suspicious: 278 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 455, susp 0.040000000000000036
Suspicious: 279 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 460, susp 0.040000000000000036
Suspicious: 280 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 462, susp 0.040000000000000036
Suspicious: 281 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 493, susp 0.040000000000000036
Suspicious: 282 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 494, susp 0.040000000000000036
Suspicious: 283 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 496, susp 0.040000000000000036
Suspicious: 284 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 499, susp 0.040000000000000036
Suspicious: 285 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 500, susp 0.040000000000000036
Suspicious: 286 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 501, susp 0.040000000000000036
Suspicious: 287 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 502, susp 0.040000000000000036
Suspicious: 288 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 505, susp 0.040000000000000036
Suspicious: 289 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 510, susp 0.040000000000000036
Suspicious: 290 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 511, susp 0.040000000000000036
Suspicious: 291 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 512, susp 0.040000000000000036
Suspicious: 292 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 513, susp 0.040000000000000036
Suspicious: 293 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 514, susp 0.040000000000000036
Suspicious: 294 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 515, susp 0.040000000000000036
Suspicious: 295 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 517, susp 0.040000000000000036
Suspicious: 296 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 518, susp 0.040000000000000036
Suspicious: 297 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 519, susp 0.040000000000000036
Suspicious: 298 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 859, susp 0.040000000000000036
Suspicious: 299 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 860, susp 0.040000000000000036
Suspicious: 300 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 861, susp 0.040000000000000036
Suspicious: 301 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 862, susp 0.040000000000000036
Suspicious: 302 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 863, susp 0.040000000000000036
Suspicious: 303 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 865, susp 0.040000000000000036
Suspicious: 304 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 866, susp 0.040000000000000036
Suspicious: 305 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 867, susp 0.040000000000000036
Suspicious: 306 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 870, susp 0.040000000000000036
Suspicious: 307 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 245, susp 0.039215686274509776
Suspicious: 308 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 246, susp 0.039215686274509776
Suspicious: 309 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 247, susp 0.039215686274509776
Suspicious: 310 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 248, susp 0.039215686274509776
Suspicious: 311 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 249, susp 0.039215686274509776
Suspicious: 312 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 250, susp 0.039215686274509776
Suspicious: 313 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 253, susp 0.039215686274509776
Suspicious: 314 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 254, susp 0.039215686274509776
Suspicious: 315 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 255, susp 0.039215686274509776
Suspicious: 316 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 256, susp 0.039215686274509776
Suspicious: 317 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 257, susp 0.039215686274509776
Suspicious: 318 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 258, susp 0.039215686274509776
Suspicious: 319 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 259, susp 0.039215686274509776
Suspicious: 320 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 260, susp 0.039215686274509776
Suspicious: 321 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 263, susp 0.039215686274509776
Suspicious: 322 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 266, susp 0.039215686274509776
Suspicious: 323 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 267, susp 0.039215686274509776
Suspicious: 324 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 268, susp 0.039215686274509776
Suspicious: 325 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 270, susp 0.039215686274509776
Suspicious: 326 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 273, susp 0.039215686274509776
Suspicious: 327 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 274, susp 0.039215686274509776
Suspicious: 328 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 786, susp 0.039215686274509776
Suspicious: 329 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 787, susp 0.039215686274509776
Suspicious: 330 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 788, susp 0.039215686274509776
Suspicious: 331 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 789, susp 0.039215686274509776
Suspicious: 332 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 790, susp 0.039215686274509776
Suspicious: 333 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 791, susp 0.039215686274509776
Suspicious: 334 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 793, susp 0.039215686274509776
Suspicious: 335 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 797, susp 0.039215686274509776
Suspicious: 336 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 800, susp 0.039215686274509776
Suspicious: 337 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 801, susp 0.039215686274509776
Suspicious: 338 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 802, susp 0.039215686274509776
Suspicious: 339 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 803, susp 0.039215686274509776
Suspicious: 340 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 804, susp 0.039215686274509776
Suspicious: 341 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 805, susp 0.039215686274509776
Suspicious: 342 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 806, susp 0.039215686274509776
Suspicious: 343 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 808, susp 0.039215686274509776
Suspicious: 344 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 812, susp 0.039215686274509776
Suspicious: 345 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 813, susp 0.039215686274509776
Suspicious: 346 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 814, susp 0.039215686274509776
Suspicious: 347 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 817, susp 0.039215686274509776
Suspicious: 348 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 821, susp 0.039215686274509776
Suspicious: 349 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 822, susp 0.039215686274509776
Suspicious: 350 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 823, susp 0.039215686274509776
Suspicious: 351 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 826, susp 0.039215686274509776
Suspicious: 352 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 827, susp 0.039215686274509776
Suspicious: 353 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 828, susp 0.039215686274509776
Suspicious: 354 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 829, susp 0.039215686274509776
Suspicious: 355 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 832, susp 0.039215686274509776
Suspicious: 356 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 833, susp 0.039215686274509776
Suspicious: 357 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 836, susp 0.039215686274509776
Suspicious: 358 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 166, susp 0.037735849056603765
Suspicious: 359 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 169, susp 0.037735849056603765
Suspicious: 360 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 172, susp 0.037735849056603765
Suspicious: 361 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 173, susp 0.037735849056603765
Suspicious: 362 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 174, susp 0.037735849056603765
Suspicious: 363 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 175, susp 0.037735849056603765
Suspicious: 364 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 176, susp 0.037735849056603765
Suspicious: 365 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 177, susp 0.037735849056603765
Suspicious: 366 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 179, susp 0.037735849056603765
Suspicious: 367 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 191, susp 0.037735849056603765
Suspicious: 368 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 192, susp 0.037735849056603765
Suspicious: 369 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 201, susp 0.037735849056603765
Suspicious: 370 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 202, susp 0.037735849056603765
Suspicious: 371 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 212, susp 0.037735849056603765
Suspicious: 372 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 213, susp 0.037735849056603765
Suspicious: 373 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 223, susp 0.037735849056603765
Suspicious: 374 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 224, susp 0.037735849056603765
Suspicious: 375 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 236, susp 0.037735849056603765
Suspicious: 376 line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 237, susp 0.037735849056603765
Suspicious: 377 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 347, susp 0.030303030303030276
Suspicious: 378 line org.apache.commons.math.optimization.VectorialPointValuePair l: 46, susp 0.028169014084507005
Suspicious: 379 line org.apache.commons.math.optimization.VectorialPointValuePair l: 47, susp 0.028169014084507005
Suspicious: 380 line org.apache.commons.math.optimization.VectorialPointValuePair l: 48, susp 0.028169014084507005
Suspicious: 381 line org.apache.commons.math.optimization.VectorialPointValuePair l: 49, susp 0.028169014084507005
Suspicious: 382 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 184, susp 0.028169014084507005
Suspicious: 383 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 185, susp 0.028169014084507005
Suspicious: 384 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 186, susp 0.028169014084507005
Suspicious: 385 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 190, susp 0.028169014084507005
Suspicious: 386 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 191, susp 0.028169014084507005
Suspicious: 387 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 192, susp 0.028169014084507005
Suspicious: 388 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 193, susp 0.028169014084507005
Suspicious: 389 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 194, susp 0.028169014084507005
Suspicious: 390 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 197, susp 0.028169014084507005
Suspicious: 391 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 208, susp 0.028169014084507005
Suspicious: 392 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 212, susp 0.028169014084507005
Suspicious: 393 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 213, susp 0.028169014084507005
Suspicious: 394 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 217, susp 0.028169014084507005
Suspicious: 395 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 218, susp 0.028169014084507005
Suspicious: 396 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 219, susp 0.028169014084507005
Suspicious: 397 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 220, susp 0.028169014084507005
Suspicious: 398 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 221, susp 0.028169014084507005
Suspicious: 399 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 222, susp 0.028169014084507005
Suspicious: 400 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 223, susp 0.028169014084507005
Suspicious: 401 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 225, susp 0.028169014084507005
Suspicious: 402 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 227, susp 0.028169014084507005
Suspicious: 403 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 173, susp 0.02777777777777779
Suspicious: 404 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 176, susp 0.02777777777777779
Suspicious: 405 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 322, susp 0.02777777777777779
Suspicious: 406 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 328, susp 0.02777777777777779
Suspicious: 407 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 329, susp 0.02777777777777779
Suspicious: 408 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 330, susp 0.02777777777777779
Suspicious: 409 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 333, susp 0.02777777777777779
Suspicious: 410 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 334, susp 0.02777777777777779
Suspicious: 411 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 335, susp 0.02777777777777779
Suspicious: 412 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 336, susp 0.02777777777777779
Suspicious: 413 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 337, susp 0.02777777777777779
Suspicious: 414 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 338, susp 0.02777777777777779
Suspicious: 415 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 341, susp 0.02777777777777779
Suspicious: 416 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 342, susp 0.02777777777777779
Suspicious: 417 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 343, susp 0.02777777777777779
Suspicious: 418 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 345, susp 0.02777777777777779
Suspicious: 419 line org.apache.commons.math.optimization.SimpleVectorialValueChecker l: 50, susp 0.027027027027026973
Suspicious: 420 line org.apache.commons.math.optimization.SimpleVectorialValueChecker l: 51, susp 0.027027027027026973
Suspicious: 421 line org.apache.commons.math.optimization.SimpleVectorialValueChecker l: 52, susp 0.027027027027026973
Suspicious: 422 line org.apache.commons.math.optimization.SimpleVectorialValueChecker l: 53, susp 0.027027027027026973
Suspicious: 423 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 116, susp 0.027027027027026973
Suspicious: 424 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 117, susp 0.027027027027026973
Suspicious: 425 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 118, susp 0.027027027027026973
Suspicious: 426 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 119, susp 0.027027027027026973
Suspicious: 427 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 120, susp 0.027027027027026973
Suspicious: 428 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 124, susp 0.027027027027026973
Suspicious: 429 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 125, susp 0.027027027027026973
Suspicious: 430 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 139, susp 0.027027027027026973
Suspicious: 431 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 140, susp 0.027027027027026973
Suspicious: 432 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 159, susp 0.027027027027026973
Suspicious: 433 line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 160, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 842, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 844, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 848, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 849, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 857, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 858, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 859, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1155, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1157, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1161, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1162, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1163, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1164, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1165, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1166, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1168, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1173, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1174, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1175, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1176, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1177, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1178, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 1180, susp 1.0
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 402, susp 0.125
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 573, susp 0.125
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 574, susp 0.125
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 575, susp 0.125
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 576, susp 0.125
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 525, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 526, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 527, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 528, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 529, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 530, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 531, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 532, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 533, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 536, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 537, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 538, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 542, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 546, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 550, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 562, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 566, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 567, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 568, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 571, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 572, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 582, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 582, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 585, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 627, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 628, susp 0.11111111111111116
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 605, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 606, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 607, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 609, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 610, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 611, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 612, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 613, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 614, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 617, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 618, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 619, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 620, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 622, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 625, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 632, susp 0.09523809523809523
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 530, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 531, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 532, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 534, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 535, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 536, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 537, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 538, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 539, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 541, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 542, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 543, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 545, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 698, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 699, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 700, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 701, susp 0.08695652173913049
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 426, susp 0.08333333333333337
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 427, susp 0.08333333333333337
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 428, susp 0.08333333333333337
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 429, susp 0.08333333333333337
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 431, susp 0.08333333333333337
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 432, susp 0.08333333333333337
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 433, susp 0.08333333333333337
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 528, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 529, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 549, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 550, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 551, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 552, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 553, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 554, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 556, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 557, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 559, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 560, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 561, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 568, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 569, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 573, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 576, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 579, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 580, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 581, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 582, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 584, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 586, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 587, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 588, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 589, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 590, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 591, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 593, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 594, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 595, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 599, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 601, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 662, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 663, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 664, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 665, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 667, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 668, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 672, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 676, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 677, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 678, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 679, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 681, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 686, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 687, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 688, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 692, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 696, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 697, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 702, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 703, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 704, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 709, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 710, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 711, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 712, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 715, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 716, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 717, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 718, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 719, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 727, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 728, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 734, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 735, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 736, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 739, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 743, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 744, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 745, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 746, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 747, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 748, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 750, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 755, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 756, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 759, susp 0.07999999999999996
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 399, susp 0.07692307692307687
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 401, susp 0.07692307692307687
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 404, susp 0.07692307692307687
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 405, susp 0.07692307692307687
Suspicious:  line org.apache.commons.math.optimization.general.MinpackTest l: 579, susp 0.05882352941176472
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 626, susp 0.05555555555555558
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 440, susp 0.052631578947368474
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 240, susp 0.045454545454545414
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 250, susp 0.045454545454545414
Suspicious:  line org.apache.commons.math.optimization.VectorialPointValuePair l: 81, susp 0.04347826086956519
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 849, susp 0.04347826086956519
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 851, susp 0.04347826086956519
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 503, susp 0.04255319148936165
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 436, susp 0.04081632653061229
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 520, susp 0.04081632653061229
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 521, susp 0.04081632653061229
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 837, susp 0.04081632653061229
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 838, susp 0.04081632653061229
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 839, susp 0.04081632653061229
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 841, susp 0.04081632653061229
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 842, susp 0.04081632653061229
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 843, susp 0.04081632653061229
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 275, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 278, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 281, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 282, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 283, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 286, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 290, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 291, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 292, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 293, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 296, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 297, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 298, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 300, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 303, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 308, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 309, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 310, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 311, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 312, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 313, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 314, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 315, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 316, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 318, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 322, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 328, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 329, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 333, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 336, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 337, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 338, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 340, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 341, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 342, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 343, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 346, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 349, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 350, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 351, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 352, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 353, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 354, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 355, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 357, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 359, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 360, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 364, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 365, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 368, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 369, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 370, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 371, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 376, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 377, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 378, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 379, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 380, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 381, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 384, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 385, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 386, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 388, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 389, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 390, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 391, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 392, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 395, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 398, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 406, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 407, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 408, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 412, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 414, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 415, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 416, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 417, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 418, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 420, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 435, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 449, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 452, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 455, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 460, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 462, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 493, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 494, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 496, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 499, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 500, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 501, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 502, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 505, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 510, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 511, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 512, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 513, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 514, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 515, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 517, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 518, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 519, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 859, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 860, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 861, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 862, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 863, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 865, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 866, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 867, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 870, susp 0.040000000000000036
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 245, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 246, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 247, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 248, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 249, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 250, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 253, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 254, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 255, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 256, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 257, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 258, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 259, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 260, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 263, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 266, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 267, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 268, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 270, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 273, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 274, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 786, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 787, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 788, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 789, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 790, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 791, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 793, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 797, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 800, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 801, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 802, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 803, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 804, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 805, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 806, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 808, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 812, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 813, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 814, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 817, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 821, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 822, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 823, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 826, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 827, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 828, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 829, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 832, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 833, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 836, susp 0.039215686274509776
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 166, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 169, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 172, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 173, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 174, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 175, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 176, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 177, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 179, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 191, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 192, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 201, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 202, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 212, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 213, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 223, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 224, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 236, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer l: 237, susp 0.037735849056603765
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 347, susp 0.030303030303030276
Suspicious:  line org.apache.commons.math.optimization.VectorialPointValuePair l: 46, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.VectorialPointValuePair l: 47, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.VectorialPointValuePair l: 48, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.VectorialPointValuePair l: 49, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 184, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 185, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 186, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 190, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 191, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 192, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 193, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 194, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 197, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 208, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 212, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 213, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 217, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 218, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 219, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 220, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 221, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 222, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 223, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 225, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 227, susp 0.028169014084507005
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 173, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 176, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 322, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 328, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 329, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 330, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 333, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 334, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 335, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 336, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 337, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 338, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 341, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 342, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 343, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 345, susp 0.02777777777777779
Suspicious:  line org.apache.commons.math.optimization.SimpleVectorialValueChecker l: 50, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.SimpleVectorialValueChecker l: 51, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.SimpleVectorialValueChecker l: 52, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.SimpleVectorialValueChecker l: 53, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 116, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 117, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 118, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 119, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 120, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 124, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 125, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 139, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 140, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 159, susp 0.027027027027026973
Suspicious:  line org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer l: 160, susp 0.027027027027026973
Executing time Fault localization: 81 sec
Setting up the max to 818100 milliseconds (818 sec)
---- Initial suspicious size: 433
Creating variant 1
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction, methodName=null, lineNumber=842, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction, methodName=null, lineNumber=844, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction, methodName=null, lineNumber=848, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction, methodName=null, lineNumber=849, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction, methodName=null, lineNumber=857, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction, methodName=null, lineNumber=858, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$FreudensteinRothFunction, methodName=null, lineNumber=859, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1155, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1157, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1161, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1162, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1163, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1164, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1165, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1166, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1168, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1173, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1174, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1175, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1176, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1177, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1178, susp=1.0]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$JennrichSampsonFunction, methodName=null, lineNumber=1180, susp=1.0]
--ModifPoint:CtAssignmentImpl, suspValue 0.125, line 402, file LevenbergMarquardtOptimizer.java
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=573, susp=0.125]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=574, susp=0.125]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=575, susp=0.125]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=576, susp=0.125]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=525, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=526, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=527, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=528, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=529, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=530, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=531, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=532, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=533, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=536, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=537, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=538, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=542, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=546, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=550, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=562, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=566, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=567, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=568, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=571, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=572, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=582, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction$1, methodName=null, lineNumber=582, susp=0.11111111111111116]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction$1, methodName=null, lineNumber=585, susp=0.11111111111111116]
--ModifPoint:CtIfImpl, suspValue 0.11111111111111116, line 627, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.11111111111111116, line 628, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.09523809523809523, line 605, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.09523809523809523, line 606, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.09523809523809523, line 607, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.09523809523809523, line 609, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.09523809523809523, line 610, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.09523809523809523, line 611, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.09523809523809523, line 612, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.09523809523809523, line 613, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.09523809523809523, line 614, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.09523809523809523, line 617, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.09523809523809523, line 618, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.09523809523809523, line 619, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.09523809523809523, line 620, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.09523809523809523, line 622, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.09523809523809523, line 625, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.09523809523809523, line 632, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.08695652173913049, line 530, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.08695652173913049, line 531, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.08695652173913049, line 532, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08695652173913049, line 534, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.08695652173913049, line 535, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.08695652173913049, line 536, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.08695652173913049, line 537, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.08695652173913049, line 538, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.08695652173913049, line 539, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.08695652173913049, line 541, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08695652173913049, line 542, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.08695652173913049, line 543, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08695652173913049, line 545, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.08695652173913049, line 698, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08695652173913049, line 699, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08695652173913049, line 700, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08333333333333337, line 426, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.08333333333333337, line 427, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.08333333333333337, line 428, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08333333333333337, line 429, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08333333333333337, line 431, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08333333333333337, line 432, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08333333333333337, line 433, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 528, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 529, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 549, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 550, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 551, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 552, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 553, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.07999999999999996, line 554, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.07999999999999996, line 556, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.07999999999999996, line 557, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 559, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 560, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 561, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 568, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 569, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 573, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 576, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 579, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 580, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 581, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 582, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.07999999999999996, line 584, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 586, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 587, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 588, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 589, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 590, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.07999999999999996, line 591, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 593, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 594, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 595, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 599, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.07999999999999996, line 601, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 662, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 663, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 664, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 665, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 667, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 668, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 672, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 676, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 677, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 678, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.07999999999999996, line 679, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 681, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 686, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 687, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 688, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 692, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 696, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 697, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 702, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 703, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 704, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 709, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 710, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 711, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 712, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 715, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 716, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 717, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 718, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 719, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 727, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 728, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 734, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 735, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 736, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 739, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07999999999999996, line 743, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 744, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 745, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07999999999999996, line 746, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 747, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.07999999999999996, line 748, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 750, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.07999999999999996, line 755, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07999999999999996, line 756, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07692307692307687, line 399, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.07692307692307687, line 401, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07692307692307687, line 404, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.07692307692307687, line 405, file LevenbergMarquardtOptimizer.java
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction, methodName=null, lineNumber=579, susp=0.05882352941176472]
--ModifPoint:CtAssignmentImpl, suspValue 0.05555555555555558, line 626, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.052631578947368474, line 440, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.045454545454545414, line 240, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.045454545454545414, line 250, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.04347826086956519, line 81, file VectorialPointValuePair.java
--ModifPoint:CtAssignmentImpl, suspValue 0.04347826086956519, line 849, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.04255319148936165, line 503, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.04081632653061229, line 436, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.04081632653061229, line 520, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.04081632653061229, line 521, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.04081632653061229, line 837, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.04081632653061229, line 838, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.04081632653061229, line 839, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.04081632653061229, line 841, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.04081632653061229, line 842, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.04081632653061229, line 843, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.040000000000000036, line 275, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.040000000000000036, line 278, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 281, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 282, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 283, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 286, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 290, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 291, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 292, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 293, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 296, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 297, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 298, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 300, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 303, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 308, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 309, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 310, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 311, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 312, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 313, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 314, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 315, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 316, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 318, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 322, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 328, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 329, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 333, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 336, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 337, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 338, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 340, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 341, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 342, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 343, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.040000000000000036, line 346, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 349, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 350, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 351, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 352, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 353, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 354, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 355, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 357, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 359, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 360, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.040000000000000036, line 364, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 365, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 368, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 369, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 370, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 371, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 376, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 377, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 378, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 379, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 380, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 381, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 384, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 385, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 386, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 388, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 389, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 390, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 391, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 392, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 395, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 398, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 406, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 407, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 408, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 412, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 414, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 415, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 416, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 417, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 418, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 420, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 435, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 449, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 452, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 455, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 493, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 494, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 496, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 499, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 500, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 501, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 502, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 505, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 510, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 511, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 512, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 513, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 514, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 515, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.040000000000000036, line 517, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 518, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.040000000000000036, line 519, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 859, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 860, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.040000000000000036, line 861, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 862, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 863, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 865, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.040000000000000036, line 866, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.040000000000000036, line 867, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 245, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 246, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 247, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 248, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 249, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 250, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 253, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 254, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 255, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 256, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 257, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 258, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 259, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 260, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.039215686274509776, line 263, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 266, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 267, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 268, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.039215686274509776, line 270, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 273, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.039215686274509776, line 274, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.039215686274509776, line 786, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 787, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 788, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.039215686274509776, line 789, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 790, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.039215686274509776, line 791, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 793, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.039215686274509776, line 797, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 800, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 801, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.039215686274509776, line 802, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 803, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.039215686274509776, line 804, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 805, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.039215686274509776, line 806, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.039215686274509776, line 808, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.039215686274509776, line 812, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 813, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 814, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.039215686274509776, line 817, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 821, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 822, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 823, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 826, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 827, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.039215686274509776, line 828, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 829, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.039215686274509776, line 832, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.039215686274509776, line 833, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.039215686274509776, line 836, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.037735849056603765, line 169, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.037735849056603765, line 172, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.037735849056603765, line 173, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.037735849056603765, line 174, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.037735849056603765, line 175, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.037735849056603765, line 176, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.037735849056603765, line 177, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.037735849056603765, line 191, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.037735849056603765, line 201, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.037735849056603765, line 212, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.037735849056603765, line 223, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.037735849056603765, line 236, file LevenbergMarquardtOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.030303030303030276, line 347, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.028169014084507005, line 47, file VectorialPointValuePair.java
--ModifPoint:CtAssignmentImpl, suspValue 0.028169014084507005, line 48, file VectorialPointValuePair.java
--ModifPoint:CtUnaryOperatorImpl, suspValue 0.028169014084507005, line 184, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.028169014084507005, line 185, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.028169014084507005, line 186, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.028169014084507005, line 190, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.028169014084507005, line 191, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.028169014084507005, line 192, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.028169014084507005, line 193, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.028169014084507005, line 194, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.028169014084507005, line 208, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.028169014084507005, line 212, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.028169014084507005, line 213, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.028169014084507005, line 217, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.028169014084507005, line 218, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtForImpl, suspValue 0.028169014084507005, line 219, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.028169014084507005, line 220, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.028169014084507005, line 221, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.028169014084507005, line 222, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.028169014084507005, line 223, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.028169014084507005, line 225, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.02777777777777779, line 173, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.02777777777777779, line 322, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 328, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 329, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 330, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 333, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 334, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 335, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 336, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 337, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 338, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 341, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 342, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 343, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.02777777777777779, line 345, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.027027027027026973, line 51, file SimpleVectorialValueChecker.java
--ModifPoint:CtAssignmentImpl, suspValue 0.027027027027026973, line 52, file SimpleVectorialValueChecker.java
--ModifPoint:CtInvocationImpl, suspValue 0.027027027027026973, line 117, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.027027027027026973, line 118, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.027027027027026973, line 119, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.027027027027026973, line 124, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.027027027027026973, line 139, file AbstractLeastSquaresOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.027027027027026973, line 159, file AbstractLeastSquaresOptimizer.java
Total suspicious from FL: 433,  356
Total ModPoint created: 356
Creating program variant #1, [Variant id: 1, #gens: 356, #ops: 0, parent:-]
Calculating fitness
Calculating fitness for original program variant.
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout818secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.stat.data.LotteryTest  org.apache.commons.math.linear.FieldMatrixImplTest  org.apache.commons.math.ode.sampling.StepNormalizerTest  org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math.geometry.RotationOrderTest  org.apache.commons.math.analysis.solvers.NewtonSolverTest  org.apache.commons.math.estimation.EstimatedParameterTest  org.apache.commons.math.linear.CholeskyDecompositionImplTest  org.apache.commons.math.linear.Array2DRowRealMatrixTest  org.apache.commons.math.linear.SparseRealMatrixTest  org.apache.commons.math.util.OpenIntToFieldTest  org.apache.commons.math.analysis.BinaryFunctionTest  org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math.util.MultidimensionalCounterTest  org.apache.commons.math.optimization.fitting.PolynomialFitterTest  org.apache.commons.math.linear.ArrayRealVectorTest  org.apache.commons.math.distribution.HypergeometricDistributionTest  org.apache.commons.math.random.RandomAdaptorTest  org.apache.commons.math.ode.FirstOrderConverterTest  org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math.exception.OutOfRangeExceptionTest  org.apache.commons.math.stat.inference.TestUtilsTest  org.apache.commons.math.stat.data.LewTest  org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest  org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest  org.apache.commons.math.distribution.GammaDistributionTest  org.apache.commons.math.stat.descriptive.rank.MedianTest  org.apache.commons.math.distribution.ZipfDistributionTest  org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math.stat.CertifiedDataTest  org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math.complex.FrenchComplexFormatTest  org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math.DuplicateSampleAbscissaExceptionTest  org.apache.commons.math.estimation.MinpackTest  org.apache.commons.math.genetics.FixedGenerationCountTest  org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math.fraction.BigFractionFormatTest  org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math.random.RandomDataTest  org.apache.commons.math.distribution.FDistributionTest  org.apache.commons.math.FunctionEvaluationExceptionTest  org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math.stat.inference.TTestFactoryTest  org.apache.commons.math.stat.descriptive.moment.SkewnessTest  org.apache.commons.math.special.GammaTest  org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math.analysis.integration.RombergIntegratorTest  org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math.complex.ComplexTest  org.apache.commons.math.distribution.BetaDistributionTest  org.apache.commons.math.special.ErfTest  org.apache.commons.math.special.BetaTest  org.apache.commons.math.ode.nonstiff.GillIntegratorTest  org.apache.commons.math.random.EmpiricalDistributionTest  org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest  org.apache.commons.math.random.AbstractRandomGeneratorTest  org.apache.commons.math.fraction.BigFractionFieldTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math.linear.BiDiagonalTransformerTest  org.apache.commons.math.util.DefaultTransformerTest  org.apache.commons.math.linear.LUDecompositionImplTest  org.apache.commons.math.random.ValueServerTest  org.apache.commons.math.stat.descriptive.moment.MeanTest  org.apache.commons.math.util.BigRealFieldTest  org.apache.commons.math.linear.QRDecompositionImplTest  org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math.stat.descriptive.moment.VarianceTest  org.apache.commons.math.genetics.OnePointCrossoverTest  org.apache.commons.math.stat.ranking.NaturalRankingTest  org.apache.commons.math.optimization.linear.SimplexSolverTest  org.apache.commons.math.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math.linear.BlockRealMatrixTest  org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math.random.MersenneTwisterTest  org.apache.commons.math.genetics.RandomKeyTest  org.apache.commons.math.stat.descriptive.summary.ProductTest  org.apache.commons.math.fraction.FractionTest  org.apache.commons.math.analysis.ComposableFunctionTest  org.apache.commons.math.util.OpenIntToDoubleHashMapTest  org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest  org.apache.commons.math.optimization.univariate.BracketFinderTest  org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math.genetics.ChromosomeTest  org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest  org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math.geometry.Vector3DTest  org.apache.commons.math.stat.descriptive.rank.MinTest  org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest  org.apache.commons.math.linear.FieldLUDecompositionImplTest  org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math.transform.FastHadamardTransformerTest  org.apache.commons.math.optimization.fitting.HarmonicFitterTest  org.apache.commons.math.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math.random.GaussianRandomGeneratorTest  org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math.linear.FrenchRealVectorFormatTest  org.apache.commons.math.fraction.BigFractionTest  org.apache.commons.math.optimization.fitting.CurveFitterTest  org.apache.commons.math.util.ContinuedFractionTest  org.apache.commons.math.util.TransformerMapTest  org.apache.commons.math.analysis.solvers.BisectionSolverTest  org.apache.commons.math.genetics.BinaryChromosomeTest  org.apache.commons.math.linear.BlockFieldMatrixTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math.linear.SingularValueDecompositionImplTest  org.apache.commons.math.distribution.TDistributionTest  org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math.linear.InvalidMatrixExceptionTest  org.apache.commons.math.distribution.BinomialDistributionTest  org.apache.commons.math.linear.EigenSolverTest  org.apache.commons.math.stat.inference.TTestTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math.random.UniformRandomGeneratorTest  org.apache.commons.math.stat.descriptive.rank.PercentileTest  org.apache.commons.math.ode.events.EventStateTest  org.apache.commons.math.analysis.solvers.RiddersSolverTest  org.apache.commons.math.linear.ArrayFieldVectorTest  org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest  org.apache.commons.math.ode.ContinuousOutputModelTest  org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math.optimization.linear.SimplexTableauTest  org.apache.commons.math.ConvergenceExceptionTest  org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest  org.apache.commons.math.util.ResizableDoubleArrayTest  org.apache.commons.math.complex.ComplexFormatTest  org.apache.commons.math.linear.RealMatrixImplTest  org.apache.commons.math.stat.descriptive.summary.SumTest  org.apache.commons.math.linear.SparseFieldVectorTest  org.apache.commons.math.genetics.ElitisticListPopulationTest  org.apache.commons.math.stat.descriptive.summary.SumSqTest  org.apache.commons.math.linear.SparseRealVectorTest  org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math.linear.EigenDecompositionImplTest  org.apache.commons.math.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math.stat.descriptive.moment.KurtosisTest  org.apache.commons.math.transform.FastFourierTransformerTest  org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math.distribution.NormalDistributionTest  org.apache.commons.math.distribution.PoissonDistributionTest  org.apache.commons.math.geometry.Vector3DFormatTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math.genetics.TournamentSelectionTest  org.apache.commons.math.optimization.general.MinpackTest  org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest  org.apache.commons.math.linear.AbstractRealVectorTest  org.apache.commons.math.analysis.solvers.BrentSolverTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math.exception.NotPositiveExceptionTest  org.apache.commons.math.estimation.WeightedMeasurementTest  org.apache.commons.math.stat.inference.ChiSquareTestTest  org.apache.commons.math.optimization.general.PowellOptimizerTest  org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest  org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math.linear.MatrixIndexExceptionTest  org.apache.commons.math.genetics.BinaryMutationTest  org.apache.commons.math.fraction.FractionFormatTest  org.apache.commons.math.distribution.PascalDistributionTest  org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math.exception.NumberIsTooSmallExceptionTest  org.apache.commons.math.util.MathUtilsTest  org.apache.commons.math.complex.ComplexUtilsTest  org.apache.commons.math.exception.DimensionMismatchExceptionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest  org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest  org.apache.commons.math.optimization.direct.MultiDirectionalTest  org.apache.commons.math.genetics.FitnessCachingTest  org.apache.commons.math.linear.BigMatrixImplTest  org.apache.commons.math.stat.inference.ChiSquareFactoryTest  org.apache.commons.math.fraction.FractionFieldTest  org.apache.commons.math.stat.descriptive.InteractionTest  org.apache.commons.math.stat.correlation.CovarianceTest  org.apache.commons.math.exception.NumberIsTooLargeExceptionTest  org.apache.commons.math.linear.QRSolverTest  org.apache.commons.math.linear.RealVectorFormatTest  org.apache.commons.math.analysis.solvers.LaguerreSolverTest  org.apache.commons.math.linear.CholeskySolverTest  org.apache.commons.math.distribution.WeibullDistributionTest  org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest  org.apache.commons.math.stat.StatUtilsTest  org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math.analysis.solvers.MullerSolverTest  org.apache.commons.math.linear.TriDiagonalTransformerTest  org.apache.commons.math.distribution.ChiSquareDistributionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest  org.apache.commons.math.transform.FastSineTransformerTest  org.apache.commons.math.stat.inference.OneWayAnovaTest  org.apache.commons.math.optimization.univariate.BrentOptimizerTest  org.apache.commons.math.transform.FastCosineTransformerTest  org.apache.commons.math.ArgumentOutsideDomainExceptionTest  org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math.stat.descriptive.rank.MaxTest  org.apache.commons.math.complex.ComplexFieldTest  org.apache.commons.math.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math.MaxIterationsExceededExceptionTest  org.apache.commons.math.linear.MatrixUtilsTest  org.apache.commons.math.optimization.direct.NelderMeadTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest  org.apache.commons.math.geometry.RotationTest  org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math.linear.SingularValueSolverTest  org.apache.commons.math.genetics.RandomKeyMutationTest  org.apache.commons.math.util.BigRealTest  org.apache.commons.math.distribution.ExponentialDistributionTest  org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest  org.apache.commons.math.geometry.FrenchVector3DFormatTest  org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math.stat.regression.SimpleRegressionTest  org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest  org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest  org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest  org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math.linear.LUSolverTest  org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest  org.apache.commons.math.MathConfigurationExceptionTest  org.apache.commons.math.estimation.GaussNewtonEstimatorTest  org.apache.commons.math.genetics.ListPopulationTest  org.apache.commons.math.MathExceptionTest  org.apache.commons.math.distribution.CauchyDistributionTest  org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math.linear.SparseFieldMatrixTest  org.apache.commons.math.stat.descriptive.summary.SumLogTest  org.apache.commons.math.exception.util.ArgUtilsTest  org.apache.commons.math.optimization.fitting.GaussianFitterTest  org.apache.commons.math.stat.FrequencyTest  org.apache.commons.math.stat.descriptive.moment.SecondMomentTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 2274] ,[]
The original fitness is : 2.0
----------------------------
---Configuration properties
p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
p:alternativecompliancelevel= 8
p:ignoredTestCases= 
p:workingDirectory= /Users/marekmazur/astor/./output_astor
p:manipulatesuper= false
p:validation= process
p:jvm4testexecution= /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:operatorspace= irr-statements
p:diffcontext= 0
p:binjavafolder= /target/classes/
p:synthesis_depth= 3
p:gzoltartestpackagetoexclude= junit.framework
p:skipfitnessinitialpopulation= false
p:evosuiteresultfolder= evosuite
p:flthreshold= 0
p:regressionforfaultlocalization= true
p:collectonlyusedmethod= false
p:folderDiff= ./diffSolutions
p:preservelinenumbers= true
p:tmax2= 818100
p:tmax1= 10000
p:probagenmutation= false
p:nomodificationconvergence= 100
p:diff_type= relative
p:nolog= False
p:targetelementprocessor= statements
p:srctestfolder= /src/test/
p:forceExecuteRegression= false
p:clusteringfilename= clustering.csv
p:failing= org.apache.commons.math.optimization.general.MinpackTest:org.apache.commons.math.optimization.general.MinpackTest:
p:logtestexecution= false
p:evo_buggy_class= true
p:numberExecutions= 1
p:maxnumbersolutions= 1000000
p:evo_affected_by_op= true
p:population= 1
p:maxCombinationVariableLimit= false
p:savesolution= true
p:javacompliancelevel= 8
p:uniqueoptogen= false
p:gzoltarpackagetonotinstrument= junit.framework
p:projectIdentifier= 
p:modificationpointnavigation= weight
p:stopfirst= true
p:multipointmodification= false
p:elementsToMutate= 10
p:jsonoutputname= astor_output
p:evoDSE= false
p:bintestfolder= /target/test-classes/
p:testbystep= false
p:version-location= ./math-version/
p:gzoltarVersion= 1.7.3
p:locationGzoltarJar= ./lib/
p:reintroduce= PARENTS:ORIGINAL
p:executorjar= ./lib/jtestex7.jar
p:maxGeneration= 1000000
p:max_synthesis_step= 10000
p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
p:maxVarCombination= 1000
p:includeZeros= false
p:maxtime= 60
p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
p:jvmversion= 1.8.0_202
p:commandTrunk= 50000
p:faultlocalization= flacoco
p:resetmodel= true
p:maxsuspcandidates= 1000
p:mode= jgenprog
p:learningdir= 
p:jvm4evosuitetestexecution= /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:filterfaultlocalization= true
p:mutationrate= 1 
p:pathToMVNRepository= 
p:resourcesfolder= /src/main/resources:/src/test/resources:
p:timezone= America/Los_Angeles
p:runjava7code= false
p:evoRunOnBuggyClass= true
p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
p:limitbysuspicious= true
p:logsattemps= true
p:dependenciespath= /Users/marekmazur/astor/examples/libs/junit-4.4.jar
p:packageToInstrument= org.apache.commons
p:skipfaultlocalization= false
p:scope= local
p:transformingredient= false
p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
p:maxnumvariablesperingredient= 10
p:parsesourcefromoriginal= true
p:pvariantfoldername= variant-
p:savespoonmodelondisk= false
p:srcjavafolder= /src/java/
p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
p:ignoreflakyinfl= false
p:cleantemplates= true
p:applyCrossover= false
p:maxmodificationpoints= 1000
p:duplicateingredientsinspace= false
p:metid= 0
p:continuewhenmodelfail= true
p:saveall= false
p:seed= 10
p:savecompletepatched= true
p:resetoperations= false
p:keepcomments= true
p:processoutputinfile= false
p:location= /Users/marekmazur/astor/defects4j/math-64
p:probabilistictransformation= true
p:overridemaxtime= true
p:outputjsonresult= true
p:allpoints= false
p:antipattern= false
p:bugId= 280
p:evosuitetimeout= 120
p:maxtimefactor= 10
p:nrPlaceholders= 1
p:forcesubprocesskilling= false
----------------------------
----Starting Solution Search
----------Running generation: 1, population size: 1

***** Generation 1 : 0
**Parent Variant: [Variant id: 1, #gens: 356, #ops: 0, parent:-]

--Child created id: 2
--Creating new operations for variant [Variant id: 2, #gens: 356, #ops: 0, parent:1]
---analyzing modificationPoint position: 211
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  lmPar *= 0.5
---analyzing modificationPoint position: 55
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...]
---analyzing modificationPoint position: 11
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  work1[permutation[i]] -= jacobian[i][pj] * tmp
---analyzing modificationPoint position: 52
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  double gNorm = java.lang.Math.sqrt(sum2)
---analyzing modificationPoint position: 255
---modifPoint 4 not mutation generated in  double xNorm = 0
---analyzing modificationPoint position: 84
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 5 not mutation generated in  if (dpj != 0) { 	java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0); }
---analyzing modificationPoint position: 274
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  norm2 += akk * akk
---analyzing modificationPoint position: 204
---modifPoint 7 not mutation generated in  double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2
---analyzing modificationPoint position: 63
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 8 not mutation generated in  determineLMDirection(qy, work1, work2, work3)
---analyzing modificationPoint position: 303
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.util.MathUtils.SAFE_MIN]
--> var from patch: org.apache.commons.math.util.MathUtils.SAFE_MIN spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java175
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setParRelativeTolerance(1.0E-10) ` -topatch--> `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 175, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setParRelativeTolerance(1.0E-10) ` -topatch--> `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 2, #gens: 357, #ops: 1, parent:1] gen mutated: 1 , gen not mut: 9, gen not applied  0
-The child compiles: id 2
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-2/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(1): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setParRelativeTolerance(1.0E-10) ` -topatch--> `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1(f=2.0), 2(f=2.0), )
Selected to next generation: IDs2--> (1(f=2.0), )
----------Running generation: 2, population size: 1

***** Generation 2 : 0
**Parent Variant: [Variant id: 3, #gens: 356, #ops: 0, parent:-]

--Child created id: 4
--Creating new operations for variant [Variant id: 4, #gens: 356, #ops: 0, parent:3]
---analyzing modificationPoint position: 180
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  lmDir[pj] = -lmDir[pj]
---analyzing modificationPoint position: 173
---modifPoint 1 not mutation generated in  double[] tmpVec = residuals
---analyzing modificationPoint position: 167
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  diag[j] = java.lang.Math.max(diag[j], jacNorm[j])
---analyzing modificationPoint position: 22
location: LevenbergMarquardtOptimizer.java534
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 4, #gens: 355, #ops: 1, parent:3] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 4, errors: [LevenbergMarquardtOptimizer.java:544: error: variable sum2 might not have been initialized
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:546: error: variable sum2 might not have been initialized
			parl = fp / (delta * sum2);
			                     ^]
Ingredient counter is Zero
---Undoing: gnrtn(2): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (3(f=2.0), 4(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (3(f=2.0), )
----------Running generation: 3, population size: 1

***** Generation 3 : 0
**Parent Variant: [Variant id: 5, #gens: 356, #ops: 0, parent:-]

--Child created id: 6
--Creating new operations for variant [Variant id: 6, #gens: 356, #ops: 0, parent:5]
---analyzing modificationPoint position: 207
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  // ratio of the actual to the predicted reduction ratio = (preRed == 0) ? 0 : actRed / preRed
---analyzing modificationPoint position: 94
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan))
---analyzing modificationPoint position: 295
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  beta[pk] = betak
---analyzing modificationPoint position: 10
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [fp, delta, sum2]
--> var from patch: fp spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum2 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java613
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	work1[permutation[i]] -= jacobian[i][pj] * tmp; } ` -topatch--> `double correction = fp / (delta * sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 613, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	work1[permutation[i]] -= jacobian[i][pj] * tmp; } ` -topatch--> `double correction = fp / (delta * sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 6, #gens: 357, #ops: 1, parent:5] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 6
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-6/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(3): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	work1[permutation[i]] -= jacobian[i][pj] * tmp; } ` -topatch--> `double correction = fp / (delta * sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (5(f=2.0), 6(f=2.0), )
Selected to next generation: IDs2--> (5(f=2.0), )
----------Running generation: 4, population size: 1

***** Generation 4 : 0
**Parent Variant: [Variant id: 7, #gens: 356, #ops: 0, parent:-]

--Child created id: 8
--Creating new operations for variant [Variant id: 8, #gens: 356, #ops: 0, parent:7]
---analyzing modificationPoint position: 277
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  // select the column with the greatest norm on active components int nextColumn = -1
---analyzing modificationPoint position: 70
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  dxNorm = java.lang.Math.sqrt(dxNorm)
---analyzing modificationPoint position: 125
location: LevenbergMarquardtOptimizer.java440
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 8, #gens: 355, #ops: 1, parent:7] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 8
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-8/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 18] ,[]
-Valid?: |false|16|18|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(4): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (7(f=2.0), 8(f=16.0), )
Selected to next generation: IDs2--> (7(f=2.0), )
----------Running generation: 5, population size: 1

***** Generation 5 : 0
**Parent Variant: [Variant id: 9, #gens: 356, #ops: 0, parent:-]

--Child created id: 10
--Creating new operations for variant [Variant id: 10, #gens: 356, #ops: 0, parent:9]
---analyzing modificationPoint position: 109
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 	nSing = j; }
---analyzing modificationPoint position: 293
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2)
---analyzing modificationPoint position: 67
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 189
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  // compute the scaled actual reduction double actRed = -1.0
---analyzing modificationPoint position: 238
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  double fp = dxNorm - delta
---analyzing modificationPoint position: 290
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 5 not mutation generated in  permutation[nextColumn] = permutation[k]
---analyzing modificationPoint position: 1
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  if (fp < 0) { 	paru = java.lang.Math.min(paru, lmPar); }
---analyzing modificationPoint position: 16
---modifPoint 7 not mutation generated in  double correction = fp / (delta * sum2)
---analyzing modificationPoint position: 12
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 8 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 183
location: LevenbergMarquardtOptimizer.java355
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmNorm += s * s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 10, #gens: 355, #ops: 1, parent:9] gen mutated: 1 , gen not mut: 9, gen not applied  0
-The child compiles: id 10
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-10/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(5): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmNorm += s * s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (9(f=2.0), 10(f=15.0), )
Selected to next generation: IDs2--> (9(f=2.0), )
----------Running generation: 6, population size: 1

***** Generation 6 : 0
**Parent Variant: [Variant id: 11, #gens: 356, #ops: 0, parent:-]

--Child created id: 12
--Creating new operations for variant [Variant id: 12, #gens: 356, #ops: 0, parent:11]
---analyzing modificationPoint position: 210
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [this.initialStepBoundFactor]
--> var from patch: this.initialStepBoundFactor spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java407
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = 2 * lmNorm ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 407, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = 2 * lmNorm ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 12, #gens: 356, #ops: 1, parent:11] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 12
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-12/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(6): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = 2 * lmNorm ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (11(f=2.0), 12(f=6.0), )
Selected to next generation: IDs2--> (11(f=2.0), )
----------Running generation: 7, population size: 1

***** Generation 7 : 0
**Parent Variant: [Variant id: 13, #gens: 356, #ops: 0, parent:-]

--Child created id: 14
--Creating new operations for variant [Variant id: 14, #gens: 356, #ops: 0, parent:13]
---analyzing modificationPoint position: 17
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java625
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 625, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 14, #gens: 357, #ops: 1, parent:13] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 14
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-14/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(7): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (13(f=2.0), 14(f=2.0), )
Selected to next generation: IDs2--> (13(f=2.0), )
----------Running generation: 8, population size: 1

***** Generation 8 : 0
**Parent Variant: [Variant id: 15, #gens: 356, #ops: 0, parent:-]

--Child created id: 16
--Creating new operations for variant [Variant id: 16, #gens: 356, #ops: 0, parent:15]
---analyzing modificationPoint position: 60
location: LevenbergMarquardtOptimizer.java580
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 16, #gens: 355, #ops: 1, parent:15] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 16
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-16/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 18] ,[]
-Valid?: |false|14|18|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(8): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (15(f=2.0), 16(f=14.0), )
Selected to next generation: IDs2--> (15(f=2.0), )
----------Running generation: 9, population size: 1

***** Generation 9 : 0
**Parent Variant: [Variant id: 17, #gens: 356, #ops: 0, parent:-]

--Child created id: 18
--Creating new operations for variant [Variant id: 18, #gens: 356, #ops: 0, parent:17]
---analyzing modificationPoint position: 118
location: LevenbergMarquardtOptimizer.java755
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// permute the components of z back to components of lmDir for (int j = 0; j < lmDir.length; ++j) { [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 18, #gens: 355, #ops: 1, parent:17] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 18
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-18/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(9): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// permute the components of z back to components of lmDir for (int j = 0; j < lmDir.length; ++j) { [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (17(f=2.0), 18(f=15.0), )
Selected to next generation: IDs2--> (17(f=2.0), )
----------Running generation: 10, population size: 1

***** Generation 10 : 0
**Parent Variant: [Variant id: 19, #gens: 356, #ops: 0, parent:-]

--Child created id: 20
--Creating new operations for variant [Variant id: 20, #gens: 356, #ops: 0, parent:19]
---analyzing modificationPoint position: 29
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  work1[pj] = s
---analyzing modificationPoint position: 117
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  work[j] = (work[j] - sum) / lmDiag[j]
---analyzing modificationPoint position: 148
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double dk = jacNorm[k]
---analyzing modificationPoint position: 18
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 3 not mutation generated in  // compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction)
---analyzing modificationPoint position: 222
location: LevenbergMarquardtOptimizer.java455
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 20, #gens: 355, #ops: 1, parent:19] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 20
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-20/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(10): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (19(f=2.0), 20(f=2.0), )
Selected to next generation: IDs2--> (19(f=2.0), )
----------Running generation: 11, population size: 1

***** Generation 11 : 0
**Parent Variant: [Variant id: 21, #gens: 356, #ops: 0, parent:-]

--Child created id: 22
--Creating new operations for variant [Variant id: 22, #gens: 356, #ops: 0, parent:21]
---analyzing modificationPoint position: 112
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...]
---analyzing modificationPoint position: 94
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan))
---analyzing modificationPoint position: 97
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java710
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double temp = (cos * work[k]) + (sin * qtbpj) ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 710, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double temp = (cos * work[k]) + (sin * qtbpj) ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 22, #gens: 357, #ops: 1, parent:21] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 22
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-22/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(11): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double temp = (cos * work[k]) + (sin * qtbpj) ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (21(f=2.0), 22(f=2.0), )
Selected to next generation: IDs2--> (21(f=2.0), )
----------Running generation: 12, population size: 1

***** Generation 12 : 0
**Parent Variant: [Variant id: 23, #gens: 356, #ops: 0, parent:-]

--Child created id: 24
--Creating new operations for variant [Variant id: 24, #gens: 356, #ops: 0, parent:23]
---analyzing modificationPoint position: 112
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...]
---analyzing modificationPoint position: 164
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost))
---analyzing modificationPoint position: 32
---modifPoint 2 not mutation generated in  final double cotan = rkk / lmDiag[k]
---analyzing modificationPoint position: 250
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 3 not mutation generated in  jacNorm = new double[cols]
---analyzing modificationPoint position: 37
---modifPoint 4 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 75
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 5 not mutation generated in  // copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...]
---analyzing modificationPoint position: 199
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [tmpVec, residuals]
--> var from patch: tmpVec spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java384
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double coeff1 = 0 ` -topatch--> `tmpVec = residuals` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 384, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double coeff1 = 0 ` -topatch--> `tmpVec = residuals` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 24, #gens: 357, #ops: 1, parent:23] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child compiles: id 24
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-24/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(12): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double coeff1 = 0 ` -topatch--> `tmpVec = residuals` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (23(f=2.0), 24(f=18.0), )
Selected to next generation: IDs2--> (23(f=2.0), )
----------Running generation: 13, population size: 1

***** Generation 13 : 0
**Parent Variant: [Variant id: 25, #gens: 356, #ops: 0, parent:-]

--Child created id: 26
--Creating new operations for variant [Variant id: 26, #gens: 356, #ops: 0, parent:25]
---analyzing modificationPoint position: 285
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (norm2 > ak2) { 	nextColumn = i; 	ak2 = norm2; }
---analyzing modificationPoint position: 18
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java632
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `final double sin` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 632, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `final double sin` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 26, #gens: 357, #ops: 1, parent:25] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 26, errors: [LevenbergMarquardtOptimizer.java:696: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:696: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:696: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:696: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:696: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:696: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:696: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:696: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:697: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:697: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:697: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:697: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:697: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:697: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:698: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:698: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:699: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:699: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:699: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:700: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:700: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:700: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:700: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:700: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:700: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:701: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:701: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:701: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:701: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:701: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:701: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:701: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:702: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:703: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:703: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:701: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:703: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:703: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:703: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:703: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:703: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:703: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:704: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:704: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:703: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:704: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:704: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:705: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:705: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:705: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:706: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:706: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:706: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:707: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:707: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:708: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:708: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:707: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:708: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:708: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:708: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:708: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:710: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:710: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:711: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:711: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:711: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:712: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:713: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:714: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:715: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:715: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:716: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:717: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:717: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:718: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:718: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:718: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:718: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:718: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:718: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:718: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:718: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:718: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:718: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:718: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:718: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:718: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:718: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	        ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                            ^, LevenbergMarquardtOptimizer.java:785: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(13): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `final double sin` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (25(f=2.0), 26(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (25(f=2.0), )
----------Running generation: 14, population size: 1

***** Generation 14 : 0
**Parent Variant: [Variant id: 27, #gens: 356, #ops: 0, parent:-]

--Child created id: 28
--Creating new operations for variant [Variant id: 28, #gens: 356, #ops: 0, parent:27]
---analyzing modificationPoint position: 290
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [this.initialStepBoundFactor]
--> var from patch: this.initialStepBoundFactor spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java822
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[nextColumn] = permutation[k] ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 822, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[nextColumn] = permutation[k] ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 28, #gens: 356, #ops: 1, parent:27] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 28
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-28/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(14): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[nextColumn] = permutation[k] ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (27(f=2.0), 28(f=18.0), )
Selected to next generation: IDs2--> (27(f=2.0), )
----------Running generation: 15, population size: 1

***** Generation 15 : 0
**Parent Variant: [Variant id: 29, #gens: 356, #ops: 0, parent:-]

--Child created id: 30
--Creating new operations for variant [Variant id: 30, #gens: 356, #ops: 0, parent:29]
---analyzing modificationPoint position: 276
location: LevenbergMarquardtOptimizer.java797
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// transform the matrix column after column for (int k = 0; k < cols; ++k) {  	// select the column [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 30, #gens: 355, #ops: 1, parent:29] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 30
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-30/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(15): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// transform the matrix column after column for (int k = 0; k < cols; ++k) {  	// select the column [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (29(f=2.0), 30(f=18.0), )
Selected to next generation: IDs2--> (29(f=2.0), )
----------Running generation: 16, population size: 1

***** Generation 16 : 0
**Parent Variant: [Variant id: 31, #gens: 356, #ops: 0, parent:-]

--Child created id: 32
--Creating new operations for variant [Variant id: 32, #gens: 356, #ops: 0, parent:31]
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 42
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double parl = 0
---analyzing modificationPoint position: 0
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  tmp = 0.1
---analyzing modificationPoint position: 264
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 3 not mutation generated in  boolean firstIteration = true
---analyzing modificationPoint position: 19
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] *= diag[pj] / dxNorm; }
---analyzing modificationPoint position: 172
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousCost = cost ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 340, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousCost = cost ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 32, #gens: 357, #ops: 1, parent:31] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 32, errors: [LevenbergMarquardtOptimizer.java:728: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:728: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:728: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:728: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:728: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:728: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:728: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:728: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:728: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:728: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:728: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:728: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:728: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:728: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:728: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:728: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:734: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:734: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:735: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:735: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:735: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:735: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:735: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:735: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:736: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:736: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:737: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:737: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:737: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:738: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:738: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:738: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:739: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:739: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:739: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:739: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:739: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:739: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:739: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:740: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:739: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:741: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:742: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:742: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:741: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:742: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:742: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:743: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:743: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:743: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:744: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:746: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:746: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:745: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:746: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:746: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:746: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:746: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:748: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:748: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:749: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:749: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:749: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:750: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:751: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:752: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:753: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:753: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:754: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:755: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:755: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:756: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:756: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:756: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:756: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:756: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:756: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:756: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:756: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:756: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(16): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousCost = cost ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (31(f=2.0), 32(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (31(f=2.0), )
----------Running generation: 17, population size: 1

***** Generation 17 : 0
**Parent Variant: [Variant id: 33, #gens: 356, #ops: 0, parent:-]

--Child created id: 34
--Creating new operations for variant [Variant id: 34, #gens: 356, #ops: 0, parent:33]
---analyzing modificationPoint position: 93
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.orthoTolerance]
--> var from patch: this.orthoTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java702
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 702, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 34, #gens: 357, #ops: 1, parent:33] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 34
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-34/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(17): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (33(f=2.0), 34(f=2.0), )
Selected to next generation: IDs2--> (33(f=2.0), )
----------Running generation: 18, population size: 1

***** Generation 18 : 0
**Parent Variant: [Variant id: 35, #gens: 356, #ops: 0, parent:-]

--Child created id: 36
--Creating new operations for variant [Variant id: 36, #gens: 356, #ops: 0, parent:35]
---analyzing modificationPoint position: 239
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java519
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; } ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 519, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; } ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 36, #gens: 357, #ops: 1, parent:35] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 36
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-36/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(18): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; } ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (35(f=2.0), 36(f=4.0), )
Selected to next generation: IDs2--> (35(f=2.0), )
----------Running generation: 19, population size: 1

***** Generation 19 : 0
**Parent Variant: [Variant id: 37, #gens: 356, #ops: 0, parent:-]

--Child created id: 38
--Creating new operations for variant [Variant id: 38, #gens: 356, #ops: 0, parent:37]
---analyzing modificationPoint position: 23
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java535
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 535, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 38, #gens: 357, #ops: 1, parent:37] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 38, errors: [LevenbergMarquardtOptimizer.java:545: error: variable work3 is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
			} 			double[] work3 = new double[cols];
			  			         ^]
Ingredient counter is Zero
---Undoing: gnrtn(19): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (37(f=2.0), 38(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (37(f=2.0), )
----------Running generation: 20, population size: 1

***** Generation 20 : 0
**Parent Variant: [Variant id: 39, #gens: 356, #ops: 0, parent:-]

--Child created id: 40
--Creating new operations for variant [Variant id: 40, #gens: 356, #ops: 0, parent:39]
---analyzing modificationPoint position: 93
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [rank, j, cols, lmDir, permutation]
--> var from patch: rank spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java702
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 702, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 40, #gens: 357, #ops: 1, parent:39] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 40, errors: [LevenbergMarquardtOptimizer.java:703: error: variable j is already defined in method determineLMDirection(double[],double[],double[],double[])
						final double tan = lmDiag[k] / rkk; 						for (int j = rank; j < cols; ++j) { 							lmDir[permutation[j]] = 0;}
						                                    						         ^]
Ingredient counter is Zero
---Undoing: gnrtn(20): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (39(f=2.0), 40(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (39(f=2.0), )
----------Running generation: 21, population size: 1

***** Generation 21 : 0
**Parent Variant: [Variant id: 41, #gens: 356, #ops: 0, parent:-]

--Child created id: 42
--Creating new operations for variant [Variant id: 42, #gens: 356, #ops: 0, parent:41]
---analyzing modificationPoint position: 303
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  setParRelativeTolerance(1.0E-10)
---analyzing modificationPoint position: 8
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 1 not mutation generated in  work1[pj] /= work2[j]
---analyzing modificationPoint position: 78
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  jacobian[i][pj] = jacobian[j][permutation[i]]
---analyzing modificationPoint position: 246
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 3 not mutation generated in  for (int i = k; i < rows; ++i) { 	y[i] -= gamma * jacobian[i][pk]; }
---analyzing modificationPoint position: 277
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  // select the column with the greatest norm on active components int nextColumn = -1
---analyzing modificationPoint position: 134
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java837
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gamma = 0 ` -topatch--> `// if the jacobian is not rank deficient, the Newton step provides // a lower bound, parl, for the z[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 837, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gamma = 0 ` -topatch--> `// if the jacobian is not rank deficient, the Newton step provides // a lower bound, parl, for the z[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 42, #gens: 356, #ops: 1, parent:41] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 42, errors: [LevenbergMarquardtOptimizer.java:840: error: cannot find symbol
					gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]];
					^
  symbol:   variable gamma
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:842: error: cannot find symbol
				gamma *= betak;
				^
  symbol:   variable gamma
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:844: error: cannot find symbol
					jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk];
					                                    ^
  symbol:   variable gamma
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(21): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gamma = 0 ` -topatch--> `// if the jacobian is not rank deficient, the Newton step provides // a lower bound, parl, for the z[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (41(f=2.0), 42(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (41(f=2.0), )
----------Running generation: 22, population size: 1

***** Generation 22 : 0
**Parent Variant: [Variant id: 43, #gens: 356, #ops: 0, parent:-]

--Child created id: 44
--Creating new operations for variant [Variant id: 44, #gens: 356, #ops: 0, parent:43]
---analyzing modificationPoint position: 76
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 91
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  double rkk = jacobian[k][pk]
---analyzing modificationPoint position: 77
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; }
---analyzing modificationPoint position: 157
Templates availables50
Attempts Base Ingredients  1 total 50
vars from patch [k, cols, diag, point, xNorm, xK]
--> var from patch: k spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: xNorm spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: xK spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java310
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...] ` -topatch--> `for (int k = 0; k < cols; ++k) { 	double xK = diag[k] * point[k]; 	xNorm += xK * xK; }` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 310, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...] ` -topatch--> `for (int k = 0; k < cols; ++k) { 	double xK = diag[k] * point[k]; 	xNorm += xK * xK; }` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 44, #gens: 356, #ops: 1, parent:43] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 44, errors: [LevenbergMarquardtOptimizer.java:494: error: class, interface, or enum expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^, LevenbergMarquardtOptimizer.java:534: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:538: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                ^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                       ^, LevenbergMarquardtOptimizer.java:541: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:543: error: class, interface, or enum expected
				work1[pj] = s;
				^, LevenbergMarquardtOptimizer.java:544: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:545: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:547: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(22): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...] ` -topatch--> `for (int k = 0; k < cols; ++k) { 	double xK = diag[k] * point[k]; 	xNorm += xK * xK; }` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (43(f=2.0), 44(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (43(f=2.0), )
----------Running generation: 23, population size: 1

***** Generation 23 : 0
**Parent Variant: [Variant id: 45, #gens: 356, #ops: 0, parent:-]

--Child created id: 46
--Creating new operations for variant [Variant id: 46, #gens: 356, #ops: 0, parent:45]
---analyzing modificationPoint position: 90
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...]
---analyzing modificationPoint position: 275
location: LevenbergMarquardtOptimizer.java793
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm[k] = java.lang.Math.sqrt(norm2) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 46, #gens: 355, #ops: 1, parent:45] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 46
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-46/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(23): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm[k] = java.lang.Math.sqrt(norm2) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (45(f=2.0), 46(f=18.0), )
Selected to next generation: IDs2--> (45(f=2.0), )
----------Running generation: 24, population size: 1

***** Generation 24 : 0
**Parent Variant: [Variant id: 47, #gens: 356, #ops: 0, parent:-]

--Child created id: 48
--Creating new operations for variant [Variant id: 48, #gens: 356, #ops: 0, parent:47]
---analyzing modificationPoint position: 21
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java532
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 532, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 48, #gens: 357, #ops: 1, parent:47] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 48
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-48/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(24): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (47(f=2.0), 48(f=2.0), )
Selected to next generation: IDs2--> (47(f=2.0), )
----------Running generation: 25, population size: 1

***** Generation 25 : 0
**Parent Variant: [Variant id: 49, #gens: 356, #ops: 0, parent:-]

--Child created id: 50
--Creating new operations for variant [Variant id: 50, #gens: 356, #ops: 0, parent:49]
---analyzing modificationPoint position: 211
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  lmPar *= 0.5
---analyzing modificationPoint position: 107
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]
---analyzing modificationPoint position: 95
location: LevenbergMarquardtOptimizer.java704
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = cos * tan ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 50, #gens: 355, #ops: 1, parent:49] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 50, errors: [LevenbergMarquardtOptimizer.java:710: error: variable sin might not have been initialized
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(25): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = cos * tan ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (49(f=2.0), 50(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (49(f=2.0), )
----------Running generation: 26, population size: 1

***** Generation 26 : 0
**Parent Variant: [Variant id: 51, #gens: 356, #ops: 0, parent:-]

--Child created id: 52
--Creating new operations for variant [Variant id: 52, #gens: 356, #ops: 0, parent:51]
---analyzing modificationPoint position: 52
---modifPoint 0 not mutation generated in  double gNorm = java.lang.Math.sqrt(sum2)
---analyzing modificationPoint position: 4
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java606
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 606, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 52, #gens: 357, #ops: 1, parent:51] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 52, errors: [LevenbergMarquardtOptimizer.java:803: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:803: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:804: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:804: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:805: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:805: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:808: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:808: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:808: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:808: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:809: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:808: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:810: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:810: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:811: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:812: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:812: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:812: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:814: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:817: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:817: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:818: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:819: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:820: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:821: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:823: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:824: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:824: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:825: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:825: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:825: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:825: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:853: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:853: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:853: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:853: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:853: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	        ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	                ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(26): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (51(f=2.0), 52(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (51(f=2.0), )
----------Running generation: 27, population size: 1

***** Generation 27 : 0
**Parent Variant: [Variant id: 53, #gens: 356, #ops: 0, parent:-]

--Child created id: 54
--Creating new operations for variant [Variant id: 54, #gens: 356, #ops: 0, parent:53]
---analyzing modificationPoint position: 174
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java342
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `// we use the vectorial convergence checker` (spoon.support.reflect.code.CtCommentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 342, pointed element: CtCommentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `// we use the vectorial convergence checker` (spoon.support.reflect.code.CtCommentImpl) 

--Summary Creation: for variant [Variant id: 54, #gens: 357, #ops: 1, parent:53] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 54, errors: [LevenbergMarquardtOptimizer.java:494: error: class, interface, or enum expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^, LevenbergMarquardtOptimizer.java:534: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:538: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                ^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                       ^, LevenbergMarquardtOptimizer.java:541: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:543: error: class, interface, or enum expected
				work1[pj] = s;
				^, LevenbergMarquardtOptimizer.java:544: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:545: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:547: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(27): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `// we use the vectorial convergence checker` (spoon.support.reflect.code.CtCommentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (53(f=2.0), 54(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (53(f=2.0), )
----------Running generation: 28, population size: 1

***** Generation 28 : 0
**Parent Variant: [Variant id: 55, #gens: 356, #ops: 0, parent:-]

--Child created id: 56
--Creating new operations for variant [Variant id: 56, #gens: 356, #ops: 0, parent:55]
---analyzing modificationPoint position: 317
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 0 not mutation generated in  for (int i = 0; i < rows; i++) { 	final double[] ji = jacobian[i]; 	final double factor = -java.lang[...]
---analyzing modificationPoint position: 9
---modifPoint 1 not mutation generated in  double tmp = work1[pj]
---analyzing modificationPoint position: 36
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java427
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `boolean firstIteration = true` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 427, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `boolean firstIteration = true` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 56, #gens: 357, #ops: 1, parent:55] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 56, errors: [LevenbergMarquardtOptimizer.java:431: error: variable firstIteration is already defined in method doOptimize()
					} 					boolean firstIteration = true;
					  					        ^]
Ingredient counter is Zero
---Undoing: gnrtn(28): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `boolean firstIteration = true` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (55(f=2.0), 56(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (55(f=2.0), )
----------Running generation: 29, population size: 1

***** Generation 29 : 0
**Parent Variant: [Variant id: 57, #gens: 356, #ops: 0, parent:-]

--Child created id: 58
--Creating new operations for variant [Variant id: 58, #gens: 356, #ops: 0, parent:57]
---analyzing modificationPoint position: 46
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 120
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.orthoTolerance]
--> var from patch: this.orthoTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java399
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 399, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 58, #gens: 357, #ops: 1, parent:57] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 58
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-58/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(29): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (57(f=2.0), 58(f=2.0), )
Selected to next generation: IDs2--> (57(f=2.0), )
----------Running generation: 30, population size: 1

***** Generation 30 : 0
**Parent Variant: [Variant id: 59, #gens: 356, #ops: 0, parent:-]

--Child created id: 60
--Creating new operations for variant [Variant id: 60, #gens: 356, #ops: 0, parent:59]
---analyzing modificationPoint position: 33
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [diagR, cols]
--> var from patch: diagR spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java699
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 699, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 60, #gens: 356, #ops: 1, parent:59] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 60, errors: [LevenbergMarquardtOptimizer.java:701: error: variable sin might not have been initialized
						cos = sin * cotan;
						      ^]
Ingredient counter is Zero
---Undoing: gnrtn(30): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (59(f=2.0), 60(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (59(f=2.0), )
----------Running generation: 31, population size: 1

***** Generation 31 : 0
**Parent Variant: [Variant id: 61, #gens: 356, #ops: 0, parent:-]

--Child created id: 62
--Creating new operations for variant [Variant id: 62, #gens: 356, #ops: 0, parent:61]
---analyzing modificationPoint position: 221
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java452
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (delta <= (2.2204E-16 * xNorm)) { 	throw new org.apache.commons.math.optimization.OptimizationExc[...] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 452, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (delta <= (2.2204E-16 * xNorm)) { 	throw new org.apache.commons.math.optimization.OptimizationExc[...] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 62, #gens: 357, #ops: 1, parent:61] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 62, errors: [LevenbergMarquardtOptimizer.java:822: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:822: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:823: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:823: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:823: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:823: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:823: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:823: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:824: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:824: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:826: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:826: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:826: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:826: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:826: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:826: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:827: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:827: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:827: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:827: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:827: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:827: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:827: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:828: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:829: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:829: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:827: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:829: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:829: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:829: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:829: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:829: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:829: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:830: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:830: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:829: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:830: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:830: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:831: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:831: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:832: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:832: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:832: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:833: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:833: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:834: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:834: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:833: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:834: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:834: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:834: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:834: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:836: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:836: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:837: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:838: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:839: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:840: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:842: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:843: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:844: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:844: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:872: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:872: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:872: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:872: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:872: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:880: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	^, LevenbergMarquardtOptimizer.java:880: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	        ^, LevenbergMarquardtOptimizer.java:880: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                ^, LevenbergMarquardtOptimizer.java:880: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                           ^, LevenbergMarquardtOptimizer.java:880: error: reached end of file while parsing
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                               		                                 			                         			                  			                                 				                                  			                   			                                 				                                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(31): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (delta <= (2.2204E-16 * xNorm)) { 	throw new org.apache.commons.math.optimization.OptimizationExc[...] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (61(f=2.0), 62(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (61(f=2.0), )
----------Running generation: 32, population size: 1

***** Generation 32 : 0
**Parent Variant: [Variant id: 63, #gens: 356, #ops: 0, parent:-]

--Child created id: 64
--Creating new operations for variant [Variant id: 64, #gens: 356, #ops: 0, parent:63]
---analyzing modificationPoint position: 71
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java594
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousFP = fp ` -topatch--> `// compute the scaled actual reduction double actRed = -1.0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 594, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousFP = fp ` -topatch--> `// compute the scaled actual reduction double actRed = -1.0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 64, #gens: 357, #ops: 1, parent:63] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 64
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-64/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(32): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousFP = fp ` -topatch--> `// compute the scaled actual reduction double actRed = -1.0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (63(f=2.0), 64(f=2.0), )
Selected to next generation: IDs2--> (63(f=2.0), )
----------Running generation: 33, population size: 1

***** Generation 33 : 0
**Parent Variant: [Variant id: 65, #gens: 356, #ops: 0, parent:-]

--Child created id: 66
--Creating new operations for variant [Variant id: 66, #gens: 356, #ops: 0, parent:65]
---analyzing modificationPoint position: 165
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (maxCosine <= orthoTolerance) { 	// convergence has been reached 	return current; }
---analyzing modificationPoint position: 245
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 1 not mutation generated in  gamma *= beta[pk]
---analyzing modificationPoint position: 307
location: LevenbergMarquardtOptimizer.java201
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.costRelativeTolerance = costRelativeTolerance ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 66, #gens: 355, #ops: 1, parent:65] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 66
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-66/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(33): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.costRelativeTolerance = costRelativeTolerance ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (65(f=2.0), 66(f=4.0), )
Selected to next generation: IDs2--> (65(f=2.0), )
----------Running generation: 34, population size: 1

***** Generation 34 : 0
**Parent Variant: [Variant id: 67, #gens: 356, #ops: 0, parent:-]

--Child created id: 68
--Creating new operations for variant [Variant id: 68, #gens: 356, #ops: 0, parent:67]
---analyzing modificationPoint position: 83
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, work1, sPar, diag]
---modifPoint 0 not mutation generated in  double dpj = diag[pj]
---analyzing modificationPoint position: 319
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [maxEvaluations]
--> var from patch: maxEvaluations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java192
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double factor = -java.lang.Math.sqrt(residualsWeights[i]) ` -topatch--> `return maxEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 192, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double factor = -java.lang.Math.sqrt(residualsWeights[i]) ` -topatch--> `return maxEvaluations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 68, #gens: 357, #ops: 1, parent:67] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 68, errors: [AbstractLeastSquaresOptimizer.java:192: error: incompatible types: unexpected return value
			final double[] ji = jacobian[i]; 			return maxEvaluations;
			                                 			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(34): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double factor = -java.lang.Math.sqrt(residualsWeights[i]) ` -topatch--> `return maxEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (67(f=2.0), 68(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (67(f=2.0), )
----------Running generation: 35, population size: 1

***** Generation 35 : 0
**Parent Variant: [Variant id: 69, #gens: 356, #ops: 0, parent:-]

--Child created id: 70
--Creating new operations for variant [Variant id: 70, #gens: 356, #ops: 0, parent:69]
---analyzing modificationPoint position: 2
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  paru = java.lang.Math.min(paru, lmPar)
---analyzing modificationPoint position: 3
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  // compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...]
---analyzing modificationPoint position: 8
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  work1[pj] /= work2[j]
---analyzing modificationPoint position: 131
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cost, previousCost, actRed, r]
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: previousCost spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: actRed spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: r spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java436
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  (preRed <= costRelativeTolerance)) &[...] ` -topatch--> `if ((0.1 * cost) < previousCost) { 	double r = cost / previousCost; 	actRed = 1.0 - (r * r); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 436, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  (preRed <= costRelativeTolerance)) &[...] ` -topatch--> `if ((0.1 * cost) < previousCost) { 	double r = cost / previousCost; 	actRed = 1.0 - (r * r); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 70, #gens: 357, #ops: 1, parent:69] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 70
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-70/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(35): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  (preRed <= costRelativeTolerance)) &[...] ` -topatch--> `if ((0.1 * cost) < previousCost) { 	double r = cost / previousCost; 	actRed = 1.0 - (r * r); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (69(f=2.0), 70(f=3.0), )
Selected to next generation: IDs2--> (69(f=2.0), )
----------Running generation: 36, population size: 1

***** Generation 36 : 0
**Parent Variant: [Variant id: 71, #gens: 356, #ops: 0, parent:-]

--Child created id: 72
--Creating new operations for variant [Variant id: 72, #gens: 356, #ops: 0, parent:71]
---analyzing modificationPoint position: 234
---modifPoint 0 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 131
Templates availables34
Attempts Base Ingredients  1 total 34
vars from patch [checker, previous, current]
--> var from patch: checker spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: previous spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: current spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java436
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  (preRed <= costRelativeTolerance)) &[...] ` -topatch--> `if (checker.converged(getIterations(), previous, current)) { 	return current; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 436, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  (preRed <= costRelativeTolerance)) &[...] ` -topatch--> `if (checker.converged(getIterations(), previous, current)) { 	return current; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 72, #gens: 356, #ops: 1, parent:71] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 72
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-72/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(36): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  (preRed <= costRelativeTolerance)) &[...] ` -topatch--> `if (checker.converged(getIterations(), previous, current)) { 	return current; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (71(f=2.0), 72(f=18.0), )
Selected to next generation: IDs2--> (71(f=2.0), )
----------Running generation: 37, population size: 1

***** Generation 37 : 0
**Parent Variant: [Variant id: 73, #gens: 356, #ops: 0, parent:-]

--Child created id: 74
--Creating new operations for variant [Variant id: 74, #gens: 356, #ops: 0, parent:73]
---analyzing modificationPoint position: 129
location: LevenbergMarquardtOptimizer.java849
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `rank = solvedCols ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 74, #gens: 355, #ops: 1, parent:73] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 74
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-74/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 18] ,[]
-Valid?: |false|16|18|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(37): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `rank = solvedCols ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (73(f=2.0), 74(f=16.0), )
Selected to next generation: IDs2--> (73(f=2.0), )
----------Running generation: 38, population size: 1

***** Generation 38 : 0
**Parent Variant: [Variant id: 75, #gens: 356, #ops: 0, parent:-]

--Child created id: 76
--Creating new operations for variant [Variant id: 76, #gens: 356, #ops: 0, parent:75]
---analyzing modificationPoint position: 270
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  permutation[k] = k
---analyzing modificationPoint position: 9
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double tmp = work1[pj]
---analyzing modificationPoint position: 179
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java351
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double sPar = java.lang.Math.sqrt(lmPar)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 351, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double sPar = java.lang.Math.sqrt(lmPar)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 76, #gens: 357, #ops: 1, parent:75] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 76, errors: [LevenbergMarquardtOptimizer.java:612: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:612: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:612: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:612: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:612: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:612: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:612: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:612: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:612: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:612: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:612: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:612: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:612: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:612: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:612: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:612: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(38): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double sPar = java.lang.Math.sqrt(lmPar)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (75(f=2.0), 76(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (75(f=2.0), )
----------Running generation: 39, population size: 1

***** Generation 39 : 0
**Parent Variant: [Variant id: 77, #gens: 356, #ops: 0, parent:-]

--Child created id: 78
--Creating new operations for variant [Variant id: 78, #gens: 356, #ops: 0, parent:77]
---analyzing modificationPoint position: 85
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java679
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `setParRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 679, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `setParRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 78, #gens: 356, #ops: 1, parent:77] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 78
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-78/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(39): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `setParRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (77(f=2.0), 78(f=13.0), )
Selected to next generation: IDs2--> (77(f=2.0), )
----------Running generation: 40, population size: 1

***** Generation 40 : 0
**Parent Variant: [Variant id: 79, #gens: 356, #ops: 0, parent:-]

--Child created id: 80
--Creating new operations for variant [Variant id: 80, #gens: 356, #ops: 0, parent:79]
---analyzing modificationPoint position: 6
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]
---analyzing modificationPoint position: 252
location: LevenbergMarquardtOptimizer.java249
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation = new int[cols] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 80, #gens: 355, #ops: 1, parent:79] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 80
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-80/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(40): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation = new int[cols] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (79(f=2.0), 80(f=18.0), )
Selected to next generation: IDs2--> (79(f=2.0), )
----------Running generation: 41, population size: 1

***** Generation 41 : 0
**Parent Variant: [Variant id: 81, #gens: 356, #ops: 0, parent:-]

--Child created id: 82
--Creating new operations for variant [Variant id: 82, #gens: 356, #ops: 0, parent:81]
---analyzing modificationPoint position: 147
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int k = 0; k < cols; ++k) { 	double dk = jacNorm[k]; 	if (dk == 0) { 		dk = 1.0; 	} 	double xk [...]
---analyzing modificationPoint position: 348
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [this.absoluteThreshold]
--> var from patch: this.absoluteThreshold spoon.support.reflect.code.CtFieldWriteImpl
location: SimpleVectorialValueChecker.java51
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...] ` -topatch--> `this.absoluteThreshold = absoluteThreshold` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.SimpleVectorialValueChecker line: 51, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...] ` -topatch--> `this.absoluteThreshold = absoluteThreshold` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 82, #gens: 356, #ops: 1, parent:81] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 82, errors: [SimpleVectorialValueChecker.java:68: error: variable absoluteThreshold might not have been initialized
		this.absoluteThreshold = absoluteThreshold; 		this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_ABSOLUTE_THRESHOLD;} 	/**
		                         ^, SimpleVectorialValueChecker.java:68: error: variable absoluteThreshold might already have been assigned
		this.absoluteThreshold = absoluteThreshold; 		this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_ABSOLUTE_THRESHOLD;} 	/**
		                                            		    ^, SimpleVectorialValueChecker.java:68: error: variable relativeThreshold might not have been initialized
		this.absoluteThreshold = absoluteThreshold; 		this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_ABSOLUTE_THRESHOLD;} 	/**
		                                            		                                                                                                                     ^]
Ingredient counter is Zero
---Undoing: gnrtn(41): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...] ` -topatch--> `this.absoluteThreshold = absoluteThreshold` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (81(f=2.0), 82(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (81(f=2.0), )
----------Running generation: 42, population size: 1

***** Generation 42 : 0
**Parent Variant: [Variant id: 83, #gens: 356, #ops: 0, parent:-]

--Child created id: 84
--Creating new operations for variant [Variant id: 84, #gens: 356, #ops: 0, parent:83]
---analyzing modificationPoint position: 265
---modifPoint 0 not mutation generated in  org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]
---analyzing modificationPoint position: 188
location: LevenbergMarquardtOptimizer.java365
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 84, #gens: 355, #ops: 1, parent:83] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 84
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-84/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 18] ,[]
-Valid?: |false|16|18|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(42): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (83(f=2.0), 84(f=16.0), )
Selected to next generation: IDs2--> (83(f=2.0), )
----------Running generation: 43, population size: 1

***** Generation 43 : 0
**Parent Variant: [Variant id: 85, #gens: 356, #ops: 0, parent:-]

--Child created id: 86
--Creating new operations for variant [Variant id: 86, #gens: 356, #ops: 0, parent:85]
---analyzing modificationPoint position: 230
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  lmDir[pk] = ypk
---analyzing modificationPoint position: 148
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double dk = jacNorm[k]
---analyzing modificationPoint position: 291
location: LevenbergMarquardtOptimizer.java823
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[k] = pk ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 86, #gens: 355, #ops: 1, parent:85] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 86
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-86/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(43): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[k] = pk ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (85(f=2.0), 86(f=18.0), )
Selected to next generation: IDs2--> (85(f=2.0), )
----------Running generation: 44, population size: 1

***** Generation 44 : 0
**Parent Variant: [Variant id: 87, #gens: 356, #ops: 0, parent:-]

--Child created id: 88
--Creating new operations for variant [Variant id: 88, #gens: 356, #ops: 0, parent:87]
---analyzing modificationPoint position: 21
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  work1[pj] *= diag[pj] / dxNorm
---analyzing modificationPoint position: 92
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...]
---analyzing modificationPoint position: 102
---modifPoint 2 not mutation generated in  final double temp2 = (cos * rik) + (sin * lmDiag[i])
---analyzing modificationPoint position: 231
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  // evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]
---analyzing modificationPoint position: 69
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [fp]
--> var from patch: fp spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java591
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `dxNorm += s * s ` -topatch--> `double previousFP = fp` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 591, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `dxNorm += s * s ` -topatch--> `double previousFP = fp` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 88, #gens: 357, #ops: 1, parent:87] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 88
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-88/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(44): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `dxNorm += s * s ` -topatch--> `double previousFP = fp` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (87(f=2.0), 88(f=2.0), )
Selected to next generation: IDs2--> (87(f=2.0), )
----------Running generation: 45, population size: 1

***** Generation 45 : 0
**Parent Variant: [Variant id: 89, #gens: 356, #ops: 0, parent:-]

--Child created id: 90
--Creating new operations for variant [Variant id: 90, #gens: 356, #ops: 0, parent:89]
---analyzing modificationPoint position: 103
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i])
---analyzing modificationPoint position: 189
---modifPoint 1 not mutation generated in  // compute the scaled actual reduction double actRed = -1.0
---analyzing modificationPoint position: 76
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 74
location: LevenbergMarquardtOptimizer.java601
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 90, #gens: 355, #ops: 1, parent:89] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 90
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-90/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(45): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (89(f=2.0), 90(f=7.0), )
Selected to next generation: IDs2--> (89(f=2.0), )
----------Running generation: 46, population size: 1

***** Generation 46 : 0
**Parent Variant: [Variant id: 91, #gens: 356, #ops: 0, parent:-]

--Child created id: 92
--Creating new operations for variant [Variant id: 92, #gens: 356, #ops: 0, parent:91]
---analyzing modificationPoint position: 2
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java628
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `paru = java.lang.Math.min(paru, lmPar) ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 628, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `paru = java.lang.Math.min(paru, lmPar) ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 92, #gens: 357, #ops: 1, parent:91] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 92
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-92/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(46): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `paru = java.lang.Math.min(paru, lmPar) ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (91(f=2.0), 92(f=3.0), )
Selected to next generation: IDs2--> (91(f=2.0), )
----------Running generation: 47, population size: 1

***** Generation 47 : 0
**Parent Variant: [Variant id: 93, #gens: 356, #ops: 0, parent:-]

--Child created id: 94
--Creating new operations for variant [Variant id: 94, #gens: 356, #ops: 0, parent:93]
---analyzing modificationPoint position: 161
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [jacNorm, pj]
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java314
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double s = jacNorm[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 314, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double s = jacNorm[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 94, #gens: 356, #ops: 1, parent:93] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 94, errors: [LevenbergMarquardtOptimizer.java:314: error: variable s is already defined in method doOptimize()
					if (s != 0) { 						double s = jacNorm[pj];
					              						       ^, LevenbergMarquardtOptimizer.java:317: error: cannot find symbol
							sum += jacobian[i][pj] * residuals[i];
							^
  symbol:   variable sum
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:319: error: cannot find symbol
						maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost));
						                                                             ^
  symbol:   variable sum
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(47): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double s = jacNorm[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (93(f=2.0), 94(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (93(f=2.0), )
----------Running generation: 48, population size: 1

***** Generation 48 : 0
**Parent Variant: [Variant id: 95, #gens: 356, #ops: 0, parent:-]

--Child created id: 96
--Creating new operations for variant [Variant id: 96, #gens: 356, #ops: 0, parent:95]
---analyzing modificationPoint position: 316
location: AbstractLeastSquaresOptimizer.java186
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (jacobian.length != rows) { 	throw new org.apache.commons.math.FunctionEvaluationException(point,[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 96, #gens: 355, #ops: 1, parent:95] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 96
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-96/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(48): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (jacobian.length != rows) { 	throw new org.apache.commons.math.FunctionEvaluationException(point,[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (95(f=2.0), 96(f=2.0), )
Selected to next generation: IDs2--> (95(f=2.0), )
----------Running generation: 49, population size: 1

***** Generation 49 : 0
**Parent Variant: [Variant id: 97, #gens: 356, #ops: 0, parent:-]

--Child created id: 98
--Creating new operations for variant [Variant id: 98, #gens: 356, #ops: 0, parent:97]
---analyzing modificationPoint position: 204
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2
---analyzing modificationPoint position: 340
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 1 not mutation generated in  targetValues = target.clone()
---analyzing modificationPoint position: 183
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 2 not mutation generated in  lmNorm += s * s
---analyzing modificationPoint position: 21
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  work1[pj] *= diag[pj] / dxNorm
---analyzing modificationPoint position: 156
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...]
---analyzing modificationPoint position: 237
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 5 not mutation generated in  dxNorm = java.lang.Math.sqrt(dxNorm)
---analyzing modificationPoint position: 103
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i])
---analyzing modificationPoint position: 109
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 7 not mutation generated in  if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 	nSing = j; }
---analyzing modificationPoint position: 108
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 8 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...]
---analyzing modificationPoint position: 66
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 9 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 8
location: LevenbergMarquardtOptimizer.java611
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] /= work2[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 98, #gens: 355, #ops: 1, parent:97] gen mutated: 1 , gen not mut: 10, gen not applied  0
-The child compiles: id 98
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-98/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(49): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] /= work2[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (97(f=2.0), 98(f=8.0), )
Selected to next generation: IDs2--> (97(f=2.0), )
----------Running generation: 50, population size: 1

***** Generation 50 : 0
**Parent Variant: [Variant id: 99, #gens: 356, #ops: 0, parent:-]

--Child created id: 100
--Creating new operations for variant [Variant id: 100, #gens: 356, #ops: 0, parent:99]
---analyzing modificationPoint position: 112
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...]
---analyzing modificationPoint position: 202
---modifPoint 1 not mutation generated in  double pc2 = previousCost * previousCost
---analyzing modificationPoint position: 258
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 2 not mutation generated in  double[] oldRes = new double[rows]
---analyzing modificationPoint position: 87
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  // the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]
---analyzing modificationPoint position: 26
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; }
---analyzing modificationPoint position: 4
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 320
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 6 not mutation generated in  for (int j = 0; j < cols; ++j) { 	ji[j] *= factor; }
---analyzing modificationPoint position: 88
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 7 not mutation generated in  for (int k = j; k < solvedCols; ++k) { 	int pk = permutation[k];  	// determine a Givens rotation wh[...]
---analyzing modificationPoint position: 111
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 8 not mutation generated in  if (nSing > 0) { 	for (int j = nSing - 1; j >= 0; --j) { 		int pj = permutation[j]; 		double sum = 0[...]
---analyzing modificationPoint position: 220
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java449
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)[...] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 449, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)[...] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 100, #gens: 357, #ops: 1, parent:99] gen mutated: 1 , gen not mut: 9, gen not applied  0
-The child compiles: id 100
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-100/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(50): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)[...] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (99(f=2.0), 100(f=2.0), )
Selected to next generation: IDs2--> (99(f=2.0), )
----------Running generation: 51, population size: 1

***** Generation 51 : 0
**Parent Variant: [Variant id: 101, #gens: 356, #ops: 0, parent:-]

--Child created id: 102
--Creating new operations for variant [Variant id: 102, #gens: 356, #ops: 0, parent:101]
---analyzing modificationPoint position: 15
location: LevenbergMarquardtOptimizer.java620
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 102, #gens: 355, #ops: 1, parent:101] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 102, errors: [LevenbergMarquardtOptimizer.java:620: error: variable declaration not allowed here
				double s = work1[permutation[j]];
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(51): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (101(f=2.0), 102(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (101(f=2.0), )
----------Running generation: 52, population size: 1

***** Generation 52 : 0
**Parent Variant: [Variant id: 103, #gens: 356, #ops: 0, parent:-]

--Child created id: 104
--Creating new operations for variant [Variant id: 104, #gens: 356, #ops: 0, parent:103]
---analyzing modificationPoint position: 7
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 16
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double correction = fp / (delta * sum2)
---analyzing modificationPoint position: 324
location: AbstractLeastSquaresOptimizer.java213
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (objective.length != rows) { 	throw new org.apache.commons.math.FunctionEvaluationException(point[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 104, #gens: 355, #ops: 1, parent:103] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 104
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-104/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(52): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (objective.length != rows) { 	throw new org.apache.commons.math.FunctionEvaluationException(point[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (103(f=2.0), 104(f=2.0), )
Selected to next generation: IDs2--> (103(f=2.0), )
----------Running generation: 53, population size: 1

***** Generation 53 : 0
**Parent Variant: [Variant id: 105, #gens: 356, #ops: 0, parent:-]

--Child created id: 106
--Creating new operations for variant [Variant id: 106, #gens: 356, #ops: 0, parent:105]
---analyzing modificationPoint position: 314
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [checker]
--> var from patch: checker spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java184
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++jacobianEvaluations ` -topatch--> `return checker` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 184, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++jacobianEvaluations ` -topatch--> `return checker` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 106, #gens: 357, #ops: 1, parent:105] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 106, errors: [AbstractLeastSquaresOptimizer.java:185: error: incompatible types: unexpected return value
	 */ 	protected void updateJacobian() throws org.apache.commons.math.FunctionEvaluationException { 		return checker; 		++jacobianEvaluations;
	    	                                                                                             		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(53): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++jacobianEvaluations ` -topatch--> `return checker` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (105(f=2.0), 106(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (105(f=2.0), )
----------Running generation: 54, population size: 1

***** Generation 54 : 0
**Parent Variant: [Variant id: 107, #gens: 356, #ops: 0, parent:-]

--Child created id: 108
--Creating new operations for variant [Variant id: 108, #gens: 356, #ops: 0, parent:107]
---analyzing modificationPoint position: 203
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  coeff1 = coeff1 / pc2
---analyzing modificationPoint position: 7
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 191
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, solvedCols, permutation, point, pj, oldX]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: oldX spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java370
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double r = cost / previousCost ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; }` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 370, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double r = cost / previousCost ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; }` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 108, #gens: 357, #ops: 1, parent:107] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 108
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-108/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(54): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double r = cost / previousCost ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; }` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (107(f=2.0), 108(f=18.0), )
Selected to next generation: IDs2--> (107(f=2.0), )
----------Running generation: 55, population size: 1

***** Generation 55 : 0
**Parent Variant: [Variant id: 109, #gens: 356, #ops: 0, parent:-]

--Child created id: 110
--Creating new operations for variant [Variant id: 110, #gens: 356, #ops: 0, parent:109]
---analyzing modificationPoint position: 152
location: LevenbergMarquardtOptimizer.java298
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `diag[k] = dk ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 110, #gens: 355, #ops: 1, parent:109] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 110
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-110/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(55): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `diag[k] = dk ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (109(f=2.0), 110(f=3.0), )
Selected to next generation: IDs2--> (109(f=2.0), )
----------Running generation: 56, population size: 1

***** Generation 56 : 0
**Parent Variant: [Variant id: 111, #gens: 356, #ops: 0, parent:-]

--Child created id: 112
--Creating new operations for variant [Variant id: 112, #gens: 356, #ops: 0, parent:111]
---analyzing modificationPoint position: 53
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmDir, cols]
--> var from patch: lmDir spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java560
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double paru = gNorm / delta ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 560, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double paru = gNorm / delta ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 112, #gens: 357, #ops: 1, parent:111] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 112
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-112/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(56): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double paru = gNorm / delta ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (111(f=2.0), 112(f=2.0), )
Selected to next generation: IDs2--> (111(f=2.0), )
----------Running generation: 57, population size: 1

***** Generation 57 : 0
**Parent Variant: [Variant id: 113, #gens: 356, #ops: 0, parent:-]

--Child created id: 114
--Creating new operations for variant [Variant id: 114, #gens: 356, #ops: 0, parent:113]
---analyzing modificationPoint position: 80
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  work[j] = qy[j]
---analyzing modificationPoint position: 122
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm)
---analyzing modificationPoint position: 76
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 63
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java584
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 584, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 114, #gens: 356, #ops: 1, parent:113] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 114
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-114/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(57): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (113(f=2.0), 114(f=15.0), )
Selected to next generation: IDs2--> (113(f=2.0), )
----------Running generation: 58, population size: 1

***** Generation 58 : 0
**Parent Variant: [Variant id: 115, #gens: 356, #ops: 0, parent:-]

--Child created id: 116
--Creating new operations for variant [Variant id: 116, #gens: 356, #ops: 0, parent:115]
---analyzing modificationPoint position: 43
location: LevenbergMarquardtOptimizer.java529
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 116, #gens: 355, #ops: 1, parent:115] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 116
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-116/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(58): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (115(f=2.0), 116(f=7.0), )
Selected to next generation: IDs2--> (115(f=2.0), )
----------Running generation: 59, population size: 1

***** Generation 59 : 0
**Parent Variant: [Variant id: 117, #gens: 356, #ops: 0, parent:-]

--Child created id: 118
--Creating new operations for variant [Variant id: 118, #gens: 356, #ops: 0, parent:117]
---analyzing modificationPoint position: 80
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java668
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 668, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 118, #gens: 357, #ops: 1, parent:117] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 118
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-118/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(59): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (117(f=2.0), 118(f=5.0), )
Selected to next generation: IDs2--> (117(f=2.0), )
----------Running generation: 60, population size: 1

***** Generation 60 : 0
**Parent Variant: [Variant id: 119, #gens: 356, #ops: 0, parent:-]

--Child created id: 120
--Creating new operations for variant [Variant id: 120, #gens: 356, #ops: 0, parent:119]
---analyzing modificationPoint position: 307
location: LevenbergMarquardtOptimizer.java201
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.costRelativeTolerance = costRelativeTolerance ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 120, #gens: 355, #ops: 1, parent:119] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 120
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-120/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(60): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.costRelativeTolerance = costRelativeTolerance ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (119(f=2.0), 120(f=4.0), )
Selected to next generation: IDs2--> (119(f=2.0), )
----------Running generation: 61, population size: 1

***** Generation 61 : 0
**Parent Variant: [Variant id: 121, #gens: 356, #ops: 0, parent:-]

--Child created id: 122
--Creating new operations for variant [Variant id: 122, #gens: 356, #ops: 0, parent:121]
---analyzing modificationPoint position: 3
location: LevenbergMarquardtOptimizer.java605
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 122, #gens: 355, #ops: 1, parent:121] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 122
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-122/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(61): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (121(f=2.0), 122(f=9.0), )
Selected to next generation: IDs2--> (121(f=2.0), )
----------Running generation: 62, population size: 1

***** Generation 62 : 0
**Parent Variant: [Variant id: 123, #gens: 356, #ops: 0, parent:-]

--Child created id: 124
--Creating new operations for variant [Variant id: 124, #gens: 356, #ops: 0, parent:123]
---analyzing modificationPoint position: 199
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  double coeff1 = 0
---analyzing modificationPoint position: 188
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)
---analyzing modificationPoint position: 2
location: LevenbergMarquardtOptimizer.java628
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `paru = java.lang.Math.min(paru, lmPar) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 124, #gens: 355, #ops: 1, parent:123] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 124
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-124/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(62): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `paru = java.lang.Math.min(paru, lmPar) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (123(f=2.0), 124(f=2.0), )
Selected to next generation: IDs2--> (123(f=2.0), )
----------Running generation: 63, population size: 1

***** Generation 63 : 0
**Parent Variant: [Variant id: 125, #gens: 356, #ops: 0, parent:-]

--Child created id: 126
--Creating new operations for variant [Variant id: 126, #gens: 356, #ops: 0, parent:125]
---analyzing modificationPoint position: 189
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // compute the scaled actual reduction double actRed = -1.0
---analyzing modificationPoint position: 37
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.util.MathUtils.SAFE_MIN]
--> var from patch: org.apache.commons.math.util.MathUtils.SAFE_MIN spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java428
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 428, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 126, #gens: 357, #ops: 1, parent:125] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 126
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-126/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(63): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (125(f=2.0), 126(f=2.0), )
Selected to next generation: IDs2--> (125(f=2.0), )
----------Running generation: 64, population size: 1

***** Generation 64 : 0
**Parent Variant: [Variant id: 127, #gens: 356, #ops: 0, parent:-]

--Child created id: 128
--Creating new operations for variant [Variant id: 128, #gens: 356, #ops: 0, parent:127]
---analyzing modificationPoint position: 8
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  work1[pj] /= work2[j]
---analyzing modificationPoint position: 92
location: LevenbergMarquardtOptimizer.java697
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 128, #gens: 355, #ops: 1, parent:127] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 128, errors: [LevenbergMarquardtOptimizer.java:710: error: variable cos might not have been initialized
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                   ^, LevenbergMarquardtOptimizer.java:710: error: variable sin might not have been initialized
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(64): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (127(f=2.0), 128(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (127(f=2.0), )
----------Running generation: 65, population size: 1

***** Generation 65 : 0
**Parent Variant: [Variant id: 129, #gens: 356, #ops: 0, parent:-]

--Child created id: 130
--Creating new operations for variant [Variant id: 130, #gens: 356, #ops: 0, parent:129]
---analyzing modificationPoint position: 157
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]
---analyzing modificationPoint position: 75
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...]
---analyzing modificationPoint position: 90
location: LevenbergMarquardtOptimizer.java692
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 130, #gens: 355, #ops: 1, parent:129] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 130, errors: [LevenbergMarquardtOptimizer.java:689: error: variable declaration not allowed here
				int pk = permutation[k];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(65): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (129(f=2.0), 130(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (129(f=2.0), )
----------Running generation: 66, population size: 1

***** Generation 66 : 0
**Parent Variant: [Variant id: 131, #gens: 356, #ops: 0, parent:-]

--Child created id: 132
--Creating new operations for variant [Variant id: 132, #gens: 356, #ops: 0, parent:131]
---analyzing modificationPoint position: 63
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java584
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 584, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 132, #gens: 357, #ops: 1, parent:131] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 132
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-132/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(66): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (131(f=2.0), 132(f=2.0), )
Selected to next generation: IDs2--> (131(f=2.0), )
----------Running generation: 67, population size: 1

***** Generation 67 : 0
**Parent Variant: [Variant id: 133, #gens: 356, #ops: 0, parent:-]

--Child created id: 134
--Creating new operations for variant [Variant id: 134, #gens: 356, #ops: 0, parent:133]
---analyzing modificationPoint position: 178
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java350
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	lmDir[pj] = -lmDir[pj]; 	point[pj][...] ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 350, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	lmDir[pj] = -lmDir[pj]; 	point[pj][...] ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 134, #gens: 357, #ops: 1, parent:133] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 134
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-134/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(67): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	lmDir[pj] = -lmDir[pj]; 	point[pj][...] ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (133(f=2.0), 134(f=3.0), )
Selected to next generation: IDs2--> (133(f=2.0), )
----------Running generation: 68, population size: 1

***** Generation 68 : 0
**Parent Variant: [Variant id: 135, #gens: 356, #ops: 0, parent:-]

--Child created id: 136
--Creating new operations for variant [Variant id: 136, #gens: 356, #ops: 0, parent:135]
---analyzing modificationPoint position: 76
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.costRelativeTolerance]
--> var from patch: this.costRelativeTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java663
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 663, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 136, #gens: 357, #ops: 1, parent:135] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 136
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-136/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(68): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (135(f=2.0), 136(f=2.0), )
Selected to next generation: IDs2--> (135(f=2.0), )
----------Running generation: 69, population size: 1

***** Generation 69 : 0
**Parent Variant: [Variant id: 137, #gens: 356, #ops: 0, parent:-]

--Child created id: 138
--Creating new operations for variant [Variant id: 138, #gens: 356, #ops: 0, parent:137]
---analyzing modificationPoint position: 42
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java528
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 528, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 138, #gens: 356, #ops: 1, parent:137] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 138, errors: [LevenbergMarquardtOptimizer.java:794: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:794: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:795: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:795: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:796: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:796: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:799: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:800: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:799: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:801: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:801: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:801: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:801: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:802: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:802: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:801: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:802: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:802: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:803: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:803: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:804: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:804: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:805: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:805: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:805: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:809: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:809: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:809: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:810: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:811: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:812: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:815: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:816: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:816: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:816: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:816: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(69): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (137(f=2.0), 138(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (137(f=2.0), )
----------Running generation: 70, population size: 1

***** Generation 70 : 0
**Parent Variant: [Variant id: 139, #gens: 356, #ops: 0, parent:-]

--Child created id: 140
--Creating new operations for variant [Variant id: 140, #gens: 356, #ops: 0, parent:139]
---analyzing modificationPoint position: 45
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]
---analyzing modificationPoint position: 80
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java668
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 668, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 140, #gens: 357, #ops: 1, parent:139] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 140
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-140/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(70): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (139(f=2.0), 140(f=2.0), )
Selected to next generation: IDs2--> (139(f=2.0), )
----------Running generation: 71, population size: 1

***** Generation 71 : 0
**Parent Variant: [Variant id: 141, #gens: 356, #ops: 0, parent:-]

--Child created id: 142
--Creating new operations for variant [Variant id: 142, #gens: 356, #ops: 0, parent:141]
---analyzing modificationPoint position: 198
location: LevenbergMarquardtOptimizer.java381
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[i] += jacobian[i][pj] * dirJ ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 142, #gens: 355, #ops: 1, parent:141] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 142
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-142/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(71): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[i] += jacobian[i][pj] * dirJ ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (141(f=2.0), 142(f=8.0), )
Selected to next generation: IDs2--> (141(f=2.0), )
----------Running generation: 72, population size: 1

***** Generation 72 : 0
**Parent Variant: [Variant id: 143, #gens: 356, #ops: 0, parent:-]

--Child created id: 144
--Creating new operations for variant [Variant id: 144, #gens: 356, #ops: 0, parent:143]
---analyzing modificationPoint position: 153
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 300, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 144, #gens: 357, #ops: 1, parent:143] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 144, errors: [LevenbergMarquardtOptimizer.java:300: error: variable work3 is already defined in method doOptimize()
				} 				double[] work3 = new double[cols];
				  				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(72): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (143(f=2.0), 144(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (143(f=2.0), )
----------Running generation: 73, population size: 1

***** Generation 73 : 0
**Parent Variant: [Variant id: 145, #gens: 356, #ops: 0, parent:-]

--Child created id: 146
--Creating new operations for variant [Variant id: 146, #gens: 356, #ops: 0, parent:145]
---analyzing modificationPoint position: 126
---modifPoint 0 not mutation generated in  return java.lang.Math.sqrt(getChiSquare() / rows)
---analyzing modificationPoint position: 273
---modifPoint 1 not mutation generated in  double akk = jacobian[i][k]
---analyzing modificationPoint position: 71
---modifPoint 2 not mutation generated in  double previousFP = fp
---analyzing modificationPoint position: 317
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 3 not mutation generated in  for (int i = 0; i < rows; i++) { 	final double[] ji = jacobian[i]; 	final double factor = -java.lang[...]
---analyzing modificationPoint position: 300
location: LevenbergMarquardtOptimizer.java172
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// default values for the tuning parameters setConvergenceChecker(null) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 146, #gens: 355, #ops: 1, parent:145] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 146
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-146/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(73): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// default values for the tuning parameters setConvergenceChecker(null) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (145(f=2.0), 146(f=15.0), )
Selected to next generation: IDs2--> (145(f=2.0), )
----------Running generation: 74, population size: 1

***** Generation 74 : 0
**Parent Variant: [Variant id: 147, #gens: 356, #ops: 0, parent:-]

--Child created id: 148
--Creating new operations for variant [Variant id: 148, #gens: 356, #ops: 0, parent:147]
---analyzing modificationPoint position: 97
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  final double temp = (cos * work[k]) + (sin * qtbpj)
---analyzing modificationPoint position: 219
location: LevenbergMarquardtOptimizer.java435
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (checker == null) { 	if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  	(preRed <= [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 148, #gens: 355, #ops: 1, parent:147] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 148
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-148/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 18] ,[]
-Valid?: |false|16|18|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(74): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (checker == null) { 	if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  	(preRed <= [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (147(f=2.0), 148(f=16.0), )
Selected to next generation: IDs2--> (147(f=2.0), )
----------Running generation: 75, population size: 1

***** Generation 75 : 0
**Parent Variant: [Variant id: 149, #gens: 356, #ops: 0, parent:-]

--Child created id: 150
--Creating new operations for variant [Variant id: 150, #gens: 356, #ops: 0, parent:149]
---analyzing modificationPoint position: 240
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int k = 0; k < cols; ++k) { 	int pk = permutation[k]; 	double gamma = 0; 	for (int i = k; i < r[...]
---analyzing modificationPoint position: 86
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmDiag[j] = dpj
---analyzing modificationPoint position: 94
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan))
---analyzing modificationPoint position: 12
location: LevenbergMarquardtOptimizer.java617
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 150, #gens: 355, #ops: 1, parent:149] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 150
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-150/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(75): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (149(f=2.0), 150(f=7.0), )
Selected to next generation: IDs2--> (149(f=2.0), )
----------Running generation: 76, population size: 1

***** Generation 76 : 0
**Parent Variant: [Variant id: 151, #gens: 356, #ops: 0, parent:-]

--Child created id: 152
--Creating new operations for variant [Variant id: 152, #gens: 356, #ops: 0, parent:151]
---analyzing modificationPoint position: 313
location: VectorialPointValuePair.java48
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = (value == null) ? null : value.clone() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 152, #gens: 355, #ops: 1, parent:151] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 152, errors: [VectorialPointValuePair.java:50: error: variable value might not have been initialized
	 */ 	public VectorialPointValuePair(final double[] point, final double[] value) { 		this.point = (point == null) ? null : point.clone();}
	    	                                                                             		                                                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(76): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = (value == null) ? null : value.clone() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (151(f=2.0), 152(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (151(f=2.0), )
----------Running generation: 77, population size: 1

***** Generation 77 : 0
**Parent Variant: [Variant id: 153, #gens: 356, #ops: 0, parent:-]

--Child created id: 154
--Creating new operations for variant [Variant id: 154, #gens: 356, #ops: 0, parent:153]
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java537
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 537, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 154, #gens: 357, #ops: 1, parent:153] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 154
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-154/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(77): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (153(f=2.0), 154(f=3.0), )
Selected to next generation: IDs2--> (153(f=2.0), )
----------Running generation: 78, population size: 1

***** Generation 78 : 0
**Parent Variant: [Variant id: 155, #gens: 356, #ops: 0, parent:-]

--Child created id: 156
--Creating new operations for variant [Variant id: 156, #gens: 356, #ops: 0, parent:155]
---analyzing modificationPoint position: 257
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double[] oldX = new double[cols]
---analyzing modificationPoint position: 35
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // failed iteration, reset the previous values cost = previousCost
---analyzing modificationPoint position: 50
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  sum /= diag[pj]
---analyzing modificationPoint position: 234
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 19
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] *= diag[pj] / dxNorm; }
---analyzing modificationPoint position: 125
---modifPoint 5 not mutation generated in  return current
---analyzing modificationPoint position: 123
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [coeff1, coeff2]
--> var from patch: coeff1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: coeff2 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java405
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmPar /= tmp ` -topatch--> `double dirDer = -(coeff1 + coeff2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 405, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmPar /= tmp ` -topatch--> `double dirDer = -(coeff1 + coeff2)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 156, #gens: 357, #ops: 1, parent:155] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child does NOT compile: 156, errors: [LevenbergMarquardtOptimizer.java:405: error: variable dirDer is already defined in method doOptimize()
					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm); 					double dirDer = -(coeff1 + coeff2);
					                                                        					       ^]
Ingredient counter is Zero
---Undoing: gnrtn(78): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmPar /= tmp ` -topatch--> `double dirDer = -(coeff1 + coeff2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (155(f=2.0), 156(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (155(f=2.0), )
----------Running generation: 79, population size: 1

***** Generation 79 : 0
**Parent Variant: [Variant id: 157, #gens: 356, #ops: 0, parent:-]

--Child created id: 158
--Creating new operations for variant [Variant id: 158, #gens: 356, #ops: 0, parent:157]
---analyzing modificationPoint position: 252
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  permutation = new int[cols]
---analyzing modificationPoint position: 287
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  ak2 = norm2
---analyzing modificationPoint position: 36
location: LevenbergMarquardtOptimizer.java427
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 158, #gens: 355, #ops: 1, parent:157] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 158
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-158/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(79): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (157(f=2.0), 158(f=12.0), )
Selected to next generation: IDs2--> (157(f=2.0), )
----------Running generation: 80, population size: 1

***** Generation 80 : 0
**Parent Variant: [Variant id: 159, #gens: 356, #ops: 0, parent:-]

--Child created id: 160
--Creating new operations for variant [Variant id: 160, #gens: 356, #ops: 0, parent:159]
---analyzing modificationPoint position: 249
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java246
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `diagR = new double[cols] ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 246, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `diagR = new double[cols] ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 160, #gens: 357, #ops: 1, parent:159] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 160
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-160/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(80): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `diagR = new double[cols] ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (159(f=2.0), 160(f=2.0), )
Selected to next generation: IDs2--> (159(f=2.0), )
----------Running generation: 81, population size: 1

***** Generation 81 : 0
**Parent Variant: [Variant id: 161, #gens: 356, #ops: 0, parent:-]

--Child created id: 162
--Creating new operations for variant [Variant id: 162, #gens: 356, #ops: 0, parent:161]
---analyzing modificationPoint position: 297
location: LevenbergMarquardtOptimizer.java833
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[k][pk] -= alpha ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 162, #gens: 355, #ops: 1, parent:161] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 162
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-162/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(81): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[k][pk] -= alpha ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (161(f=2.0), 162(f=18.0), )
Selected to next generation: IDs2--> (161(f=2.0), )
----------Running generation: 82, population size: 1

***** Generation 82 : 0
**Parent Variant: [Variant id: 163, #gens: 356, #ops: 0, parent:-]

--Child created id: 164
--Creating new operations for variant [Variant id: 164, #gens: 356, #ops: 0, parent:163]
---analyzing modificationPoint position: 318
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 0 not mutation generated in  final double[] ji = jacobian[i]
---analyzing modificationPoint position: 329
location: AbstractLeastSquaresOptimizer.java221
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals[i] = residual ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 164, #gens: 355, #ops: 1, parent:163] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 164
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-164/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(82): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals[i] = residual ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (163(f=2.0), 164(f=18.0), )
Selected to next generation: IDs2--> (163(f=2.0), )
----------Running generation: 83, population size: 1

***** Generation 83 : 0
**Parent Variant: [Variant id: 165, #gens: 356, #ops: 0, parent:-]

--Child created id: 166
--Creating new operations for variant [Variant id: 166, #gens: 356, #ops: 0, parent:165]
---analyzing modificationPoint position: 331
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 0 not mutation generated in  index += cols
---analyzing modificationPoint position: 102
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java717
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double temp2 = (cos * rik) + (sin * lmDiag[i]) ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 717, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double temp2 = (cos * rik) + (sin * lmDiag[i]) ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 166, #gens: 356, #ops: 1, parent:165] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 166, errors: [LevenbergMarquardtOptimizer.java:720: error: cannot find symbol
						jacobian[i][pk] = temp2;
						                  ^
  symbol:   variable temp2
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(83): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double temp2 = (cos * rik) + (sin * lmDiag[i]) ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (165(f=2.0), 166(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (165(f=2.0), )
----------Running generation: 84, population size: 1

***** Generation 84 : 0
**Parent Variant: [Variant id: 167, #gens: 356, #ops: 0, parent:-]

--Child created id: 168
--Creating new operations for variant [Variant id: 168, #gens: 356, #ops: 0, parent:167]
---analyzing modificationPoint position: 76
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java663
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 663, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 168, #gens: 357, #ops: 1, parent:167] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 168
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-168/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(84): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (167(f=2.0), 168(f=2.0), )
Selected to next generation: IDs2--> (167(f=2.0), )
----------Running generation: 85, population size: 1

***** Generation 85 : 0
**Parent Variant: [Variant id: 169, #gens: 356, #ops: 0, parent:-]

--Child created id: 170
--Creating new operations for variant [Variant id: 170, #gens: 356, #ops: 0, parent:169]
---analyzing modificationPoint position: 32
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  final double cotan = rkk / lmDiag[k]
---analyzing modificationPoint position: 309
location: LevenbergMarquardtOptimizer.java223
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.orthoTolerance = orthoTolerance ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 170, #gens: 355, #ops: 1, parent:169] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 170
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-170/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(85): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.orthoTolerance = orthoTolerance ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (169(f=2.0), 170(f=3.0), )
Selected to next generation: IDs2--> (169(f=2.0), )
----------Running generation: 86, population size: 1

***** Generation 86 : 0
**Parent Variant: [Variant id: 171, #gens: 356, #ops: 0, parent:-]

--Child created id: 172
--Creating new operations for variant [Variant id: 172, #gens: 356, #ops: 0, parent:171]
---analyzing modificationPoint position: 84
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [cost, solvedCols, permutation, jacNorm, jacobian, residuals, maxCosine]
---modifPoint 0 not mutation generated in  if (dpj != 0) { 	java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0); }
---analyzing modificationPoint position: 339
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 1 not mutation generated in  jF = f.jacobian()
---analyzing modificationPoint position: 9
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double tmp = work1[pj]
---analyzing modificationPoint position: 37
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [oldRes, delta, diag, work1, work2, work3]
--> var from patch: oldRes spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: work2 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: work3 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java428
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// determine the Levenberg-Marquardt parameter determineLMParameter(oldRes, delta, diag, work1, work[...]` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 428, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// determine the Levenberg-Marquardt parameter determineLMParameter(oldRes, delta, diag, work1, work[...]` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 172, #gens: 357, #ops: 1, parent:171] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 172
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-172/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(86): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// determine the Levenberg-Marquardt parameter determineLMParameter(oldRes, delta, diag, work1, work[...]` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (171(f=2.0), 172(f=2.0), )
Selected to next generation: IDs2--> (171(f=2.0), )
----------Running generation: 87, population size: 1

***** Generation 87 : 0
**Parent Variant: [Variant id: 173, #gens: 356, #ops: 0, parent:-]

--Child created id: 174
--Creating new operations for variant [Variant id: 174, #gens: 356, #ops: 0, parent:173]
---analyzing modificationPoint position: 211
location: LevenbergMarquardtOptimizer.java408
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmPar *= 0.5 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 174, #gens: 355, #ops: 1, parent:173] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 174
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-174/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(87): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmPar *= 0.5 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (173(f=2.0), 174(f=4.0), )
Selected to next generation: IDs2--> (173(f=2.0), )
----------Running generation: 88, population size: 1

***** Generation 88 : 0
**Parent Variant: [Variant id: 175, #gens: 356, #ops: 0, parent:-]

--Child created id: 176
--Creating new operations for variant [Variant id: 176, #gens: 356, #ops: 0, parent:175]
---analyzing modificationPoint position: 32
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  final double cotan = rkk / lmDiag[k]
---analyzing modificationPoint position: 126
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 1 not mutation generated in  return java.lang.Math.sqrt(getChiSquare() / rows)
---analyzing modificationPoint position: 136
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java839
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 839, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 176, #gens: 357, #ops: 1, parent:175] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 176
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-176/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(88): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (175(f=2.0), 176(f=2.0), )
Selected to next generation: IDs2--> (175(f=2.0), )
----------Running generation: 89, population size: 1

***** Generation 89 : 0
**Parent Variant: [Variant id: 177, #gens: 356, #ops: 0, parent:-]

--Child created id: 178
--Creating new operations for variant [Variant id: 178, #gens: 356, #ops: 0, parent:177]
---analyzing modificationPoint position: 2
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  paru = java.lang.Math.min(paru, lmPar)
---analyzing modificationPoint position: 100
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  // accumulate the tranformation in the row of s for (int i = k + 1; i < solvedCols; ++i) { 	double r[...]
---analyzing modificationPoint position: 160
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  if (s != 0) { 	double sum = 0; 	for (int i = 0; i <= j; ++i) { 		sum += jacobian[i][pj] * residuals[[...]
---analyzing modificationPoint position: 50
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 3 not mutation generated in  sum /= diag[pj]
---analyzing modificationPoint position: 344
location: AbstractLeastSquaresOptimizer.java341
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 178, #gens: 355, #ops: 1, parent:177] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 178
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-178/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(89): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (177(f=2.0), 178(f=18.0), )
Selected to next generation: IDs2--> (177(f=2.0), )
----------Running generation: 90, population size: 1

***** Generation 90 : 0
**Parent Variant: [Variant id: 179, #gens: 356, #ops: 0, parent:-]

--Child created id: 180
--Creating new operations for variant [Variant id: 180, #gens: 356, #ops: 0, parent:179]
---analyzing modificationPoint position: 163
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [point, pj, oldX, lmDir]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: oldX spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java316
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * residuals[i] ` -topatch--> `point[pj] = oldX[pj] + lmDir[pj]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 316, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * residuals[i] ` -topatch--> `point[pj] = oldX[pj] + lmDir[pj]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 180, #gens: 357, #ops: 1, parent:179] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 180, errors: [LevenbergMarquardtOptimizer.java:361: error: cannot find symbol
					delta = java.lang.Math.min(delta, lmNorm);
					                                  ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:391: error: cannot find symbol
				double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;
				                          ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:391: error: cannot find symbol
				double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;
				                                    ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:405: error: cannot find symbol
					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm);
					                                               ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:408: error: cannot find symbol
					delta = 2 * lmNorm;
					            ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(90): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * residuals[i] ` -topatch--> `point[pj] = oldX[pj] + lmDir[pj]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (179(f=2.0), 180(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (179(f=2.0), )
----------Running generation: 91, population size: 1

***** Generation 91 : 0
**Parent Variant: [Variant id: 181, #gens: 356, #ops: 0, parent:-]

--Child created id: 182
--Creating new operations for variant [Variant id: 182, #gens: 356, #ops: 0, parent:181]
---analyzing modificationPoint position: 88
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int k = j; k < solvedCols; ++k) { 	int pk = permutation[k];  	// determine a Givens rotation wh[...]
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.costRelativeTolerance]
--> var from patch: this.costRelativeTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java529
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 529, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 182, #gens: 357, #ops: 1, parent:181] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 182
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-182/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(91): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (181(f=2.0), 182(f=2.0), )
Selected to next generation: IDs2--> (181(f=2.0), )
----------Running generation: 92, population size: 1

***** Generation 92 : 0
**Parent Variant: [Variant id: 183, #gens: 356, #ops: 0, parent:-]

--Child created id: 184
--Creating new operations for variant [Variant id: 184, #gens: 356, #ops: 0, parent:183]
---analyzing modificationPoint position: 74
Templates availables3
Attempts Base Ingredients  1 total 3
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 213
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // successful iteration, update the norm firstIteration = false
---analyzing modificationPoint position: 138
location: LevenbergMarquardtOptimizer.java842
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = k; j < jacobian.length; ++j) { 	jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 184, #gens: 355, #ops: 1, parent:183] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 184
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-184/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(92): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = k; j < jacobian.length; ++j) { 	jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (183(f=2.0), 184(f=18.0), )
Selected to next generation: IDs2--> (183(f=2.0), )
----------Running generation: 93, population size: 1

***** Generation 93 : 0
**Parent Variant: [Variant id: 185, #gens: 356, #ops: 0, parent:-]

--Child created id: 186
--Creating new operations for variant [Variant id: 186, #gens: 356, #ops: 0, parent:185]
---analyzing modificationPoint position: 282
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java805
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double aki = jacobian[j][permutation[i]] ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 805, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double aki = jacobian[j][permutation[i]] ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 186, #gens: 356, #ops: 1, parent:185] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 186, errors: [LevenbergMarquardtOptimizer.java:807: error: cannot find symbol
					norm2 += aki * aki;
					         ^
  symbol:   variable aki
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:807: error: cannot find symbol
					norm2 += aki * aki;
					               ^
  symbol:   variable aki
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(93): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double aki = jacobian[j][permutation[i]] ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (185(f=2.0), 186(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (185(f=2.0), )
----------Running generation: 94, population size: 1

***** Generation 94 : 0
**Parent Variant: [Variant id: 187, #gens: 356, #ops: 0, parent:-]

--Child created id: 188
--Creating new operations for variant [Variant id: 188, #gens: 356, #ops: 0, parent:187]
---analyzing modificationPoint position: 44
location: LevenbergMarquardtOptimizer.java549
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// calculate an upper bound, paru, for the zero of the function sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 188, #gens: 355, #ops: 1, parent:187] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 188, errors: [LevenbergMarquardtOptimizer.java:558: error: variable sum2 might not have been initialized
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:560: error: variable sum2 might not have been initialized
		double gNorm = java.lang.Math.sqrt(sum2);
		                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(94): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// calculate an upper bound, paru, for the zero of the function sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (187(f=2.0), 188(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (187(f=2.0), )
----------Running generation: 95, population size: 1

***** Generation 95 : 0
**Parent Variant: [Variant id: 189, #gens: 356, #ops: 0, parent:-]

--Child created id: 190
--Creating new operations for variant [Variant id: 190, #gens: 356, #ops: 0, parent:189]
---analyzing modificationPoint position: 170
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 335
location: AbstractLeastSquaresOptimizer.java328
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// reset counters iterations = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 190, #gens: 355, #ops: 1, parent:189] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 190
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-190/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(95): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// reset counters iterations = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (189(f=2.0), 190(f=2.0), )
Selected to next generation: IDs2--> (189(f=2.0), )
----------Running generation: 96, population size: 1

***** Generation 96 : 0
**Parent Variant: [Variant id: 191, #gens: 356, #ops: 0, parent:-]

--Child created id: 192
--Creating new operations for variant [Variant id: 192, #gens: 356, #ops: 0, parent:191]
---analyzing modificationPoint position: 69
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  dxNorm += s * s
---analyzing modificationPoint position: 112
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java744
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 744, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 192, #gens: 357, #ops: 1, parent:191] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 192, errors: [LevenbergMarquardtOptimizer.java:818: error: illegal start of type
			if (ak2 <= qrRankingThreshold) {
			^, LevenbergMarquardtOptimizer.java:818: error: <identifier> expected
			if (ak2 <= qrRankingThreshold) {
			       ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
			if (ak2 <= qrRankingThreshold) {
			          ^, LevenbergMarquardtOptimizer.java:818: error: illegal start of type
			if (ak2 <= qrRankingThreshold) {
			                             ^, LevenbergMarquardtOptimizer.java:818: error: <identifier> expected
			if (ak2 <= qrRankingThreshold) {
			                              ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
			if (ak2 <= qrRankingThreshold) {
			                                ^, LevenbergMarquardtOptimizer.java:819: error: illegal start of type
				rank = k;
				     ^, LevenbergMarquardtOptimizer.java:820: error: illegal start of type
				return;
				^, LevenbergMarquardtOptimizer.java:822: error: class, interface, or enum expected
			int pk = permutation[nextColumn];
			^, LevenbergMarquardtOptimizer.java:823: error: class, interface, or enum expected
			permutation[nextColumn] = permutation[k];
			^, LevenbergMarquardtOptimizer.java:824: error: class, interface, or enum expected
			permutation[k] = pk;
			^, LevenbergMarquardtOptimizer.java:827: error: class, interface, or enum expected
			double akk = jacobian[k][pk];
			^, LevenbergMarquardtOptimizer.java:828: error: class, interface, or enum expected
			double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2);
			^, LevenbergMarquardtOptimizer.java:829: error: class, interface, or enum expected
			double betak = 1.0 / (ak2 - (akk * alpha));
			^, LevenbergMarquardtOptimizer.java:830: error: class, interface, or enum expected
			beta[pk] = betak;
			^, LevenbergMarquardtOptimizer.java:833: error: class, interface, or enum expected
			diagR[pk] = alpha;
			^, LevenbergMarquardtOptimizer.java:834: error: class, interface, or enum expected
			jacobian[k][pk] -= alpha;
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                              ^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                                      ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:841: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:845: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:852: error: class, interface, or enum expected
	}
	^, LevenbergMarquardtOptimizer.java:860: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:860: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:862: error: class, interface, or enum expected
			double gamma = 0;
			^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:865: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:869: error: class, interface, or enum expected
			}
			^]
Ingredient counter is Zero
---Undoing: gnrtn(96): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (191(f=2.0), 192(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (191(f=2.0), )
----------Running generation: 97, population size: 1

***** Generation 97 : 0
**Parent Variant: [Variant id: 193, #gens: 356, #ops: 0, parent:-]

--Child created id: 194
--Creating new operations for variant [Variant id: 194, #gens: 356, #ops: 0, parent:193]
---analyzing modificationPoint position: 72
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  fp = dxNorm - delta
---analyzing modificationPoint position: 20
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 272
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 2 not mutation generated in  for (int i = 0; i < jacobian.length; ++i) { 	double akk = jacobian[i][k]; 	norm2 += akk * akk; }
---analyzing modificationPoint position: 90
location: LevenbergMarquardtOptimizer.java692
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 194, #gens: 355, #ops: 1, parent:193] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 194, errors: [LevenbergMarquardtOptimizer.java:689: error: variable declaration not allowed here
				int pk = permutation[k];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(97): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (193(f=2.0), 194(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (193(f=2.0), )
----------Running generation: 98, population size: 1

***** Generation 98 : 0
**Parent Variant: [Variant id: 195, #gens: 356, #ops: 0, parent:-]

--Child created id: 196
--Creating new operations for variant [Variant id: 196, #gens: 356, #ops: 0, parent:195]
---analyzing modificationPoint position: 94
location: LevenbergMarquardtOptimizer.java703
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 196, #gens: 355, #ops: 1, parent:195] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 196, errors: [LevenbergMarquardtOptimizer.java:705: error: variable cos might not have been initialized
						sin = cos * tan;
						      ^]
Ingredient counter is Zero
---Undoing: gnrtn(98): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (195(f=2.0), 196(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (195(f=2.0), )
----------Running generation: 99, population size: 1

***** Generation 99 : 0
**Parent Variant: [Variant id: 197, #gens: 356, #ops: 0, parent:-]

--Child created id: 198
--Creating new operations for variant [Variant id: 198, #gens: 356, #ops: 0, parent:197]
---analyzing modificationPoint position: 12
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java617
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `// we use the vectorial convergence checker` (spoon.support.reflect.code.CtCommentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 617, pointed element: CtCommentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `// we use the vectorial convergence checker` (spoon.support.reflect.code.CtCommentImpl) 

--Summary Creation: for variant [Variant id: 198, #gens: 357, #ops: 1, parent:197] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 198
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-198/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(99): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `// we use the vectorial convergence checker` (spoon.support.reflect.code.CtCommentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (197(f=2.0), 198(f=2.0), )
Selected to next generation: IDs2--> (197(f=2.0), )
----------Running generation: 100, population size: 1

***** Generation 100 : 0
**Parent Variant: [Variant id: 199, #gens: 356, #ops: 0, parent:-]

--Child created id: 200
--Creating new operations for variant [Variant id: 200, #gens: 356, #ops: 0, parent:199]
---analyzing modificationPoint position: 296
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  // transform the current column diagR[pk] = alpha
---analyzing modificationPoint position: 62
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [paru, delta]
--> var from patch: paru spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java582
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = sPar * diag[pj] ` -topatch--> `// 2.2251e-308 is the smallest positive real for IEE754 paru = 2.2251E-308 / java.lang.Math.min(delt[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 582, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = sPar * diag[pj] ` -topatch--> `// 2.2251e-308 is the smallest positive real for IEE754 paru = 2.2251E-308 / java.lang.Math.min(delt[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 200, #gens: 357, #ops: 1, parent:199] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 200
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-200/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(100): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = sPar * diag[pj] ` -topatch--> `// 2.2251e-308 is the smallest positive real for IEE754 paru = 2.2251E-308 / java.lang.Math.min(delt[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (199(f=2.0), 200(f=2.0), )
Selected to next generation: IDs2--> (199(f=2.0), )
----------Running generation: 101, population size: 1

***** Generation 101 : 0
**Parent Variant: [Variant id: 201, #gens: 356, #ops: 0, parent:-]

--Child created id: 202
--Creating new operations for variant [Variant id: 202, #gens: 356, #ops: 0, parent:201]
---analyzing modificationPoint position: 16
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double correction = fp / (delta * sum2)
---analyzing modificationPoint position: 305
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)
---analyzing modificationPoint position: 29
location: LevenbergMarquardtOptimizer.java542
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 202, #gens: 355, #ops: 1, parent:201] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 202
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-202/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(101): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (201(f=2.0), 202(f=9.0), )
Selected to next generation: IDs2--> (201(f=2.0), )
----------Running generation: 102, population size: 1

***** Generation 102 : 0
**Parent Variant: [Variant id: 203, #gens: 356, #ops: 0, parent:-]

--Child created id: 204
--Creating new operations for variant [Variant id: 204, #gens: 356, #ops: 0, parent:203]
---analyzing modificationPoint position: 9
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java612
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 612, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 204, #gens: 356, #ops: 1, parent:203] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 204, errors: [LevenbergMarquardtOptimizer.java:698: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:698: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:698: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:698: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:698: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:698: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:698: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:698: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:699: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:699: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:699: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:699: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:699: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:699: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:700: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:700: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:701: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:701: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:701: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:702: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:702: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:702: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:702: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:702: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:702: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:703: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:703: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:703: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:703: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:703: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:703: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:703: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:704: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:705: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:705: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:703: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:705: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:705: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:705: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:705: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:705: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:705: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:706: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:706: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:705: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:706: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:706: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:707: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:707: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:707: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:708: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:708: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:708: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:709: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:709: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:710: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:710: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:709: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:710: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:710: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:710: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:710: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:712: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:712: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:713: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:713: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:713: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:714: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:715: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:716: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:717: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:717: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:718: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:719: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:719: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:720: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:720: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:720: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:720: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:720: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:720: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:720: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:720: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:720: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:720: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:720: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:720: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:720: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:720: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	        ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                            ^, LevenbergMarquardtOptimizer.java:785: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(102): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (203(f=2.0), 204(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (203(f=2.0), )
----------Running generation: 103, population size: 1

***** Generation 103 : 0
**Parent Variant: [Variant id: 205, #gens: 356, #ops: 0, parent:-]

--Child created id: 206
--Creating new operations for variant [Variant id: 206, #gens: 356, #ops: 0, parent:205]
---analyzing modificationPoint position: 96
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // compute the modified diagonal element of R and // the modified element of (Qty,0) jacobian[k][pk][...]
---analyzing modificationPoint position: 289
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  int pk = permutation[nextColumn]
---analyzing modificationPoint position: 117
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  work[j] = (work[j] - sum) / lmDiag[j]
---analyzing modificationPoint position: 133
location: LevenbergMarquardtOptimizer.java521
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 206, #gens: 355, #ops: 1, parent:205] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 206
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-206/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 18] ,[]
-Valid?: |false|16|18|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(103): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (205(f=2.0), 206(f=16.0), )
Selected to next generation: IDs2--> (205(f=2.0), )
----------Running generation: 104, population size: 1

***** Generation 104 : 0
**Parent Variant: [Variant id: 207, #gens: 356, #ops: 0, parent:-]

--Child created id: 208
--Creating new operations for variant [Variant id: 208, #gens: 356, #ops: 0, parent:207]
---analyzing modificationPoint position: 233
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 8
location: LevenbergMarquardtOptimizer.java611
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] /= work2[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 208, #gens: 355, #ops: 1, parent:207] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 208
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-208/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(104): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] /= work2[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (207(f=2.0), 208(f=8.0), )
Selected to next generation: IDs2--> (207(f=2.0), )
----------Running generation: 105, population size: 1

***** Generation 105 : 0
**Parent Variant: [Variant id: 209, #gens: 356, #ops: 0, parent:-]

--Child created id: 210
--Creating new operations for variant [Variant id: 210, #gens: 356, #ops: 0, parent:209]
---analyzing modificationPoint position: 177
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java349
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// compute the new point and the norm of the evolution direction double lmNorm = 0 ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 349, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// compute the new point and the norm of the evolution direction double lmNorm = 0 ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 210, #gens: 357, #ops: 1, parent:209] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 210, errors: [LevenbergMarquardtOptimizer.java:347: error: variable work3 is already defined in method doOptimize()
				determineLMParameter(oldRes, delta, diag, work1, work2, work3); 				double[] work3 = new double[cols];
				                                                                				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(105): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// compute the new point and the norm of the evolution direction double lmNorm = 0 ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (209(f=2.0), 210(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (209(f=2.0), )
----------Running generation: 106, population size: 1

***** Generation 106 : 0
**Parent Variant: [Variant id: 211, #gens: 356, #ops: 0, parent:-]

--Child created id: 212
--Creating new operations for variant [Variant id: 212, #gens: 356, #ops: 0, parent:211]
---analyzing modificationPoint position: 7
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [sum2]
--> var from patch: sum2 spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java610
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `sum2 = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 610, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `sum2 = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 212, #gens: 357, #ops: 1, parent:211] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 212
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-212/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(106): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `sum2 = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (211(f=2.0), 212(f=2.0), )
Selected to next generation: IDs2--> (211(f=2.0), )
----------Running generation: 107, population size: 1

***** Generation 107 : 0
**Parent Variant: [Variant id: 213, #gens: 356, #ops: 0, parent:-]

--Child created id: 214
--Creating new operations for variant [Variant id: 214, #gens: 356, #ops: 0, parent:213]
---analyzing modificationPoint position: 33
location: LevenbergMarquardtOptimizer.java699
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 214, #gens: 355, #ops: 1, parent:213] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 214, errors: [LevenbergMarquardtOptimizer.java:701: error: variable sin might not have been initialized
						cos = sin * cotan;
						      ^]
Ingredient counter is Zero
---Undoing: gnrtn(107): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (213(f=2.0), 214(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (213(f=2.0), )
----------Running generation: 108, population size: 1

***** Generation 108 : 0
**Parent Variant: [Variant id: 215, #gens: 356, #ops: 0, parent:-]

--Child created id: 216
--Creating new operations for variant [Variant id: 216, #gens: 356, #ops: 0, parent:215]
---analyzing modificationPoint position: 60
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; }
---analyzing modificationPoint position: 36
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; }
---analyzing modificationPoint position: 74
Templates availables3
Attempts Base Ingredients  1 total 3
vars from patch []
location: LevenbergMarquardtOptimizer.java601
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 601, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 216, #gens: 356, #ops: 1, parent:215] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 216
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-216/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(108): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (215(f=2.0), 216(f=2.0), )
Selected to next generation: IDs2--> (215(f=2.0), )
----------Running generation: 109, population size: 1

***** Generation 109 : 0
**Parent Variant: [Variant id: 217, #gens: 356, #ops: 0, parent:-]

--Child created id: 218
--Creating new operations for variant [Variant id: 218, #gens: 356, #ops: 0, parent:217]
---analyzing modificationPoint position: 97
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  final double temp = (cos * work[k]) + (sin * qtbpj)
---analyzing modificationPoint position: 342
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 1 not mutation generated in  this.point = startPoint.clone()
---analyzing modificationPoint position: 132
location: LevenbergMarquardtOptimizer.java520
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 218, #gens: 355, #ops: 1, parent:217] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 218
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-218/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(109): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (217(f=2.0), 218(f=3.0), )
Selected to next generation: IDs2--> (217(f=2.0), )
----------Running generation: 110, population size: 1

***** Generation 110 : 0
**Parent Variant: [Variant id: 219, #gens: 356, #ops: 0, parent:-]

--Child created id: 220
--Creating new operations for variant [Variant id: 220, #gens: 356, #ops: 0, parent:219]
---analyzing modificationPoint position: 87
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java686
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 686, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 220, #gens: 356, #ops: 1, parent:219] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 220, errors: [LevenbergMarquardtOptimizer.java:711: error: cannot find symbol
					final double temp = (cos * work[k]) + (sin * qtbpj);
					                                             ^
  symbol:   variable qtbpj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:712: error: cannot find symbol
					qtbpj = ((-sin) * work[k]) + (cos * qtbpj);
					^
  symbol:   variable qtbpj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:712: error: cannot find symbol
					qtbpj = ((-sin) * work[k]) + (cos * qtbpj);
					                                    ^
  symbol:   variable qtbpj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(110): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (219(f=2.0), 220(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (219(f=2.0), )
----------Running generation: 111, population size: 1

***** Generation 111 : 0
**Parent Variant: [Variant id: 221, #gens: 356, #ops: 0, parent:-]

--Child created id: 222
--Creating new operations for variant [Variant id: 222, #gens: 356, #ops: 0, parent:221]
---analyzing modificationPoint position: 334
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [jacobianEvaluations]
--> var from patch: jacobianEvaluations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java322
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (target.length != weights.length) { 	throw new org.apache.commons.math.optimization.OptimizationE[...] ` -topatch--> `jacobianEvaluations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 322, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (target.length != weights.length) { 	throw new org.apache.commons.math.optimization.OptimizationE[...] ` -topatch--> `jacobianEvaluations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 222, #gens: 357, #ops: 1, parent:221] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 222
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-222/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(111): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (target.length != weights.length) { 	throw new org.apache.commons.math.optimization.OptimizationE[...] ` -topatch--> `jacobianEvaluations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (221(f=2.0), 222(f=2.0), )
Selected to next generation: IDs2--> (221(f=2.0), )
----------Running generation: 112, population size: 1

***** Generation 112 : 0
**Parent Variant: [Variant id: 223, #gens: 356, #ops: 0, parent:-]

--Child created id: 224
--Creating new operations for variant [Variant id: 224, #gens: 356, #ops: 0, parent:223]
---analyzing modificationPoint position: 225
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }
---analyzing modificationPoint position: 121
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [lmPar, paru, solvedCols, permutation, work1, diag, qy, work2, work3, dxNorm, lmDir, fp, delta, parl, jacobian, sum2]
---modifPoint 1 not mutation generated in  if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; }
---analyzing modificationPoint position: 66
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.orthoTolerance]
--> var from patch: this.orthoTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java588
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 588, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 224, #gens: 357, #ops: 1, parent:223] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 224
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-224/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(112): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (223(f=2.0), 224(f=2.0), )
Selected to next generation: IDs2--> (223(f=2.0), )
----------Running generation: 113, population size: 1

***** Generation 113 : 0
**Parent Variant: [Variant id: 225, #gens: 356, #ops: 0, parent:-]

--Child created id: 226
--Creating new operations for variant [Variant id: 226, #gens: 356, #ops: 0, parent:225]
---analyzing modificationPoint position: 74
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 352
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [java.lang.Integer.MAX_VALUE]
--> var from patch: java.lang.Integer.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java119
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxEvaluations(java.lang.Integer.MAX_VALUE) ` -topatch--> `setMaxEvaluations(java.lang.Integer.MAX_VALUE)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 119, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxEvaluations(java.lang.Integer.MAX_VALUE) ` -topatch--> `setMaxEvaluations(java.lang.Integer.MAX_VALUE)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 226, #gens: 356, #ops: 1, parent:225] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 226
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-226/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(113): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxEvaluations(java.lang.Integer.MAX_VALUE) ` -topatch--> `setMaxEvaluations(java.lang.Integer.MAX_VALUE)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (225(f=2.0), 226(f=2.0), )
Selected to next generation: IDs2--> (225(f=2.0), )
----------Running generation: 114, population size: 1

***** Generation 114 : 0
**Parent Variant: [Variant id: 227, #gens: 356, #ops: 0, parent:-]

--Child created id: 228
--Creating new operations for variant [Variant id: 228, #gens: 356, #ops: 0, parent:227]
---analyzing modificationPoint position: 145
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, cols, diag, jacNorm]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java286
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...] ` -topatch--> `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 286, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...] ` -topatch--> `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 228, #gens: 357, #ops: 1, parent:227] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 228, errors: [LevenbergMarquardtOptimizer.java:494: error: class, interface, or enum expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^, LevenbergMarquardtOptimizer.java:534: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:538: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                ^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                       ^, LevenbergMarquardtOptimizer.java:541: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:543: error: class, interface, or enum expected
				work1[pj] = s;
				^, LevenbergMarquardtOptimizer.java:544: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:545: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:547: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(114): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...] ` -topatch--> `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (227(f=2.0), 228(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (227(f=2.0), )
----------Running generation: 115, population size: 1

***** Generation 115 : 0
**Parent Variant: [Variant id: 229, #gens: 356, #ops: 0, parent:-]

--Child created id: 230
--Creating new operations for variant [Variant id: 230, #gens: 356, #ops: 0, parent:229]
---analyzing modificationPoint position: 53
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double paru = gNorm / delta
---analyzing modificationPoint position: 214
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java415
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = 0 ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 415, pointed element: CtCommentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = 0 ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 

--Summary Creation: for variant [Variant id: 230, #gens: 357, #ops: 1, parent:229] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 230
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-230/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(115): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = 0 ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (229(f=2.0), 230(f=2.0), )
Selected to next generation: IDs2--> (229(f=2.0), )
----------Running generation: 116, population size: 1

***** Generation 116 : 0
**Parent Variant: [Variant id: 231, #gens: 356, #ops: 0, parent:-]

--Child created id: 232
--Creating new operations for variant [Variant id: 232, #gens: 356, #ops: 0, parent:231]
---analyzing modificationPoint position: 107
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  // solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]
---analyzing modificationPoint position: 3
Templates availables50
Attempts Base Ingredients  1 total 50
vars from patch [j, solvedCols, permutation, diag, pj, lmDir, work1, s, dxNorm]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: s spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: dxNorm spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java605
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 605, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 232, #gens: 356, #ops: 1, parent:231] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 232
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-232/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(116): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (231(f=2.0), 232(f=8.0), )
Selected to next generation: IDs2--> (231(f=2.0), )
----------Running generation: 117, population size: 1

***** Generation 117 : 0
**Parent Variant: [Variant id: 233, #gens: 356, #ops: 0, parent:-]

--Child created id: 234
--Creating new operations for variant [Variant id: 234, #gens: 356, #ops: 0, parent:233]
---analyzing modificationPoint position: 24
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java536
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 536, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 234, #gens: 357, #ops: 1, parent:233] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 234, errors: [LevenbergMarquardtOptimizer.java:843: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:843: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:845: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:848: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:848: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:848: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:848: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:848: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:850: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:850: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:850: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:850: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:850: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:851: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:852: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:852: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:852: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:853: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:853: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:853: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:854: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:854: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:855: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:855: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:854: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:855: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:855: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:858: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:858: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:858: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:859: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:860: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:861: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:863: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:864: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:864: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:865: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:865: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:865: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:865: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:893: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:893: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:893: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:893: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:893: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:901: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	^, LevenbergMarquardtOptimizer.java:901: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	        ^, LevenbergMarquardtOptimizer.java:901: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                ^, LevenbergMarquardtOptimizer.java:901: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                           ^, LevenbergMarquardtOptimizer.java:901: error: reached end of file while parsing
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                               		                                 			                         			                  			                                 				                                  			                   			                                 				                                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(117): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (233(f=2.0), 234(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (233(f=2.0), )
----------Running generation: 118, population size: 1

***** Generation 118 : 0
**Parent Variant: [Variant id: 235, #gens: 356, #ops: 0, parent:-]

--Child created id: 236
--Creating new operations for variant [Variant id: 236, #gens: 356, #ops: 0, parent:235]
---analyzing modificationPoint position: 132
location: LevenbergMarquardtOptimizer.java520
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 236, #gens: 355, #ops: 1, parent:235] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 236
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-236/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(118): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (235(f=2.0), 236(f=3.0), )
Selected to next generation: IDs2--> (235(f=2.0), )
----------Running generation: 119, population size: 1

***** Generation 119 : 0
**Parent Variant: [Variant id: 237, #gens: 356, #ops: 0, parent:-]

--Child created id: 238
--Creating new operations for variant [Variant id: 238, #gens: 356, #ops: 0, parent:237]
---analyzing modificationPoint position: 91
---modifPoint 0 not mutation generated in  double rkk = jacobian[k][pk]
---analyzing modificationPoint position: 100
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // accumulate the tranformation in the row of s for (int i = k + 1; i < solvedCols; ++i) { 	double r[...]
---analyzing modificationPoint position: 76
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmDir, cols]
--> var from patch: lmDir spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java663
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 663, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 238, #gens: 357, #ops: 1, parent:237] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 238
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-238/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(119): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (237(f=2.0), 238(f=13.0), )
Selected to next generation: IDs2--> (237(f=2.0), )
----------Running generation: 120, population size: 1

***** Generation 120 : 0
**Parent Variant: [Variant id: 239, #gens: 356, #ops: 0, parent:-]

--Child created id: 240
--Creating new operations for variant [Variant id: 240, #gens: 356, #ops: 0, parent:239]
---analyzing modificationPoint position: 148
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double dk = jacNorm[k]
---analyzing modificationPoint position: 69
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  dxNorm += s * s
---analyzing modificationPoint position: 255
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double xNorm = 0
---analyzing modificationPoint position: 122
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, solvedCols, permutation, jacNorm, pj, s, i, sum, jacobian, residuals, maxCosine, cost]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: s spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: maxCosine spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java404
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm) ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 404, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm) ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 240, #gens: 357, #ops: 1, parent:239] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 240
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-240/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(120): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm) ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (239(f=2.0), 240(f=2.0), )
Selected to next generation: IDs2--> (239(f=2.0), )
----------Running generation: 121, population size: 1

***** Generation 121 : 0
**Parent Variant: [Variant id: 241, #gens: 356, #ops: 0, parent:-]

--Child created id: 242
--Creating new operations for variant [Variant id: 242, #gens: 356, #ops: 0, parent:241]
---analyzing modificationPoint position: 22
location: LevenbergMarquardtOptimizer.java534
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 242, #gens: 355, #ops: 1, parent:241] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 242, errors: [LevenbergMarquardtOptimizer.java:544: error: variable sum2 might not have been initialized
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:546: error: variable sum2 might not have been initialized
			parl = fp / (delta * sum2);
			                     ^]
Ingredient counter is Zero
---Undoing: gnrtn(121): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (241(f=2.0), 242(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (241(f=2.0), )
----------Running generation: 122, population size: 1

***** Generation 122 : 0
**Parent Variant: [Variant id: 243, #gens: 356, #ops: 0, parent:-]

--Child created id: 244
--Creating new operations for variant [Variant id: 244, #gens: 356, #ops: 0, parent:243]
---analyzing modificationPoint position: 245
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [residuals]
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java865
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= beta[pk] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 865, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= beta[pk] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 244, #gens: 357, #ops: 1, parent:243] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 244
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-244/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(122): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= beta[pk] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (243(f=2.0), 244(f=2.0), )
Selected to next generation: IDs2--> (243(f=2.0), )
----------Running generation: 123, population size: 1

***** Generation 123 : 0
**Parent Variant: [Variant id: 245, #gens: 356, #ops: 0, parent:-]

--Child created id: 246
--Creating new operations for variant [Variant id: 246, #gens: 356, #ops: 0, parent:245]
---analyzing modificationPoint position: 16
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java622
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double correction = fp / (delta * sum2) ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 622, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double correction = fp / (delta * sum2) ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 246, #gens: 356, #ops: 1, parent:245] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 246, errors: [LevenbergMarquardtOptimizer.java:633: error: cannot find symbol
			lmPar = java.lang.Math.max(parl, lmPar + correction);
			                                         ^
  symbol:   variable correction
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(123): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double correction = fp / (delta * sum2) ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (245(f=2.0), 246(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (245(f=2.0), )
----------Running generation: 124, population size: 1

***** Generation 124 : 0
**Parent Variant: [Variant id: 247, #gens: 356, #ops: 0, parent:-]

--Child created id: 248
--Creating new operations for variant [Variant id: 248, #gens: 356, #ops: 0, parent:247]
---analyzing modificationPoint position: 29
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [residuals]
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java542
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `double[] tmpVec = residuals` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 542, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `double[] tmpVec = residuals` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 248, #gens: 357, #ops: 1, parent:247] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 248
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-248/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(124): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `double[] tmpVec = residuals` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (247(f=2.0), 248(f=2.0), )
Selected to next generation: IDs2--> (247(f=2.0), )
----------Running generation: 125, population size: 1

***** Generation 125 : 0
**Parent Variant: [Variant id: 249, #gens: 356, #ops: 0, parent:-]

--Child created id: 250
--Creating new operations for variant [Variant id: 250, #gens: 356, #ops: 0, parent:249]
---analyzing modificationPoint position: 40
location: LevenbergMarquardtOptimizer.java432
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 250, #gens: 355, #ops: 1, parent:249] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 250
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-250/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 18] ,[]
-Valid?: |false|10|18|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(125): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (249(f=2.0), 250(f=10.0), )
Selected to next generation: IDs2--> (249(f=2.0), )
----------Running generation: 126, population size: 1

***** Generation 126 : 0
**Parent Variant: [Variant id: 251, #gens: 356, #ops: 0, parent:-]

--Child created id: 252
--Creating new operations for variant [Variant id: 252, #gens: 356, #ops: 0, parent:251]
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 294
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  double betak = 1.0 / (ak2 - (akk * alpha))
---analyzing modificationPoint position: 185
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java359
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// on the first iteration, adjust the initial step bound. if (firstIteration) { 	delta = java.lang.M[...] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 359, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// on the first iteration, adjust the initial step bound. if (firstIteration) { 	delta = java.lang.M[...] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 252, #gens: 357, #ops: 1, parent:251] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 252
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-252/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(126): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// on the first iteration, adjust the initial step bound. if (firstIteration) { 	delta = java.lang.M[...] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (251(f=2.0), 252(f=2.0), )
Selected to next generation: IDs2--> (251(f=2.0), )
----------Running generation: 127, population size: 1

***** Generation 127 : 0
**Parent Variant: [Variant id: 253, #gens: 356, #ops: 0, parent:-]

--Child created id: 254
--Creating new operations for variant [Variant id: 254, #gens: 356, #ops: 0, parent:253]
---analyzing modificationPoint position: 94
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: orthoTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java703
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan)) ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 703, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan)) ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 254, #gens: 357, #ops: 1, parent:253] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 254, errors: [LevenbergMarquardtOptimizer.java:704: error: unreachable statement
						cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan));
						^, LevenbergMarquardtOptimizer.java:703: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
						final double tan = lmDiag[k] / rkk; 						throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);
						                                    						^]
Ingredient counter is Zero
---Undoing: gnrtn(127): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan)) ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (253(f=2.0), 254(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (253(f=2.0), )
----------Running generation: 128, population size: 1

***** Generation 128 : 0
**Parent Variant: [Variant id: 255, #gens: 356, #ops: 0, parent:-]

--Child created id: 256
--Creating new operations for variant [Variant id: 256, #gens: 356, #ops: 0, parent:255]
---analyzing modificationPoint position: 30
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  sum2 += s * s
---analyzing modificationPoint position: 33
location: LevenbergMarquardtOptimizer.java699
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 256, #gens: 355, #ops: 1, parent:255] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 256, errors: [LevenbergMarquardtOptimizer.java:701: error: variable sin might not have been initialized
						cos = sin * cotan;
						      ^]
Ingredient counter is Zero
---Undoing: gnrtn(128): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (255(f=2.0), 256(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (255(f=2.0), )
----------Running generation: 129, population size: 1

***** Generation 129 : 0
**Parent Variant: [Variant id: 257, #gens: 356, #ops: 0, parent:-]

--Child created id: 258
--Creating new operations for variant [Variant id: 258, #gens: 356, #ops: 0, parent:257]
---analyzing modificationPoint position: 272
location: LevenbergMarquardtOptimizer.java789
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < jacobian.length; ++i) { 	double akk = jacobian[i][k]; 	norm2 += akk * akk; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 258, #gens: 355, #ops: 1, parent:257] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 258
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-258/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(129): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < jacobian.length; ++i) { 	double akk = jacobian[i][k]; 	norm2 += akk * akk; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (257(f=2.0), 258(f=18.0), )
Selected to next generation: IDs2--> (257(f=2.0), )
----------Running generation: 130, population size: 1

***** Generation 130 : 0
**Parent Variant: [Variant id: 259, #gens: 356, #ops: 0, parent:-]

--Child created id: 260
--Creating new operations for variant [Variant id: 260, #gens: 356, #ops: 0, parent:259]
---analyzing modificationPoint position: 33
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java699
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 699, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 260, #gens: 357, #ops: 1, parent:259] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 260, errors: [LevenbergMarquardtOptimizer.java:863: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:863: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:863: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:863: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:863: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:871: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}
	    	^, LevenbergMarquardtOptimizer.java:871: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}
	    	        ^, LevenbergMarquardtOptimizer.java:871: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}
	    	                ^, LevenbergMarquardtOptimizer.java:871: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(130): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (259(f=2.0), 260(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (259(f=2.0), )
----------Running generation: 131, population size: 1

***** Generation 131 : 0
**Parent Variant: [Variant id: 261, #gens: 356, #ops: 0, parent:-]

--Child created id: 262
--Creating new operations for variant [Variant id: 262, #gens: 356, #ops: 0, parent:261]
---analyzing modificationPoint position: 17
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  // depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...]
---analyzing modificationPoint position: 302
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  setCostRelativeTolerance(1.0E-10)
---analyzing modificationPoint position: 171
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [residuals]
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java338
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldX[pj] = point[pj] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 338, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldX[pj] = point[pj] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 262, #gens: 357, #ops: 1, parent:261] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 262
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-262/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(131): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldX[pj] = point[pj] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (261(f=2.0), 262(f=2.0), )
Selected to next generation: IDs2--> (261(f=2.0), )
----------Running generation: 132, population size: 1

***** Generation 132 : 0
**Parent Variant: [Variant id: 263, #gens: 356, #ops: 0, parent:-]

--Child created id: 264
--Creating new operations for variant [Variant id: 264, #gens: 356, #ops: 0, parent:263]
---analyzing modificationPoint position: 237
location: LevenbergMarquardtOptimizer.java517
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = java.lang.Math.sqrt(dxNorm) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 264, #gens: 355, #ops: 1, parent:263] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 264
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-264/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(132): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = java.lang.Math.sqrt(dxNorm) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (263(f=2.0), 264(f=12.0), )
Selected to next generation: IDs2--> (263(f=2.0), )
----------Running generation: 133, population size: 1

***** Generation 133 : 0
**Parent Variant: [Variant id: 265, #gens: 356, #ops: 0, parent:-]

--Child created id: 266
--Creating new operations for variant [Variant id: 266, #gens: 356, #ops: 0, parent:265]
---analyzing modificationPoint position: 217
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.initialStepBoundFactor]
--> var from patch: this.initialStepBoundFactor spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java418
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 418, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 266, #gens: 357, #ops: 1, parent:265] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 266
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-266/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(133): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (265(f=2.0), 266(f=2.0), )
Selected to next generation: IDs2--> (265(f=2.0), )
----------Running generation: 134, population size: 1

***** Generation 134 : 0
**Parent Variant: [Variant id: 267, #gens: 356, #ops: 0, parent:-]

--Child created id: 268
--Creating new operations for variant [Variant id: 268, #gens: 356, #ops: 0, parent:267]
---analyzing modificationPoint position: 50
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [work1, pj, diag, dxNorm]
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: dxNorm spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java556
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum /= diag[pj] ` -topatch--> `work1[pj] *= diag[pj] / dxNorm` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 556, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum /= diag[pj] ` -topatch--> `work1[pj] *= diag[pj] / dxNorm` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 268, #gens: 356, #ops: 1, parent:267] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 268
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-268/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(134): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum /= diag[pj] ` -topatch--> `work1[pj] *= diag[pj] / dxNorm` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (267(f=2.0), 268(f=4.0), )
Selected to next generation: IDs2--> (267(f=2.0), )
----------Running generation: 135, population size: 1

***** Generation 135 : 0
**Parent Variant: [Variant id: 269, #gens: 356, #ops: 0, parent:-]

--Child created id: 270
--Creating new operations for variant [Variant id: 270, #gens: 356, #ops: 0, parent:269]
---analyzing modificationPoint position: 90
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java692
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 692, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 270, #gens: 357, #ops: 1, parent:269] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 270
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-270/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(135): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (269(f=2.0), 270(f=2.0), )
Selected to next generation: IDs2--> (269(f=2.0), )
----------Running generation: 136, population size: 1

***** Generation 136 : 0
**Parent Variant: [Variant id: 271, #gens: 356, #ops: 0, parent:-]

--Child created id: 272
--Creating new operations for variant [Variant id: 272, #gens: 356, #ops: 0, parent:271]
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 244
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  gamma += jacobian[i][pk] * y[i]
---analyzing modificationPoint position: 72
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  fp = dxNorm - delta
---analyzing modificationPoint position: 90
location: LevenbergMarquardtOptimizer.java692
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 272, #gens: 355, #ops: 1, parent:271] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 272, errors: [LevenbergMarquardtOptimizer.java:689: error: variable declaration not allowed here
				int pk = permutation[k];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(136): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (271(f=2.0), 272(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (271(f=2.0), )
----------Running generation: 137, population size: 1

***** Generation 137 : 0
**Parent Variant: [Variant id: 273, #gens: 356, #ops: 0, parent:-]

--Child created id: 274
--Creating new operations for variant [Variant id: 274, #gens: 356, #ops: 0, parent:273]
---analyzing modificationPoint position: 194
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [point, objective]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: objective spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java377
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 377, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 274, #gens: 357, #ops: 1, parent:273] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 274, errors: [LevenbergMarquardtOptimizer.java:377: error: variable current is already defined in method doOptimize()
				for (int j = 0; j < solvedCols; ++j) { 					org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);
				                                       					                                                             ^]
Ingredient counter is Zero
---Undoing: gnrtn(137): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (273(f=2.0), 274(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (273(f=2.0), )
----------Running generation: 138, population size: 1

***** Generation 138 : 0
**Parent Variant: [Variant id: 275, #gens: 356, #ops: 0, parent:-]

--Child created id: 276
--Creating new operations for variant [Variant id: 276, #gens: 356, #ops: 0, parent:275]
---analyzing modificationPoint position: 91
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.orthoTolerance]
--> var from patch: this.orthoTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java696
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 696, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 276, #gens: 357, #ops: 1, parent:275] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 276
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-276/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(138): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (275(f=2.0), 276(f=2.0), )
Selected to next generation: IDs2--> (275(f=2.0), )
----------Running generation: 139, population size: 1

***** Generation 139 : 0
**Parent Variant: [Variant id: 277, #gens: 356, #ops: 0, parent:-]

--Child created id: 278
--Creating new operations for variant [Variant id: 278, #gens: 356, #ops: 0, parent:277]
---analyzing modificationPoint position: 116
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [beta, cols]
--> var from patch: beta spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java748
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 748, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 278, #gens: 357, #ops: 1, parent:277] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 278
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-278/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(139): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (277(f=2.0), 278(f=2.0), )
Selected to next generation: IDs2--> (277(f=2.0), )
----------Running generation: 140, population size: 1

***** Generation 140 : 0
**Parent Variant: [Variant id: 279, #gens: 356, #ops: 0, parent:-]

--Child created id: 280
--Creating new operations for variant [Variant id: 280, #gens: 356, #ops: 0, parent:279]
---analyzing modificationPoint position: 286
location: LevenbergMarquardtOptimizer.java813
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 280, #gens: 355, #ops: 1, parent:279] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 280
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-280/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(140): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (279(f=2.0), 280(f=18.0), )
Selected to next generation: IDs2--> (279(f=2.0), )
----------Running generation: 141, population size: 1

***** Generation 141 : 0
**Parent Variant: [Variant id: 281, #gens: 356, #ops: 0, parent:-]

--Child created id: 282
--Creating new operations for variant [Variant id: 282, #gens: 356, #ops: 0, parent:281]
---analyzing modificationPoint position: 60
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; }
---analyzing modificationPoint position: 236
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  dxNorm += s * s
---analyzing modificationPoint position: 350
location: AbstractLeastSquaresOptimizer.java117
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setConvergenceChecker(new org.apache.commons.math.optimization.SimpleVectorialValueChecker()) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 282, #gens: 355, #ops: 1, parent:281] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 282
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-282/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(141): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setConvergenceChecker(new org.apache.commons.math.optimization.SimpleVectorialValueChecker()) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (281(f=2.0), 282(f=2.0), )
Selected to next generation: IDs2--> (281(f=2.0), )
----------Running generation: 142, population size: 1

***** Generation 142 : 0
**Parent Variant: [Variant id: 283, #gens: 356, #ops: 0, parent:-]

--Child created id: 284
--Creating new operations for variant [Variant id: 284, #gens: 356, #ops: 0, parent:283]
---analyzing modificationPoint position: 155
---modifPoint 0 not mutation generated in  // check orthogonality between function vector and jacobian columns double maxCosine = 0
---analyzing modificationPoint position: 20
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 34
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  cos = sin * cotan
---analyzing modificationPoint position: 5
location: LevenbergMarquardtOptimizer.java607
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 284, #gens: 355, #ops: 1, parent:283] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 284, errors: [LevenbergMarquardtOptimizer.java:607: error: variable declaration not allowed here
				int pj = permutation[j];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(142): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (283(f=2.0), 284(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (283(f=2.0), )
----------Running generation: 143, population size: 1

***** Generation 143 : 0
**Parent Variant: [Variant id: 285, #gens: 356, #ops: 0, parent:-]

--Child created id: 286
--Creating new operations for variant [Variant id: 286, #gens: 356, #ops: 0, parent:285]
---analyzing modificationPoint position: 46
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 98
location: LevenbergMarquardtOptimizer.java711
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `qtbpj = ((-sin) * work[k]) + (cos * qtbpj) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 286, #gens: 355, #ops: 1, parent:285] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 286
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-286/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(143): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `qtbpj = ((-sin) * work[k]) + (cos * qtbpj) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (285(f=2.0), 286(f=8.0), )
Selected to next generation: IDs2--> (285(f=2.0), )
----------Running generation: 144, population size: 1

***** Generation 144 : 0
**Parent Variant: [Variant id: 287, #gens: 356, #ops: 0, parent:-]

--Child created id: 288
--Creating new operations for variant [Variant id: 288, #gens: 356, #ops: 0, parent:287]
---analyzing modificationPoint position: 331
location: AbstractLeastSquaresOptimizer.java223
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `index += cols ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 288, #gens: 355, #ops: 1, parent:287] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 288
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-288/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(144): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `index += cols ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (287(f=2.0), 288(f=2.0), )
Selected to next generation: IDs2--> (287(f=2.0), )
----------Running generation: 145, population size: 1

***** Generation 145 : 0
**Parent Variant: [Variant id: 289, #gens: 356, #ops: 0, parent:-]

--Child created id: 290
--Creating new operations for variant [Variant id: 290, #gens: 356, #ops: 0, parent:289]
---analyzing modificationPoint position: 77
Templates availables50
Attempts Base Ingredients  1 total 50
Name Conflict [solvedCols, permutation, diag, lmDir, work3, dxNorm]
---modifPoint 0 not mutation generated in  for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; }
---analyzing modificationPoint position: 44
location: LevenbergMarquardtOptimizer.java549
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// calculate an upper bound, paru, for the zero of the function sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 290, #gens: 355, #ops: 1, parent:289] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 290, errors: [LevenbergMarquardtOptimizer.java:558: error: variable sum2 might not have been initialized
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:560: error: variable sum2 might not have been initialized
		double gNorm = java.lang.Math.sqrt(sum2);
		                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(145): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// calculate an upper bound, paru, for the zero of the function sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (289(f=2.0), 290(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (289(f=2.0), )
----------Running generation: 146, population size: 1

***** Generation 146 : 0
**Parent Variant: [Variant id: 291, #gens: 356, #ops: 0, parent:-]

--Child created id: 292
--Creating new operations for variant [Variant id: 292, #gens: 356, #ops: 0, parent:291]
---analyzing modificationPoint position: 19
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] *= diag[pj] / dxNorm; }
---analyzing modificationPoint position: 45
location: LevenbergMarquardtOptimizer.java550
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 292, #gens: 355, #ops: 1, parent:291] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 292
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-292/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(146): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (291(f=2.0), 292(f=4.0), )
Selected to next generation: IDs2--> (291(f=2.0), )
----------Running generation: 147, population size: 1

***** Generation 147 : 0
**Parent Variant: [Variant id: 293, #gens: 356, #ops: 0, parent:-]

--Child created id: 294
--Creating new operations for variant [Variant id: 294, #gens: 356, #ops: 0, parent:293]
---analyzing modificationPoint position: 24
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [residuals]
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java536
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 536, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 294, #gens: 357, #ops: 1, parent:293] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 294
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-294/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(147): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (293(f=2.0), 294(f=2.0), )
Selected to next generation: IDs2--> (293(f=2.0), )
----------Running generation: 148, population size: 1

***** Generation 148 : 0
**Parent Variant: [Variant id: 295, #gens: 356, #ops: 0, parent:-]

--Child created id: 296
--Creating new operations for variant [Variant id: 296, #gens: 356, #ops: 0, parent:295]
---analyzing modificationPoint position: 353
location: AbstractLeastSquaresOptimizer.java124
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 296, #gens: 355, #ops: 1, parent:295] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 296
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-296/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(148): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (295(f=2.0), 296(f=18.0), )
Selected to next generation: IDs2--> (295(f=2.0), )
----------Running generation: 149, population size: 1

***** Generation 149 : 0
**Parent Variant: [Variant id: 297, #gens: 356, #ops: 0, parent:-]

--Child created id: 298
--Creating new operations for variant [Variant id: 298, #gens: 356, #ops: 0, parent:297]
---analyzing modificationPoint position: 47
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [beta, cols]
--> var from patch: beta spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java552
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 552, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 298, #gens: 357, #ops: 1, parent:297] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 298
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-298/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(149): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (297(f=2.0), 298(f=2.0), )
Selected to next generation: IDs2--> (297(f=2.0), )
----------Running generation: 150, population size: 1

***** Generation 150 : 0
**Parent Variant: [Variant id: 299, #gens: 356, #ops: 0, parent:-]

--Child created id: 300
--Creating new operations for variant [Variant id: 300, #gens: 356, #ops: 0, parent:299]
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 21
location: LevenbergMarquardtOptimizer.java532
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 300, #gens: 355, #ops: 1, parent:299] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 300, errors: [LevenbergMarquardtOptimizer.java:532: error: variable declaration not allowed here
				int pj = permutation[j];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(150): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (299(f=2.0), 300(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (299(f=2.0), )
----------Running generation: 151, population size: 1

***** Generation 151 : 0
**Parent Variant: [Variant id: 301, #gens: 356, #ops: 0, parent:-]

--Child created id: 302
--Creating new operations for variant [Variant id: 302, #gens: 356, #ops: 0, parent:301]
---analyzing modificationPoint position: 171
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, jacobian, qy, diag, sum2]
---modifPoint 0 not mutation generated in  oldX[pj] = point[pj]
---analyzing modificationPoint position: 184
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmNorm = java.lang.Math.sqrt(lmNorm)
---analyzing modificationPoint position: 197
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int i = 0; i <= j; ++i) { 	work1[i] += jacobian[i][pj] * dirJ; }
---analyzing modificationPoint position: 0
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java402
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmp = 0.1 ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 402, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmp = 0.1 ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 302, #gens: 357, #ops: 1, parent:301] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 302
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-302/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(151): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmp = 0.1 ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (301(f=2.0), 302(f=12.0), )
Selected to next generation: IDs2--> (301(f=2.0), )
----------Running generation: 152, population size: 1

***** Generation 152 : 0
**Parent Variant: [Variant id: 303, #gens: 356, #ops: 0, parent:-]

--Child created id: 304
--Creating new operations for variant [Variant id: 304, #gens: 356, #ops: 0, parent:303]
---analyzing modificationPoint position: 91
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java696
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 696, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 304, #gens: 357, #ops: 1, parent:303] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 304
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-304/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(152): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (303(f=2.0), 304(f=4.0), )
Selected to next generation: IDs2--> (303(f=2.0), )
----------Running generation: 153, population size: 1

***** Generation 153 : 0
**Parent Variant: [Variant id: 305, #gens: 356, #ops: 0, parent:-]

--Child created id: 306
--Creating new operations for variant [Variant id: 306, #gens: 356, #ops: 0, parent:305]
---analyzing modificationPoint position: 27
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  sum += jacobian[i][pj] * work1[permutation[i]]
---analyzing modificationPoint position: 201
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 1 not mutation generated in  coeff1 += work1[j] * work1[j]
---analyzing modificationPoint position: 17
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  // depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...]
---analyzing modificationPoint position: 21
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java532
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 532, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 306, #gens: 357, #ops: 1, parent:305] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 306, errors: [LevenbergMarquardtOptimizer.java:794: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:794: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:795: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:795: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:796: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:796: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:799: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:800: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:799: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:801: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:801: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:801: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:801: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:802: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:802: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:801: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:802: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:802: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:803: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:803: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:804: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:804: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:805: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:805: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:805: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:809: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:809: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:809: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:810: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:811: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:812: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:815: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:816: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:816: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:816: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:816: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(153): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (305(f=2.0), 306(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (305(f=2.0), )
----------Running generation: 154, population size: 1

***** Generation 154 : 0
**Parent Variant: [Variant id: 307, #gens: 356, #ops: 0, parent:-]

--Child created id: 308
--Creating new operations for variant [Variant id: 308, #gens: 356, #ops: 0, parent:307]
---analyzing modificationPoint position: 47
---modifPoint 0 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 177
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // compute the new point and the norm of the evolution direction double lmNorm = 0
---analyzing modificationPoint position: 33
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan))
---analyzing modificationPoint position: 67
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 3 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 84
location: LevenbergMarquardtOptimizer.java678
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (dpj != 0) { 	java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 308, #gens: 355, #ops: 1, parent:307] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 308
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-308/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(154): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (dpj != 0) { 	java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (307(f=2.0), 308(f=13.0), )
Selected to next generation: IDs2--> (307(f=2.0), )
----------Running generation: 155, population size: 1

***** Generation 155 : 0
**Parent Variant: [Variant id: 309, #gens: 356, #ops: 0, parent:-]

--Child created id: 310
--Creating new operations for variant [Variant id: 310, #gens: 356, #ops: 0, parent:309]
---analyzing modificationPoint position: 205
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  double preRed = coeff1 + (2 * coeff2)
---analyzing modificationPoint position: 123
location: LevenbergMarquardtOptimizer.java405
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmPar /= tmp ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 310, #gens: 355, #ops: 1, parent:309] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 310
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-310/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(155): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmPar /= tmp ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (309(f=2.0), 310(f=5.0), )
Selected to next generation: IDs2--> (309(f=2.0), )
----------Running generation: 156, population size: 1

***** Generation 156 : 0
**Parent Variant: [Variant id: 311, #gens: 356, #ops: 0, parent:-]

--Child created id: 312
--Creating new operations for variant [Variant id: 312, #gens: 356, #ops: 0, parent:311]
---analyzing modificationPoint position: 227
---modifPoint 0 not mutation generated in  int pk = permutation[k]
---analyzing modificationPoint position: 32
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [cols, permutation, rows, jacobian, y, beta]
---modifPoint 1 not mutation generated in  final double cotan = rkk / lmDiag[k]
---analyzing modificationPoint position: 60
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; }
---analyzing modificationPoint position: 297
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  jacobian[k][pk] -= alpha
---analyzing modificationPoint position: 53
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java560
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double paru = gNorm / delta ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 560, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double paru = gNorm / delta ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 312, #gens: 356, #ops: 1, parent:311] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 312, errors: [LevenbergMarquardtOptimizer.java:562: error: cannot find symbol
		if (paru == 0) {
		    ^
  symbol:   variable paru
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:564: error: cannot find symbol
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			^
  symbol:   variable paru
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:569: error: cannot find symbol
		lmPar = java.lang.Math.min(paru, java.lang.Math.max(lmPar, parl));
		                           ^
  symbol:   variable paru
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:578: error: cannot find symbol
				lmPar = java.lang.Math.max(2.2251E-308, 0.001 * paru);
				                                                ^
  symbol:   variable paru
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:629: error: cannot find symbol
				paru = java.lang.Math.min(paru, lmPar);
				^
  symbol:   variable paru
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:629: error: cannot find symbol
				paru = java.lang.Math.min(paru, lmPar);
				                          ^
  symbol:   variable paru
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(156): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double paru = gNorm / delta ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (311(f=2.0), 312(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (311(f=2.0), )
----------Running generation: 157, population size: 1

***** Generation 157 : 0
**Parent Variant: [Variant id: 313, #gens: 356, #ops: 0, parent:-]

--Child created id: 314
--Creating new operations for variant [Variant id: 314, #gens: 356, #ops: 0, parent:313]
---analyzing modificationPoint position: 171
location: LevenbergMarquardtOptimizer.java338
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldX[pj] = point[pj] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 314, #gens: 355, #ops: 1, parent:313] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 314, errors: [LevenbergMarquardtOptimizer.java:338: error: variable declaration not allowed here
					int pj = permutation[j];
					    ^]
Ingredient counter is Zero
---Undoing: gnrtn(157): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldX[pj] = point[pj] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (313(f=2.0), 314(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (313(f=2.0), )
----------Running generation: 158, population size: 1

***** Generation 158 : 0
**Parent Variant: [Variant id: 315, #gens: 356, #ops: 0, parent:-]

--Child created id: 316
--Creating new operations for variant [Variant id: 316, #gens: 356, #ops: 0, parent:315]
---analyzing modificationPoint position: 274
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [diagR, cols]
--> var from patch: diagR spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java791
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `norm2 += akk * akk ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 791, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `norm2 += akk * akk ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 316, #gens: 357, #ops: 1, parent:315] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 316
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-316/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(158): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `norm2 += akk * akk ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (315(f=2.0), 316(f=2.0), )
Selected to next generation: IDs2--> (315(f=2.0), )
----------Running generation: 159, population size: 1

***** Generation 159 : 0
**Parent Variant: [Variant id: 317, #gens: 356, #ops: 0, parent:-]

--Child created id: 318
--Creating new operations for variant [Variant id: 318, #gens: 356, #ops: 0, parent:317]
---analyzing modificationPoint position: 312
Templates availables4
Attempts Base Ingredients  1 total 4
---modifPoint 0 not mutation generated in  this.point = (point == null) ? null : point.clone()
---analyzing modificationPoint position: 75
location: LevenbergMarquardtOptimizer.java662
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 318, #gens: 355, #ops: 1, parent:317] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 318
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-318/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(159): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (317(f=2.0), 318(f=15.0), )
Selected to next generation: IDs2--> (317(f=2.0), )
----------Running generation: 160, population size: 1

***** Generation 160 : 0
**Parent Variant: [Variant id: 319, #gens: 356, #ops: 0, parent:-]

--Child created id: 320
--Creating new operations for variant [Variant id: 320, #gens: 356, #ops: 0, parent:319]
---analyzing modificationPoint position: 44
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // calculate an upper bound, paru, for the zero of the function sum2 = 0
---analyzing modificationPoint position: 14
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [point, objective]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: objective spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java619
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = work1[permutation[j]] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 619, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = work1[permutation[j]] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 320, #gens: 356, #ops: 1, parent:319] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 320, errors: [LevenbergMarquardtOptimizer.java:621: error: cannot find symbol
				sum2 += s * s;
				        ^
  symbol:   variable s
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:621: error: cannot find symbol
				sum2 += s * s;
				            ^
  symbol:   variable s
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(160): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = work1[permutation[j]] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (319(f=2.0), 320(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (319(f=2.0), )
----------Running generation: 161, population size: 1

***** Generation 161 : 0
**Parent Variant: [Variant id: 321, #gens: 356, #ops: 0, parent:-]

--Child created id: 322
--Creating new operations for variant [Variant id: 322, #gens: 356, #ops: 0, parent:321]
---analyzing modificationPoint position: 123
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  lmPar /= tmp
---analyzing modificationPoint position: 348
location: SimpleVectorialValueChecker.java51
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 322, #gens: 355, #ops: 1, parent:321] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 322, errors: [SimpleVectorialValueChecker.java:54: error: variable relativeThreshold might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(161): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (321(f=2.0), 322(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (321(f=2.0), )
----------Running generation: 162, population size: 1

***** Generation 162 : 0
**Parent Variant: [Variant id: 323, #gens: 356, #ops: 0, parent:-]

--Child created id: 324
--Creating new operations for variant [Variant id: 324, #gens: 356, #ops: 0, parent:323]
---analyzing modificationPoint position: 101
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [lmPar, paru, solvedCols, permutation, work1, diag, qy, work2, work3, dxNorm, lmDir, fp, delta, parl, jacobian, sum2]
---modifPoint 0 not mutation generated in  double rik = jacobian[i][pk]
---analyzing modificationPoint position: 114
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java746
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 746, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 324, #gens: 357, #ops: 1, parent:323] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 324, errors: [LevenbergMarquardtOptimizer.java:865: error: cannot find symbol
			for (int dk = (cols - 1) - k; dk > 0; --dk) { 				double gamma = 0; 				for (int j = k; j < jacobian.length; ++j) { 					gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]];} 				gamma *= betak; 				for (int j = k; j < jacobian.length; ++j) { 					jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk];}}} 		rank = solvedCols;} 	/**
			                                              				                  				                                            					                     ^
  symbol:   variable pk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:865: error: cannot find symbol
			for (int dk = (cols - 1) - k; dk > 0; --dk) { 				double gamma = 0; 				for (int j = k; j < jacobian.length; ++j) { 					gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]];} 				gamma *= betak; 				for (int j = k; j < jacobian.length; ++j) { 					jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk];}}} 		rank = solvedCols;} 	/**
			                                              				                  				                                            					                                                              				         ^
  symbol:   variable betak
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:865: error: cannot find symbol
			for (int dk = (cols - 1) - k; dk > 0; --dk) { 				double gamma = 0; 				for (int j = k; j < jacobian.length; ++j) { 					gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]];} 				gamma *= betak; 				for (int j = k; j < jacobian.length; ++j) { 					jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk];}}} 		rank = solvedCols;} 	/**
			                                              				                  				                                            					                                                              				                				                                            					                                                        ^
  symbol:   variable pk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(162): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (323(f=2.0), 324(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (323(f=2.0), )
----------Running generation: 163, population size: 1

***** Generation 163 : 0
**Parent Variant: [Variant id: 325, #gens: 356, #ops: 0, parent:-]

--Child created id: 326
--Creating new operations for variant [Variant id: 326, #gens: 356, #ops: 0, parent:325]
---analyzing modificationPoint position: 55
location: LevenbergMarquardtOptimizer.java568
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 326, #gens: 355, #ops: 1, parent:325] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 326
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-326/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(163): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (325(f=2.0), 326(f=3.0), )
Selected to next generation: IDs2--> (325(f=2.0), )
----------Running generation: 164, population size: 1

***** Generation 164 : 0
**Parent Variant: [Variant id: 327, #gens: 356, #ops: 0, parent:-]

--Child created id: 328
--Creating new operations for variant [Variant id: 328, #gens: 356, #ops: 0, parent:327]
---analyzing modificationPoint position: 268
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java274
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 274, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 328, #gens: 357, #ops: 1, parent:327] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 328
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-328/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(164): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (327(f=2.0), 328(f=2.0), )
Selected to next generation: IDs2--> (327(f=2.0), )
----------Running generation: 165, population size: 1

***** Generation 165 : 0
**Parent Variant: [Variant id: 329, #gens: 356, #ops: 0, parent:-]

--Child created id: 330
--Creating new operations for variant [Variant id: 330, #gens: 356, #ops: 0, parent:329]
---analyzing modificationPoint position: 42
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double parl = 0
---analyzing modificationPoint position: 104
location: LevenbergMarquardtOptimizer.java719
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pk] = temp2 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 330, #gens: 355, #ops: 1, parent:329] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 330
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-330/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(165): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pk] = temp2 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (329(f=2.0), 330(f=6.0), )
Selected to next generation: IDs2--> (329(f=2.0), )
----------Running generation: 166, population size: 1

***** Generation 166 : 0
**Parent Variant: [Variant id: 331, #gens: 356, #ops: 0, parent:-]

--Child created id: 332
--Creating new operations for variant [Variant id: 332, #gens: 356, #ops: 0, parent:331]
---analyzing modificationPoint position: 119
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [diagR, cols]
--> var from patch: diagR spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java756
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 756, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 332, #gens: 356, #ops: 1, parent:331] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 332
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-332/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(166): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (331(f=2.0), 332(f=15.0), )
Selected to next generation: IDs2--> (331(f=2.0), )
----------Running generation: 167, population size: 1

***** Generation 167 : 0
**Parent Variant: [Variant id: 333, #gens: 356, #ops: 0, parent:-]

--Child created id: 334
--Creating new operations for variant [Variant id: 334, #gens: 356, #ops: 0, parent:333]
---analyzing modificationPoint position: 203
location: LevenbergMarquardtOptimizer.java389
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coeff1 = coeff1 / pc2 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 334, #gens: 355, #ops: 1, parent:333] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 334
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-334/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(167): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coeff1 = coeff1 / pc2 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (333(f=2.0), 334(f=13.0), )
Selected to next generation: IDs2--> (333(f=2.0), )
----------Running generation: 168, population size: 1

***** Generation 168 : 0
**Parent Variant: [Variant id: 335, #gens: 356, #ops: 0, parent:-]

--Child created id: 336
--Creating new operations for variant [Variant id: 336, #gens: 356, #ops: 0, parent:335]
---analyzing modificationPoint position: 120
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [java.lang.Double.NEGATIVE_INFINITY]
--> var from patch: java.lang.Double.NEGATIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java399
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `double ak2 = java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 399, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `double ak2 = java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 336, #gens: 357, #ops: 1, parent:335] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 336, errors: [LevenbergMarquardtOptimizer.java:831: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:831: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:831: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:831: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:831: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:831: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:831: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:831: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:831: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:831: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:837: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:837: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:838: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:838: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:838: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:838: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:838: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:838: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:839: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:839: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:840: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:840: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:840: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:841: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:841: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:841: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:842: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:842: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:842: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:842: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:842: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:842: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:842: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:843: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:842: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:845: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:846: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:848: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:849: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:849: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:852: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:852: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:852: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:853: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:854: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:855: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:858: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:858: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:859: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:859: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(168): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `double ak2 = java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (335(f=2.0), 336(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (335(f=2.0), )
----------Running generation: 169, population size: 1

***** Generation 169 : 0
**Parent Variant: [Variant id: 337, #gens: 356, #ops: 0, parent:-]

--Child created id: 338
--Creating new operations for variant [Variant id: 338, #gens: 356, #ops: 0, parent:337]
---analyzing modificationPoint position: 32
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [point, objective]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: objective spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java698
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 698, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 338, #gens: 356, #ops: 1, parent:337] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 338, errors: [LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                       ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                               ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:701: error: cannot find symbol
						cos = sin * cotan;
						            ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(169): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (337(f=2.0), 338(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (337(f=2.0), )
----------Running generation: 170, population size: 1

***** Generation 170 : 0
**Parent Variant: [Variant id: 339, #gens: 356, #ops: 0, parent:-]

--Child created id: 340
--Creating new operations for variant [Variant id: 340, #gens: 356, #ops: 0, parent:339]
---analyzing modificationPoint position: 160
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (s != 0) { 	double sum = 0; 	for (int i = 0; i <= j; ++i) { 		sum += jacobian[i][pj] * residuals[[...]
---analyzing modificationPoint position: 58
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 1 not mutation generated in  // evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...]
---analyzing modificationPoint position: 297
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 2 not mutation generated in  jacobian[k][pk] -= alpha
---analyzing modificationPoint position: 5
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java607
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 607, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 340, #gens: 357, #ops: 1, parent:339] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 340, errors: [LevenbergMarquardtOptimizer.java:803: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:803: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:804: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:804: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:805: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:805: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:808: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:808: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:808: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:808: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:809: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:808: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:810: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:810: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:811: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:812: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:812: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:812: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:814: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:817: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:817: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:818: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:819: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:820: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:821: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:823: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:824: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:824: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:825: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:825: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:825: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:825: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:853: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:853: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:853: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:853: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:853: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	        ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	                ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(170): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (339(f=2.0), 340(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (339(f=2.0), )
----------Running generation: 171, population size: 1

***** Generation 171 : 0
**Parent Variant: [Variant id: 341, #gens: 356, #ops: 0, parent:-]

--Child created id: 342
--Creating new operations for variant [Variant id: 342, #gens: 356, #ops: 0, parent:341]
---analyzing modificationPoint position: 151
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  xNorm += xk * xk
---analyzing modificationPoint position: 144
location: LevenbergMarquardtOptimizer.java283
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[k][pk] = diagR[pk] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 342, #gens: 355, #ops: 1, parent:341] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 342, errors: [LevenbergMarquardtOptimizer.java:283: error: variable declaration not allowed here
				int pk = permutation[k];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(171): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[k][pk] = diagR[pk] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (341(f=2.0), 342(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (341(f=2.0), )
----------Running generation: 172, population size: 1

***** Generation 172 : 0
**Parent Variant: [Variant id: 343, #gens: 356, #ops: 0, parent:-]

--Child created id: 344
--Creating new operations for variant [Variant id: 344, #gens: 356, #ops: 0, parent:343]
---analyzing modificationPoint position: 277
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  // select the column with the greatest norm on active components int nextColumn = -1
---analyzing modificationPoint position: 12
location: LevenbergMarquardtOptimizer.java617
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 344, #gens: 355, #ops: 1, parent:343] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 344
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-344/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(172): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (343(f=2.0), 344(f=7.0), )
Selected to next generation: IDs2--> (343(f=2.0), )
----------Running generation: 173, population size: 1

***** Generation 173 : 0
**Parent Variant: [Variant id: 345, #gens: 356, #ops: 0, parent:-]

--Child created id: 346
--Creating new operations for variant [Variant id: 346, #gens: 356, #ops: 0, parent:345]
---analyzing modificationPoint position: 116
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java748
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 748, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 346, #gens: 357, #ops: 1, parent:345] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 346
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-346/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(173): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (345(f=2.0), 346(f=3.0), )
Selected to next generation: IDs2--> (345(f=2.0), )
----------Running generation: 174, population size: 1

***** Generation 174 : 0
**Parent Variant: [Variant id: 347, #gens: 356, #ops: 0, parent:-]

--Child created id: 348
--Creating new operations for variant [Variant id: 348, #gens: 356, #ops: 0, parent:347]
---analyzing modificationPoint position: 113
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 343
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [jacobianEvaluations]
--> var from patch: jacobianEvaluations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java338
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.residuals = new double[target.length] ` -topatch--> `return jacobianEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 338, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.residuals = new double[target.length] ` -topatch--> `return jacobianEvaluations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 348, #gens: 357, #ops: 1, parent:347] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 348, errors: [AbstractLeastSquaresOptimizer.java:339: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.VectorialPointValuePair
		this.residuals = new double[target.length]; 		return jacobianEvaluations;
		                                            		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(174): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.residuals = new double[target.length] ` -topatch--> `return jacobianEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (347(f=2.0), 348(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (347(f=2.0), )
----------Running generation: 175, population size: 1

***** Generation 175 : 0
**Parent Variant: [Variant id: 349, #gens: 356, #ops: 0, parent:-]

--Child created id: 350
--Creating new operations for variant [Variant id: 350, #gens: 356, #ops: 0, parent:349]
---analyzing modificationPoint position: 150
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double xk = dk * point[k]
---analyzing modificationPoint position: 96
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  // compute the modified diagonal element of R and // the modified element of (Qty,0) jacobian[k][pk][...]
---analyzing modificationPoint position: 50
location: LevenbergMarquardtOptimizer.java556
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum /= diag[pj] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 350, #gens: 355, #ops: 1, parent:349] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 350
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-350/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(175): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum /= diag[pj] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (349(f=2.0), 350(f=4.0), )
Selected to next generation: IDs2--> (349(f=2.0), )
----------Running generation: 176, population size: 1

***** Generation 176 : 0
**Parent Variant: [Variant id: 351, #gens: 356, #ops: 0, parent:-]

--Child created id: 352
--Creating new operations for variant [Variant id: 352, #gens: 356, #ops: 0, parent:351]
---analyzing modificationPoint position: 23
Templates availables50
Attempts Base Ingredients  1 total 50
vars from patch [rank, k, permutation, lmDir, pk, diagR, i, ypk, jacobian]
--> var from patch: rank spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: k spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diagR spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ypk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java535
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 535, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 352, #gens: 356, #ops: 1, parent:351] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 352
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-352/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(176): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (351(f=2.0), 352(f=13.0), )
Selected to next generation: IDs2--> (351(f=2.0), )
----------Running generation: 177, population size: 1

***** Generation 177 : 0
**Parent Variant: [Variant id: 353, #gens: 356, #ops: 0, parent:-]

--Child created id: 354
--Creating new operations for variant [Variant id: 354, #gens: 356, #ops: 0, parent:353]
---analyzing modificationPoint position: 93
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [point, objective]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: objective spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java702
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 702, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 354, #gens: 356, #ops: 1, parent:353] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 354, errors: [LevenbergMarquardtOptimizer.java:704: error: cannot find symbol
						cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan));
						                                       ^
  symbol:   variable tan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:704: error: cannot find symbol
						cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan));
						                                             ^
  symbol:   variable tan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:705: error: cannot find symbol
						sin = cos * tan;
						            ^
  symbol:   variable tan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(177): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (353(f=2.0), 354(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (353(f=2.0), )
----------Running generation: 178, population size: 1

***** Generation 178 : 0
**Parent Variant: [Variant id: 355, #gens: 356, #ops: 0, parent:-]

--Child created id: 356
--Creating new operations for variant [Variant id: 356, #gens: 356, #ops: 0, parent:355]
---analyzing modificationPoint position: 80
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [rows]
--> var from patch: rows spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java668
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `double[] oldRes = new double[rows]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 668, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `double[] oldRes = new double[rows]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 356, #gens: 357, #ops: 1, parent:355] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 356
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-356/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(178): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `double[] oldRes = new double[rows]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (355(f=2.0), 356(f=2.0), )
Selected to next generation: IDs2--> (355(f=2.0), )
----------Running generation: 179, population size: 1

***** Generation 179 : 0
**Parent Variant: [Variant id: 357, #gens: 356, #ops: 0, parent:-]

--Child created id: 358
--Creating new operations for variant [Variant id: 358, #gens: 356, #ops: 0, parent:357]
---analyzing modificationPoint position: 342
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java337
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = startPoint.clone() ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.Max[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 337, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = startPoint.clone() ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.Max[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 358, #gens: 357, #ops: 1, parent:357] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 358, errors: [AbstractLeastSquaresOptimizer.java:339: error: unreachable statement
		this.residuals = new double[target.length];
		^]
Ingredient counter is Zero
---Undoing: gnrtn(179): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = startPoint.clone() ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.Max[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (357(f=2.0), 358(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (357(f=2.0), )
----------Running generation: 180, population size: 1

***** Generation 180 : 0
**Parent Variant: [Variant id: 359, #gens: 356, #ops: 0, parent:-]

--Child created id: 360
--Creating new operations for variant [Variant id: 360, #gens: 356, #ops: 0, parent:359]
---analyzing modificationPoint position: 186
location: LevenbergMarquardtOptimizer.java360
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = java.lang.Math.min(delta, lmNorm) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 360, #gens: 355, #ops: 1, parent:359] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 360
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-360/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(180): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = java.lang.Math.min(delta, lmNorm) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (359(f=2.0), 360(f=4.0), )
Selected to next generation: IDs2--> (359(f=2.0), )
----------Running generation: 181, population size: 1

***** Generation 181 : 0
**Parent Variant: [Variant id: 361, #gens: 356, #ops: 0, parent:-]

--Child created id: 362
--Creating new operations for variant [Variant id: 362, #gens: 356, #ops: 0, parent:361]
---analyzing modificationPoint position: 87
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  // the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]
---analyzing modificationPoint position: 120
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5
---analyzing modificationPoint position: 12
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 119
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java756
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `// local point double delta = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 756, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `// local point double delta = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 362, #gens: 357, #ops: 1, parent:361] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 362
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-362/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(181): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `// local point double delta = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (361(f=2.0), 362(f=2.0), )
Selected to next generation: IDs2--> (361(f=2.0), )
----------Running generation: 182, population size: 1

***** Generation 182 : 0
**Parent Variant: [Variant id: 363, #gens: 356, #ops: 0, parent:-]

--Child created id: 364
--Creating new operations for variant [Variant id: 364, #gens: 356, #ops: 0, parent:363]
---analyzing modificationPoint position: 203
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  coeff1 = coeff1 / pc2
---analyzing modificationPoint position: 21
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  work1[pj] *= diag[pj] / dxNorm
---analyzing modificationPoint position: 204
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2
---analyzing modificationPoint position: 345
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [maxEvaluations, point]
--> var from patch: maxEvaluations spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java342
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `cols = point.length ` -topatch--> `throw new org.apache.commons.math.FunctionEvaluationException(new org.apache.commons.math.MaxEvaluat[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 342, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `cols = point.length ` -topatch--> `throw new org.apache.commons.math.FunctionEvaluationException(new org.apache.commons.math.MaxEvaluat[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 364, #gens: 357, #ops: 1, parent:363] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 364, errors: [AbstractLeastSquaresOptimizer.java:343: error: unreachable statement
		cols = point.length;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(182): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `cols = point.length ` -topatch--> `throw new org.apache.commons.math.FunctionEvaluationException(new org.apache.commons.math.MaxEvaluat[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (363(f=2.0), 364(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (363(f=2.0), )
----------Running generation: 183, population size: 1

***** Generation 183 : 0
**Parent Variant: [Variant id: 365, #gens: 356, #ops: 0, parent:-]

--Child created id: 366
--Creating new operations for variant [Variant id: 366, #gens: 356, #ops: 0, parent:365]
---analyzing modificationPoint position: 150
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double xk = dk * point[k]
---analyzing modificationPoint position: 287
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  ak2 = norm2
---analyzing modificationPoint position: 317
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 2 not mutation generated in  for (int i = 0; i < rows; i++) { 	final double[] ji = jacobian[i]; 	final double factor = -java.lang[...]
---analyzing modificationPoint position: 55
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  // if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...]
---analyzing modificationPoint position: 83
---modifPoint 4 not mutation generated in  double dpj = diag[pj]
---analyzing modificationPoint position: 256
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  double[] diag = new double[cols]
---analyzing modificationPoint position: 56
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.costRelativeTolerance]
--> var from patch: this.costRelativeTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java569
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (lmPar == 0) { 	lmPar = gNorm / dxNorm; } ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 569, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (lmPar == 0) { 	lmPar = gNorm / dxNorm; } ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 366, #gens: 357, #ops: 1, parent:365] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child compiles: id 366
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-366/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(183): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (lmPar == 0) { 	lmPar = gNorm / dxNorm; } ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (365(f=2.0), 366(f=2.0), )
Selected to next generation: IDs2--> (365(f=2.0), )
----------Running generation: 184, population size: 1

***** Generation 184 : 0
**Parent Variant: [Variant id: 367, #gens: 356, #ops: 0, parent:-]

--Child created id: 368
--Creating new operations for variant [Variant id: 368, #gens: 356, #ops: 0, parent:367]
---analyzing modificationPoint position: 192
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  actRed = 1.0 - (r * r)
---analyzing modificationPoint position: 86
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmDiag[j] = dpj
---analyzing modificationPoint position: 102
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  final double temp2 = (cos * rik) + (sin * lmDiag[i])
---analyzing modificationPoint position: 9
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [diag, pj, lmDir]
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java612
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `double s = diag[pj] * lmDir[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 612, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `double s = diag[pj] * lmDir[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 368, #gens: 357, #ops: 1, parent:367] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 368
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-368/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(184): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `double s = diag[pj] * lmDir[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (367(f=2.0), 368(f=2.0), )
Selected to next generation: IDs2--> (367(f=2.0), )
----------Running generation: 185, population size: 1

***** Generation 185 : 0
**Parent Variant: [Variant id: 369, #gens: 356, #ops: 0, parent:-]

--Child created id: 370
--Creating new operations for variant [Variant id: 370, #gens: 356, #ops: 0, parent:369]
---analyzing modificationPoint position: 41
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  oldRes = tmpVec
---analyzing modificationPoint position: 111
location: LevenbergMarquardtOptimizer.java743
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nSing > 0) { 	for (int j = nSing - 1; j >= 0; --j) { 		int pj = permutation[j]; 		double sum = 0[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 370, #gens: 355, #ops: 1, parent:369] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 370
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-370/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(185): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nSing > 0) { 	for (int j = nSing - 1; j >= 0; --j) { 		int pj = permutation[j]; 		double sum = 0[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (369(f=2.0), 370(f=15.0), )
Selected to next generation: IDs2--> (369(f=2.0), )
----------Running generation: 186, population size: 1

***** Generation 186 : 0
**Parent Variant: [Variant id: 371, #gens: 356, #ops: 0, parent:-]

--Child created id: 372
--Creating new operations for variant [Variant id: 372, #gens: 356, #ops: 0, parent:371]
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 204
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2
---analyzing modificationPoint position: 134
---modifPoint 2 not mutation generated in  double gamma = 0
---analyzing modificationPoint position: 116
location: LevenbergMarquardtOptimizer.java748
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 372, #gens: 355, #ops: 1, parent:371] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 372
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-372/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(186): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (371(f=2.0), 372(f=12.0), )
Selected to next generation: IDs2--> (371(f=2.0), )
----------Running generation: 187, population size: 1

***** Generation 187 : 0
**Parent Variant: [Variant id: 373, #gens: 356, #ops: 0, parent:-]

--Child created id: 374
--Creating new operations for variant [Variant id: 374, #gens: 356, #ops: 0, parent:373]
---analyzing modificationPoint position: 204
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2
---analyzing modificationPoint position: 85
location: LevenbergMarquardtOptimizer.java679
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 374, #gens: 355, #ops: 1, parent:373] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 374
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-374/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(187): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (373(f=2.0), 374(f=13.0), )
Selected to next generation: IDs2--> (373(f=2.0), )
----------Running generation: 188, population size: 1

***** Generation 188 : 0
**Parent Variant: [Variant id: 375, #gens: 356, #ops: 0, parent:-]

--Child created id: 376
--Creating new operations for variant [Variant id: 376, #gens: 356, #ops: 0, parent:375]
---analyzing modificationPoint position: 3
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...]
---analyzing modificationPoint position: 283
location: LevenbergMarquardtOptimizer.java806
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `norm2 += aki * aki ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 376, #gens: 355, #ops: 1, parent:375] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 376, errors: [LevenbergMarquardtOptimizer.java:806: error: variable declaration not allowed here
					double aki = jacobian[j][permutation[i]];
					       ^]
Ingredient counter is Zero
---Undoing: gnrtn(188): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `norm2 += aki * aki ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (375(f=2.0), 376(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (375(f=2.0), )
----------Running generation: 189, population size: 1

***** Generation 189 : 0
**Parent Variant: [Variant id: 377, #gens: 356, #ops: 0, parent:-]

--Child created id: 378
--Creating new operations for variant [Variant id: 378, #gens: 356, #ops: 0, parent:377]
---analyzing modificationPoint position: 55
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [rank, j, cols, lmDir, permutation]
--> var from patch: rank spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java568
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 568, pointed element: CtForImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 378, #gens: 357, #ops: 1, parent:377] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 378
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-378/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(189): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (377(f=2.0), 378(f=2.0), )
Selected to next generation: IDs2--> (377(f=2.0), )
----------Running generation: 190, population size: 1

***** Generation 190 : 0
**Parent Variant: [Variant id: 379, #gens: 356, #ops: 0, parent:-]

--Child created id: 380
--Creating new operations for variant [Variant id: 380, #gens: 356, #ops: 0, parent:379]
---analyzing modificationPoint position: 81
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java672
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...] ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 672, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...] ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 380, #gens: 357, #ops: 1, parent:379] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 380
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-380/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(190): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...] ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (379(f=2.0), 380(f=2.0), )
Selected to next generation: IDs2--> (379(f=2.0), )
----------Running generation: 191, population size: 1

***** Generation 191 : 0
**Parent Variant: [Variant id: 381, #gens: 356, #ops: 0, parent:-]

--Child created id: 382
--Creating new operations for variant [Variant id: 382, #gens: 356, #ops: 0, parent:381]
---analyzing modificationPoint position: 67
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [java.lang.Double.NEGATIVE_INFINITY]
--> var from patch: java.lang.Double.NEGATIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java589
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = diag[pj] * lmDir[pj] ` -topatch--> `double ak2 = java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 589, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = diag[pj] * lmDir[pj] ` -topatch--> `double ak2 = java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 382, #gens: 357, #ops: 1, parent:381] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 382, errors: [LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:806: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:807: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:808: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:809: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:809: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:809: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:811: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:811: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:811: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:811: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:812: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:811: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:813: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:813: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:814: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:817: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:817: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:818: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:818: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:817: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:818: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:818: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:820: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:820: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:821: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:821: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:821: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:822: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:823: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:824: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:826: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:827: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:827: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:828: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:828: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:828: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:828: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:828: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:828: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:828: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:828: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:828: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:828: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:828: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:828: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:828: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:828: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:856: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:856: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:856: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:864: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];
	    	^, LevenbergMarquardtOptimizer.java:864: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];
	    	        ^, LevenbergMarquardtOptimizer.java:864: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];
	    	                ^, LevenbergMarquardtOptimizer.java:864: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(191): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = diag[pj] * lmDir[pj] ` -topatch--> `double ak2 = java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (381(f=2.0), 382(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (381(f=2.0), )
----------Running generation: 192, population size: 1

***** Generation 192 : 0
**Parent Variant: [Variant id: 383, #gens: 356, #ops: 0, parent:-]

--Child created id: 384
--Creating new operations for variant [Variant id: 384, #gens: 356, #ops: 0, parent:383]
---analyzing modificationPoint position: 88
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int k = j; k < solvedCols; ++k) { 	int pk = permutation[k];  	// determine a Givens rotation wh[...]
---analyzing modificationPoint position: 8
location: LevenbergMarquardtOptimizer.java611
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] /= work2[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 384, #gens: 355, #ops: 1, parent:383] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 384
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-384/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(192): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] /= work2[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (383(f=2.0), 384(f=8.0), )
Selected to next generation: IDs2--> (383(f=2.0), )
----------Running generation: 193, population size: 1

***** Generation 193 : 0
**Parent Variant: [Variant id: 385, #gens: 356, #ops: 0, parent:-]

--Child created id: 386
--Creating new operations for variant [Variant id: 386, #gens: 356, #ops: 0, parent:385]
---analyzing modificationPoint position: 114
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 81
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...]
---analyzing modificationPoint position: 46
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java551
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 551, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 386, #gens: 357, #ops: 1, parent:385] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 386, errors: [LevenbergMarquardtOptimizer.java:551: error: unreported exception org.apache.commons.math.FunctionEvaluationException; must be caught or declared to be thrown
		for (int j = 0; j < solvedCols; ++j) { 			updateJacobian();
		                                       			              ^]
Ingredient counter is Zero
---Undoing: gnrtn(193): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (385(f=2.0), 386(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (385(f=2.0), )
----------Running generation: 194, population size: 1

***** Generation 194 : 0
**Parent Variant: [Variant id: 387, #gens: 356, #ops: 0, parent:-]

--Child created id: 388
--Creating new operations for variant [Variant id: 388, #gens: 356, #ops: 0, parent:387]
---analyzing modificationPoint position: 154
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...]
---analyzing modificationPoint position: 145
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...]
---analyzing modificationPoint position: 246
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int i = k; i < rows; ++i) { 	y[i] -= gamma * jacobian[i][pk]; }
---analyzing modificationPoint position: 248
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  // arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)
---analyzing modificationPoint position: 185
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  // on the first iteration, adjust the initial step bound. if (firstIteration) { 	delta = java.lang.M[...]
---analyzing modificationPoint position: 210
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 5 not mutation generated in  delta = 2 * lmNorm
---analyzing modificationPoint position: 234
---modifPoint 6 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 255
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 7 not mutation generated in  double xNorm = 0
---analyzing modificationPoint position: 325
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [jacobian, rows, cols]
--> var from patch: jacobian spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: rows spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java217
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = 0 ` -topatch--> `jacobian = new double[rows][cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 217, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = 0 ` -topatch--> `jacobian = new double[rows][cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 388, #gens: 356, #ops: 1, parent:387] gen mutated: 1 , gen not mut: 8, gen not applied  0
-The child does NOT compile: 388, errors: [AbstractLeastSquaresOptimizer.java:370: error: illegal start of expression
	 * Guess the errors in optimized parameters.
	 ^, AbstractLeastSquaresOptimizer.java:370: error: ';' expected
	 * Guess the errors in optimized parameters.
	        ^, AbstractLeastSquaresOptimizer.java:370: error: ';' expected
	 * Guess the errors in optimized parameters.
	                   ^, AbstractLeastSquaresOptimizer.java:370: error: ';' expected
	 * Guess the errors in optimized parameters.
	                                ^, AbstractLeastSquaresOptimizer.java:370: error: <identifier> expected
	 * Guess the errors in optimized parameters.
	                                            ^, AbstractLeastSquaresOptimizer.java:371: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	      ^, AbstractLeastSquaresOptimizer.java:371: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	 ^, AbstractLeastSquaresOptimizer.java:371: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                            ^, AbstractLeastSquaresOptimizer.java:371: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                             ^, AbstractLeastSquaresOptimizer.java:371: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                  ^, AbstractLeastSquaresOptimizer.java:371: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                           ^, AbstractLeastSquaresOptimizer.java:371: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                       ^, AbstractLeastSquaresOptimizer.java:371: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                ^, AbstractLeastSquaresOptimizer.java:371: error: illegal start of type
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                            ^, AbstractLeastSquaresOptimizer.java:371: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                              ^, AbstractLeastSquaresOptimizer.java:373: error: illegal start of expression
	 * @return errors in optimized parameters
	 ^, AbstractLeastSquaresOptimizer.java:373: error: <identifier> expected
	 * @return errors in optimized parameters
	    ^, AbstractLeastSquaresOptimizer.java:373: error: ';' expected
	 * @return errors in optimized parameters
	                 ^, AbstractLeastSquaresOptimizer.java:373: error: ';' expected
	 * @return errors in optimized parameters
	                                         ^, AbstractLeastSquaresOptimizer.java:374: error: <identifier> expected
	 * @exception FunctionEvaluationException
	                                         ^, AbstractLeastSquaresOptimizer.java:375: error: '(' expected
	 * 		if the function jacobian cannot b evaluated
	   		  ^, AbstractLeastSquaresOptimizer.java:375: error: ')' expected
	 * 		if the function jacobian cannot b evaluated
	   		      ^, AbstractLeastSquaresOptimizer.java:375: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                        ^, AbstractLeastSquaresOptimizer.java:375: error: variable declaration not allowed here
	 * 		if the function jacobian cannot b evaluated
	   		                ^, AbstractLeastSquaresOptimizer.java:375: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                                 ^, AbstractLeastSquaresOptimizer.java:376: error: illegal start of expression
	 * @exception OptimizationException
	   ^, AbstractLeastSquaresOptimizer.java:377: error: illegal start of expression
	 * 		if the covariances matrix cannot be computed
	   		^, AbstractLeastSquaresOptimizer.java:377: error: not a statement
	 * 		if the covariances matrix cannot be computed
	 ^, AbstractLeastSquaresOptimizer.java:377: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                  ^, AbstractLeastSquaresOptimizer.java:377: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                ^, AbstractLeastSquaresOptimizer.java:377: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                            ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		      ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                           ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                      ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                   ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                              ^, AbstractLeastSquaresOptimizer.java:379: error: not a statement
	 * 		lesser or equal to number of parameters)
	 ^, AbstractLeastSquaresOptimizer.java:379: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		      ^, AbstractLeastSquaresOptimizer.java:379: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		               ^, AbstractLeastSquaresOptimizer.java:379: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                         ^, AbstractLeastSquaresOptimizer.java:379: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                                       ^, AbstractLeastSquaresOptimizer.java:380: error: illegal start of expression
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	^, AbstractLeastSquaresOptimizer.java:380: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                     ^, AbstractLeastSquaresOptimizer.java:380: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                      ^, AbstractLeastSquaresOptimizer.java:380: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                                                  ^, AbstractLeastSquaresOptimizer.java:380: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                                                                                        ^, AbstractLeastSquaresOptimizer.java:380: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:382: error: illegal start of expression
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	^, AbstractLeastSquaresOptimizer.java:382: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                            ^, AbstractLeastSquaresOptimizer.java:382: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                  ^, AbstractLeastSquaresOptimizer.java:382: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                         ^, AbstractLeastSquaresOptimizer.java:382: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                 ^, AbstractLeastSquaresOptimizer.java:382: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                           ^, AbstractLeastSquaresOptimizer.java:382: error: not a statement
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                           ^, AbstractLeastSquaresOptimizer.java:382: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                       ^, AbstractLeastSquaresOptimizer.java:382: error: not a statement
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                             ^, AbstractLeastSquaresOptimizer.java:382: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                                                   ^, AbstractLeastSquaresOptimizer.java:382: error: not a statement
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:382: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                                                                                       ^, AbstractLeastSquaresOptimizer.java:383: error: illegal start of expression
	 * Perform the bulk of optimization algorithm.
	 ^, AbstractLeastSquaresOptimizer.java:383: error: ';' expected
	 * Perform the bulk of optimization algorithm.
	          ^, AbstractLeastSquaresOptimizer.java:383: error: ';' expected
	 * Perform the bulk of optimization algorithm.
	                   ^, AbstractLeastSquaresOptimizer.java:383: error: ';' expected
	 * Perform the bulk of optimization algorithm.
	                                   ^, AbstractLeastSquaresOptimizer.java:383: error: <identifier> expected
	 * Perform the bulk of optimization algorithm.
	                                              ^, AbstractLeastSquaresOptimizer.java:385: error: illegal start of expression
	 * @return the point/value pair giving the optimal value for objective function
	 ^, AbstractLeastSquaresOptimizer.java:385: error: <identifier> expected
	 * @return the point/value pair giving the optimal value for objective function
	    ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	              ^, AbstractLeastSquaresOptimizer.java:385: error: illegal start of expression
	 * @return the point/value pair giving the optimal value for objective function
	                    ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                          ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                      ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                  ^, AbstractLeastSquaresOptimizer.java:385: error: not a statement
	 * @return the point/value pair giving the optimal value for objective function
	                                                   ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                        ^, AbstractLeastSquaresOptimizer.java:385: error: '(' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                            ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                                               ^, AbstractLeastSquaresOptimizer.java:386: error: illegal start of expression
	 * @exception FunctionEvaluationException
	 ^, AbstractLeastSquaresOptimizer.java:386: error: ';' expected
	 * @exception FunctionEvaluationException
	  ^, AbstractLeastSquaresOptimizer.java:386: error: not a statement
	 * @exception FunctionEvaluationException
	    ^, AbstractLeastSquaresOptimizer.java:386: error: ')' expected
	 * @exception FunctionEvaluationException
	             ^, AbstractLeastSquaresOptimizer.java:387: error: illegal start of expression
	 * 		if the objective function throws one during
	   		^, AbstractLeastSquaresOptimizer.java:387: error: not a statement
	 * 		if the objective function throws one during
	 ^, AbstractLeastSquaresOptimizer.java:387: error: ';' expected
	 * 		if the objective function throws one during
	   		                ^, AbstractLeastSquaresOptimizer.java:387: error: not a statement
	 * 		if the objective function throws one during
	   		                 ^, AbstractLeastSquaresOptimizer.java:387: error: ';' expected
	 * 		if the objective function throws one during
	   		                         ^, AbstractLeastSquaresOptimizer.java:387: error: ';' expected
	 * 		if the objective function throws one during
	   		                                           ^, AbstractLeastSquaresOptimizer.java:388: error: ';' expected
	 * 		the search
	   		          ^, AbstractLeastSquaresOptimizer.java:389: error: <identifier> expected
	 * @exception OptimizationException
	                                   ^, AbstractLeastSquaresOptimizer.java:390: error: '(' expected
	 * 		if the algorithm failed to converge
	   		  ^, AbstractLeastSquaresOptimizer.java:390: error: ')' expected
	 * 		if the algorithm failed to converge
	   		      ^, AbstractLeastSquaresOptimizer.java:390: error: ';' expected
	 * 		if the algorithm failed to converge
	   		                       ^, AbstractLeastSquaresOptimizer.java:390: error: variable declaration not allowed here
	 * 		if the algorithm failed to converge
	   		                 ^, AbstractLeastSquaresOptimizer.java:390: error: ';' expected
	 * 		if the algorithm failed to converge
	   		                                   ^, AbstractLeastSquaresOptimizer.java:391: error: <identifier> expected
	 * @exception IllegalArgumentException
	                                      ^, AbstractLeastSquaresOptimizer.java:392: error: '(' expected
	 * 		if the start point dimension is wrong
	   		  ^, AbstractLeastSquaresOptimizer.java:392: error: ')' expected
	 * 		if the start point dimension is wrong
	   		      ^, AbstractLeastSquaresOptimizer.java:392: error: ';' expected
	 * 		if the start point dimension is wrong
	   		                  ^, AbstractLeastSquaresOptimizer.java:392: error: variable declaration not allowed here
	 * 		if the start point dimension is wrong
	   		             ^, AbstractLeastSquaresOptimizer.java:392: error: ';' expected
	 * 		if the start point dimension is wrong
	   		                               ^, AbstractLeastSquaresOptimizer.java:393: error: illegal start of expression
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	  ^]
Ingredient counter is Zero
---Undoing: gnrtn(194): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = 0 ` -topatch--> `jacobian = new double[rows][cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (387(f=2.0), 388(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (387(f=2.0), )
----------Running generation: 195, population size: 1

***** Generation 195 : 0
**Parent Variant: [Variant id: 389, #gens: 356, #ops: 0, parent:-]

--Child created id: 390
--Creating new operations for variant [Variant id: 390, #gens: 356, #ops: 0, parent:389]
---analyzing modificationPoint position: 193
location: LevenbergMarquardtOptimizer.java376
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 390, #gens: 355, #ops: 1, parent:389] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 390
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-390/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 18] ,[]
-Valid?: |false|14|18|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(195): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (389(f=2.0), 390(f=14.0), )
Selected to next generation: IDs2--> (389(f=2.0), )
----------Running generation: 196, population size: 1

***** Generation 196 : 0
**Parent Variant: [Variant id: 391, #gens: 356, #ops: 0, parent:-]

--Child created id: 392
--Creating new operations for variant [Variant id: 392, #gens: 356, #ops: 0, parent:391]
---analyzing modificationPoint position: 21
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  work1[pj] *= diag[pj] / dxNorm
---analyzing modificationPoint position: 116
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  sum += jacobian[i][pj] * work[i]
---analyzing modificationPoint position: 106
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  jacobian[j][permutation[j]] = lmDir[j]
---analyzing modificationPoint position: 276
location: LevenbergMarquardtOptimizer.java797
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// transform the matrix column after column for (int k = 0; k < cols; ++k) {  	// select the column [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 392, #gens: 355, #ops: 1, parent:391] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 392
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-392/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(196): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// transform the matrix column after column for (int k = 0; k < cols; ++k) {  	// select the column [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (391(f=2.0), 392(f=18.0), )
Selected to next generation: IDs2--> (391(f=2.0), )
----------Running generation: 197, population size: 1

***** Generation 197 : 0
**Parent Variant: [Variant id: 393, #gens: 356, #ops: 0, parent:-]

--Child created id: 394
--Creating new operations for variant [Variant id: 394, #gens: 356, #ops: 0, parent:393]
---analyzing modificationPoint position: 167
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  diag[j] = java.lang.Math.max(diag[j], jacNorm[j])
---analyzing modificationPoint position: 211
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmPar *= 0.5
---analyzing modificationPoint position: 325
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java217
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = 0 ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 217, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = 0 ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 394, #gens: 357, #ops: 1, parent:393] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 394
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-394/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(197): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = 0 ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (393(f=2.0), 394(f=2.0), )
Selected to next generation: IDs2--> (393(f=2.0), )
----------Running generation: 198, population size: 1

***** Generation 198 : 0
**Parent Variant: [Variant id: 395, #gens: 356, #ops: 0, parent:-]

--Child created id: 396
--Creating new operations for variant [Variant id: 396, #gens: 356, #ops: 0, parent:395]
---analyzing modificationPoint position: 53
---modifPoint 0 not mutation generated in  double paru = gNorm / delta
---analyzing modificationPoint position: 88
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int k = j; k < solvedCols; ++k) { 	int pk = permutation[k];  	// determine a Givens rotation wh[...]
---analyzing modificationPoint position: 183
location: LevenbergMarquardtOptimizer.java355
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmNorm += s * s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 396, #gens: 355, #ops: 1, parent:395] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 396
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-396/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(198): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmNorm += s * s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (395(f=2.0), 396(f=15.0), )
Selected to next generation: IDs2--> (395(f=2.0), )
----------Running generation: 199, population size: 1

***** Generation 199 : 0
**Parent Variant: [Variant id: 397, #gens: 356, #ops: 0, parent:-]

--Child created id: 398
--Creating new operations for variant [Variant id: 398, #gens: 356, #ops: 0, parent:397]
---analyzing modificationPoint position: 296
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java832
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// transform the current column diagR[pk] = alpha ` -topatch--> `final double sin` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 832, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// transform the current column diagR[pk] = alpha ` -topatch--> `final double sin` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 398, #gens: 357, #ops: 1, parent:397] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 398
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-398/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(199): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// transform the current column diagR[pk] = alpha ` -topatch--> `final double sin` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (397(f=2.0), 398(f=2.0), )
Selected to next generation: IDs2--> (397(f=2.0), )
----------Running generation: 200, population size: 1

***** Generation 200 : 0
**Parent Variant: [Variant id: 399, #gens: 356, #ops: 0, parent:-]

--Child created id: 400
--Creating new operations for variant [Variant id: 400, #gens: 356, #ops: 0, parent:399]
---analyzing modificationPoint position: 63
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java584
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 584, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 400, #gens: 356, #ops: 1, parent:399] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 400, errors: [LevenbergMarquardtOptimizer.java:584: error: unreported exception org.apache.commons.math.FunctionEvaluationException; must be caught or declared to be thrown
			} 			updateJacobian();
			  			              ^]
Ingredient counter is Zero
---Undoing: gnrtn(200): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (399(f=2.0), 400(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (399(f=2.0), )
----------Running generation: 201, population size: 1

***** Generation 201 : 0
**Parent Variant: [Variant id: 401, #gens: 356, #ops: 0, parent:-]

--Child created id: 402
--Creating new operations for variant [Variant id: 402, #gens: 356, #ops: 0, parent:401]
---analyzing modificationPoint position: 108
location: LevenbergMarquardtOptimizer.java735
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 402, #gens: 355, #ops: 1, parent:401] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 402
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-402/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(201): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (401(f=2.0), 402(f=2.0), )
Selected to next generation: IDs2--> (401(f=2.0), )
----------Running generation: 202, population size: 1

***** Generation 202 : 0
**Parent Variant: [Variant id: 403, #gens: 356, #ops: 0, parent:-]

--Child created id: 404
--Creating new operations for variant [Variant id: 404, #gens: 356, #ops: 0, parent:403]
---analyzing modificationPoint position: 42
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  double parl = 0
---analyzing modificationPoint position: 294
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double betak = 1.0 / (ak2 - (akk * alpha))
---analyzing modificationPoint position: 6
location: LevenbergMarquardtOptimizer.java609
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 404, #gens: 355, #ops: 1, parent:403] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 404
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-404/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(202): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (403(f=2.0), 404(f=7.0), )
Selected to next generation: IDs2--> (403(f=2.0), )
----------Running generation: 203, population size: 1

***** Generation 203 : 0
**Parent Variant: [Variant id: 405, #gens: 356, #ops: 0, parent:-]

--Child created id: 406
--Creating new operations for variant [Variant id: 406, #gens: 356, #ops: 0, parent:405]
---analyzing modificationPoint position: 341
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [maxEvaluations, point]
--> var from patch: maxEvaluations spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java336
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `throw new org.apache.commons.math.FunctionEvaluationException(new org.apache.commons.math.MaxEvaluat[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 336, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `throw new org.apache.commons.math.FunctionEvaluationException(new org.apache.commons.math.MaxEvaluat[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 406, #gens: 357, #ops: 1, parent:405] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 406, errors: [AbstractLeastSquaresOptimizer.java:338: error: unreachable statement
		this.point = startPoint.clone();
		^]
Ingredient counter is Zero
---Undoing: gnrtn(203): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `throw new org.apache.commons.math.FunctionEvaluationException(new org.apache.commons.math.MaxEvaluat[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (405(f=2.0), 406(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (405(f=2.0), )
----------Running generation: 204, population size: 1

***** Generation 204 : 0
**Parent Variant: [Variant id: 407, #gens: 356, #ops: 0, parent:-]

--Child created id: 408
--Creating new operations for variant [Variant id: 408, #gens: 356, #ops: 0, parent:407]
---analyzing modificationPoint position: 92
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...]
---analyzing modificationPoint position: 215
location: LevenbergMarquardtOptimizer.java416
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = 0; k < cols; ++k) { 	double xK = diag[k] * point[k]; 	xNorm += xK * xK; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 408, #gens: 355, #ops: 1, parent:407] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 408
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-408/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(204): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = 0; k < cols; ++k) { 	double xK = diag[k] * point[k]; 	xNorm += xK * xK; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (407(f=2.0), 408(f=2.0), )
Selected to next generation: IDs2--> (407(f=2.0), )
----------Running generation: 205, population size: 1

***** Generation 205 : 0
**Parent Variant: [Variant id: 409, #gens: 356, #ops: 0, parent:-]

--Child created id: 410
--Creating new operations for variant [Variant id: 410, #gens: 356, #ops: 0, parent:409]
---analyzing modificationPoint position: 258
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [xNorm]
--> var from patch: xNorm spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java257
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] oldRes = new double[rows] ` -topatch--> `xNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 257, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] oldRes = new double[rows] ` -topatch--> `xNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 410, #gens: 357, #ops: 1, parent:409] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 410, errors: [LevenbergMarquardtOptimizer.java:494: error: class, interface, or enum expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^, LevenbergMarquardtOptimizer.java:534: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:538: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                ^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                       ^, LevenbergMarquardtOptimizer.java:541: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:543: error: class, interface, or enum expected
				work1[pj] = s;
				^, LevenbergMarquardtOptimizer.java:544: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:545: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:547: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(205): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] oldRes = new double[rows] ` -topatch--> `xNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (409(f=2.0), 410(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (409(f=2.0), )
----------Running generation: 206, population size: 1

***** Generation 206 : 0
**Parent Variant: [Variant id: 411, #gens: 356, #ops: 0, parent:-]

--Child created id: 412
--Creating new operations for variant [Variant id: 412, #gens: 356, #ops: 0, parent:411]
---analyzing modificationPoint position: 116
location: LevenbergMarquardtOptimizer.java748
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 412, #gens: 355, #ops: 1, parent:411] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 412
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-412/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(206): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (411(f=2.0), 412(f=12.0), )
Selected to next generation: IDs2--> (411(f=2.0), )
----------Running generation: 207, population size: 1

***** Generation 207 : 0
**Parent Variant: [Variant id: 413, #gens: 356, #ops: 0, parent:-]

--Child created id: 414
--Creating new operations for variant [Variant id: 414, #gens: 356, #ops: 0, parent:413]
---analyzing modificationPoint position: 298
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // transform the remaining columns for (int dk = (cols - 1) - k; dk > 0; --dk) { 	double gamma = 0; [...]
---analyzing modificationPoint position: 4
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 93
---modifPoint 2 not mutation generated in  final double tan = lmDiag[k] / rkk
---analyzing modificationPoint position: 291
location: LevenbergMarquardtOptimizer.java823
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[k] = pk ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 414, #gens: 355, #ops: 1, parent:413] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 414
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-414/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(207): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[k] = pk ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (413(f=2.0), 414(f=18.0), )
Selected to next generation: IDs2--> (413(f=2.0), )
----------Running generation: 208, population size: 1

***** Generation 208 : 0
**Parent Variant: [Variant id: 415, #gens: 356, #ops: 0, parent:-]

--Child created id: 416
--Creating new operations for variant [Variant id: 416, #gens: 356, #ops: 0, parent:415]
---analyzing modificationPoint position: 177
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  // compute the new point and the norm of the evolution direction double lmNorm = 0
---analyzing modificationPoint position: 141
location: LevenbergMarquardtOptimizer.java278
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// compute Qt.res qTy(residuals) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 416, #gens: 355, #ops: 1, parent:415] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 416
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-416/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(208): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// compute Qt.res qTy(residuals) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (415(f=2.0), 416(f=18.0), )
Selected to next generation: IDs2--> (415(f=2.0), )
----------Running generation: 209, population size: 1

***** Generation 209 : 0
**Parent Variant: [Variant id: 417, #gens: 356, #ops: 0, parent:-]

--Child created id: 418
--Creating new operations for variant [Variant id: 418, #gens: 356, #ops: 0, parent:417]
---analyzing modificationPoint position: 3
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java605
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 605, pointed element: CtCommentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 

--Summary Creation: for variant [Variant id: 418, #gens: 357, #ops: 1, parent:417] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 418
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-418/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(209): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (417(f=2.0), 418(f=2.0), )
Selected to next generation: IDs2--> (417(f=2.0), )
----------Running generation: 210, population size: 1

***** Generation 210 : 0
**Parent Variant: [Variant id: 419, #gens: 356, #ops: 0, parent:-]

--Child created id: 420
--Creating new operations for variant [Variant id: 420, #gens: 356, #ops: 0, parent:419]
---analyzing modificationPoint position: 20
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 17
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...]
---analyzing modificationPoint position: 349
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [this.absoluteThreshold, org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_ABSOLUTE_THRESHOLD]
--> var from patch: this.absoluteThreshold spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_ABSOLUTE_THRESHOLD spoon.support.reflect.code.CtFieldReadImpl
location: SimpleVectorialValueChecker.java52
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_AB[...] ` -topatch--> `this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_AB[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.SimpleVectorialValueChecker line: 52, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_AB[...] ` -topatch--> `this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_AB[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 420, #gens: 357, #ops: 1, parent:419] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 420, errors: [SimpleVectorialValueChecker.java:53: error: variable absoluteThreshold might already have been assigned
		this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_ABSOLUTE_THRESHOLD; 		this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_ABSOLUTE_THRESHOLD;
		                                                                                                                      		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(210): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_AB[...] ` -topatch--> `this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_AB[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (419(f=2.0), 420(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (419(f=2.0), )
----------Running generation: 211, population size: 1

***** Generation 211 : 0
**Parent Variant: [Variant id: 421, #gens: 356, #ops: 0, parent:-]

--Child created id: 422
--Creating new operations for variant [Variant id: 422, #gens: 356, #ops: 0, parent:421]
---analyzing modificationPoint position: 200
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java385
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 385, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 422, #gens: 357, #ops: 1, parent:421] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 422, errors: [LevenbergMarquardtOptimizer.java:552: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:552: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:552: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:552: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:552: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:552: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:552: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:552: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:552: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:552: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:552: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:552: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:552: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:552: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:552: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:552: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(211): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (421(f=2.0), 422(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (421(f=2.0), )
----------Running generation: 212, population size: 1

***** Generation 212 : 0
**Parent Variant: [Variant id: 423, #gens: 356, #ops: 0, parent:-]

--Child created id: 424
--Creating new operations for variant [Variant id: 424, #gens: 356, #ops: 0, parent:423]
---analyzing modificationPoint position: 67
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: orthoTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java589
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = diag[pj] * lmDir[pj] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 589, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = diag[pj] * lmDir[pj] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 424, #gens: 357, #ops: 1, parent:423] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 424, errors: [LevenbergMarquardtOptimizer.java:590: error: unreachable statement
				double s = diag[pj] * lmDir[pj];
				       ^, LevenbergMarquardtOptimizer.java:589: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
				int pj = permutation[j]; 				throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);
				                         				^]
Ingredient counter is Zero
---Undoing: gnrtn(212): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = diag[pj] * lmDir[pj] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (423(f=2.0), 424(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (423(f=2.0), )
----------Running generation: 213, population size: 1

***** Generation 213 : 0
**Parent Variant: [Variant id: 425, #gens: 356, #ops: 0, parent:-]

--Child created id: 426
--Creating new operations for variant [Variant id: 426, #gens: 356, #ops: 0, parent:425]
---analyzing modificationPoint position: 223
Templates availables50
Attempts Base Ingredients  1 total 50
vars from patch [j, cols, diag, jacNorm]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java493
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...] ` -topatch--> `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 493, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...] ` -topatch--> `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 426, #gens: 356, #ops: 1, parent:425] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 426
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-426/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(213): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...] ` -topatch--> `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (425(f=2.0), 426(f=18.0), )
Selected to next generation: IDs2--> (425(f=2.0), )
----------Running generation: 214, population size: 1

***** Generation 214 : 0
**Parent Variant: [Variant id: 427, #gens: 356, #ops: 0, parent:-]

--Child created id: 428
--Creating new operations for variant [Variant id: 428, #gens: 356, #ops: 0, parent:427]
---analyzing modificationPoint position: 245
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java865
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= beta[pk] ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 865, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= beta[pk] ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 428, #gens: 357, #ops: 1, parent:427] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 428
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-428/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(214): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= beta[pk] ` -topatch--> `setOrthoTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (427(f=2.0), 428(f=3.0), )
Selected to next generation: IDs2--> (427(f=2.0), )
----------Running generation: 215, population size: 1

***** Generation 215 : 0
**Parent Variant: [Variant id: 429, #gens: 356, #ops: 0, parent:-]

--Child created id: 430
--Creating new operations for variant [Variant id: 430, #gens: 356, #ops: 0, parent:429]
---analyzing modificationPoint position: 233
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 341
location: AbstractLeastSquaresOptimizer.java336
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 430, #gens: 355, #ops: 1, parent:429] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 430
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-430/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(215): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (429(f=2.0), 430(f=18.0), )
Selected to next generation: IDs2--> (429(f=2.0), )
----------Running generation: 216, population size: 1

***** Generation 216 : 0
**Parent Variant: [Variant id: 431, #gens: 356, #ops: 0, parent:-]

--Child created id: 432
--Creating new operations for variant [Variant id: 432, #gens: 356, #ops: 0, parent:431]
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java541
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = (work1[pj] - sum) / diagR[pj] ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 541, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = (work1[pj] - sum) / diagR[pj] ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 432, #gens: 357, #ops: 1, parent:431] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 432
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-432/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(216): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = (work1[pj] - sum) / diagR[pj] ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (431(f=2.0), 432(f=2.0), )
Selected to next generation: IDs2--> (431(f=2.0), )
----------Running generation: 217, population size: 1

***** Generation 217 : 0
**Parent Variant: [Variant id: 433, #gens: 356, #ops: 0, parent:-]

--Child created id: 434
--Creating new operations for variant [Variant id: 434, #gens: 356, #ops: 0, parent:433]
---analyzing modificationPoint position: 332
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [rows]
--> var from patch: rows spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java225
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = java.lang.Math.sqrt(cost) ` -topatch--> `return java.lang.Math.sqrt(getChiSquare() / rows)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 225, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = java.lang.Math.sqrt(cost) ` -topatch--> `return java.lang.Math.sqrt(getChiSquare() / rows)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 434, #gens: 357, #ops: 1, parent:433] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 434, errors: [AbstractLeastSquaresOptimizer.java:241: error: incompatible types: unexpected return value
		return java.lang.Math.sqrt(getChiSquare() / rows); 		cost = java.lang.Math.sqrt(cost);} 	/**
		                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(217): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = java.lang.Math.sqrt(cost) ` -topatch--> `return java.lang.Math.sqrt(getChiSquare() / rows)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (433(f=2.0), 434(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (433(f=2.0), )
----------Running generation: 218, population size: 1

***** Generation 218 : 0
**Parent Variant: [Variant id: 435, #gens: 356, #ops: 0, parent:-]

--Child created id: 436
--Creating new operations for variant [Variant id: 436, #gens: 356, #ops: 0, parent:435]
---analyzing modificationPoint position: 67
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [gNorm, delta]
--> var from patch: gNorm spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java589
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = diag[pj] * lmDir[pj] ` -topatch--> `double paru = gNorm / delta` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 589, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = diag[pj] * lmDir[pj] ` -topatch--> `double paru = gNorm / delta` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 436, #gens: 356, #ops: 1, parent:435] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 436, errors: [LevenbergMarquardtOptimizer.java:589: error: variable paru is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
				int pj = permutation[j]; 				double paru = gNorm / delta;
				                         				       ^, LevenbergMarquardtOptimizer.java:591: error: cannot find symbol
				work3[pj] = s;
				            ^
  symbol:   variable s
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:592: error: cannot find symbol
				dxNorm += s * s;
				          ^
  symbol:   variable s
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:592: error: cannot find symbol
				dxNorm += s * s;
				              ^
  symbol:   variable s
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(218): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = diag[pj] * lmDir[pj] ` -topatch--> `double paru = gNorm / delta` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (435(f=2.0), 436(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (435(f=2.0), )
----------Running generation: 219, population size: 1

***** Generation 219 : 0
**Parent Variant: [Variant id: 437, #gens: 356, #ops: 0, parent:-]

--Child created id: 438
--Creating new operations for variant [Variant id: 438, #gens: 356, #ops: 0, parent:437]
---analyzing modificationPoint position: 127
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 0 not mutation generated in  return cost * cost
---analyzing modificationPoint position: 222
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java455
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...] ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 455, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...] ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 438, #gens: 357, #ops: 1, parent:437] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 438, errors: [LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                 ^, LevenbergMarquardtOptimizer.java:661: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                              ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                     ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                      ^, LevenbergMarquardtOptimizer.java:661: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                            ^, LevenbergMarquardtOptimizer.java:661: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:661: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	        ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                            ^, LevenbergMarquardtOptimizer.java:785: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(219): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...] ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (437(f=2.0), 438(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (437(f=2.0), )
----------Running generation: 220, population size: 1

***** Generation 220 : 0
**Parent Variant: [Variant id: 439, #gens: 356, #ops: 0, parent:-]

--Child created id: 440
--Creating new operations for variant [Variant id: 440, #gens: 356, #ops: 0, parent:439]
---analyzing modificationPoint position: 104
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  jacobian[i][pk] = temp2
---analyzing modificationPoint position: 201
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  coeff1 += work1[j] * work1[j]
---analyzing modificationPoint position: 84
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 2 not mutation generated in  if (dpj != 0) { 	java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0); }
---analyzing modificationPoint position: 19
Templates availables50
Attempts Base Ingredients  1 total 50
Attempts Base Ingredients  2 total 50
---modifPoint 3 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] *= diag[pj] / dxNorm; }
---analyzing modificationPoint position: 120
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 4 not mutation generated in  double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5
---analyzing modificationPoint position: 86
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java681
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[j] = dpj ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 681, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[j] = dpj ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 440, #gens: 357, #ops: 1, parent:439] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 440
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-440/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(220): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[j] = dpj ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (439(f=2.0), 440(f=2.0), )
Selected to next generation: IDs2--> (439(f=2.0), )
----------Running generation: 221, population size: 1

***** Generation 221 : 0
**Parent Variant: [Variant id: 441, #gens: 356, #ops: 0, parent:-]

--Child created id: 442
--Creating new operations for variant [Variant id: 442, #gens: 356, #ops: 0, parent:441]
---analyzing modificationPoint position: 103
location: LevenbergMarquardtOptimizer.java718
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 442, #gens: 355, #ops: 1, parent:441] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 442
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-442/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(221): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (441(f=2.0), 442(f=9.0), )
Selected to next generation: IDs2--> (441(f=2.0), )
----------Running generation: 222, population size: 1

***** Generation 222 : 0
**Parent Variant: [Variant id: 443, #gens: 356, #ops: 0, parent:-]

--Child created id: 444
--Creating new operations for variant [Variant id: 444, #gens: 356, #ops: 0, parent:443]
---analyzing modificationPoint position: 14
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double s = work1[permutation[j]]
---analyzing modificationPoint position: 216
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [diagR, cols]
--> var from patch: diagR spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java417
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 417, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 444, #gens: 357, #ops: 1, parent:443] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 444
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-444/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(222): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (443(f=2.0), 444(f=2.0), )
Selected to next generation: IDs2--> (443(f=2.0), )
----------Running generation: 223, population size: 1

***** Generation 223 : 0
**Parent Variant: [Variant id: 445, #gens: 356, #ops: 0, parent:-]

--Child created id: 446
--Creating new operations for variant [Variant id: 446, #gens: 356, #ops: 0, parent:445]
---analyzing modificationPoint position: 61
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java581
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 581, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 446, #gens: 357, #ops: 1, parent:445] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 446
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-446/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(223): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (445(f=2.0), 446(f=2.0), )
Selected to next generation: IDs2--> (445(f=2.0), )
----------Running generation: 224, population size: 1

***** Generation 224 : 0
**Parent Variant: [Variant id: 447, #gens: 356, #ops: 0, parent:-]

--Child created id: 448
--Creating new operations for variant [Variant id: 448, #gens: 356, #ops: 0, parent:447]
---analyzing modificationPoint position: 77
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; }
---analyzing modificationPoint position: 301
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java173
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setInitialStepBoundFactor(100.0) ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 173, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setInitialStepBoundFactor(100.0) ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 448, #gens: 356, #ops: 1, parent:447] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 448
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-448/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(224): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setInitialStepBoundFactor(100.0) ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (447(f=2.0), 448(f=2.0), )
Selected to next generation: IDs2--> (447(f=2.0), )
----------Running generation: 225, population size: 1

***** Generation 225 : 0
**Parent Variant: [Variant id: 449, #gens: 356, #ops: 0, parent:-]

--Child created id: 450
--Creating new operations for variant [Variant id: 450, #gens: 356, #ops: 0, parent:449]
---analyzing modificationPoint position: 175
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  oldRes = tmpVec
---analyzing modificationPoint position: 118
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  // permute the components of z back to components of lmDir for (int j = 0; j < lmDir.length; ++j) { [...]
---analyzing modificationPoint position: 27
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: orthoTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java539
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 539, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 450, #gens: 357, #ops: 1, parent:449] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 450, errors: [LevenbergMarquardtOptimizer.java:540: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
					sum += jacobian[i][pj] * work1[permutation[i]]; 					throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);
					                                                					^]
Ingredient counter is Zero
---Undoing: gnrtn(225): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (449(f=2.0), 450(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (449(f=2.0), )
----------Running generation: 226, population size: 1

***** Generation 226 : 0
**Parent Variant: [Variant id: 451, #gens: 356, #ops: 0, parent:-]

--Child created id: 452
--Creating new operations for variant [Variant id: 452, #gens: 356, #ops: 0, parent:451]
---analyzing modificationPoint position: 47
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.orthoTolerance]
--> var from patch: this.orthoTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java552
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 552, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 452, #gens: 357, #ops: 1, parent:451] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 452
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-452/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(226): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (451(f=2.0), 452(f=2.0), )
Selected to next generation: IDs2--> (451(f=2.0), )
----------Running generation: 227, population size: 1

***** Generation 227 : 0
**Parent Variant: [Variant id: 453, #gens: 356, #ops: 0, parent:-]

--Child created id: 454
--Creating new operations for variant [Variant id: 454, #gens: 356, #ops: 0, parent:453]
---analyzing modificationPoint position: 46
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java551
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double xNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 551, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double xNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 454, #gens: 356, #ops: 1, parent:453] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 454, errors: [LevenbergMarquardtOptimizer.java:555: error: cannot find symbol
				sum += jacobian[i][pj] * qy[i];
				                   ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:557: error: cannot find symbol
			sum /= diag[pj];
			            ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(227): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double xNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (453(f=2.0), 454(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (453(f=2.0), )
----------Running generation: 228, population size: 1

***** Generation 228 : 0
**Parent Variant: [Variant id: 455, #gens: 356, #ops: 0, parent:-]

--Child created id: 456
--Creating new operations for variant [Variant id: 456, #gens: 356, #ops: 0, parent:455]
---analyzing modificationPoint position: 26
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [work1, pj, work3, diag, dxNorm]
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: work3 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: dxNorm spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java538
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; } ` -topatch--> `work1[pj] = (work3[pj] * diag[pj]) / dxNorm` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 538, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; } ` -topatch--> `work1[pj] = (work3[pj] * diag[pj]) / dxNorm` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 456, #gens: 357, #ops: 1, parent:455] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 456, errors: [LevenbergMarquardtOptimizer.java:661: error: class, interface, or enum expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	        ^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                    ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                                    ^, LevenbergMarquardtOptimizer.java:667: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:669: error: class, interface, or enum expected
			work[j] = qy[j];
			^, LevenbergMarquardtOptimizer.java:670: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:678: error: class, interface, or enum expected
			double dpj = diag[pj];
			^, LevenbergMarquardtOptimizer.java:679: error: class, interface, or enum expected
			if (dpj != 0) {
			^, LevenbergMarquardtOptimizer.java:681: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:687: error: class, interface, or enum expected
			double qtbpj = 0;
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                ^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                                ^, LevenbergMarquardtOptimizer.java:693: error: class, interface, or enum expected
				if (lmDiag[k] != 0) {
				^, LevenbergMarquardtOptimizer.java:695: error: class, interface, or enum expected
					final double sin;
					      ^, LevenbergMarquardtOptimizer.java:696: error: class, interface, or enum expected
					final double cos;
					      ^, LevenbergMarquardtOptimizer.java:697: error: class, interface, or enum expected
					double rkk = jacobian[k][pk];
					^, LevenbergMarquardtOptimizer.java:698: error: class, interface, or enum expected
					if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) {
					^, LevenbergMarquardtOptimizer.java:699: error: class, interface, or enum expected
						final double cotan = rkk / lmDiag[k];
						      ^, LevenbergMarquardtOptimizer.java:700: error: class, interface, or enum expected
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						^, LevenbergMarquardtOptimizer.java:701: error: class, interface, or enum expected
						cos = sin * cotan;
						^, LevenbergMarquardtOptimizer.java:702: error: class, interface, or enum expected
					} else {
					^, LevenbergMarquardtOptimizer.java:703: error: class, interface, or enum expected
						final double tan = lmDiag[k] / rkk;
						      ^, LevenbergMarquardtOptimizer.java:704: error: class, interface, or enum expected
						cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan));
						^, LevenbergMarquardtOptimizer.java:705: error: class, interface, or enum expected
						sin = cos * tan;
						^, LevenbergMarquardtOptimizer.java:706: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:711: error: class, interface, or enum expected
					final double temp = (cos * work[k]) + (sin * qtbpj);
					      ^, LevenbergMarquardtOptimizer.java:712: error: class, interface, or enum expected
					qtbpj = ((-sin) * work[k]) + (cos * qtbpj);
					^, LevenbergMarquardtOptimizer.java:713: error: class, interface, or enum expected
					work[k] = temp;
					^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					                    ^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					                                    ^, LevenbergMarquardtOptimizer.java:718: error: class, interface, or enum expected
						final double temp2 = (cos * rik) + (sin * lmDiag[i]);
						      ^, LevenbergMarquardtOptimizer.java:719: error: class, interface, or enum expected
						lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]);
						^, LevenbergMarquardtOptimizer.java:720: error: class, interface, or enum expected
						jacobian[i][pk] = temp2;
						^, LevenbergMarquardtOptimizer.java:721: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:729: error: class, interface, or enum expected
			jacobian[j][permutation[j]] = lmDir[j];
			^, LevenbergMarquardtOptimizer.java:731: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:739: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:742: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                        ^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                                ^, LevenbergMarquardtOptimizer.java:747: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                               ^, LevenbergMarquardtOptimizer.java:750: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:752: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                                  ^, LevenbergMarquardtOptimizer.java:758: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:789: error: class, interface, or enum expected
			double norm2 = 0;
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                                     ^, LevenbergMarquardtOptimizer.java:792: error: class, interface, or enum expected
				norm2 += akk * akk;
				^, LevenbergMarquardtOptimizer.java:793: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:795: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:802: error: class, interface, or enum expected
			double ak2 = java.lang.Double.NEGATIVE_INFINITY;
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:807: error: class, interface, or enum expected
					norm2 += aki * aki;
					^, LevenbergMarquardtOptimizer.java:808: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:812: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:815: error: class, interface, or enum expected
					ak2 = norm2;
					^, LevenbergMarquardtOptimizer.java:816: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:820: error: class, interface, or enum expected
				return;
				^, LevenbergMarquardtOptimizer.java:821: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:823: error: class, interface, or enum expected
			permutation[nextColumn] = permutation[k];
			^, LevenbergMarquardtOptimizer.java:824: error: class, interface, or enum expected
			permutation[k] = pk;
			^, LevenbergMarquardtOptimizer.java:827: error: class, interface, or enum expected
			double akk = jacobian[k][pk];
			^, LevenbergMarquardtOptimizer.java:828: error: class, interface, or enum expected
			double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2);
			^, LevenbergMarquardtOptimizer.java:829: error: class, interface, or enum expected
			double betak = 1.0 / (ak2 - (akk * alpha));
			^, LevenbergMarquardtOptimizer.java:830: error: class, interface, or enum expected
			beta[pk] = betak;
			^, LevenbergMarquardtOptimizer.java:833: error: class, interface, or enum expected
			diagR[pk] = alpha;
			^, LevenbergMarquardtOptimizer.java:834: error: class, interface, or enum expected
			jacobian[k][pk] -= alpha;
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                              ^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                                      ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:841: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^]
Ingredient counter is Zero
---Undoing: gnrtn(228): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; } ` -topatch--> `work1[pj] = (work3[pj] * diag[pj]) / dxNorm` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (455(f=2.0), 456(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (455(f=2.0), )
----------Running generation: 229, population size: 1

***** Generation 229 : 0
**Parent Variant: [Variant id: 457, #gens: 356, #ops: 0, parent:-]

--Child created id: 458
--Creating new operations for variant [Variant id: 458, #gens: 356, #ops: 0, parent:457]
---analyzing modificationPoint position: 262
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // evaluate the function at the starting point and calculate its norm updateResidualsAndCost()
---analyzing modificationPoint position: 347
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [cost]
--> var from patch: cost spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = java.lang.Double.POSITIVE_INFINITY ` -topatch--> `cost = java.lang.Math.sqrt(cost)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 345, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = java.lang.Double.POSITIVE_INFINITY ` -topatch--> `cost = java.lang.Math.sqrt(cost)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 458, #gens: 356, #ops: 1, parent:457] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 458
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-458/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(229): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = java.lang.Double.POSITIVE_INFINITY ` -topatch--> `cost = java.lang.Math.sqrt(cost)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (457(f=2.0), 458(f=2.0), )
Selected to next generation: IDs2--> (457(f=2.0), )
----------Running generation: 230, population size: 1

***** Generation 230 : 0
**Parent Variant: [Variant id: 459, #gens: 356, #ops: 0, parent:-]

--Child created id: 460
--Creating new operations for variant [Variant id: 460, #gens: 356, #ops: 0, parent:459]
---analyzing modificationPoint position: 302
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java174
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setCostRelativeTolerance(1.0E-10) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 174, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setCostRelativeTolerance(1.0E-10) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 460, #gens: 356, #ops: 1, parent:459] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 460, errors: [LevenbergMarquardtOptimizer.java:322: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:326: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:329: error: class, interface, or enum expected
			for (int j = 0; j < cols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:329: error: class, interface, or enum expected
			for (int j = 0; j < cols; ++j) {
			                          ^, LevenbergMarquardtOptimizer.java:331: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:334: error: class, interface, or enum expected
			for (double ratio = 0; ratio < 1.0E-4;) {
			                       ^, LevenbergMarquardtOptimizer.java:334: error: class, interface, or enum expected
			for (double ratio = 0; ratio < 1.0E-4;) {
			                                      ^, LevenbergMarquardtOptimizer.java:337: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:337: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				                                ^, LevenbergMarquardtOptimizer.java:339: error: class, interface, or enum expected
					oldX[pj] = point[pj];
					^, LevenbergMarquardtOptimizer.java:340: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:342: error: class, interface, or enum expected
				double[] tmpVec = residuals;
				^, LevenbergMarquardtOptimizer.java:343: error: class, interface, or enum expected
				residuals = oldRes;
				^, LevenbergMarquardtOptimizer.java:344: error: class, interface, or enum expected
				oldRes = tmpVec;
				^, LevenbergMarquardtOptimizer.java:347: error: class, interface, or enum expected
				determineLMParameter(oldRes, delta, diag, work1, work2, work3);
				^, LevenbergMarquardtOptimizer.java:350: error: class, interface, or enum expected
				double lmNorm = 0;
				^, LevenbergMarquardtOptimizer.java:351: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				^, LevenbergMarquardtOptimizer.java:351: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:351: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				                                ^, LevenbergMarquardtOptimizer.java:353: error: class, interface, or enum expected
					lmDir[pj] = -lmDir[pj];
					^, LevenbergMarquardtOptimizer.java:354: error: class, interface, or enum expected
					point[pj] = oldX[pj] + lmDir[pj];
					^, LevenbergMarquardtOptimizer.java:355: error: class, interface, or enum expected
					double s = diag[pj] * lmDir[pj];
					^, LevenbergMarquardtOptimizer.java:356: error: class, interface, or enum expected
					lmNorm += s * s;
					^, LevenbergMarquardtOptimizer.java:357: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:360: error: class, interface, or enum expected
				if (firstIteration) {
				^, LevenbergMarquardtOptimizer.java:362: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:366: error: class, interface, or enum expected
				current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);
				^, LevenbergMarquardtOptimizer.java:369: error: class, interface, or enum expected
				double actRed = -1.0;
				^, LevenbergMarquardtOptimizer.java:370: error: class, interface, or enum expected
				if ((0.1 * cost) < previousCost) {
				^, LevenbergMarquardtOptimizer.java:372: error: class, interface, or enum expected
					actRed = 1.0 - (r * r);
					^, LevenbergMarquardtOptimizer.java:373: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:377: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:377: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				                                ^, LevenbergMarquardtOptimizer.java:379: error: class, interface, or enum expected
					double dirJ = lmDir[pj];
					^, LevenbergMarquardtOptimizer.java:380: error: class, interface, or enum expected
					work1[j] = 0;
					^, LevenbergMarquardtOptimizer.java:381: error: class, interface, or enum expected
					for (int i = 0; i <= j; ++i) {
					^, LevenbergMarquardtOptimizer.java:381: error: class, interface, or enum expected
					for (int i = 0; i <= j; ++i) {
					                ^, LevenbergMarquardtOptimizer.java:381: error: class, interface, or enum expected
					for (int i = 0; i <= j; ++i) {
					                        ^, LevenbergMarquardtOptimizer.java:383: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:386: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				^, LevenbergMarquardtOptimizer.java:386: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:386: error: class, interface, or enum expected
				for (int j = 0; j < solvedCols; ++j) {
				                                ^, LevenbergMarquardtOptimizer.java:388: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:390: error: class, interface, or enum expected
				coeff1 = coeff1 / pc2;
				^, LevenbergMarquardtOptimizer.java:391: error: class, interface, or enum expected
				double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;
				^, LevenbergMarquardtOptimizer.java:392: error: class, interface, or enum expected
				double preRed = coeff1 + (2 * coeff2);
				^, LevenbergMarquardtOptimizer.java:393: error: class, interface, or enum expected
				double dirDer = -(coeff1 + coeff2);
				^, LevenbergMarquardtOptimizer.java:396: error: class, interface, or enum expected
				ratio = (preRed == 0) ? 0 : actRed / preRed;
				^, LevenbergMarquardtOptimizer.java:399: error: class, interface, or enum expected
				if (ratio <= 0.25) {
				^, LevenbergMarquardtOptimizer.java:402: error: class, interface, or enum expected
					if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) {
					^, LevenbergMarquardtOptimizer.java:404: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:406: error: class, interface, or enum expected
					lmPar /= tmp;
					^, LevenbergMarquardtOptimizer.java:407: error: class, interface, or enum expected
				} else if ((lmPar == 0) || (ratio >= 0.75)) {
				^, LevenbergMarquardtOptimizer.java:409: error: class, interface, or enum expected
					lmPar *= 0.5;
					^, LevenbergMarquardtOptimizer.java:410: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:416: error: class, interface, or enum expected
					xNorm = 0;
					^, LevenbergMarquardtOptimizer.java:417: error: class, interface, or enum expected
					for (int k = 0; k < cols; ++k) {
					^, LevenbergMarquardtOptimizer.java:417: error: class, interface, or enum expected
					for (int k = 0; k < cols; ++k) {
					                ^, LevenbergMarquardtOptimizer.java:417: error: class, interface, or enum expected
					for (int k = 0; k < cols; ++k) {
					                          ^, LevenbergMarquardtOptimizer.java:419: error: class, interface, or enum expected
						xNorm += xK * xK;
						^, LevenbergMarquardtOptimizer.java:420: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:425: error: class, interface, or enum expected
				} else {
				^, LevenbergMarquardtOptimizer.java:428: error: class, interface, or enum expected
					for (int j = 0; j < solvedCols; ++j) {
					^, LevenbergMarquardtOptimizer.java:428: error: class, interface, or enum expected
					for (int j = 0; j < solvedCols; ++j) {
					                ^, LevenbergMarquardtOptimizer.java:428: error: class, interface, or enum expected
					for (int j = 0; j < solvedCols; ++j) {
					                                ^, LevenbergMarquardtOptimizer.java:430: error: class, interface, or enum expected
						point[pj] = oldX[pj];
						^, LevenbergMarquardtOptimizer.java:431: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:433: error: class, interface, or enum expected
					residuals = oldRes;
					^, LevenbergMarquardtOptimizer.java:434: error: class, interface, or enum expected
					oldRes = tmpVec;
					^, LevenbergMarquardtOptimizer.java:435: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:442: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:446: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:453: error: class, interface, or enum expected
				} else if (delta <= (2.2204E-16 * xNorm)) {
				^, LevenbergMarquardtOptimizer.java:456: error: class, interface, or enum expected
				} else if (maxCosine <= 2.2204E-16) {
				^, LevenbergMarquardtOptimizer.java:459: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(230): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setCostRelativeTolerance(1.0E-10) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (459(f=2.0), 460(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (459(f=2.0), )
----------Running generation: 231, population size: 1

***** Generation 231 : 0
**Parent Variant: [Variant id: 461, #gens: 356, #ops: 0, parent:-]

--Child created id: 462
--Creating new operations for variant [Variant id: 462, #gens: 356, #ops: 0, parent:461]
---analyzing modificationPoint position: 103
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i])
---analyzing modificationPoint position: 241
---modifPoint 1 not mutation generated in  int pk = permutation[k]
---analyzing modificationPoint position: 118
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  // permute the components of z back to components of lmDir for (int j = 0; j < lmDir.length; ++j) { [...]
---analyzing modificationPoint position: 126
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [objectiveEvaluations]
--> var from patch: objectiveEvaluations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java240
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return java.lang.Math.sqrt(getChiSquare() / rows) ` -topatch--> `return objectiveEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 240, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return java.lang.Math.sqrt(getChiSquare() / rows) ` -topatch--> `return objectiveEvaluations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 462, #gens: 357, #ops: 1, parent:461] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 462, errors: [AbstractLeastSquaresOptimizer.java:241: error: unreachable statement
		return java.lang.Math.sqrt(getChiSquare() / rows);
		^]
Ingredient counter is Zero
---Undoing: gnrtn(231): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return java.lang.Math.sqrt(getChiSquare() / rows) ` -topatch--> `return objectiveEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (461(f=2.0), 462(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (461(f=2.0), )
----------Running generation: 232, population size: 1

***** Generation 232 : 0
**Parent Variant: [Variant id: 463, #gens: 356, #ops: 0, parent:-]

--Child created id: 464
--Creating new operations for variant [Variant id: 464, #gens: 356, #ops: 0, parent:463]
---analyzing modificationPoint position: 111
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (nSing > 0) { 	for (int j = nSing - 1; j >= 0; --j) { 		int pj = permutation[j]; 		double sum = 0[...]
---analyzing modificationPoint position: 268
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java274
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 274, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 464, #gens: 356, #ops: 1, parent:463] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 464
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-464/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(232): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (463(f=2.0), 464(f=18.0), )
Selected to next generation: IDs2--> (463(f=2.0), )
----------Running generation: 233, population size: 1

***** Generation 233 : 0
**Parent Variant: [Variant id: 465, #gens: 356, #ops: 0, parent:-]

--Child created id: 466
--Creating new operations for variant [Variant id: 466, #gens: 356, #ops: 0, parent:465]
---analyzing modificationPoint position: 167
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [beta, cols]
--> var from patch: beta spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java329
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `diag[j] = java.lang.Math.max(diag[j], jacNorm[j]) ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 329, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `diag[j] = java.lang.Math.max(diag[j], jacNorm[j]) ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 466, #gens: 357, #ops: 1, parent:465] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 466
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-466/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(233): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `diag[j] = java.lang.Math.max(diag[j], jacNorm[j]) ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (465(f=2.0), 466(f=2.0), )
Selected to next generation: IDs2--> (465(f=2.0), )
----------Running generation: 234, population size: 1

***** Generation 234 : 0
**Parent Variant: [Variant id: 467, #gens: 356, #ops: 0, parent:-]

--Child created id: 468
--Creating new operations for variant [Variant id: 468, #gens: 356, #ops: 0, parent:467]
---analyzing modificationPoint position: 122
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [rank, k, permutation, lmDir, pk, diagR, i, ypk, jacobian]
--> var from patch: rank spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: k spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diagR spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ypk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java404
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm) ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 404, pointed element: CtForImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm) ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 468, #gens: 357, #ops: 1, parent:467] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 468, errors: [LevenbergMarquardtOptimizer.java:536: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:536: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:536: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:536: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:536: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:536: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:536: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:536: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:536: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:536: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:536: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:536: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:536: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:536: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:536: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:536: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:550: error: <identifier> expected
		sum2 = 0;
		    ^, LevenbergMarquardtOptimizer.java:551: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: ')' expected
		for (int j = 0; j < solvedCols; ++j) {
		          ^, LevenbergMarquardtOptimizer.java:551: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		             ^, LevenbergMarquardtOptimizer.java:551: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		              ^, LevenbergMarquardtOptimizer.java:551: error: ';' expected
		for (int j = 0; j < solvedCols; ++j) {
		               ^, LevenbergMarquardtOptimizer.java:551: error: > expected
		for (int j = 0; j < solvedCols; ++j) {
		                              ^, LevenbergMarquardtOptimizer.java:551: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		                               ^, LevenbergMarquardtOptimizer.java:551: error: '(' expected
		for (int j = 0; j < solvedCols; ++j) {
		                                  ^, LevenbergMarquardtOptimizer.java:551: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		                                   ^, LevenbergMarquardtOptimizer.java:551: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		                                    ^, LevenbergMarquardtOptimizer.java:551: error: ';' expected
		for (int j = 0; j < solvedCols; ++j) {
		                                      ^, LevenbergMarquardtOptimizer.java:552: error: <identifier> expected
			int pj = permutation[j];
			      ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: ')' expected
			for (int i = 0; i <= j; ++i) {
			          ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			             ^, LevenbergMarquardtOptimizer.java:554: error: <identifier> expected
			for (int i = 0; i <= j; ++i) {
			              ^, LevenbergMarquardtOptimizer.java:554: error: ';' expected
			for (int i = 0; i <= j; ++i) {
			               ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			                  ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:554: error: ';' expected
			for (int i = 0; i <= j; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			                           ^, LevenbergMarquardtOptimizer.java:554: error: <identifier> expected
			for (int i = 0; i <= j; ++i) {
			                            ^, LevenbergMarquardtOptimizer.java:554: error: ';' expected
			for (int i = 0; i <= j; ++i) {
			                              ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				    ^, LevenbergMarquardtOptimizer.java:555: error: ']' expected
				sum += jacobian[i][pj] * qy[i];
				                ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				                 ^, LevenbergMarquardtOptimizer.java:555: error: <identifier> expected
				sum += jacobian[i][pj] * qy[i];
				                  ^, LevenbergMarquardtOptimizer.java:555: error: ';' expected
				sum += jacobian[i][pj] * qy[i];
				                   ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				                     ^, LevenbergMarquardtOptimizer.java:555: error: <identifier> expected
				sum += jacobian[i][pj] * qy[i];
				                      ^, LevenbergMarquardtOptimizer.java:555: error: ';' expected
				sum += jacobian[i][pj] * qy[i];
				                        ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				                           ^, LevenbergMarquardtOptimizer.java:555: error: ';' expected
				sum += jacobian[i][pj] * qy[i];
				                             ^, LevenbergMarquardtOptimizer.java:557: error: class, interface, or enum expected
			sum /= diag[pj];
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^]
Ingredient counter is Zero
---Undoing: gnrtn(234): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm) ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (467(f=2.0), 468(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (467(f=2.0), )
----------Running generation: 235, population size: 1

***** Generation 235 : 0
**Parent Variant: [Variant id: 469, #gens: 356, #ops: 0, parent:-]

--Child created id: 470
--Creating new operations for variant [Variant id: 470, #gens: 356, #ops: 0, parent:469]
---analyzing modificationPoint position: 156
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [rank, j, cols, lmDir, permutation]
--> var from patch: rank spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java309
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...] ` -topatch--> `for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 309, pointed element: CtForImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...] ` -topatch--> `for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 470, #gens: 357, #ops: 1, parent:469] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 470, errors: [LevenbergMarquardtOptimizer.java:535: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:535: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:535: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:535: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:535: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:535: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:535: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:535: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:535: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:535: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:535: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:535: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:535: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:535: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:535: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:535: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:550: error: <identifier> expected
		sum2 = 0;
		    ^, LevenbergMarquardtOptimizer.java:551: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: ')' expected
		for (int j = 0; j < solvedCols; ++j) {
		          ^, LevenbergMarquardtOptimizer.java:551: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		             ^, LevenbergMarquardtOptimizer.java:551: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		              ^, LevenbergMarquardtOptimizer.java:551: error: ';' expected
		for (int j = 0; j < solvedCols; ++j) {
		               ^, LevenbergMarquardtOptimizer.java:551: error: > expected
		for (int j = 0; j < solvedCols; ++j) {
		                              ^, LevenbergMarquardtOptimizer.java:551: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		                               ^, LevenbergMarquardtOptimizer.java:551: error: '(' expected
		for (int j = 0; j < solvedCols; ++j) {
		                                  ^, LevenbergMarquardtOptimizer.java:551: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		                                   ^, LevenbergMarquardtOptimizer.java:551: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		                                    ^, LevenbergMarquardtOptimizer.java:551: error: ';' expected
		for (int j = 0; j < solvedCols; ++j) {
		                                      ^, LevenbergMarquardtOptimizer.java:552: error: <identifier> expected
			int pj = permutation[j];
			      ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: ')' expected
			for (int i = 0; i <= j; ++i) {
			          ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			             ^, LevenbergMarquardtOptimizer.java:554: error: <identifier> expected
			for (int i = 0; i <= j; ++i) {
			              ^, LevenbergMarquardtOptimizer.java:554: error: ';' expected
			for (int i = 0; i <= j; ++i) {
			               ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			                  ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:554: error: ';' expected
			for (int i = 0; i <= j; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			                           ^, LevenbergMarquardtOptimizer.java:554: error: <identifier> expected
			for (int i = 0; i <= j; ++i) {
			                            ^, LevenbergMarquardtOptimizer.java:554: error: ';' expected
			for (int i = 0; i <= j; ++i) {
			                              ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				    ^, LevenbergMarquardtOptimizer.java:555: error: ']' expected
				sum += jacobian[i][pj] * qy[i];
				                ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				                 ^, LevenbergMarquardtOptimizer.java:555: error: <identifier> expected
				sum += jacobian[i][pj] * qy[i];
				                  ^, LevenbergMarquardtOptimizer.java:555: error: ';' expected
				sum += jacobian[i][pj] * qy[i];
				                   ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				                     ^, LevenbergMarquardtOptimizer.java:555: error: <identifier> expected
				sum += jacobian[i][pj] * qy[i];
				                      ^, LevenbergMarquardtOptimizer.java:555: error: ';' expected
				sum += jacobian[i][pj] * qy[i];
				                        ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				                           ^, LevenbergMarquardtOptimizer.java:555: error: ';' expected
				sum += jacobian[i][pj] * qy[i];
				                             ^, LevenbergMarquardtOptimizer.java:557: error: class, interface, or enum expected
			sum /= diag[pj];
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^]
Ingredient counter is Zero
---Undoing: gnrtn(235): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...] ` -topatch--> `for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (469(f=2.0), 470(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (469(f=2.0), )
----------Running generation: 236, population size: 1

***** Generation 236 : 0
**Parent Variant: [Variant id: 471, #gens: 356, #ops: 0, parent:-]

--Child created id: 472
--Creating new operations for variant [Variant id: 472, #gens: 356, #ops: 0, parent:471]
---analyzing modificationPoint position: 154
location: LevenbergMarquardtOptimizer.java303
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 472, #gens: 355, #ops: 1, parent:471] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 472
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-472/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(236): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (471(f=2.0), 472(f=18.0), )
Selected to next generation: IDs2--> (471(f=2.0), )
----------Running generation: 237, population size: 1

***** Generation 237 : 0
**Parent Variant: [Variant id: 473, #gens: 356, #ops: 0, parent:-]

--Child created id: 474
--Creating new operations for variant [Variant id: 474, #gens: 356, #ops: 0, parent:473]
---analyzing modificationPoint position: 102
---modifPoint 0 not mutation generated in  final double temp2 = (cos * rik) + (sin * lmDiag[i])
---analyzing modificationPoint position: 315
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 1 not mutation generated in  jacobian = jF.value(point)
---analyzing modificationPoint position: 151
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 2 not mutation generated in  xNorm += xk * xk
---analyzing modificationPoint position: 216
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java417
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 417, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 474, #gens: 356, #ops: 1, parent:473] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 474, errors: [LevenbergMarquardtOptimizer.java:417: error: variable work1 is already defined in method doOptimize()
					for (int k = 0; k < cols; ++k) { 						double[] work1 = new double[cols];
					                                 						         ^, LevenbergMarquardtOptimizer.java:419: error: cannot find symbol
						xNorm += xK * xK;
						         ^
  symbol:   variable xK
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:419: error: cannot find symbol
						xNorm += xK * xK;
						              ^
  symbol:   variable xK
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(237): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (473(f=2.0), 474(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (473(f=2.0), )
----------Running generation: 238, population size: 1

***** Generation 238 : 0
**Parent Variant: [Variant id: 475, #gens: 356, #ops: 0, parent:-]

--Child created id: 476
--Creating new operations for variant [Variant id: 476, #gens: 356, #ops: 0, parent:475]
---analyzing modificationPoint position: 18
location: LevenbergMarquardtOptimizer.java632
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 476, #gens: 355, #ops: 1, parent:475] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 476
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-476/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(238): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (475(f=2.0), 476(f=9.0), )
Selected to next generation: IDs2--> (475(f=2.0), )
----------Running generation: 239, population size: 1

***** Generation 239 : 0
**Parent Variant: [Variant id: 477, #gens: 356, #ops: 0, parent:-]

--Child created id: 478
--Creating new operations for variant [Variant id: 478, #gens: 356, #ops: 0, parent:477]
---analyzing modificationPoint position: 226
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]
---analyzing modificationPoint position: 184
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmNorm = java.lang.Math.sqrt(lmNorm)
---analyzing modificationPoint position: 100
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  // accumulate the tranformation in the row of s for (int i = k + 1; i < solvedCols; ++i) { 	double r[...]
---analyzing modificationPoint position: 2
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 3 not mutation generated in  paru = java.lang.Math.min(paru, lmPar)
---analyzing modificationPoint position: 30
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 4 not mutation generated in  sum2 += s * s
---analyzing modificationPoint position: 316
Templates availables6
Attempts Base Ingredients  1 total 6
---modifPoint 5 not mutation generated in  if (jacobian.length != rows) { 	throw new org.apache.commons.math.FunctionEvaluationException(point,[...]
---analyzing modificationPoint position: 85
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0)
---analyzing modificationPoint position: 179
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cost]
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java351
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 351, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 478, #gens: 356, #ops: 1, parent:477] gen mutated: 1 , gen not mut: 7, gen not applied  0
-The child does NOT compile: 478, errors: [LevenbergMarquardtOptimizer.java:351: error: variable previousCost is already defined in method doOptimize()
				for (int j = 0; j < solvedCols; ++j) { 					double previousCost = cost;
				                                       					       ^, LevenbergMarquardtOptimizer.java:353: error: cannot find symbol
					lmDir[pj] = -lmDir[pj];
					      ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:353: error: cannot find symbol
					lmDir[pj] = -lmDir[pj];
					                   ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:354: error: cannot find symbol
					point[pj] = oldX[pj] + lmDir[pj];
					      ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:354: error: cannot find symbol
					point[pj] = oldX[pj] + lmDir[pj];
					                 ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:354: error: cannot find symbol
					point[pj] = oldX[pj] + lmDir[pj];
					                             ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:355: error: cannot find symbol
					double s = diag[pj] * lmDir[pj];
					                ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:355: error: cannot find symbol
					double s = diag[pj] * lmDir[pj];
					                            ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(239): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (477(f=2.0), 478(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (477(f=2.0), )
----------Running generation: 240, population size: 1

***** Generation 240 : 0
**Parent Variant: [Variant id: 479, #gens: 356, #ops: 0, parent:-]

--Child created id: 480
--Creating new operations for variant [Variant id: 480, #gens: 356, #ops: 0, parent:479]
---analyzing modificationPoint position: 23
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]
---analyzing modificationPoint position: 291
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.initialStepBoundFactor]
--> var from patch: this.initialStepBoundFactor spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java823
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[k] = pk ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 823, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[k] = pk ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 480, #gens: 357, #ops: 1, parent:479] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 480
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-480/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(240): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[k] = pk ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (479(f=2.0), 480(f=2.0), )
Selected to next generation: IDs2--> (479(f=2.0), )
----------Running generation: 241, population size: 1

***** Generation 241 : 0
**Parent Variant: [Variant id: 481, #gens: 356, #ops: 0, parent:-]

--Child created id: 482
--Creating new operations for variant [Variant id: 482, #gens: 356, #ops: 0, parent:481]
---analyzing modificationPoint position: 142
location: LevenbergMarquardtOptimizer.java281
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// now we don't need Q anymore, // so let jacobian contain the R matrix with its diagonal elements f[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 482, #gens: 355, #ops: 1, parent:481] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 482
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-482/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(241): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// now we don't need Q anymore, // so let jacobian contain the R matrix with its diagonal elements f[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (481(f=2.0), 482(f=6.0), )
Selected to next generation: IDs2--> (481(f=2.0), )
----------Running generation: 242, population size: 1

***** Generation 242 : 0
**Parent Variant: [Variant id: 483, #gens: 356, #ops: 0, parent:-]

--Child created id: 484
--Creating new operations for variant [Variant id: 484, #gens: 356, #ops: 0, parent:483]
---analyzing modificationPoint position: 55
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [gNorm, delta]
--> var from patch: gNorm spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java568
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `double paru = gNorm / delta` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 568, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `double paru = gNorm / delta` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 484, #gens: 357, #ops: 1, parent:483] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 484, errors: [LevenbergMarquardtOptimizer.java:569: error: variable paru is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
		lmPar = java.lang.Math.min(paru, java.lang.Math.max(lmPar, parl)); 		double paru = gNorm / delta;
		                                                                   		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(242): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `double paru = gNorm / delta` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (483(f=2.0), 484(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (483(f=2.0), )
----------Running generation: 243, population size: 1

***** Generation 243 : 0
**Parent Variant: [Variant id: 485, #gens: 356, #ops: 0, parent:-]

--Child created id: 486
--Creating new operations for variant [Variant id: 486, #gens: 356, #ops: 0, parent:485]
---analyzing modificationPoint position: 34
location: LevenbergMarquardtOptimizer.java700
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `cos = sin * cotan ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 486, #gens: 355, #ops: 1, parent:485] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 486, errors: [LevenbergMarquardtOptimizer.java:710: error: variable cos might not have been initialized
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(243): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `cos = sin * cotan ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (485(f=2.0), 486(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (485(f=2.0), )
----------Running generation: 244, population size: 1

***** Generation 244 : 0
**Parent Variant: [Variant id: 487, #gens: 356, #ops: 0, parent:-]

--Child created id: 488
--Creating new operations for variant [Variant id: 488, #gens: 356, #ops: 0, parent:487]
---analyzing modificationPoint position: 284
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (java.lang.Double.isInfinite(norm2) || java.lang.Double.isNaN(norm2)) { 	throw new org.apache.com[...]
---analyzing modificationPoint position: 228
---modifPoint 1 not mutation generated in  double ypk = lmDir[pk] / diagR[pk]
---analyzing modificationPoint position: 58
Templates availables34
Attempts Base Ingredients  1 total 34
vars from patch [fp, delta, lmPar]
--> var from patch: fp spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java576
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...] ` -topatch--> `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 576, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...] ` -topatch--> `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 488, #gens: 356, #ops: 1, parent:487] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 488
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-488/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(244): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...] ` -topatch--> `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (487(f=2.0), 488(f=6.0), )
Selected to next generation: IDs2--> (487(f=2.0), )
----------Running generation: 245, population size: 1

***** Generation 245 : 0
**Parent Variant: [Variant id: 489, #gens: 356, #ops: 0, parent:-]

--Child created id: 490
--Creating new operations for variant [Variant id: 490, #gens: 356, #ops: 0, parent:489]
---analyzing modificationPoint position: 193
Templates availables50
Attempts Base Ingredients  1 total 50
vars from patch [j, solvedCols, permutation, jacNorm, pj, s, i, sum, jacobian, residuals, maxCosine, cost]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: s spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: maxCosine spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java376
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 376, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 490, #gens: 356, #ops: 1, parent:489] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 490
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-490/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 18] ,[]
-Valid?: |false|14|18|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(245): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (489(f=2.0), 490(f=14.0), )
Selected to next generation: IDs2--> (489(f=2.0), )
----------Running generation: 246, population size: 1

***** Generation 246 : 0
**Parent Variant: [Variant id: 491, #gens: 356, #ops: 0, parent:-]

--Child created id: 492
--Creating new operations for variant [Variant id: 492, #gens: 356, #ops: 0, parent:491]
---analyzing modificationPoint position: 261
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [rank, k, permutation, lmDir, pk, diagR, i, ypk, jacobian]
--> var from patch: rank spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: k spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diagR spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ypk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java260
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] work3 = new double[cols] ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 260, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] work3 = new double[cols] ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 492, #gens: 357, #ops: 1, parent:491] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 492, errors: [LevenbergMarquardtOptimizer.java:550: error: <identifier> expected
		sum2 = 0;
		    ^, LevenbergMarquardtOptimizer.java:551: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: ')' expected
		for (int j = 0; j < solvedCols; ++j) {
		          ^, LevenbergMarquardtOptimizer.java:551: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		             ^, LevenbergMarquardtOptimizer.java:551: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		              ^, LevenbergMarquardtOptimizer.java:551: error: ';' expected
		for (int j = 0; j < solvedCols; ++j) {
		               ^, LevenbergMarquardtOptimizer.java:551: error: > expected
		for (int j = 0; j < solvedCols; ++j) {
		                              ^, LevenbergMarquardtOptimizer.java:551: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		                               ^, LevenbergMarquardtOptimizer.java:551: error: '(' expected
		for (int j = 0; j < solvedCols; ++j) {
		                                  ^, LevenbergMarquardtOptimizer.java:551: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		                                   ^, LevenbergMarquardtOptimizer.java:551: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		                                    ^, LevenbergMarquardtOptimizer.java:551: error: ';' expected
		for (int j = 0; j < solvedCols; ++j) {
		                                      ^, LevenbergMarquardtOptimizer.java:552: error: <identifier> expected
			int pj = permutation[j];
			      ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: ')' expected
			for (int i = 0; i <= j; ++i) {
			          ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			             ^, LevenbergMarquardtOptimizer.java:554: error: <identifier> expected
			for (int i = 0; i <= j; ++i) {
			              ^, LevenbergMarquardtOptimizer.java:554: error: ';' expected
			for (int i = 0; i <= j; ++i) {
			               ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			                  ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:554: error: ';' expected
			for (int i = 0; i <= j; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:554: error: illegal start of type
			for (int i = 0; i <= j; ++i) {
			                           ^, LevenbergMarquardtOptimizer.java:554: error: <identifier> expected
			for (int i = 0; i <= j; ++i) {
			                            ^, LevenbergMarquardtOptimizer.java:554: error: ';' expected
			for (int i = 0; i <= j; ++i) {
			                              ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				    ^, LevenbergMarquardtOptimizer.java:555: error: ']' expected
				sum += jacobian[i][pj] * qy[i];
				                ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				                 ^, LevenbergMarquardtOptimizer.java:555: error: <identifier> expected
				sum += jacobian[i][pj] * qy[i];
				                  ^, LevenbergMarquardtOptimizer.java:555: error: ';' expected
				sum += jacobian[i][pj] * qy[i];
				                   ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				                     ^, LevenbergMarquardtOptimizer.java:555: error: <identifier> expected
				sum += jacobian[i][pj] * qy[i];
				                      ^, LevenbergMarquardtOptimizer.java:555: error: ';' expected
				sum += jacobian[i][pj] * qy[i];
				                        ^, LevenbergMarquardtOptimizer.java:555: error: illegal start of type
				sum += jacobian[i][pj] * qy[i];
				                           ^, LevenbergMarquardtOptimizer.java:555: error: ';' expected
				sum += jacobian[i][pj] * qy[i];
				                             ^, LevenbergMarquardtOptimizer.java:557: error: class, interface, or enum expected
			sum /= diag[pj];
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                    ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                                    ^, LevenbergMarquardtOptimizer.java:667: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:669: error: class, interface, or enum expected
			work[j] = qy[j];
			^, LevenbergMarquardtOptimizer.java:670: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:678: error: class, interface, or enum expected
			double dpj = diag[pj];
			^, LevenbergMarquardtOptimizer.java:679: error: class, interface, or enum expected
			if (dpj != 0) {
			^, LevenbergMarquardtOptimizer.java:681: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:687: error: class, interface, or enum expected
			double qtbpj = 0;
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                ^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                                ^]
Ingredient counter is Zero
---Undoing: gnrtn(246): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] work3 = new double[cols] ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (491(f=2.0), 492(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (491(f=2.0), )
----------Running generation: 247, population size: 1

***** Generation 247 : 0
**Parent Variant: [Variant id: 493, #gens: 356, #ops: 0, parent:-]

--Child created id: 494
--Creating new operations for variant [Variant id: 494, #gens: 356, #ops: 0, parent:493]
---analyzing modificationPoint position: 45
location: LevenbergMarquardtOptimizer.java550
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 494, #gens: 355, #ops: 1, parent:493] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 494
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-494/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(247): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (493(f=2.0), 494(f=4.0), )
Selected to next generation: IDs2--> (493(f=2.0), )
----------Running generation: 248, population size: 1

***** Generation 248 : 0
**Parent Variant: [Variant id: 495, #gens: 356, #ops: 0, parent:-]

--Child created id: 496
--Creating new operations for variant [Variant id: 496, #gens: 356, #ops: 0, parent:495]
---analyzing modificationPoint position: 320
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 0 not mutation generated in  for (int j = 0; j < cols; ++j) { 	ji[j] *= factor; }
---analyzing modificationPoint position: 216
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cost, previousCost]
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: previousCost spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java417
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `double r = cost / previousCost` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 417, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `double r = cost / previousCost` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 496, #gens: 356, #ops: 1, parent:495] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 496, errors: [LevenbergMarquardtOptimizer.java:419: error: cannot find symbol
						xNorm += xK * xK;
						         ^
  symbol:   variable xK
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:419: error: cannot find symbol
						xNorm += xK * xK;
						              ^
  symbol:   variable xK
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(248): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `double r = cost / previousCost` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (495(f=2.0), 496(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (495(f=2.0), )
----------Running generation: 249, population size: 1

***** Generation 249 : 0
**Parent Variant: [Variant id: 497, #gens: 356, #ops: 0, parent:-]

--Child created id: 498
--Creating new operations for variant [Variant id: 498, #gens: 356, #ops: 0, parent:497]
---analyzing modificationPoint position: 108
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: parRelativeTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java735
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 735, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 498, #gens: 357, #ops: 1, parent:497] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 498, errors: [LevenbergMarquardtOptimizer.java:736: error: unreachable statement
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:735: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
		int nSing = solvedCols; 		throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);
		                        		^]
Ingredient counter is Zero
---Undoing: gnrtn(249): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (497(f=2.0), 498(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (497(f=2.0), )
----------Running generation: 250, population size: 1

***** Generation 250 : 0
**Parent Variant: [Variant id: 499, #gens: 356, #ops: 0, parent:-]

--Child created id: 500
--Creating new operations for variant [Variant id: 500, #gens: 356, #ops: 0, parent:499]
---analyzing modificationPoint position: 232
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]
---analyzing modificationPoint position: 108
location: LevenbergMarquardtOptimizer.java735
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 500, #gens: 355, #ops: 1, parent:499] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 500
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-500/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(250): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (499(f=2.0), 500(f=2.0), )
Selected to next generation: IDs2--> (499(f=2.0), )
----------Running generation: 251, population size: 1

***** Generation 251 : 0
**Parent Variant: [Variant id: 501, #gens: 356, #ops: 0, parent:-]

--Child created id: 502
--Creating new operations for variant [Variant id: 502, #gens: 356, #ops: 0, parent:501]
---analyzing modificationPoint position: 264
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java267
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `boolean firstIteration = true ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 267, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `boolean firstIteration = true ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 502, #gens: 356, #ops: 1, parent:501] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 502, errors: [LevenbergMarquardtOptimizer.java:494: error: class, interface, or enum expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^, LevenbergMarquardtOptimizer.java:534: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:538: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                ^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                       ^, LevenbergMarquardtOptimizer.java:541: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:543: error: class, interface, or enum expected
				work1[pj] = s;
				^, LevenbergMarquardtOptimizer.java:544: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:545: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:547: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(251): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `boolean firstIteration = true ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (501(f=2.0), 502(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (501(f=2.0), )
----------Running generation: 252, population size: 1

***** Generation 252 : 0
**Parent Variant: [Variant id: 503, #gens: 356, #ops: 0, parent:-]

--Child created id: 504
--Creating new operations for variant [Variant id: 504, #gens: 356, #ops: 0, parent:503]
---analyzing modificationPoint position: 64
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [lmPar, paru, solvedCols, permutation, work1, diag, qy, work2, work3, dxNorm, lmDir, fp, delta, parl, jacobian, sum2]
---modifPoint 0 not mutation generated in  dxNorm = 0
---analyzing modificationPoint position: 59
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double sPar = java.lang.Math.sqrt(lmPar)
---analyzing modificationPoint position: 12
location: LevenbergMarquardtOptimizer.java617
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 504, #gens: 355, #ops: 1, parent:503] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 504
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-504/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(252): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (503(f=2.0), 504(f=7.0), )
Selected to next generation: IDs2--> (503(f=2.0), )
----------Running generation: 253, population size: 1

***** Generation 253 : 0
**Parent Variant: [Variant id: 505, #gens: 356, #ops: 0, parent:-]

--Child created id: 506
--Creating new operations for variant [Variant id: 506, #gens: 356, #ops: 0, parent:505]
---analyzing modificationPoint position: 265
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]
---analyzing modificationPoint position: 307
location: LevenbergMarquardtOptimizer.java201
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.costRelativeTolerance = costRelativeTolerance ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 506, #gens: 355, #ops: 1, parent:505] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 506
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-506/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(253): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.costRelativeTolerance = costRelativeTolerance ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (505(f=2.0), 506(f=4.0), )
Selected to next generation: IDs2--> (505(f=2.0), )
----------Running generation: 254, population size: 1

***** Generation 254 : 0
**Parent Variant: [Variant id: 507, #gens: 356, #ops: 0, parent:-]

--Child created id: 508
--Creating new operations for variant [Variant id: 508, #gens: 356, #ops: 0, parent:507]
---analyzing modificationPoint position: 110
location: LevenbergMarquardtOptimizer.java739
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nSing < solvedCols) { 	work[j] = 0; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 508, #gens: 355, #ops: 1, parent:507] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 508
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-508/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(254): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nSing < solvedCols) { 	work[j] = 0; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (507(f=2.0), 508(f=2.0), )
Selected to next generation: IDs2--> (507(f=2.0), )
----------Running generation: 255, population size: 1

***** Generation 255 : 0
**Parent Variant: [Variant id: 509, #gens: 356, #ops: 0, parent:-]

--Child created id: 510
--Creating new operations for variant [Variant id: 510, #gens: 356, #ops: 0, parent:509]
---analyzing modificationPoint position: 96
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  // compute the modified diagonal element of R and // the modified element of (Qty,0) jacobian[k][pk][...]
---analyzing modificationPoint position: 137
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java841
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= betak ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 841, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= betak ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 510, #gens: 357, #ops: 1, parent:509] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 510
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-510/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(255): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= betak ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (509(f=2.0), 510(f=2.0), )
Selected to next generation: IDs2--> (509(f=2.0), )
----------Running generation: 256, population size: 1

***** Generation 256 : 0
**Parent Variant: [Variant id: 511, #gens: 356, #ops: 0, parent:-]

--Child created id: 512
--Creating new operations for variant [Variant id: 512, #gens: 356, #ops: 0, parent:511]
---analyzing modificationPoint position: 196
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  work1[j] = 0
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 238
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double fp = dxNorm - delta
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, lmDir, point, oldX, diag, lmNorm]
---modifPoint 3 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 37
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 4 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 23
Templates availables50
Attempts Base Ingredients  1 total 50
vars from patch [j, rank, lmDir, permutation, qy]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: rank spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: qy spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java535
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 535, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 512, #gens: 356, #ops: 1, parent:511] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 512
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-512/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(256): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (511(f=2.0), 512(f=13.0), )
Selected to next generation: IDs2--> (511(f=2.0), )
----------Running generation: 257, population size: 1

***** Generation 257 : 0
**Parent Variant: [Variant id: 513, #gens: 356, #ops: 0, parent:-]

--Child created id: 514
--Creating new operations for variant [Variant id: 514, #gens: 356, #ops: 0, parent:513]
---analyzing modificationPoint position: 317
Templates availables7
Attempts Base Ingredients  1 total 7
Attempts Base Ingredients  2 total 7
Attempts Base Ingredients  3 total 7
---modifPoint 0 not mutation generated in  for (int i = 0; i < rows; i++) { 	final double[] ji = jacobian[i]; 	final double factor = -java.lang[...]
---analyzing modificationPoint position: 263
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // outer loop lmPar = 0
---analyzing modificationPoint position: 170
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 102
---modifPoint 3 not mutation generated in  final double temp2 = (cos * rik) + (sin * lmDiag[i])
---analyzing modificationPoint position: 23
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 4 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]
---analyzing modificationPoint position: 217
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.parRelativeTolerance]
--> var from patch: this.parRelativeTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java418
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `this.parRelativeTolerance = parRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 418, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `this.parRelativeTolerance = parRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 514, #gens: 357, #ops: 1, parent:513] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 514
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-514/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(257): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `this.parRelativeTolerance = parRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (513(f=2.0), 514(f=2.0), )
Selected to next generation: IDs2--> (513(f=2.0), )
----------Running generation: 258, population size: 1

***** Generation 258 : 0
**Parent Variant: [Variant id: 515, #gens: 356, #ops: 0, parent:-]

--Child created id: 516
--Creating new operations for variant [Variant id: 516, #gens: 356, #ops: 0, parent:515]
---analyzing modificationPoint position: 138
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = k; j < jacobian.length; ++j) { 	jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][...]
---analyzing modificationPoint position: 40
location: LevenbergMarquardtOptimizer.java432
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 516, #gens: 355, #ops: 1, parent:515] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 516
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-516/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 18] ,[]
-Valid?: |false|10|18|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(258): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (515(f=2.0), 516(f=10.0), )
Selected to next generation: IDs2--> (515(f=2.0), )
----------Running generation: 259, population size: 1

***** Generation 259 : 0
**Parent Variant: [Variant id: 517, #gens: 356, #ops: 0, parent:-]

--Child created id: 518
--Creating new operations for variant [Variant id: 518, #gens: 356, #ops: 0, parent:517]
---analyzing modificationPoint position: 239
location: LevenbergMarquardtOptimizer.java519
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 518, #gens: 355, #ops: 1, parent:517] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 518
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-518/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 18] ,[]
-Valid?: |false|16|18|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(259): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (517(f=2.0), 518(f=16.0), )
Selected to next generation: IDs2--> (517(f=2.0), )
----------Running generation: 260, population size: 1

***** Generation 260 : 0
**Parent Variant: [Variant id: 519, #gens: 356, #ops: 0, parent:-]

--Child created id: 520
--Creating new operations for variant [Variant id: 520, #gens: 356, #ops: 0, parent:519]
---analyzing modificationPoint position: 30
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  sum2 += s * s
---analyzing modificationPoint position: 6
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [diagR, cols]
--> var from patch: diagR spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java609
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 609, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 520, #gens: 357, #ops: 1, parent:519] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 520
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-520/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(260): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (519(f=2.0), 520(f=13.0), )
Selected to next generation: IDs2--> (519(f=2.0), )
----------Running generation: 261, population size: 1

***** Generation 261 : 0
**Parent Variant: [Variant id: 521, #gens: 356, #ops: 0, parent:-]

--Child created id: 522
--Creating new operations for variant [Variant id: 522, #gens: 356, #ops: 0, parent:521]
---analyzing modificationPoint position: 319
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java192
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double factor = -java.lang.Math.sqrt(residualsWeights[i]) ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 192, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double factor = -java.lang.Math.sqrt(residualsWeights[i]) ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 522, #gens: 357, #ops: 1, parent:521] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 522
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-522/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(261): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double factor = -java.lang.Math.sqrt(residualsWeights[i]) ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (521(f=2.0), 522(f=2.0), )
Selected to next generation: IDs2--> (521(f=2.0), )
----------Running generation: 262, population size: 1

***** Generation 262 : 0
**Parent Variant: [Variant id: 523, #gens: 356, #ops: 0, parent:-]

--Child created id: 524
--Creating new operations for variant [Variant id: 524, #gens: 356, #ops: 0, parent:523]
---analyzing modificationPoint position: 48
Templates availables50
Attempts Base Ingredients  1 total 50
Name Conflict [solvedCols, permutation, diag, lmDir, work1, dxNorm]
---modifPoint 0 not mutation generated in  for (int i = 0; i <= j; ++i) { 	sum += jacobian[i][pj] * qy[i]; }
---analyzing modificationPoint position: 77
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; }
---analyzing modificationPoint position: 46
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [parl, lmPar]
--> var from patch: parl spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: lmPar spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java551
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `parl = java.lang.Math.max(parl, lmPar)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 551, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `parl = java.lang.Math.max(parl, lmPar)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 524, #gens: 357, #ops: 1, parent:523] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 524
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-524/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(262): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `parl = java.lang.Math.max(parl, lmPar)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (523(f=2.0), 524(f=15.0), )
Selected to next generation: IDs2--> (523(f=2.0), )
----------Running generation: 263, population size: 1

***** Generation 263 : 0
**Parent Variant: [Variant id: 525, #gens: 356, #ops: 0, parent:-]

--Child created id: 526
--Creating new operations for variant [Variant id: 526, #gens: 356, #ops: 0, parent:525]
---analyzing modificationPoint position: 344
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch []
location: AbstractLeastSquaresOptimizer.java341
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `int index = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 341, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `int index = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 526, #gens: 357, #ops: 1, parent:525] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 526
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-526/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(263): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `int index = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (525(f=2.0), 526(f=2.0), )
Selected to next generation: IDs2--> (525(f=2.0), )
----------Running generation: 264, population size: 1

***** Generation 264 : 0
**Parent Variant: [Variant id: 527, #gens: 356, #ops: 0, parent:-]

--Child created id: 528
--Creating new operations for variant [Variant id: 528, #gens: 356, #ops: 0, parent:527]
---analyzing modificationPoint position: 5
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [this.orthoTolerance]
--> var from patch: this.orthoTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java607
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 607, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 528, #gens: 356, #ops: 1, parent:527] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 528
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-528/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(264): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (527(f=2.0), 528(f=9.0), )
Selected to next generation: IDs2--> (527(f=2.0), )
----------Running generation: 265, population size: 1

***** Generation 265 : 0
**Parent Variant: [Variant id: 529, #gens: 356, #ops: 0, parent:-]

--Child created id: 530
--Creating new operations for variant [Variant id: 530, #gens: 356, #ops: 0, parent:529]
---analyzing modificationPoint position: 237
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  dxNorm = java.lang.Math.sqrt(dxNorm)
---analyzing modificationPoint position: 52
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.parRelativeTolerance]
--> var from patch: this.parRelativeTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java559
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `this.parRelativeTolerance = parRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 559, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `this.parRelativeTolerance = parRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 530, #gens: 357, #ops: 1, parent:529] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 530
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-530/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(265): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `this.parRelativeTolerance = parRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (529(f=2.0), 530(f=2.0), )
Selected to next generation: IDs2--> (529(f=2.0), )
----------Running generation: 266, population size: 1

***** Generation 266 : 0
**Parent Variant: [Variant id: 531, #gens: 356, #ops: 0, parent:-]

--Child created id: 532
--Creating new operations for variant [Variant id: 532, #gens: 356, #ops: 0, parent:531]
---analyzing modificationPoint position: 299
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java169
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000) ` -topatch--> `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 169, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000) ` -topatch--> `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 532, #gens: 357, #ops: 1, parent:531] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 532, errors: [LevenbergMarquardtOptimizer.java:688: error: illegal start of expression
	 * Set the positive input variable used in determining the initial step bound.
	 ^, LevenbergMarquardtOptimizer.java:688: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	      ^, LevenbergMarquardtOptimizer.java:688: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                   ^, LevenbergMarquardtOptimizer.java:688: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                                  ^, LevenbergMarquardtOptimizer.java:688: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                                          ^, LevenbergMarquardtOptimizer.java:688: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                                                          ^, LevenbergMarquardtOptimizer.java:688: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                                                                       ^, LevenbergMarquardtOptimizer.java:688: error: <identifier> expected
	 * Set the positive input variable used in determining the initial step bound.
	                                                                              ^, LevenbergMarquardtOptimizer.java:689: error: not a statement
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	 ^, LevenbergMarquardtOptimizer.java:689: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	       ^, LevenbergMarquardtOptimizer.java:689: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                ^, LevenbergMarquardtOptimizer.java:689: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                       ^, LevenbergMarquardtOptimizer.java:689: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                                   ^, LevenbergMarquardtOptimizer.java:689: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                                                             ^, LevenbergMarquardtOptimizer.java:689: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                                                                     ^, LevenbergMarquardtOptimizer.java:690: error: not a statement
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	 ^, LevenbergMarquardtOptimizer.java:690: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	       ^, LevenbergMarquardtOptimizer.java:690: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	               ^, LevenbergMarquardtOptimizer.java:690: error: not a statement
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                ^, LevenbergMarquardtOptimizer.java:690: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                 ^, LevenbergMarquardtOptimizer.java:690: error: '(' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                    ^, LevenbergMarquardtOptimizer.java:690: error: ')' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                            ^, LevenbergMarquardtOptimizer.java:690: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                                ^, LevenbergMarquardtOptimizer.java:690: error: variable declaration not allowed here
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                              ^, LevenbergMarquardtOptimizer.java:690: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                                                               ^, LevenbergMarquardtOptimizer.java:690: error: variable declaration not allowed here
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                                         ^, LevenbergMarquardtOptimizer.java:690: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                                                                               ^, LevenbergMarquardtOptimizer.java:691: error: ';' expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	               ^, LevenbergMarquardtOptimizer.java:691: error: ';' expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                          ^, LevenbergMarquardtOptimizer.java:691: error: ';' expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                                 ^, LevenbergMarquardtOptimizer.java:691: error: <identifier> expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                                                        ^, LevenbergMarquardtOptimizer.java:691: error: not a statement
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                                                       ^, LevenbergMarquardtOptimizer.java:691: error: ';' expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                                                                   ^, LevenbergMarquardtOptimizer.java:692: error: not a statement
	 * recommended value.
	 ^, LevenbergMarquardtOptimizer.java:692: error: ';' expected
	 * recommended value.
	              ^, LevenbergMarquardtOptimizer.java:692: error: <identifier> expected
	 * recommended value.
	                     ^, LevenbergMarquardtOptimizer.java:694: error: illegal start of expression
	 * @param initialStepBoundFactor
	 ^, LevenbergMarquardtOptimizer.java:694: error: illegal start of expression
	 * @param initialStepBoundFactor
	   ^, LevenbergMarquardtOptimizer.java:695: error: not a statement
	 * 		initial step bound factor
	 ^, LevenbergMarquardtOptimizer.java:695: error: ';' expected
	 * 		initial step bound factor
	   		       ^, LevenbergMarquardtOptimizer.java:695: error: ';' expected
	 * 		initial step bound factor
	   		                  ^, LevenbergMarquardtOptimizer.java:696: error: illegal start of expression
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	  ^, LevenbergMarquardtOptimizer.java:696: error: illegal start of expression
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:696: error: illegal start of expression
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:696: error: ';' expected
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	    	                                     ^, LevenbergMarquardtOptimizer.java:696: error: ';' expected
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	    	                                                                   ^, LevenbergMarquardtOptimizer.java:703: error: illegal start of expression
	 */ 	public void setCostRelativeTolerance(double costRelativeTolerance) { 		this.costRelativeTolerance = costRelativeTolerance;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:703: error: illegal start of expression
	 */ 	public void setCostRelativeTolerance(double costRelativeTolerance) { 		this.costRelativeTolerance = costRelativeTolerance;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:703: error: ';' expected
	 */ 	public void setCostRelativeTolerance(double costRelativeTolerance) { 		this.costRelativeTolerance = costRelativeTolerance;} 	/**
	    	                                    ^, LevenbergMarquardtOptimizer.java:703: error: ';' expected
	 */ 	public void setCostRelativeTolerance(double costRelativeTolerance) { 		this.costRelativeTolerance = costRelativeTolerance;} 	/**
	    	                                                                 ^, LevenbergMarquardtOptimizer.java:711: error: illegal start of expression
	 */ 	public void setParRelativeTolerance(double parRelativeTolerance) { 		this.parRelativeTolerance = parRelativeTolerance;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:711: error: illegal start of expression
	 */ 	public void setParRelativeTolerance(double parRelativeTolerance) { 		this.parRelativeTolerance = parRelativeTolerance;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:711: error: ';' expected
	 */ 	public void setParRelativeTolerance(double parRelativeTolerance) { 		this.parRelativeTolerance = parRelativeTolerance;} 	/**
	    	                                   ^, LevenbergMarquardtOptimizer.java:711: error: ';' expected
	 */ 	public void setParRelativeTolerance(double parRelativeTolerance) { 		this.parRelativeTolerance = parRelativeTolerance;} 	/**
	    	                                                               ^, LevenbergMarquardtOptimizer.java:719: error: illegal start of expression
	 */ 	public void setOrthoTolerance(double orthoTolerance) { 		this.orthoTolerance = orthoTolerance;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:719: error: illegal start of expression
	 */ 	public void setOrthoTolerance(double orthoTolerance) { 		this.orthoTolerance = orthoTolerance;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:719: error: ';' expected
	 */ 	public void setOrthoTolerance(double orthoTolerance) { 		this.orthoTolerance = orthoTolerance;} 	/**
	    	                             ^, LevenbergMarquardtOptimizer.java:719: error: ';' expected
	 */ 	public void setOrthoTolerance(double orthoTolerance) { 		this.orthoTolerance = orthoTolerance;} 	/**
	    	                                                   ^, LevenbergMarquardtOptimizer.java:729: error: illegal start of expression
	 */ 	public void setQRRankingThreshold(final double threshold) { 		this.qrRankingThreshold = threshold;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:729: error: illegal start of expression
	 */ 	public void setQRRankingThreshold(final double threshold) { 		this.qrRankingThreshold = threshold;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:729: error: ';' expected
	 */ 	public void setQRRankingThreshold(final double threshold) { 		this.qrRankingThreshold = threshold;} 	/**
	    	                                 ^, LevenbergMarquardtOptimizer.java:729: error: ';' expected
	 */ 	public void setQRRankingThreshold(final double threshold) { 		this.qrRankingThreshold = threshold;} 	/**
	    	                                                        ^, LevenbergMarquardtOptimizer.java:731: error: ';' expected
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                 ^, LevenbergMarquardtOptimizer.java:731: error: not a statement
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:731: error: ';' expected
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                              ^, LevenbergMarquardtOptimizer.java:731: error: not a statement
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                                                                    ^, LevenbergMarquardtOptimizer.java:731: error: ';' expected
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                                                                                          ^, LevenbergMarquardtOptimizer.java:731: error: not a statement
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                                                                                                     ^, LevenbergMarquardtOptimizer.java:731: error: ';' expected
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                                                                                                                              ^, LevenbergMarquardtOptimizer.java:768: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:768: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:768: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:768: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:768: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:768: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:768: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:768: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:768: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:768: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:768: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:768: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:768: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:768: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:768: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:768: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:774: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:774: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:774: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:774: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:774: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:774: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:774: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:774: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:775: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:775: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:775: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:775: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:775: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:775: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:776: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^]
Ingredient counter is Zero
---Undoing: gnrtn(266): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000) ` -topatch--> `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (531(f=2.0), 532(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (531(f=2.0), )
----------Running generation: 267, population size: 1

***** Generation 267 : 0
**Parent Variant: [Variant id: 533, #gens: 356, #ops: 0, parent:-]

--Child created id: 534
--Creating new operations for variant [Variant id: 534, #gens: 356, #ops: 0, parent:533]
---analyzing modificationPoint position: 52
---modifPoint 0 not mutation generated in  double gNorm = java.lang.Math.sqrt(sum2)
---analyzing modificationPoint position: 105
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  // store the diagonal element of s and restore // the corresponding diagonal element of R lmDiag[j] [...]
---analyzing modificationPoint position: 273
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java790
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double akk = jacobian[i][k] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 790, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double akk = jacobian[i][k] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 534, #gens: 356, #ops: 1, parent:533] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 534, errors: [LevenbergMarquardtOptimizer.java:792: error: cannot find symbol
				norm2 += akk * akk;
				         ^
  symbol:   variable akk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:792: error: cannot find symbol
				norm2 += akk * akk;
				               ^
  symbol:   variable akk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(267): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double akk = jacobian[i][k] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (533(f=2.0), 534(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (533(f=2.0), )
----------Running generation: 268, population size: 1

***** Generation 268 : 0
**Parent Variant: [Variant id: 535, #gens: 356, #ops: 0, parent:-]

--Child created id: 536
--Creating new operations for variant [Variant id: 536, #gens: 356, #ops: 0, parent:535]
---analyzing modificationPoint position: 201
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  coeff1 += work1[j] * work1[j]
---analyzing modificationPoint position: 17
Templates availables34
Attempts Base Ingredients  1 total 34
vars from patch [fp, delta, lmPar]
--> var from patch: fp spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java625
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 625, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 536, #gens: 356, #ops: 1, parent:535] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 536
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-536/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(268): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (535(f=2.0), 536(f=6.0), )
Selected to next generation: IDs2--> (535(f=2.0), )
----------Running generation: 269, population size: 1

***** Generation 269 : 0
**Parent Variant: [Variant id: 537, #gens: 356, #ops: 0, parent:-]

--Child created id: 538
--Creating new operations for variant [Variant id: 538, #gens: 356, #ops: 0, parent:537]
---analyzing modificationPoint position: 71
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [gNorm, delta]
--> var from patch: gNorm spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java594
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousFP = fp ` -topatch--> `double paru = gNorm / delta` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 594, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousFP = fp ` -topatch--> `double paru = gNorm / delta` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 538, #gens: 356, #ops: 1, parent:537] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 538, errors: [LevenbergMarquardtOptimizer.java:594: error: variable paru is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
			dxNorm = java.lang.Math.sqrt(dxNorm); 			double paru = gNorm / delta;
			                                      			       ^, LevenbergMarquardtOptimizer.java:601: error: cannot find symbol
			(((parl == 0) && (fp <= previousFP)) && (previousFP < 0))) {
			                        ^
  symbol:   variable previousFP
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:601: error: cannot find symbol
			(((parl == 0) && (fp <= previousFP)) && (previousFP < 0))) {
			                                         ^
  symbol:   variable previousFP
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(269): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousFP = fp ` -topatch--> `double paru = gNorm / delta` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (537(f=2.0), 538(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (537(f=2.0), )
----------Running generation: 270, population size: 1

***** Generation 270 : 0
**Parent Variant: [Variant id: 539, #gens: 356, #ops: 0, parent:-]

--Child created id: 540
--Creating new operations for variant [Variant id: 540, #gens: 356, #ops: 0, parent:539]
---analyzing modificationPoint position: 31
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  parl = fp / (delta * sum2)
---analyzing modificationPoint position: 273
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double akk = jacobian[i][k]
---analyzing modificationPoint position: 65
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 2 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]
---analyzing modificationPoint position: 149
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  if (dk == 0) { 	dk = 1.0; }
---analyzing modificationPoint position: 247
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  y[i] -= gamma * jacobian[i][pk]
---analyzing modificationPoint position: 304
location: LevenbergMarquardtOptimizer.java176
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setOrthoTolerance(1.0E-10) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 540, #gens: 355, #ops: 1, parent:539] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 540
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-540/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(270): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setOrthoTolerance(1.0E-10) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (539(f=2.0), 540(f=2.0), )
Selected to next generation: IDs2--> (539(f=2.0), )
----------Running generation: 271, population size: 1

***** Generation 271 : 0
**Parent Variant: [Variant id: 541, #gens: 356, #ops: 0, parent:-]

--Child created id: 542
--Creating new operations for variant [Variant id: 542, #gens: 356, #ops: 0, parent:541]
---analyzing modificationPoint position: 158
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 4
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [beta, cols]
--> var from patch: beta spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java606
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 606, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 542, #gens: 357, #ops: 1, parent:541] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 542
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-542/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(271): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (541(f=2.0), 542(f=2.0), )
Selected to next generation: IDs2--> (541(f=2.0), )
----------Running generation: 272, population size: 1

***** Generation 272 : 0
**Parent Variant: [Variant id: 543, #gens: 356, #ops: 0, parent:-]

--Child created id: 544
--Creating new operations for variant [Variant id: 544, #gens: 356, #ops: 0, parent:543]
---analyzing modificationPoint position: 310
location: LevenbergMarquardtOptimizer.java236
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.qrRankingThreshold = threshold ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 544, #gens: 355, #ops: 1, parent:543] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 544
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-544/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(272): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.qrRankingThreshold = threshold ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (543(f=2.0), 544(f=2.0), )
Selected to next generation: IDs2--> (543(f=2.0), )
----------Running generation: 273, population size: 1

***** Generation 273 : 0
**Parent Variant: [Variant id: 545, #gens: 356, #ops: 0, parent:-]

--Child created id: 546
--Creating new operations for variant [Variant id: 546, #gens: 356, #ops: 0, parent:545]
---analyzing modificationPoint position: 36
location: LevenbergMarquardtOptimizer.java427
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 546, #gens: 355, #ops: 1, parent:545] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 546
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-546/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(273): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (545(f=2.0), 546(f=12.0), )
Selected to next generation: IDs2--> (545(f=2.0), )
----------Running generation: 274, population size: 1

***** Generation 274 : 0
**Parent Variant: [Variant id: 547, #gens: 356, #ops: 0, parent:-]

--Child created id: 548
--Creating new operations for variant [Variant id: 548, #gens: 356, #ops: 0, parent:547]
---analyzing modificationPoint position: 170
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 121
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 1 not mutation generated in  if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; }
---analyzing modificationPoint position: 53
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double paru = gNorm / delta
---analyzing modificationPoint position: 46
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 14
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [beta, cols]
--> var from patch: beta spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java619
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = work1[permutation[j]] ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 619, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = work1[permutation[j]] ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 548, #gens: 357, #ops: 1, parent:547] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 548
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-548/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(274): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = work1[permutation[j]] ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (547(f=2.0), 548(f=2.0), )
Selected to next generation: IDs2--> (547(f=2.0), )
----------Running generation: 275, population size: 1

***** Generation 275 : 0
**Parent Variant: [Variant id: 549, #gens: 356, #ops: 0, parent:-]

--Child created id: 550
--Creating new operations for variant [Variant id: 550, #gens: 356, #ops: 0, parent:549]
---analyzing modificationPoint position: 259
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double[] work1 = new double[cols]
---analyzing modificationPoint position: 76
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 50
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [sum, diag, pj]
--> var from patch: sum spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java556
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum /= diag[pj] ` -topatch--> `sum /= diag[pj]` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 556, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum /= diag[pj] ` -topatch--> `sum /= diag[pj]` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 550, #gens: 357, #ops: 1, parent:549] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 550
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-550/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(275): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum /= diag[pj] ` -topatch--> `sum /= diag[pj]` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (549(f=2.0), 550(f=3.0), )
Selected to next generation: IDs2--> (549(f=2.0), )
----------Running generation: 276, population size: 1

***** Generation 276 : 0
**Parent Variant: [Variant id: 551, #gens: 356, #ops: 0, parent:-]

--Child created id: 552
--Creating new operations for variant [Variant id: 552, #gens: 356, #ops: 0, parent:551]
---analyzing modificationPoint position: 287
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  ak2 = norm2
---analyzing modificationPoint position: 33
location: LevenbergMarquardtOptimizer.java699
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 552, #gens: 355, #ops: 1, parent:551] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 552, errors: [LevenbergMarquardtOptimizer.java:701: error: variable sin might not have been initialized
						cos = sin * cotan;
						      ^]
Ingredient counter is Zero
---Undoing: gnrtn(276): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (551(f=2.0), 552(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (551(f=2.0), )
----------Running generation: 277, population size: 1

***** Generation 277 : 0
**Parent Variant: [Variant id: 553, #gens: 356, #ops: 0, parent:-]

--Child created id: 554
--Creating new operations for variant [Variant id: 554, #gens: 356, #ops: 0, parent:553]
---analyzing modificationPoint position: 40
location: LevenbergMarquardtOptimizer.java432
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 554, #gens: 355, #ops: 1, parent:553] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 554
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-554/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 18] ,[]
-Valid?: |false|10|18|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(277): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (553(f=2.0), 554(f=10.0), )
Selected to next generation: IDs2--> (553(f=2.0), )
----------Running generation: 278, population size: 1

***** Generation 278 : 0
**Parent Variant: [Variant id: 555, #gens: 356, #ops: 0, parent:-]

--Child created id: 556
--Creating new operations for variant [Variant id: 556, #gens: 356, #ops: 0, parent:555]
---analyzing modificationPoint position: 20
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java531
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 531, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 556, #gens: 357, #ops: 1, parent:555] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 556
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-556/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(278): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (555(f=2.0), 556(f=2.0), )
Selected to next generation: IDs2--> (555(f=2.0), )
----------Running generation: 279, population size: 1

***** Generation 279 : 0
**Parent Variant: [Variant id: 557, #gens: 356, #ops: 0, parent:-]

--Child created id: 558
--Creating new operations for variant [Variant id: 558, #gens: 356, #ops: 0, parent:557]
---analyzing modificationPoint position: 41
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  oldRes = tmpVec
---analyzing modificationPoint position: 113
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java745
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 745, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 558, #gens: 357, #ops: 1, parent:557] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 558
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-558/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(279): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `setInitialStepBoundFactor(100.0)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (557(f=2.0), 558(f=2.0), )
Selected to next generation: IDs2--> (557(f=2.0), )
----------Running generation: 280, population size: 1

***** Generation 280 : 0
**Parent Variant: [Variant id: 559, #gens: 356, #ops: 0, parent:-]

--Child created id: 560
--Creating new operations for variant [Variant id: 560, #gens: 356, #ops: 0, parent:559]
---analyzing modificationPoint position: 253
location: LevenbergMarquardtOptimizer.java250
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir = new double[cols] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 560, #gens: 355, #ops: 1, parent:559] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 560
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-560/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(280): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir = new double[cols] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (559(f=2.0), 560(f=18.0), )
Selected to next generation: IDs2--> (559(f=2.0), )
----------Running generation: 281, population size: 1

***** Generation 281 : 0
**Parent Variant: [Variant id: 561, #gens: 356, #ops: 0, parent:-]

--Child created id: 562
--Creating new operations for variant [Variant id: 562, #gens: 356, #ops: 0, parent:561]
---analyzing modificationPoint position: 156
location: LevenbergMarquardtOptimizer.java309
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 562, #gens: 355, #ops: 1, parent:561] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 562
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-562/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(281): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (561(f=2.0), 562(f=18.0), )
Selected to next generation: IDs2--> (561(f=2.0), )
----------Running generation: 282, population size: 1

***** Generation 282 : 0
**Parent Variant: [Variant id: 563, #gens: 356, #ops: 0, parent:-]

--Child created id: 564
--Creating new operations for variant [Variant id: 564, #gens: 356, #ops: 0, parent:563]
---analyzing modificationPoint position: 211
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  lmPar *= 0.5
---analyzing modificationPoint position: 335
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 1 not mutation generated in  // reset counters iterations = 0
---analyzing modificationPoint position: 275
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  jacNorm[k] = java.lang.Math.sqrt(norm2)
---analyzing modificationPoint position: 105
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 3 not mutation generated in  // store the diagonal element of s and restore // the corresponding diagonal element of R lmDiag[j] [...]
---analyzing modificationPoint position: 29
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 4 not mutation generated in  work1[pj] = s
---analyzing modificationPoint position: 103
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 5 not mutation generated in  lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i])
---analyzing modificationPoint position: 12
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 107
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 7 not mutation generated in  // solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]
---analyzing modificationPoint position: 214
location: LevenbergMarquardtOptimizer.java415
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 564, #gens: 355, #ops: 1, parent:563] gen mutated: 1 , gen not mut: 8, gen not applied  0
-The child compiles: id 564
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-564/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(282): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (563(f=2.0), 564(f=2.0), )
Selected to next generation: IDs2--> (563(f=2.0), )
----------Running generation: 283, population size: 1

***** Generation 283 : 0
**Parent Variant: [Variant id: 565, #gens: 356, #ops: 0, parent:-]

--Child created id: 566
--Creating new operations for variant [Variant id: 566, #gens: 356, #ops: 0, parent:565]
---analyzing modificationPoint position: 113
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 280
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double norm2 = 0
---analyzing modificationPoint position: 89
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  int pk = permutation[k]
---analyzing modificationPoint position: 11
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: costRelativeTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java614
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 614, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 566, #gens: 357, #ops: 1, parent:565] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 566, errors: [LevenbergMarquardtOptimizer.java:615: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
					work1[permutation[i]] -= jacobian[i][pj] * tmp; 					throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);
					                                                					^]
Ingredient counter is Zero
---Undoing: gnrtn(283): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (565(f=2.0), 566(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (565(f=2.0), )
----------Running generation: 284, population size: 1

***** Generation 284 : 0
**Parent Variant: [Variant id: 567, #gens: 356, #ops: 0, parent:-]

--Child created id: 568
--Creating new operations for variant [Variant id: 568, #gens: 356, #ops: 0, parent:567]
---analyzing modificationPoint position: 11
location: LevenbergMarquardtOptimizer.java614
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 568, #gens: 355, #ops: 1, parent:567] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 568
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-568/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(284): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (567(f=2.0), 568(f=5.0), )
Selected to next generation: IDs2--> (567(f=2.0), )
----------Running generation: 285, population size: 1

***** Generation 285 : 0
**Parent Variant: [Variant id: 569, #gens: 356, #ops: 0, parent:-]

--Child created id: 570
--Creating new operations for variant [Variant id: 570, #gens: 356, #ops: 0, parent:569]
---analyzing modificationPoint position: 259
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  double[] work1 = new double[cols]
---analyzing modificationPoint position: 50
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 1 not mutation generated in  sum /= diag[pj]
---analyzing modificationPoint position: 38
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  point[pj] = oldX[pj]
---analyzing modificationPoint position: 70
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 3 not mutation generated in  dxNorm = java.lang.Math.sqrt(dxNorm)
---analyzing modificationPoint position: 119
location: LevenbergMarquardtOptimizer.java756
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 570, #gens: 355, #ops: 1, parent:569] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 570
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-570/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(285): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (569(f=2.0), 570(f=15.0), )
Selected to next generation: IDs2--> (569(f=2.0), )
----------Running generation: 286, population size: 1

***** Generation 286 : 0
**Parent Variant: [Variant id: 571, #gens: 356, #ops: 0, parent:-]

--Child created id: 572
--Creating new operations for variant [Variant id: 572, #gens: 356, #ops: 0, parent:571]
---analyzing modificationPoint position: 180
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  lmDir[pj] = -lmDir[pj]
---analyzing modificationPoint position: 232
location: LevenbergMarquardtOptimizer.java511
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 572, #gens: 355, #ops: 1, parent:571] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 572
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-572/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(286): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (571(f=2.0), 572(f=15.0), )
Selected to next generation: IDs2--> (571(f=2.0), )
----------Running generation: 287, population size: 1

***** Generation 287 : 0
**Parent Variant: [Variant id: 573, #gens: 356, #ops: 0, parent:-]

--Child created id: 574
--Creating new operations for variant [Variant id: 574, #gens: 356, #ops: 0, parent:573]
---analyzing modificationPoint position: 186
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  delta = java.lang.Math.min(delta, lmNorm)
---analyzing modificationPoint position: 236
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, lmDir, work1, jacobian]
---modifPoint 1 not mutation generated in  dxNorm += s * s
---analyzing modificationPoint position: 51
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [fp, delta, sum2]
--> var from patch: fp spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum2 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java557
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += sum * sum ` -topatch--> `double correction = fp / (delta * sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 557, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += sum * sum ` -topatch--> `double correction = fp / (delta * sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 574, #gens: 357, #ops: 1, parent:573] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 574
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-574/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(287): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += sum * sum ` -topatch--> `double correction = fp / (delta * sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (573(f=2.0), 574(f=15.0), )
Selected to next generation: IDs2--> (573(f=2.0), )
----------Running generation: 288, population size: 1

***** Generation 288 : 0
**Parent Variant: [Variant id: 575, #gens: 356, #ops: 0, parent:-]

--Child created id: 576
--Creating new operations for variant [Variant id: 576, #gens: 356, #ops: 0, parent:575]
---analyzing modificationPoint position: 252
location: LevenbergMarquardtOptimizer.java249
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation = new int[cols] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 576, #gens: 355, #ops: 1, parent:575] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 576
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-576/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(288): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation = new int[cols] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (575(f=2.0), 576(f=18.0), )
Selected to next generation: IDs2--> (575(f=2.0), )
----------Running generation: 289, population size: 1

***** Generation 289 : 0
**Parent Variant: [Variant id: 577, #gens: 356, #ops: 0, parent:-]

--Child created id: 578
--Creating new operations for variant [Variant id: 578, #gens: 356, #ops: 0, parent:577]
---analyzing modificationPoint position: 99
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  work[k] = temp
---analyzing modificationPoint position: 7
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 32
---modifPoint 2 not mutation generated in  final double cotan = rkk / lmDiag[k]
---analyzing modificationPoint position: 35
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [delta, xNorm, initialStepBoundFactor]
--> var from patch: delta spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: xNorm spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: initialStepBoundFactor spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java426
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 426, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 578, #gens: 356, #ops: 1, parent:577] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 578
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-578/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(289): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (577(f=2.0), 578(f=4.0), )
Selected to next generation: IDs2--> (577(f=2.0), )
----------Running generation: 290, population size: 1

***** Generation 290 : 0
**Parent Variant: [Variant id: 579, #gens: 356, #ops: 0, parent:-]

--Child created id: 580
--Creating new operations for variant [Variant id: 580, #gens: 356, #ops: 0, parent:579]
---analyzing modificationPoint position: 98
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  qtbpj = ((-sin) * work[k]) + (cos * qtbpj)
---analyzing modificationPoint position: 61
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 178
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	lmDir[pj] = -lmDir[pj]; 	point[pj][...]
---analyzing modificationPoint position: 35
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  // failed iteration, reset the previous values cost = previousCost
---analyzing modificationPoint position: 97
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  final double temp = (cos * work[k]) + (sin * qtbpj)
---analyzing modificationPoint position: 271
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  double norm2 = 0
---analyzing modificationPoint position: 159
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, lmDir, work1, jacobian]
---modifPoint 6 not mutation generated in  double s = jacNorm[pj]
---analyzing modificationPoint position: 200
location: LevenbergMarquardtOptimizer.java385
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 580, #gens: 355, #ops: 1, parent:579] gen mutated: 1 , gen not mut: 7, gen not applied  0
-The child compiles: id 580
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-580/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(290): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (579(f=2.0), 580(f=8.0), )
Selected to next generation: IDs2--> (579(f=2.0), )
----------Running generation: 291, population size: 1

***** Generation 291 : 0
**Parent Variant: [Variant id: 581, #gens: 356, #ops: 0, parent:-]

--Child created id: 582
--Creating new operations for variant [Variant id: 582, #gens: 356, #ops: 0, parent:581]
---analyzing modificationPoint position: 194
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 297
location: LevenbergMarquardtOptimizer.java833
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[k][pk] -= alpha ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 582, #gens: 355, #ops: 1, parent:581] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 582
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-582/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(291): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[k][pk] -= alpha ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (581(f=2.0), 582(f=18.0), )
Selected to next generation: IDs2--> (581(f=2.0), )
----------Running generation: 292, population size: 1

***** Generation 292 : 0
**Parent Variant: [Variant id: 583, #gens: 356, #ops: 0, parent:-]

--Child created id: 584
--Creating new operations for variant [Variant id: 584, #gens: 356, #ops: 0, parent:583]
---analyzing modificationPoint position: 87
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [solvedCols, rows, cols]
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: rows spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java686
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...] ` -topatch--> `// arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 686, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...] ` -topatch--> `// arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 584, #gens: 357, #ops: 1, parent:583] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 584
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-584/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(292): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...] ` -topatch--> `// arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (583(f=2.0), 584(f=2.0), )
Selected to next generation: IDs2--> (583(f=2.0), )
----------Running generation: 293, population size: 1

***** Generation 293 : 0
**Parent Variant: [Variant id: 585, #gens: 356, #ops: 0, parent:-]

--Child created id: 586
--Creating new operations for variant [Variant id: 586, #gens: 356, #ops: 0, parent:585]
---analyzing modificationPoint position: 86
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  lmDiag[j] = dpj
---analyzing modificationPoint position: 155
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // check orthogonality between function vector and jacobian columns double maxCosine = 0
---analyzing modificationPoint position: 58
location: LevenbergMarquardtOptimizer.java576
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 586, #gens: 355, #ops: 1, parent:585] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 586
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-586/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(293): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (585(f=2.0), 586(f=2.0), )
Selected to next generation: IDs2--> (585(f=2.0), )
----------Running generation: 294, population size: 1

***** Generation 294 : 0
**Parent Variant: [Variant id: 587, #gens: 356, #ops: 0, parent:-]

--Child created id: 588
--Creating new operations for variant [Variant id: 588, #gens: 356, #ops: 0, parent:587]
---analyzing modificationPoint position: 95
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  sin = cos * tan
---analyzing modificationPoint position: 80
location: LevenbergMarquardtOptimizer.java668
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 588, #gens: 355, #ops: 1, parent:587] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 588
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-588/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(294): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (587(f=2.0), 588(f=15.0), )
Selected to next generation: IDs2--> (587(f=2.0), )
----------Running generation: 295, population size: 1

***** Generation 295 : 0
**Parent Variant: [Variant id: 589, #gens: 356, #ops: 0, parent:-]

--Child created id: 590
--Creating new operations for variant [Variant id: 590, #gens: 356, #ops: 0, parent:589]
---analyzing modificationPoint position: 29
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  work1[pj] = s
---analyzing modificationPoint position: 276
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // transform the matrix column after column for (int k = 0; k < cols; ++k) {  	// select the column [...]
---analyzing modificationPoint position: 344
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java341
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `// reset counters iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 341, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `// reset counters iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 590, #gens: 356, #ops: 1, parent:589] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 590
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-590/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(295): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `// reset counters iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (589(f=2.0), 590(f=18.0), )
Selected to next generation: IDs2--> (589(f=2.0), )
----------Running generation: 296, population size: 1

***** Generation 296 : 0
**Parent Variant: [Variant id: 591, #gens: 356, #ops: 0, parent:-]

--Child created id: 592
--Creating new operations for variant [Variant id: 592, #gens: 356, #ops: 0, parent:591]
---analyzing modificationPoint position: 0
location: LevenbergMarquardtOptimizer.java402
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmp = 0.1 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 592, #gens: 355, #ops: 1, parent:591] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 592
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-592/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(296): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmp = 0.1 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (591(f=2.0), 592(f=5.0), )
Selected to next generation: IDs2--> (591(f=2.0), )
----------Running generation: 297, population size: 1

***** Generation 297 : 0
**Parent Variant: [Variant id: 593, #gens: 356, #ops: 0, parent:-]

--Child created id: 594
--Creating new operations for variant [Variant id: 594, #gens: 356, #ops: 0, parent:593]
---analyzing modificationPoint position: 113
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 85
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [jacNorm, pj]
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java679
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `double s = jacNorm[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 679, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `double s = jacNorm[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 594, #gens: 357, #ops: 1, parent:593] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 594
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-594/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(297): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `double s = jacNorm[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (593(f=2.0), 594(f=2.0), )
Selected to next generation: IDs2--> (593(f=2.0), )
----------Running generation: 298, population size: 1

***** Generation 298 : 0
**Parent Variant: [Variant id: 595, #gens: 356, #ops: 0, parent:-]

--Child created id: 596
--Creating new operations for variant [Variant id: 596, #gens: 356, #ops: 0, parent:595]
---analyzing modificationPoint position: 208
location: LevenbergMarquardtOptimizer.java398
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// update the step bound if (ratio <= 0.25) { 	double tmp =  	(actRed < 0) ? (0.5 * dirDer) / (dirDe[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 596, #gens: 355, #ops: 1, parent:595] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 596
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-596/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
-Killed id: pid->317
The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
Killed the Process that runs JUnit test cases 317
**The validation 1 have not finished well**
-Valid?: null, fitness 1.7976931348623157E308
Ingredient counter is Zero
---Undoing: gnrtn(298): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// update the step bound if (ratio <= 0.25) { 	double tmp =  	(actRed < 0) ? (0.5 * dirDer) / (dirDe[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (595(f=2.0), 596(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (595(f=2.0), )
----------Running generation: 299, population size: 1

***** Generation 299 : 0
**Parent Variant: [Variant id: 597, #gens: 356, #ops: 0, parent:-]

--Child created id: 598
--Creating new operations for variant [Variant id: 598, #gens: 356, #ops: 0, parent:597]
---analyzing modificationPoint position: 40
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  residuals = oldRes
---analyzing modificationPoint position: 161
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 171
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  oldX[pj] = point[pj]
---analyzing modificationPoint position: 96
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  // compute the modified diagonal element of R and // the modified element of (Qty,0) jacobian[k][pk][...]
---analyzing modificationPoint position: 117
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, oldX, point, cost, residuals, oldRes, delta, diag, work1, work2, work3, lmDir, firstIteration, current, objective, jacobian, lmPar, xNorm, cols, checker, costRelativeTolerance, parRelativeTolerance, previous, org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, maxCosine, org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
---modifPoint 4 not mutation generated in  work[j] = (work[j] - sum) / lmDiag[j]
---analyzing modificationPoint position: 249
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  diagR = new double[cols]
---analyzing modificationPoint position: 153
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 6 not mutation generated in  xNorm = java.lang.Math.sqrt(xNorm)
---analyzing modificationPoint position: 289
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java821
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pk = permutation[nextColumn] ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 821, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pk = permutation[nextColumn] ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 598, #gens: 357, #ops: 1, parent:597] gen mutated: 1 , gen not mut: 7, gen not applied  0
-The child compiles: id 598
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-598/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(299): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pk = permutation[nextColumn] ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (597(f=2.0), 598(f=2.0), )
Selected to next generation: IDs2--> (597(f=2.0), )
----------Running generation: 300, population size: 1

***** Generation 300 : 0
**Parent Variant: [Variant id: 599, #gens: 356, #ops: 0, parent:-]

--Child created id: 600
--Creating new operations for variant [Variant id: 600, #gens: 356, #ops: 0, parent:599]
---analyzing modificationPoint position: 108
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...]
---analyzing modificationPoint position: 187
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java364
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at x + p and calculate its norm updateResidualsAndCost() ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 364, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at x + p and calculate its norm updateResidualsAndCost() ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 600, #gens: 356, #ops: 1, parent:599] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 600
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-600/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(300): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at x + p and calculate its norm updateResidualsAndCost() ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (599(f=2.0), 600(f=18.0), )
Selected to next generation: IDs2--> (599(f=2.0), )
----------Running generation: 301, population size: 1

***** Generation 301 : 0
**Parent Variant: [Variant id: 601, #gens: 356, #ops: 0, parent:-]

--Child created id: 602
--Creating new operations for variant [Variant id: 602, #gens: 356, #ops: 0, parent:601]
---analyzing modificationPoint position: 42
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java528
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `lmPar *= 0.5` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 528, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `lmPar *= 0.5` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 602, #gens: 357, #ops: 1, parent:601] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 602
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-602/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(301): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `lmPar *= 0.5` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (601(f=2.0), 602(f=5.0), )
Selected to next generation: IDs2--> (601(f=2.0), )
----------Running generation: 302, population size: 1

***** Generation 302 : 0
**Parent Variant: [Variant id: 603, #gens: 356, #ops: 0, parent:-]

--Child created id: 604
--Creating new operations for variant [Variant id: 604, #gens: 356, #ops: 0, parent:603]
---analyzing modificationPoint position: 212
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [residuals]
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java412
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// test for successful iteration. if (ratio >= 1.0E-4) { 	// successful iteration, update the norm 	[...] ` -topatch--> `double[] tmpVec = residuals` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 412, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// test for successful iteration. if (ratio >= 1.0E-4) { 	// successful iteration, update the norm 	[...] ` -topatch--> `double[] tmpVec = residuals` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 604, #gens: 357, #ops: 1, parent:603] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 604, errors: [LevenbergMarquardtOptimizer.java:435: error: variable tmpVec is already defined in method doOptimize()
				} 				double[] tmpVec = residuals;
				  				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(302): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// test for successful iteration. if (ratio >= 1.0E-4) { 	// successful iteration, update the norm 	[...] ` -topatch--> `double[] tmpVec = residuals` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (603(f=2.0), 604(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (603(f=2.0), )
----------Running generation: 303, population size: 1

***** Generation 303 : 0
**Parent Variant: [Variant id: 605, #gens: 356, #ops: 0, parent:-]

--Child created id: 606
--Creating new operations for variant [Variant id: 606, #gens: 356, #ops: 0, parent:605]
---analyzing modificationPoint position: 35
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // failed iteration, reset the previous values cost = previousCost
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 228
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double ypk = lmDir[pk] / diagR[pk]
---analyzing modificationPoint position: 116
location: LevenbergMarquardtOptimizer.java748
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 606, #gens: 355, #ops: 1, parent:605] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 606
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-606/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(303): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work[i] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (605(f=2.0), 606(f=12.0), )
Selected to next generation: IDs2--> (605(f=2.0), )
----------Running generation: 304, population size: 1

***** Generation 304 : 0
**Parent Variant: [Variant id: 607, #gens: 356, #ops: 0, parent:-]

--Child created id: 608
--Creating new operations for variant [Variant id: 608, #gens: 356, #ops: 0, parent:607]
---analyzing modificationPoint position: 104
location: LevenbergMarquardtOptimizer.java719
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pk] = temp2 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 608, #gens: 355, #ops: 1, parent:607] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 608
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-608/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(304): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pk] = temp2 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (607(f=2.0), 608(f=6.0), )
Selected to next generation: IDs2--> (607(f=2.0), )
----------Running generation: 305, population size: 1

***** Generation 305 : 0
**Parent Variant: [Variant id: 609, #gens: 356, #ops: 0, parent:-]

--Child created id: 610
--Creating new operations for variant [Variant id: 610, #gens: 356, #ops: 0, parent:609]
---analyzing modificationPoint position: 354
location: AbstractLeastSquaresOptimizer.java139
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxEvaluations = maxEvaluations ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 610, #gens: 355, #ops: 1, parent:609] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 610
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-610/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(305): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxEvaluations = maxEvaluations ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (609(f=2.0), 610(f=18.0), )
Selected to next generation: IDs2--> (609(f=2.0), )
----------Running generation: 306, population size: 1

***** Generation 306 : 0
**Parent Variant: [Variant id: 611, #gens: 356, #ops: 0, parent:-]

--Child created id: 612
--Creating new operations for variant [Variant id: 612, #gens: 356, #ops: 0, parent:611]
---analyzing modificationPoint position: 9
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [fp]
--> var from patch: fp spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java612
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `double previousFP = fp` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 612, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `double previousFP = fp` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 612, #gens: 356, #ops: 1, parent:611] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 612, errors: [LevenbergMarquardtOptimizer.java:612: error: variable previousFP is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
				work1[pj] /= work2[j]; 				double previousFP = fp;
				                       				       ^, LevenbergMarquardtOptimizer.java:615: error: cannot find symbol
					work1[permutation[i]] -= jacobian[i][pj] * tmp;
					                                           ^
  symbol:   variable tmp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(306): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `double previousFP = fp` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (611(f=2.0), 612(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (611(f=2.0), )
----------Running generation: 307, population size: 1

***** Generation 307 : 0
**Parent Variant: [Variant id: 613, #gens: 356, #ops: 0, parent:-]

--Child created id: 614
--Creating new operations for variant [Variant id: 614, #gens: 356, #ops: 0, parent:613]
---analyzing modificationPoint position: 135
location: LevenbergMarquardtOptimizer.java838
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = k; j < jacobian.length; ++j) { 	gamma += jacobian[j][pk] * jacobian[j][permutation[k + [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 614, #gens: 355, #ops: 1, parent:613] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 614
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-614/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(307): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = k; j < jacobian.length; ++j) { 	gamma += jacobian[j][pk] * jacobian[j][permutation[k + [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (613(f=2.0), 614(f=18.0), )
Selected to next generation: IDs2--> (613(f=2.0), )
----------Running generation: 308, population size: 1

***** Generation 308 : 0
**Parent Variant: [Variant id: 615, #gens: 356, #ops: 0, parent:-]

--Child created id: 616
--Creating new operations for variant [Variant id: 616, #gens: 356, #ops: 0, parent:615]
---analyzing modificationPoint position: 119
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  lmDir[permutation[j]] = work[j]
---analyzing modificationPoint position: 312
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [point]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
SameName: final 












































double[] point
SameName: final 












































double[] point
Transforming shadowed variable in return point == null ? null : point.clone()
location: VectorialPointValuePair.java47
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = (point == null) ? null : point.clone() ` -topatch--> `return point == null ? null : point.clone()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.VectorialPointValuePair line: 47, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = (point == null) ? null : point.clone() ` -topatch--> `return point == null ? null : point.clone()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 616, #gens: 357, #ops: 1, parent:615] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 616, errors: [VectorialPointValuePair.java:73: error: incompatible types: unexpected return value
		return point == null ? null : point.clone(); 		this.value = (value == null) ? null : value.clone();} 	/**
		                     ^]
Ingredient counter is Zero
---Undoing: gnrtn(308): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = (point == null) ? null : point.clone() ` -topatch--> `return point == null ? null : point.clone()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (615(f=2.0), 616(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (615(f=2.0), )
----------Running generation: 309, population size: 1

***** Generation 309 : 0
**Parent Variant: [Variant id: 617, #gens: 356, #ops: 0, parent:-]

--Child created id: 618
--Creating new operations for variant [Variant id: 618, #gens: 356, #ops: 0, parent:617]
---analyzing modificationPoint position: 8
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [residuals]
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java611
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] /= work2[j] ` -topatch--> `double[] tmpVec = residuals` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 611, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] /= work2[j] ` -topatch--> `double[] tmpVec = residuals` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 618, #gens: 357, #ops: 1, parent:617] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 618
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-618/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(309): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] /= work2[j] ` -topatch--> `double[] tmpVec = residuals` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (617(f=2.0), 618(f=2.0), )
Selected to next generation: IDs2--> (617(f=2.0), )
----------Running generation: 310, population size: 1

***** Generation 310 : 0
**Parent Variant: [Variant id: 619, #gens: 356, #ops: 0, parent:-]

--Child created id: 620
--Creating new operations for variant [Variant id: 620, #gens: 356, #ops: 0, parent:619]
---analyzing modificationPoint position: 86
location: LevenbergMarquardtOptimizer.java681
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[j] = dpj ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 620, #gens: 355, #ops: 1, parent:619] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 620
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-620/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(310): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[j] = dpj ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (619(f=2.0), 620(f=15.0), )
Selected to next generation: IDs2--> (619(f=2.0), )
----------Running generation: 311, population size: 1

***** Generation 311 : 0
**Parent Variant: [Variant id: 621, #gens: 356, #ops: 0, parent:-]

--Child created id: 622
--Creating new operations for variant [Variant id: 622, #gens: 356, #ops: 0, parent:621]
---analyzing modificationPoint position: 251
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  beta = new double[cols]
---analyzing modificationPoint position: 2
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  paru = java.lang.Math.min(paru, lmPar)
---analyzing modificationPoint position: 139
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 2 not mutation generated in  jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk]
---analyzing modificationPoint position: 137
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 3 not mutation generated in  gamma *= betak
---analyzing modificationPoint position: 256
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java255
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] diag = new double[cols] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 255, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] diag = new double[cols] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 622, #gens: 356, #ops: 1, parent:621] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 622, errors: [LevenbergMarquardtOptimizer.java:465: error: class, interface, or enum expected
	}
	^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^, LevenbergMarquardtOptimizer.java:534: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:538: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                ^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                       ^, LevenbergMarquardtOptimizer.java:541: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:543: error: class, interface, or enum expected
				work1[pj] = s;
				^, LevenbergMarquardtOptimizer.java:544: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:545: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:547: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(311): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] diag = new double[cols] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (621(f=2.0), 622(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (621(f=2.0), )
----------Running generation: 312, population size: 1

***** Generation 312 : 0
**Parent Variant: [Variant id: 623, #gens: 356, #ops: 0, parent:-]

--Child created id: 624
--Creating new operations for variant [Variant id: 624, #gens: 356, #ops: 0, parent:623]
---analyzing modificationPoint position: 44
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java549
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// calculate an upper bound, paru, for the zero of the function sum2 = 0 ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 549, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// calculate an upper bound, paru, for the zero of the function sum2 = 0 ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 624, #gens: 357, #ops: 1, parent:623] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 624, errors: [LevenbergMarquardtOptimizer.java:551: error: unreachable statement
		for (int j = 0; j < solvedCols; ++j) {
		^]
Ingredient counter is Zero
---Undoing: gnrtn(312): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// calculate an upper bound, paru, for the zero of the function sum2 = 0 ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (623(f=2.0), 624(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (623(f=2.0), )
----------Running generation: 313, population size: 1

***** Generation 313 : 0
**Parent Variant: [Variant id: 625, #gens: 356, #ops: 0, parent:-]

--Child created id: 626
--Creating new operations for variant [Variant id: 626, #gens: 356, #ops: 0, parent:625]
---analyzing modificationPoint position: 130
location: LevenbergMarquardtOptimizer.java503
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmDir[permutation[i]] -= ypk * jacobian[i][pk] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 626, #gens: 355, #ops: 1, parent:625] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 626
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-626/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(313): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmDir[permutation[i]] -= ypk * jacobian[i][pk] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (625(f=2.0), 626(f=13.0), )
Selected to next generation: IDs2--> (625(f=2.0), )
----------Running generation: 314, population size: 1

***** Generation 314 : 0
**Parent Variant: [Variant id: 627, #gens: 356, #ops: 0, parent:-]

--Child created id: 628
--Creating new operations for variant [Variant id: 628, #gens: 356, #ops: 0, parent:627]
---analyzing modificationPoint position: 130
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  lmDir[permutation[i]] -= ypk * jacobian[i][pk]
---analyzing modificationPoint position: 112
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...]
---analyzing modificationPoint position: 42
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double parl = 0
---analyzing modificationPoint position: 269
location: LevenbergMarquardtOptimizer.java786
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// initializations for (int k = 0; k < cols; ++k) { 	permutation[k] = k; 	double norm2 = 0; 	for (in[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 628, #gens: 355, #ops: 1, parent:627] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 628
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-628/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(314): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// initializations for (int k = 0; k < cols; ++k) { 	permutation[k] = k; 	double norm2 = 0; 	for (in[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (627(f=2.0), 628(f=18.0), )
Selected to next generation: IDs2--> (627(f=2.0), )
----------Running generation: 315, population size: 1

***** Generation 315 : 0
**Parent Variant: [Variant id: 629, #gens: 356, #ops: 0, parent:-]

--Child created id: 630
--Creating new operations for variant [Variant id: 630, #gens: 356, #ops: 0, parent:629]
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 222
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 1 not mutation generated in  if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...]
---analyzing modificationPoint position: 50
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, lmDir, work1, jacobian]
---modifPoint 2 not mutation generated in  sum /= diag[pj]
---analyzing modificationPoint position: 193
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 3 not mutation generated in  // compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...]
---analyzing modificationPoint position: 318
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 4 not mutation generated in  final double[] ji = jacobian[i]
---analyzing modificationPoint position: 141
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  // compute Qt.res qTy(residuals)
---analyzing modificationPoint position: 245
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  gamma *= beta[pk]
---analyzing modificationPoint position: 7
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 7 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 235
location: LevenbergMarquardtOptimizer.java514
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 630, #gens: 355, #ops: 1, parent:629] gen mutated: 1 , gen not mut: 8, gen not applied  0
-The child compiles: id 630
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-630/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(315): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (629(f=2.0), 630(f=13.0), )
Selected to next generation: IDs2--> (629(f=2.0), )
----------Running generation: 316, population size: 1

***** Generation 316 : 0
**Parent Variant: [Variant id: 631, #gens: 356, #ops: 0, parent:-]

--Child created id: 632
--Creating new operations for variant [Variant id: 632, #gens: 356, #ops: 0, parent:631]
---analyzing modificationPoint position: 278
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double ak2 = java.lang.Double.NEGATIVE_INFINITY
---analyzing modificationPoint position: 131
location: LevenbergMarquardtOptimizer.java436
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  (preRed <= costRelativeTolerance)) &[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 632, #gens: 355, #ops: 1, parent:631] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 632
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-632/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 18] ,[]
-Valid?: |false|16|18|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(316): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  (preRed <= costRelativeTolerance)) &[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (631(f=2.0), 632(f=16.0), )
Selected to next generation: IDs2--> (631(f=2.0), )
----------Running generation: 317, population size: 1

***** Generation 317 : 0
**Parent Variant: [Variant id: 633, #gens: 356, #ops: 0, parent:-]

--Child created id: 634
--Creating new operations for variant [Variant id: 634, #gens: 356, #ops: 0, parent:633]
---analyzing modificationPoint position: 289
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pk = permutation[nextColumn]
---analyzing modificationPoint position: 194
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java377
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 377, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 634, #gens: 356, #ops: 1, parent:633] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 634, errors: [LevenbergMarquardtOptimizer.java:868: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:868: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:868: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:868: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:868: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:868: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:868: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:868: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:868: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:868: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:868: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:868: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:868: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:868: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:868: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:868: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:874: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:874: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:874: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:874: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:874: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:874: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:874: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:874: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:875: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:875: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:875: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:875: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:875: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:875: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:876: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:876: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:877: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:877: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:877: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:878: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:878: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:878: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:878: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:878: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:878: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:879: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:879: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:879: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:879: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:879: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:879: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:879: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:880: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:881: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:881: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:879: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:881: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:881: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:881: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:881: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:881: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:881: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:882: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:882: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:881: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:882: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:882: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:883: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:883: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:883: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:884: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:884: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:884: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:885: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:885: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:886: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:886: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:885: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:886: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:886: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:886: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:886: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:888: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:888: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:889: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:889: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:889: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:890: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:891: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:892: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:893: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:893: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:894: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:895: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:895: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:896: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:896: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:896: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:896: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:896: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:896: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:896: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:896: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:896: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(317): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (633(f=2.0), 634(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (633(f=2.0), )
----------Running generation: 318, population size: 1

***** Generation 318 : 0
**Parent Variant: [Variant id: 635, #gens: 356, #ops: 0, parent:-]

--Child created id: 636
--Creating new operations for variant [Variant id: 636, #gens: 356, #ops: 0, parent:635]
---analyzing modificationPoint position: 110
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (nSing < solvedCols) { 	work[j] = 0; }
---analyzing modificationPoint position: 65
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: costRelativeTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java587
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 587, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 636, #gens: 357, #ops: 1, parent:635] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 636, errors: [LevenbergMarquardtOptimizer.java:594: error: unreachable statement
			dxNorm = java.lang.Math.sqrt(dxNorm);
			^, LevenbergMarquardtOptimizer.java:593: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
			} 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);
			  			^]
Ingredient counter is Zero
---Undoing: gnrtn(318): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (635(f=2.0), 636(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (635(f=2.0), )
----------Running generation: 319, population size: 1

***** Generation 319 : 0
**Parent Variant: [Variant id: 637, #gens: 356, #ops: 0, parent:-]

--Child created id: 638
--Creating new operations for variant [Variant id: 638, #gens: 356, #ops: 0, parent:637]
---analyzing modificationPoint position: 222
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...]
---analyzing modificationPoint position: 218
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  xNorm = java.lang.Math.sqrt(xNorm)
---analyzing modificationPoint position: 287
location: LevenbergMarquardtOptimizer.java814
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ak2 = norm2 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 638, #gens: 355, #ops: 1, parent:637] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 638
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-638/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(319): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ak2 = norm2 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (637(f=2.0), 638(f=18.0), )
Selected to next generation: IDs2--> (637(f=2.0), )
----------Running generation: 320, population size: 1

***** Generation 320 : 0
**Parent Variant: [Variant id: 639, #gens: 356, #ops: 0, parent:-]

--Child created id: 640
--Creating new operations for variant [Variant id: 640, #gens: 356, #ops: 0, parent:639]
---analyzing modificationPoint position: 39
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  tmpVec = residuals
---analyzing modificationPoint position: 139
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java843
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk] ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 843, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk] ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 640, #gens: 357, #ops: 1, parent:639] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 640
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-640/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(320): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk] ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (639(f=2.0), 640(f=2.0), )
Selected to next generation: IDs2--> (639(f=2.0), )
----------Running generation: 321, population size: 1

***** Generation 321 : 0
**Parent Variant: [Variant id: 641, #gens: 356, #ops: 0, parent:-]

--Child created id: 642
--Creating new operations for variant [Variant id: 642, #gens: 356, #ops: 0, parent:641]
---analyzing modificationPoint position: 237
location: LevenbergMarquardtOptimizer.java517
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = java.lang.Math.sqrt(dxNorm) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 642, #gens: 355, #ops: 1, parent:641] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 642
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-642/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(321): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = java.lang.Math.sqrt(dxNorm) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (641(f=2.0), 642(f=12.0), )
Selected to next generation: IDs2--> (641(f=2.0), )
----------Running generation: 322, population size: 1

***** Generation 322 : 0
**Parent Variant: [Variant id: 643, #gens: 356, #ops: 0, parent:-]

--Child created id: 644
--Creating new operations for variant [Variant id: 644, #gens: 356, #ops: 0, parent:643]
---analyzing modificationPoint position: 42
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [rows]
--> var from patch: rows spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java528
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `double[] oldRes = new double[rows]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 528, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `double[] oldRes = new double[rows]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 644, #gens: 356, #ops: 1, parent:643] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 644, errors: [LevenbergMarquardtOptimizer.java:546: error: cannot find symbol
			parl = fp / (delta * sum2);
			^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:569: error: cannot find symbol
		lmPar = java.lang.Math.min(paru, java.lang.Math.max(lmPar, parl));
		                                                           ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:601: error: cannot find symbol
			(((parl == 0) && (fp <= previousFP)) && (previousFP < 0))) {
			   ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:627: error: cannot find symbol
				parl = java.lang.Math.max(parl, lmPar);
				^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:627: error: cannot find symbol
				parl = java.lang.Math.max(parl, lmPar);
				                          ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:633: error: cannot find symbol
			lmPar = java.lang.Math.max(parl, lmPar + correction);
			                           ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(322): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `double[] oldRes = new double[rows]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (643(f=2.0), 644(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (643(f=2.0), )
----------Running generation: 323, population size: 1

***** Generation 323 : 0
**Parent Variant: [Variant id: 645, #gens: 356, #ops: 0, parent:-]

--Child created id: 646
--Creating new operations for variant [Variant id: 646, #gens: 356, #ops: 0, parent:645]
---analyzing modificationPoint position: 262
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java263
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost() ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 263, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost() ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 646, #gens: 356, #ops: 1, parent:645] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 646, errors: [LevenbergMarquardtOptimizer.java:494: error: class, interface, or enum expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^, LevenbergMarquardtOptimizer.java:534: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:538: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                ^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                       ^, LevenbergMarquardtOptimizer.java:541: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:543: error: class, interface, or enum expected
				work1[pj] = s;
				^, LevenbergMarquardtOptimizer.java:544: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:545: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:547: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(323): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost() ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (645(f=2.0), 646(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (645(f=2.0), )
----------Running generation: 324, population size: 1

***** Generation 324 : 0
**Parent Variant: [Variant id: 647, #gens: 356, #ops: 0, parent:-]

--Child created id: 648
--Creating new operations for variant [Variant id: 648, #gens: 356, #ops: 0, parent:647]
---analyzing modificationPoint position: 227
---modifPoint 0 not mutation generated in  int pk = permutation[k]
---analyzing modificationPoint position: 159
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java312
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = jacNorm[pj] ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 312, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = jacNorm[pj] ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 648, #gens: 357, #ops: 1, parent:647] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 648
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-648/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(324): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = jacNorm[pj] ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (647(f=2.0), 648(f=4.0), )
Selected to next generation: IDs2--> (647(f=2.0), )
----------Running generation: 325, population size: 1

***** Generation 325 : 0
**Parent Variant: [Variant id: 649, #gens: 356, #ops: 0, parent:-]

--Child created id: 650
--Creating new operations for variant [Variant id: 650, #gens: 356, #ops: 0, parent:649]
---analyzing modificationPoint position: 32
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java698
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 698, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 650, #gens: 356, #ops: 1, parent:649] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 650, errors: [LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                       ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                               ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:701: error: cannot find symbol
						cos = sin * cotan;
						            ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(325): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (649(f=2.0), 650(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (649(f=2.0), )
----------Running generation: 326, population size: 1

***** Generation 326 : 0
**Parent Variant: [Variant id: 651, #gens: 356, #ops: 0, parent:-]

--Child created id: 652
--Creating new operations for variant [Variant id: 652, #gens: 356, #ops: 0, parent:651]
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 93
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java702
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 702, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 652, #gens: 357, #ops: 1, parent:651] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 652, errors: [LevenbergMarquardtOptimizer.java:702: error: unreported exception org.apache.commons.math.FunctionEvaluationException; must be caught or declared to be thrown
					} else { 						updateJacobian();
					         						              ^]
Ingredient counter is Zero
---Undoing: gnrtn(326): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (651(f=2.0), 652(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (651(f=2.0), )
----------Running generation: 327, population size: 1

***** Generation 327 : 0
**Parent Variant: [Variant id: 653, #gens: 356, #ops: 0, parent:-]

--Child created id: 654
--Creating new operations for variant [Variant id: 654, #gens: 356, #ops: 0, parent:653]
---analyzing modificationPoint position: 268
location: LevenbergMarquardtOptimizer.java274
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 654, #gens: 355, #ops: 1, parent:653] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 654
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-654/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(327): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (653(f=2.0), 654(f=18.0), )
Selected to next generation: IDs2--> (653(f=2.0), )
----------Running generation: 328, population size: 1

***** Generation 328 : 0
**Parent Variant: [Variant id: 655, #gens: 356, #ops: 0, parent:-]

--Child created id: 656
--Creating new operations for variant [Variant id: 656, #gens: 356, #ops: 0, parent:655]
---analyzing modificationPoint position: 11
location: LevenbergMarquardtOptimizer.java614
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 656, #gens: 355, #ops: 1, parent:655] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 656
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-656/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(328): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (655(f=2.0), 656(f=5.0), )
Selected to next generation: IDs2--> (655(f=2.0), )
----------Running generation: 329, population size: 1

***** Generation 329 : 0
**Parent Variant: [Variant id: 657, #gens: 356, #ops: 0, parent:-]

--Child created id: 658
--Creating new operations for variant [Variant id: 658, #gens: 356, #ops: 0, parent:657]
---analyzing modificationPoint position: 48
location: LevenbergMarquardtOptimizer.java553
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i <= j; ++i) { 	sum += jacobian[i][pj] * qy[i]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 658, #gens: 355, #ops: 1, parent:657] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 658
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-658/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(329): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i <= j; ++i) { 	sum += jacobian[i][pj] * qy[i]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (657(f=2.0), 658(f=4.0), )
Selected to next generation: IDs2--> (657(f=2.0), )
----------Running generation: 330, population size: 1

***** Generation 330 : 0
**Parent Variant: [Variant id: 659, #gens: 356, #ops: 0, parent:-]

--Child created id: 660
--Creating new operations for variant [Variant id: 660, #gens: 356, #ops: 0, parent:659]
---analyzing modificationPoint position: 121
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; }
---analyzing modificationPoint position: 57
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int countdown = 10; countdown >= 0; --countdown) {  	// evaluate the function at the current va[...]
---analyzing modificationPoint position: 226
location: LevenbergMarquardtOptimizer.java499
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 660, #gens: 355, #ops: 1, parent:659] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 660
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-660/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(330): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (659(f=2.0), 660(f=15.0), )
Selected to next generation: IDs2--> (659(f=2.0), )
----------Running generation: 331, population size: 1

***** Generation 331 : 0
**Parent Variant: [Variant id: 661, #gens: 356, #ops: 0, parent:-]

--Child created id: 662
--Creating new operations for variant [Variant id: 662, #gens: 356, #ops: 0, parent:661]
---analyzing modificationPoint position: 145
location: LevenbergMarquardtOptimizer.java286
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 662, #gens: 355, #ops: 1, parent:661] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 662
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-662/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(331): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (661(f=2.0), 662(f=18.0), )
Selected to next generation: IDs2--> (661(f=2.0), )
----------Running generation: 332, population size: 1

***** Generation 332 : 0
**Parent Variant: [Variant id: 663, #gens: 356, #ops: 0, parent:-]

--Child created id: 664
--Creating new operations for variant [Variant id: 664, #gens: 356, #ops: 0, parent:663]
---analyzing modificationPoint position: 32
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [diag, pj, lmDir]
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java698
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `double s = diag[pj] * lmDir[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 698, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `double s = diag[pj] * lmDir[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 664, #gens: 357, #ops: 1, parent:663] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 664
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-664/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(332): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `double s = diag[pj] * lmDir[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (663(f=2.0), 664(f=2.0), )
Selected to next generation: IDs2--> (663(f=2.0), )
----------Running generation: 333, population size: 1

***** Generation 333 : 0
**Parent Variant: [Variant id: 665, #gens: 356, #ops: 0, parent:-]

--Child created id: 666
--Creating new operations for variant [Variant id: 666, #gens: 356, #ops: 0, parent:665]
---analyzing modificationPoint position: 30
location: LevenbergMarquardtOptimizer.java543
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 666, #gens: 355, #ops: 1, parent:665] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 666
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-666/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(333): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (665(f=2.0), 666(f=13.0), )
Selected to next generation: IDs2--> (665(f=2.0), )
----------Running generation: 334, population size: 1

***** Generation 334 : 0
**Parent Variant: [Variant id: 667, #gens: 356, #ops: 0, parent:-]

--Child created id: 668
--Creating new operations for variant [Variant id: 668, #gens: 356, #ops: 0, parent:667]
---analyzing modificationPoint position: 308
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  this.parRelativeTolerance = parRelativeTolerance
---analyzing modificationPoint position: 4
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java606
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 606, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 668, #gens: 357, #ops: 1, parent:667] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 668
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-668/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(334): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (667(f=2.0), 668(f=2.0), )
Selected to next generation: IDs2--> (667(f=2.0), )
----------Running generation: 335, population size: 1

***** Generation 335 : 0
**Parent Variant: [Variant id: 669, #gens: 356, #ops: 0, parent:-]

--Child created id: 670
--Creating new operations for variant [Variant id: 670, #gens: 356, #ops: 0, parent:669]
---analyzing modificationPoint position: 26
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; }
---analyzing modificationPoint position: 159
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double s = jacNorm[pj]
---analyzing modificationPoint position: 207
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  // ratio of the actual to the predicted reduction ratio = (preRed == 0) ? 0 : actRed / preRed
---analyzing modificationPoint position: 180
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  lmDir[pj] = -lmDir[pj]
---analyzing modificationPoint position: 304
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  setOrthoTolerance(1.0E-10)
---analyzing modificationPoint position: 85
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0)
---analyzing modificationPoint position: 185
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  // on the first iteration, adjust the initial step bound. if (firstIteration) { 	delta = java.lang.M[...]
---analyzing modificationPoint position: 329
location: AbstractLeastSquaresOptimizer.java221
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals[i] = residual ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 670, #gens: 355, #ops: 1, parent:669] gen mutated: 1 , gen not mut: 7, gen not applied  0
-The child compiles: id 670
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-670/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(335): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals[i] = residual ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (669(f=2.0), 670(f=18.0), )
Selected to next generation: IDs2--> (669(f=2.0), )
----------Running generation: 336, population size: 1

***** Generation 336 : 0
**Parent Variant: [Variant id: 671, #gens: 356, #ops: 0, parent:-]

--Child created id: 672
--Creating new operations for variant [Variant id: 672, #gens: 356, #ops: 0, parent:671]
---analyzing modificationPoint position: 85
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java679
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 679, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 672, #gens: 356, #ops: 1, parent:671] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 672, errors: [LevenbergMarquardtOptimizer.java:679: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
			if (dpj != 0) { 				qrDecomposition();
			                				               ^]
Ingredient counter is Zero
---Undoing: gnrtn(336): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (671(f=2.0), 672(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (671(f=2.0), )
----------Running generation: 337, population size: 1

***** Generation 337 : 0
**Parent Variant: [Variant id: 673, #gens: 356, #ops: 0, parent:-]

--Child created id: 674
--Creating new operations for variant [Variant id: 674, #gens: 356, #ops: 0, parent:673]
---analyzing modificationPoint position: 283
location: LevenbergMarquardtOptimizer.java806
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `norm2 += aki * aki ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 674, #gens: 355, #ops: 1, parent:673] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 674, errors: [LevenbergMarquardtOptimizer.java:806: error: variable declaration not allowed here
					double aki = jacobian[j][permutation[i]];
					       ^]
Ingredient counter is Zero
---Undoing: gnrtn(337): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `norm2 += aki * aki ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (673(f=2.0), 674(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (673(f=2.0), )
----------Running generation: 338, population size: 1

***** Generation 338 : 0
**Parent Variant: [Variant id: 675, #gens: 356, #ops: 0, parent:-]

--Child created id: 676
--Creating new operations for variant [Variant id: 676, #gens: 356, #ops: 0, parent:675]
---analyzing modificationPoint position: 136
location: LevenbergMarquardtOptimizer.java839
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 676, #gens: 355, #ops: 1, parent:675] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 676
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-676/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(338): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (675(f=2.0), 676(f=18.0), )
Selected to next generation: IDs2--> (675(f=2.0), )
----------Running generation: 339, population size: 1

***** Generation 339 : 0
**Parent Variant: [Variant id: 677, #gens: 356, #ops: 0, parent:-]

--Child created id: 678
--Creating new operations for variant [Variant id: 678, #gens: 356, #ops: 0, parent:677]
---analyzing modificationPoint position: 33
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java699
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 699, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 678, #gens: 357, #ops: 1, parent:677] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 678
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-678/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(339): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (677(f=2.0), 678(f=2.0), )
Selected to next generation: IDs2--> (677(f=2.0), )
----------Running generation: 340, population size: 1

***** Generation 340 : 0
**Parent Variant: [Variant id: 679, #gens: 356, #ops: 0, parent:-]

--Child created id: 680
--Creating new operations for variant [Variant id: 680, #gens: 356, #ops: 0, parent:679]
---analyzing modificationPoint position: 230
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, diag, lmDiag, lmDiag.length, jacobian, work, lmDir]
---modifPoint 0 not mutation generated in  lmDir[pk] = ypk
---analyzing modificationPoint position: 214
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java415
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = 0 ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 415, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = 0 ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 680, #gens: 357, #ops: 1, parent:679] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 680
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-680/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(340): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = 0 ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (679(f=2.0), 680(f=2.0), )
Selected to next generation: IDs2--> (679(f=2.0), )
----------Running generation: 341, population size: 1

***** Generation 341 : 0
**Parent Variant: [Variant id: 681, #gens: 356, #ops: 0, parent:-]

--Child created id: 682
--Creating new operations for variant [Variant id: 682, #gens: 356, #ops: 0, parent:681]
---analyzing modificationPoint position: 221
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (delta <= (2.2204E-16 * xNorm)) { 	throw new org.apache.commons.math.optimization.OptimizationExc[...]
---analyzing modificationPoint position: 311
---modifPoint 1 not mutation generated in  return doOptimize()
---analyzing modificationPoint position: 330
location: AbstractLeastSquaresOptimizer.java222
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `cost += (residualsWeights[i] * residual) * residual ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 682, #gens: 355, #ops: 1, parent:681] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 682
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-682/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(341): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `cost += (residualsWeights[i] * residual) * residual ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (681(f=2.0), 682(f=18.0), )
Selected to next generation: IDs2--> (681(f=2.0), )
----------Running generation: 342, population size: 1

***** Generation 342 : 0
**Parent Variant: [Variant id: 683, #gens: 356, #ops: 0, parent:-]

--Child created id: 684
--Creating new operations for variant [Variant id: 684, #gens: 356, #ops: 0, parent:683]
---analyzing modificationPoint position: 122
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm)
---analyzing modificationPoint position: 7
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 185
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  // on the first iteration, adjust the initial step bound. if (firstIteration) { 	delta = java.lang.M[...]
---analyzing modificationPoint position: 11
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [fp, delta, sum2]
--> var from patch: fp spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum2 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java614
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `double correction = fp / (delta * sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 614, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `double correction = fp / (delta * sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 684, #gens: 357, #ops: 1, parent:683] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 684
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-684/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(342): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `double correction = fp / (delta * sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (683(f=2.0), 684(f=2.0), )
Selected to next generation: IDs2--> (683(f=2.0), )
----------Running generation: 343, population size: 1

***** Generation 343 : 0
**Parent Variant: [Variant id: 685, #gens: 356, #ops: 0, parent:-]

--Child created id: 686
--Creating new operations for variant [Variant id: 686, #gens: 356, #ops: 0, parent:685]
---analyzing modificationPoint position: 64
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.orthoTolerance]
--> var from patch: this.orthoTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java586
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = 0 ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 586, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = 0 ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 686, #gens: 357, #ops: 1, parent:685] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 686
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-686/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(343): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = 0 ` -topatch--> `this.orthoTolerance = orthoTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (685(f=2.0), 686(f=2.0), )
Selected to next generation: IDs2--> (685(f=2.0), )
----------Running generation: 344, population size: 1

***** Generation 344 : 0
**Parent Variant: [Variant id: 687, #gens: 356, #ops: 0, parent:-]

--Child created id: 688
--Creating new operations for variant [Variant id: 688, #gens: 356, #ops: 0, parent:687]
---analyzing modificationPoint position: 284
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (java.lang.Double.isInfinite(norm2) || java.lang.Double.isNaN(norm2)) { 	throw new org.apache.com[...]
---analyzing modificationPoint position: 68
location: LevenbergMarquardtOptimizer.java590
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work3[pj] = s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 688, #gens: 355, #ops: 1, parent:687] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 688
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-688/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(344): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work3[pj] = s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (687(f=2.0), 688(f=7.0), )
Selected to next generation: IDs2--> (687(f=2.0), )
----------Running generation: 345, population size: 1

***** Generation 345 : 0
**Parent Variant: [Variant id: 689, #gens: 356, #ops: 0, parent:-]

--Child created id: 690
--Creating new operations for variant [Variant id: 690, #gens: 356, #ops: 0, parent:689]
---analyzing modificationPoint position: 16
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, solvedCols, permutation, i, sum, jacobian, pj, work1, diagR, s, sum2]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diagR spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: s spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum2 spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java622
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double correction = fp / (delta * sum2) ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 622, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double correction = fp / (delta * sum2) ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 690, #gens: 357, #ops: 1, parent:689] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 690
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-690/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(345): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double correction = fp / (delta * sum2) ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (689(f=2.0), 690(f=2.0), )
Selected to next generation: IDs2--> (689(f=2.0), )
----------Running generation: 346, population size: 1

***** Generation 346 : 0
**Parent Variant: [Variant id: 691, #gens: 356, #ops: 0, parent:-]

--Child created id: 692
--Creating new operations for variant [Variant id: 692, #gens: 356, #ops: 0, parent:691]
---analyzing modificationPoint position: 18
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [beta, cols]
--> var from patch: beta spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java632
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 632, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 692, #gens: 356, #ops: 1, parent:691] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 692
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-692/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(346): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (691(f=2.0), 692(f=9.0), )
Selected to next generation: IDs2--> (691(f=2.0), )
----------Running generation: 347, population size: 1

***** Generation 347 : 0
**Parent Variant: [Variant id: 693, #gens: 356, #ops: 0, parent:-]

--Child created id: 694
--Creating new operations for variant [Variant id: 694, #gens: 356, #ops: 0, parent:693]
---analyzing modificationPoint position: 343
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java338
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.residuals = new double[target.length] ` -topatch--> `// reset counters iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 338, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.residuals = new double[target.length] ` -topatch--> `// reset counters iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 694, #gens: 356, #ops: 1, parent:693] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 694
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-694/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(347): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.residuals = new double[target.length] ` -topatch--> `// reset counters iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (693(f=2.0), 694(f=18.0), )
Selected to next generation: IDs2--> (693(f=2.0), )
----------Running generation: 348, population size: 1

***** Generation 348 : 0
**Parent Variant: [Variant id: 695, #gens: 356, #ops: 0, parent:-]

--Child created id: 696
--Creating new operations for variant [Variant id: 696, #gens: 356, #ops: 0, parent:695]
---analyzing modificationPoint position: 234
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 113
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 226
location: LevenbergMarquardtOptimizer.java499
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 696, #gens: 355, #ops: 1, parent:695] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 696
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-696/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(348): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (695(f=2.0), 696(f=15.0), )
Selected to next generation: IDs2--> (695(f=2.0), )
----------Running generation: 349, population size: 1

***** Generation 349 : 0
**Parent Variant: [Variant id: 697, #gens: 356, #ops: 0, parent:-]

--Child created id: 698
--Creating new operations for variant [Variant id: 698, #gens: 356, #ops: 0, parent:697]
---analyzing modificationPoint position: 253
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java250
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir = new double[cols] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 250, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir = new double[cols] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 698, #gens: 357, #ops: 1, parent:697] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 698, errors: [LevenbergMarquardtOptimizer.java:881: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:881: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:881: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:881: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:881: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:881: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:881: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:881: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:882: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:882: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:882: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:882: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:882: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:882: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:883: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:883: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:884: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:884: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:884: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:885: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:885: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:885: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:885: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:885: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:885: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:886: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:886: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:886: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:886: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:886: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:886: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:886: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:887: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:888: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:888: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:886: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:888: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:888: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:888: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:888: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:888: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:888: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:889: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:889: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:888: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:889: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:889: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:890: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:890: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:890: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:891: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:891: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:891: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:892: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:892: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:893: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:893: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:892: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:893: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:893: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:893: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:893: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:895: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:895: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:896: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:896: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:896: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:897: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:898: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:899: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:900: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:900: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:901: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:902: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:902: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:903: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:903: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:903: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:903: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:903: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:903: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:903: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:903: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:903: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:903: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:903: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:903: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:903: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:903: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:931: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:931: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:931: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:931: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:931: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:939: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	^, LevenbergMarquardtOptimizer.java:939: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	        ^, LevenbergMarquardtOptimizer.java:939: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                ^, LevenbergMarquardtOptimizer.java:939: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                           ^, LevenbergMarquardtOptimizer.java:939: error: reached end of file while parsing
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                               		                                 			                         			                  			                                 				                                  			                   			                                 				                                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(349): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir = new double[cols] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (697(f=2.0), 698(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (697(f=2.0), )
----------Running generation: 350, population size: 1

***** Generation 350 : 0
**Parent Variant: [Variant id: 699, #gens: 356, #ops: 0, parent:-]

--Child created id: 700
--Creating new operations for variant [Variant id: 700, #gens: 356, #ops: 0, parent:699]
---analyzing modificationPoint position: 329
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java221
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals[i] = residual ` -topatch--> `// compute transpose(J).J, avoiding building big intermediate matrices double[][] jTj = new double[c[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 221, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals[i] = residual ` -topatch--> `// compute transpose(J).J, avoiding building big intermediate matrices double[][] jTj = new double[c[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 700, #gens: 357, #ops: 1, parent:699] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 700, errors: [AbstractLeastSquaresOptimizer.java:295: error: illegal start of expression
	 * Guess the errors in optimized parameters.
	 ^, AbstractLeastSquaresOptimizer.java:295: error: ';' expected
	 * Guess the errors in optimized parameters.
	        ^, AbstractLeastSquaresOptimizer.java:295: error: ';' expected
	 * Guess the errors in optimized parameters.
	                   ^, AbstractLeastSquaresOptimizer.java:295: error: ';' expected
	 * Guess the errors in optimized parameters.
	                                ^, AbstractLeastSquaresOptimizer.java:295: error: <identifier> expected
	 * Guess the errors in optimized parameters.
	                                            ^, AbstractLeastSquaresOptimizer.java:296: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	      ^, AbstractLeastSquaresOptimizer.java:296: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	 ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                            ^, AbstractLeastSquaresOptimizer.java:296: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                             ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                  ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                           ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                       ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                ^, AbstractLeastSquaresOptimizer.java:296: error: illegal start of type
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                            ^, AbstractLeastSquaresOptimizer.java:296: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                              ^, AbstractLeastSquaresOptimizer.java:298: error: illegal start of expression
	 * @return errors in optimized parameters
	 ^, AbstractLeastSquaresOptimizer.java:298: error: <identifier> expected
	 * @return errors in optimized parameters
	    ^, AbstractLeastSquaresOptimizer.java:298: error: ';' expected
	 * @return errors in optimized parameters
	                 ^, AbstractLeastSquaresOptimizer.java:298: error: ';' expected
	 * @return errors in optimized parameters
	                                         ^, AbstractLeastSquaresOptimizer.java:299: error: <identifier> expected
	 * @exception FunctionEvaluationException
	                                         ^, AbstractLeastSquaresOptimizer.java:300: error: '(' expected
	 * 		if the function jacobian cannot b evaluated
	   		  ^, AbstractLeastSquaresOptimizer.java:300: error: ')' expected
	 * 		if the function jacobian cannot b evaluated
	   		      ^, AbstractLeastSquaresOptimizer.java:300: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                        ^, AbstractLeastSquaresOptimizer.java:300: error: variable declaration not allowed here
	 * 		if the function jacobian cannot b evaluated
	   		                ^, AbstractLeastSquaresOptimizer.java:300: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                                 ^, AbstractLeastSquaresOptimizer.java:301: error: illegal start of expression
	 * @exception OptimizationException
	   ^, AbstractLeastSquaresOptimizer.java:302: error: illegal start of expression
	 * 		if the covariances matrix cannot be computed
	   		^, AbstractLeastSquaresOptimizer.java:302: error: not a statement
	 * 		if the covariances matrix cannot be computed
	 ^, AbstractLeastSquaresOptimizer.java:302: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                  ^, AbstractLeastSquaresOptimizer.java:302: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                ^, AbstractLeastSquaresOptimizer.java:302: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                            ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		      ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                           ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                      ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                   ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                              ^, AbstractLeastSquaresOptimizer.java:304: error: not a statement
	 * 		lesser or equal to number of parameters)
	 ^, AbstractLeastSquaresOptimizer.java:304: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		      ^, AbstractLeastSquaresOptimizer.java:304: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		               ^, AbstractLeastSquaresOptimizer.java:304: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                         ^, AbstractLeastSquaresOptimizer.java:304: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                                       ^, AbstractLeastSquaresOptimizer.java:305: error: illegal start of expression
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	^, AbstractLeastSquaresOptimizer.java:305: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                     ^, AbstractLeastSquaresOptimizer.java:305: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                                                      ^, AbstractLeastSquaresOptimizer.java:305: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                                                                                  ^, AbstractLeastSquaresOptimizer.java:305: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                                                                                                                        ^, AbstractLeastSquaresOptimizer.java:305: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:319: error: illegal start of expression
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	^, AbstractLeastSquaresOptimizer.java:319: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                            ^, AbstractLeastSquaresOptimizer.java:319: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                  ^, AbstractLeastSquaresOptimizer.java:319: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                                         ^, AbstractLeastSquaresOptimizer.java:319: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                                                                 ^, AbstractLeastSquaresOptimizer.java:320: error: ';' expected
	double[] startPoint) throws 
	                   ^, AbstractLeastSquaresOptimizer.java:321: error: not a statement
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                       ^, AbstractLeastSquaresOptimizer.java:321: error: ';' expected
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                   ^, AbstractLeastSquaresOptimizer.java:321: error: not a statement
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                         ^, AbstractLeastSquaresOptimizer.java:321: error: ';' expected
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                                               ^, AbstractLeastSquaresOptimizer.java:321: error: not a statement
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                                                          ^, AbstractLeastSquaresOptimizer.java:321: error: ';' expected
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                                                                                   ^, AbstractLeastSquaresOptimizer.java:363: error: illegal start of expression
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	^, AbstractLeastSquaresOptimizer.java:363: error: class, interface, or enum expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                   ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                          ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                           ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                       ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                             ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                   ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:363: error: reached end of file while parsing
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(350): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals[i] = residual ` -topatch--> `// compute transpose(J).J, avoiding building big intermediate matrices double[][] jTj = new double[c[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (699(f=2.0), 700(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (699(f=2.0), )
----------Running generation: 351, population size: 1

***** Generation 351 : 0
**Parent Variant: [Variant id: 701, #gens: 356, #ops: 0, parent:-]

--Child created id: 702
--Creating new operations for variant [Variant id: 702, #gens: 356, #ops: 0, parent:701]
---analyzing modificationPoint position: 251
location: LevenbergMarquardtOptimizer.java248
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta = new double[cols] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 702, #gens: 355, #ops: 1, parent:701] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 702
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-702/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(351): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta = new double[cols] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (701(f=2.0), 702(f=18.0), )
Selected to next generation: IDs2--> (701(f=2.0), )
----------Running generation: 352, population size: 1

***** Generation 352 : 0
**Parent Variant: [Variant id: 703, #gens: 356, #ops: 0, parent:-]

--Child created id: 704
--Creating new operations for variant [Variant id: 704, #gens: 356, #ops: 0, parent:703]
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cost]
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java537
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 537, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 704, #gens: 357, #ops: 1, parent:703] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 704
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-704/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(352): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (703(f=2.0), 704(f=2.0), )
Selected to next generation: IDs2--> (703(f=2.0), )
----------Running generation: 353, population size: 1

***** Generation 353 : 0
**Parent Variant: [Variant id: 705, #gens: 356, #ops: 0, parent:-]

--Child created id: 706
--Creating new operations for variant [Variant id: 706, #gens: 356, #ops: 0, parent:705]
---analyzing modificationPoint position: 9
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java612
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 612, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 706, #gens: 357, #ops: 1, parent:705] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 706, errors: [LevenbergMarquardtOptimizer.java:614: error: unreachable statement
				for (int i = j + 1; i < solvedCols; ++i) {
				^]
Ingredient counter is Zero
---Undoing: gnrtn(353): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (705(f=2.0), 706(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (705(f=2.0), )
----------Running generation: 354, population size: 1

***** Generation 354 : 0
**Parent Variant: [Variant id: 707, #gens: 356, #ops: 0, parent:-]

--Child created id: 708
--Creating new operations for variant [Variant id: 708, #gens: 356, #ops: 0, parent:707]
---analyzing modificationPoint position: 86
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  lmDiag[j] = dpj
---analyzing modificationPoint position: 108
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...]
---analyzing modificationPoint position: 219
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [coeff1, pc2]
--> var from patch: coeff1 spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: pc2 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java435
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (checker == null) { 	if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  	(preRed <= [...] ` -topatch--> `coeff1 = coeff1 / pc2` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 435, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (checker == null) { 	if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  	(preRed <= [...] ` -topatch--> `coeff1 = coeff1 / pc2` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 708, #gens: 357, #ops: 1, parent:707] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 708
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-708/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(354): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (checker == null) { 	if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) &&  	(preRed <= [...] ` -topatch--> `coeff1 = coeff1 / pc2` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (707(f=2.0), 708(f=2.0), )
Selected to next generation: IDs2--> (707(f=2.0), )
----------Running generation: 355, population size: 1

***** Generation 355 : 0
**Parent Variant: [Variant id: 709, #gens: 356, #ops: 0, parent:-]

--Child created id: 710
--Creating new operations for variant [Variant id: 710, #gens: 356, #ops: 0, parent:709]
---analyzing modificationPoint position: 276
location: LevenbergMarquardtOptimizer.java797
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// transform the matrix column after column for (int k = 0; k < cols; ++k) {  	// select the column [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 710, #gens: 355, #ops: 1, parent:709] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 710
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-710/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(355): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// transform the matrix column after column for (int k = 0; k < cols; ++k) {  	// select the column [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (709(f=2.0), 710(f=18.0), )
Selected to next generation: IDs2--> (709(f=2.0), )
----------Running generation: 356, population size: 1

***** Generation 356 : 0
**Parent Variant: [Variant id: 711, #gens: 356, #ops: 0, parent:-]

--Child created id: 712
--Creating new operations for variant [Variant id: 712, #gens: 356, #ops: 0, parent:711]
---analyzing modificationPoint position: 88
location: LevenbergMarquardtOptimizer.java687
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = j; k < solvedCols; ++k) { 	int pk = permutation[k];  	// determine a Givens rotation wh[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 712, #gens: 355, #ops: 1, parent:711] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 712
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-712/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(356): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = j; k < solvedCols; ++k) { 	int pk = permutation[k];  	// determine a Givens rotation wh[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (711(f=2.0), 712(f=15.0), )
Selected to next generation: IDs2--> (711(f=2.0), )
----------Running generation: 357, population size: 1

***** Generation 357 : 0
**Parent Variant: [Variant id: 713, #gens: 356, #ops: 0, parent:-]

--Child created id: 714
--Creating new operations for variant [Variant id: 714, #gens: 356, #ops: 0, parent:713]
---analyzing modificationPoint position: 16
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: orthoTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java622
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double correction = fp / (delta * sum2) ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 622, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double correction = fp / (delta * sum2) ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 714, #gens: 357, #ops: 1, parent:713] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 714, errors: [LevenbergMarquardtOptimizer.java:626: error: unreachable statement
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:623: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
			double correction = fp / (delta * sum2); 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);
			                                         			^]
Ingredient counter is Zero
---Undoing: gnrtn(357): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double correction = fp / (delta * sum2) ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (713(f=2.0), 714(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (713(f=2.0), )
----------Running generation: 358, population size: 1

***** Generation 358 : 0
**Parent Variant: [Variant id: 715, #gens: 356, #ops: 0, parent:-]

--Child created id: 716
--Creating new operations for variant [Variant id: 716, #gens: 356, #ops: 0, parent:715]
---analyzing modificationPoint position: 214
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  xNorm = 0
---analyzing modificationPoint position: 222
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...]
---analyzing modificationPoint position: 59
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 2 not mutation generated in  double sPar = java.lang.Math.sqrt(lmPar)
---analyzing modificationPoint position: 343
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [this.point, startPoint]
--> var from patch: this.point spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: startPoint spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLeastSquaresOptimizer.java338
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.residuals = new double[target.length] ` -topatch--> `this.point = startPoint.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 338, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.residuals = new double[target.length] ` -topatch--> `this.point = startPoint.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 716, #gens: 356, #ops: 1, parent:715] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 716
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-716/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(358): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.residuals = new double[target.length] ` -topatch--> `this.point = startPoint.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (715(f=2.0), 716(f=18.0), )
Selected to next generation: IDs2--> (715(f=2.0), )
----------Running generation: 359, population size: 1

***** Generation 359 : 0
**Parent Variant: [Variant id: 717, #gens: 356, #ops: 0, parent:-]

--Child created id: 718
--Creating new operations for variant [Variant id: 718, #gens: 356, #ops: 0, parent:717]
---analyzing modificationPoint position: 100
Templates availables50
Attempts Base Ingredients  1 total 50
Name Conflict [j, solvedCols, permutation, lmDiag, jacobian, work, qtbpj]
---modifPoint 0 not mutation generated in  // accumulate the tranformation in the row of s for (int i = k + 1; i < solvedCols; ++i) { 	double r[...]
---analyzing modificationPoint position: 123
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmPar /= tmp
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 291
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  permutation[k] = pk
---analyzing modificationPoint position: 105
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 4 not mutation generated in  // store the diagonal element of s and restore // the corresponding diagonal element of R lmDiag[j] [...]
---analyzing modificationPoint position: 260
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  double[] work2 = new double[cols]
---analyzing modificationPoint position: 200
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 6 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; }
---analyzing modificationPoint position: 246
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 7 not mutation generated in  for (int i = k; i < rows; ++i) { 	y[i] -= gamma * jacobian[i][pk]; }
---analyzing modificationPoint position: 119
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 8 not mutation generated in  lmDir[permutation[j]] = work[j]
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 9 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 33
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 10 not mutation generated in  sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan))
---analyzing modificationPoint position: 9
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 11 not mutation generated in  double tmp = work1[pj]
---analyzing modificationPoint position: 35
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 12 not mutation generated in  // failed iteration, reset the previous values cost = previousCost
---analyzing modificationPoint position: 268
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java274
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 274, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 718, #gens: 356, #ops: 1, parent:717] gen mutated: 1 , gen not mut: 13, gen not applied  0
-The child compiles: id 718
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-718/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(359): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `updateJacobian() ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (717(f=2.0), 718(f=18.0), )
Selected to next generation: IDs2--> (717(f=2.0), )
----------Running generation: 360, population size: 1

***** Generation 360 : 0
**Parent Variant: [Variant id: 719, #gens: 356, #ops: 0, parent:-]

--Child created id: 720
--Creating new operations for variant [Variant id: 720, #gens: 356, #ops: 0, parent:719]
---analyzing modificationPoint position: 11
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java614
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 614, pointed element: CtCommentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 

--Summary Creation: for variant [Variant id: 720, #gens: 357, #ops: 1, parent:719] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 720
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-720/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(360): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (719(f=2.0), 720(f=2.0), )
Selected to next generation: IDs2--> (719(f=2.0), )
----------Running generation: 361, population size: 1

***** Generation 361 : 0
**Parent Variant: [Variant id: 721, #gens: 356, #ops: 0, parent:-]

--Child created id: 722
--Creating new operations for variant [Variant id: 722, #gens: 356, #ops: 0, parent:721]
---analyzing modificationPoint position: 119
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  lmDir[permutation[j]] = work[j]
---analyzing modificationPoint position: 25
---modifPoint 1 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 299
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java169
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000) ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 169, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000) ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 722, #gens: 356, #ops: 1, parent:721] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 722, errors: [LevenbergMarquardtOptimizer.java:276: error: illegal start of expression
	 * Set the positive input variable used in determining the initial step bound.
	 ^, LevenbergMarquardtOptimizer.java:276: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	      ^, LevenbergMarquardtOptimizer.java:276: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                   ^, LevenbergMarquardtOptimizer.java:276: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                                  ^, LevenbergMarquardtOptimizer.java:276: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                                          ^, LevenbergMarquardtOptimizer.java:276: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                                                          ^, LevenbergMarquardtOptimizer.java:276: error: ';' expected
	 * Set the positive input variable used in determining the initial step bound.
	                                                                       ^, LevenbergMarquardtOptimizer.java:276: error: <identifier> expected
	 * Set the positive input variable used in determining the initial step bound.
	                                                                              ^, LevenbergMarquardtOptimizer.java:277: error: not a statement
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	 ^, LevenbergMarquardtOptimizer.java:277: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	       ^, LevenbergMarquardtOptimizer.java:277: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                ^, LevenbergMarquardtOptimizer.java:277: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                       ^, LevenbergMarquardtOptimizer.java:277: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                                   ^, LevenbergMarquardtOptimizer.java:277: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                                                             ^, LevenbergMarquardtOptimizer.java:277: error: ';' expected
	 * This bound is set to the product of initialStepBoundFactor and the euclidean
	                                                                     ^, LevenbergMarquardtOptimizer.java:278: error: not a statement
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	 ^, LevenbergMarquardtOptimizer.java:278: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	       ^, LevenbergMarquardtOptimizer.java:278: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	               ^, LevenbergMarquardtOptimizer.java:278: error: not a statement
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                ^, LevenbergMarquardtOptimizer.java:278: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                 ^, LevenbergMarquardtOptimizer.java:278: error: '(' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                    ^, LevenbergMarquardtOptimizer.java:278: error: ')' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                            ^, LevenbergMarquardtOptimizer.java:278: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                                ^, LevenbergMarquardtOptimizer.java:278: error: variable declaration not allowed here
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                              ^, LevenbergMarquardtOptimizer.java:278: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                                                               ^, LevenbergMarquardtOptimizer.java:278: error: variable declaration not allowed here
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                                         ^, LevenbergMarquardtOptimizer.java:278: error: ';' expected
	 * norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most
	                                                                               ^, LevenbergMarquardtOptimizer.java:279: error: ';' expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	               ^, LevenbergMarquardtOptimizer.java:279: error: ';' expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                          ^, LevenbergMarquardtOptimizer.java:279: error: ';' expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                                 ^, LevenbergMarquardtOptimizer.java:279: error: <identifier> expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                                                        ^, LevenbergMarquardtOptimizer.java:279: error: not a statement
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                                                       ^, LevenbergMarquardtOptimizer.java:279: error: ';' expected
	 * cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally
	                                                                   ^, LevenbergMarquardtOptimizer.java:280: error: not a statement
	 * recommended value.
	 ^, LevenbergMarquardtOptimizer.java:280: error: ';' expected
	 * recommended value.
	              ^, LevenbergMarquardtOptimizer.java:280: error: <identifier> expected
	 * recommended value.
	                     ^, LevenbergMarquardtOptimizer.java:282: error: illegal start of expression
	 * @param initialStepBoundFactor
	 ^, LevenbergMarquardtOptimizer.java:282: error: illegal start of expression
	 * @param initialStepBoundFactor
	   ^, LevenbergMarquardtOptimizer.java:283: error: not a statement
	 * 		initial step bound factor
	 ^, LevenbergMarquardtOptimizer.java:283: error: ';' expected
	 * 		initial step bound factor
	   		       ^, LevenbergMarquardtOptimizer.java:283: error: ';' expected
	 * 		initial step bound factor
	   		                  ^, LevenbergMarquardtOptimizer.java:284: error: illegal start of expression
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	  ^, LevenbergMarquardtOptimizer.java:284: error: illegal start of expression
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:284: error: illegal start of expression
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:284: error: ';' expected
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	    	                                     ^, LevenbergMarquardtOptimizer.java:284: error: ';' expected
	 */ 	public void setInitialStepBoundFactor(double initialStepBoundFactor) { 		this.initialStepBoundFactor = initialStepBoundFactor;} 	/**
	    	                                                                   ^, LevenbergMarquardtOptimizer.java:291: error: illegal start of expression
	 */ 	public void setCostRelativeTolerance(double costRelativeTolerance) { 		this.costRelativeTolerance = costRelativeTolerance;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:291: error: illegal start of expression
	 */ 	public void setCostRelativeTolerance(double costRelativeTolerance) { 		this.costRelativeTolerance = costRelativeTolerance;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:291: error: ';' expected
	 */ 	public void setCostRelativeTolerance(double costRelativeTolerance) { 		this.costRelativeTolerance = costRelativeTolerance;} 	/**
	    	                                    ^, LevenbergMarquardtOptimizer.java:291: error: ';' expected
	 */ 	public void setCostRelativeTolerance(double costRelativeTolerance) { 		this.costRelativeTolerance = costRelativeTolerance;} 	/**
	    	                                                                 ^, LevenbergMarquardtOptimizer.java:299: error: illegal start of expression
	 */ 	public void setParRelativeTolerance(double parRelativeTolerance) { 		this.parRelativeTolerance = parRelativeTolerance;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:299: error: illegal start of expression
	 */ 	public void setParRelativeTolerance(double parRelativeTolerance) { 		this.parRelativeTolerance = parRelativeTolerance;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:299: error: ';' expected
	 */ 	public void setParRelativeTolerance(double parRelativeTolerance) { 		this.parRelativeTolerance = parRelativeTolerance;} 	/**
	    	                                   ^, LevenbergMarquardtOptimizer.java:299: error: ';' expected
	 */ 	public void setParRelativeTolerance(double parRelativeTolerance) { 		this.parRelativeTolerance = parRelativeTolerance;} 	/**
	    	                                                               ^, LevenbergMarquardtOptimizer.java:307: error: illegal start of expression
	 */ 	public void setOrthoTolerance(double orthoTolerance) { 		this.orthoTolerance = orthoTolerance;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:307: error: illegal start of expression
	 */ 	public void setOrthoTolerance(double orthoTolerance) { 		this.orthoTolerance = orthoTolerance;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:307: error: ';' expected
	 */ 	public void setOrthoTolerance(double orthoTolerance) { 		this.orthoTolerance = orthoTolerance;} 	/**
	    	                             ^, LevenbergMarquardtOptimizer.java:307: error: ';' expected
	 */ 	public void setOrthoTolerance(double orthoTolerance) { 		this.orthoTolerance = orthoTolerance;} 	/**
	    	                                                   ^, LevenbergMarquardtOptimizer.java:317: error: illegal start of expression
	 */ 	public void setQRRankingThreshold(final double threshold) { 		this.qrRankingThreshold = threshold;} 	/**
	    	^, LevenbergMarquardtOptimizer.java:317: error: illegal start of expression
	 */ 	public void setQRRankingThreshold(final double threshold) { 		this.qrRankingThreshold = threshold;} 	/**
	    	       ^, LevenbergMarquardtOptimizer.java:317: error: ';' expected
	 */ 	public void setQRRankingThreshold(final double threshold) { 		this.qrRankingThreshold = threshold;} 	/**
	    	                                 ^, LevenbergMarquardtOptimizer.java:317: error: ';' expected
	 */ 	public void setQRRankingThreshold(final double threshold) { 		this.qrRankingThreshold = threshold;} 	/**
	    	                                                        ^, LevenbergMarquardtOptimizer.java:319: error: ';' expected
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                 ^, LevenbergMarquardtOptimizer.java:319: error: not a statement
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:319: error: ';' expected
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                              ^, LevenbergMarquardtOptimizer.java:319: error: not a statement
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                                                                    ^, LevenbergMarquardtOptimizer.java:319: error: ';' expected
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                                                                                          ^, LevenbergMarquardtOptimizer.java:319: error: not a statement
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                                                                                                     ^, LevenbergMarquardtOptimizer.java:319: error: ';' expected
	 */ 	@java.lang.Override 	protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		// arrays shared with the other private methods 		solvedCols = java.lang.Math.min(rows, cols); 		diagR = new double[cols]; 		jacNorm = new double[cols]; 		beta = new double[cols]; 		permutation = new int[cols]; 		lmDir = new double[cols]; 		// local point 		double delta = 0; 		double xNorm = 0; 		double[] diag = new double[cols]; 		double[] oldX = new double[cols]; 		double[] oldRes = new double[rows]; 		double[] work1 = new double[cols]; 		double[] work2 = new double[cols]; 		double[] work3 = new double[cols]; 		// evaluate the function at the starting point and calculate its norm 		updateResidualsAndCost(); 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
	    	                    	                                                                                                                                                                                                                                              ^, LevenbergMarquardtOptimizer.java:494: error: class, interface, or enum expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^]
Ingredient counter is Zero
---Undoing: gnrtn(361): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000) ` -topatch--> `updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (721(f=2.0), 722(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (721(f=2.0), )
----------Running generation: 362, population size: 1

***** Generation 362 : 0
**Parent Variant: [Variant id: 723, #gens: 356, #ops: 0, parent:-]

--Child created id: 724
--Creating new operations for variant [Variant id: 724, #gens: 356, #ops: 0, parent:723]
---analyzing modificationPoint position: 15
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  sum2 += s * s
---analyzing modificationPoint position: 145
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 1 not mutation generated in  if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...]
---analyzing modificationPoint position: 243
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 2 not mutation generated in  for (int i = k; i < rows; ++i) { 	gamma += jacobian[i][pk] * y[i]; }
---analyzing modificationPoint position: 174
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  residuals = oldRes
---analyzing modificationPoint position: 104
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  jacobian[i][pk] = temp2
---analyzing modificationPoint position: 300
location: LevenbergMarquardtOptimizer.java172
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// default values for the tuning parameters setConvergenceChecker(null) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 724, #gens: 355, #ops: 1, parent:723] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 724
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-724/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(362): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// default values for the tuning parameters setConvergenceChecker(null) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (723(f=2.0), 724(f=15.0), )
Selected to next generation: IDs2--> (723(f=2.0), )
----------Running generation: 363, population size: 1

***** Generation 363 : 0
**Parent Variant: [Variant id: 725, #gens: 356, #ops: 0, parent:-]

--Child created id: 726
--Creating new operations for variant [Variant id: 726, #gens: 356, #ops: 0, parent:725]
---analyzing modificationPoint position: 303
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  setParRelativeTolerance(1.0E-10)
---analyzing modificationPoint position: 166
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, solvedCols, permutation, lmDir, pj, work1, i, jacobian, dirJ]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: dirJ spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java328
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...] ` -topatch--> `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 328, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...] ` -topatch--> `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 726, #gens: 357, #ops: 1, parent:725] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 726, errors: [LevenbergMarquardtOptimizer.java:387: error: cannot find symbol
				if (firstIteration) { 					delta = java.lang.Math.min(delta, lmNorm);} 				// evaluate the function at x + p and calculate its norm 				updateResidualsAndCost(); 				current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 				// compute the scaled actual reduction 				double actRed = -1.0; 				if ((0.1 * cost) < previousCost) { 					double r = cost / previousCost; 					actRed = 1.0 - (r * r);} 				// compute the scaled predicted reduction 				// and the scaled directional derivative
				                      					                                  ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:391: error: cannot find symbol
				double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;
				                          ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:391: error: cannot find symbol
				double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;
				                                    ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:396: error: cannot find symbol
				ratio = (preRed == 0) ? 0 : actRed / preRed;
				                            ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:401: error: cannot find symbol
					(actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;
					 ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:401: error: cannot find symbol
					(actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;
					                                                 ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:405: error: cannot find symbol
					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm);
					                                               ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:408: error: cannot find symbol
					delta = 2 * lmNorm;
					            ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:437: error: cannot find symbol
					if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && 
					                          ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:450: error: cannot find symbol
				if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) {
				                         ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(363): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...] ` -topatch--> `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (725(f=2.0), 726(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (725(f=2.0), )
----------Running generation: 364, population size: 1

***** Generation 364 : 0
**Parent Variant: [Variant id: 727, #gens: 356, #ops: 0, parent:-]

--Child created id: 728
--Creating new operations for variant [Variant id: 728, #gens: 356, #ops: 0, parent:727]
---analyzing modificationPoint position: 211
location: LevenbergMarquardtOptimizer.java408
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmPar *= 0.5 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 728, #gens: 355, #ops: 1, parent:727] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 728
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-728/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(364): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmPar *= 0.5 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (727(f=2.0), 728(f=4.0), )
Selected to next generation: IDs2--> (727(f=2.0), )
----------Running generation: 365, population size: 1

***** Generation 365 : 0
**Parent Variant: [Variant id: 729, #gens: 356, #ops: 0, parent:-]

--Child created id: 730
--Creating new operations for variant [Variant id: 730, #gens: 356, #ops: 0, parent:729]
---analyzing modificationPoint position: 309
location: LevenbergMarquardtOptimizer.java223
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.orthoTolerance = orthoTolerance ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 730, #gens: 355, #ops: 1, parent:729] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 730
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-730/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(365): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.orthoTolerance = orthoTolerance ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (729(f=2.0), 730(f=3.0), )
Selected to next generation: IDs2--> (729(f=2.0), )
----------Running generation: 366, population size: 1

***** Generation 366 : 0
**Parent Variant: [Variant id: 731, #gens: 356, #ops: 0, parent:-]

--Child created id: 732
--Creating new operations for variant [Variant id: 732, #gens: 356, #ops: 0, parent:731]
---analyzing modificationPoint position: 26
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java538
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; } ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 538, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; } ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 732, #gens: 357, #ops: 1, parent:731] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 732
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-732/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(366): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; } ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (731(f=2.0), 732(f=2.0), )
Selected to next generation: IDs2--> (731(f=2.0), )
----------Running generation: 367, population size: 1

***** Generation 367 : 0
**Parent Variant: [Variant id: 733, #gens: 356, #ops: 0, parent:-]

--Child created id: 734
--Creating new operations for variant [Variant id: 734, #gens: 356, #ops: 0, parent:733]
---analyzing modificationPoint position: 186
location: LevenbergMarquardtOptimizer.java360
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = java.lang.Math.min(delta, lmNorm) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 734, #gens: 355, #ops: 1, parent:733] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 734
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-734/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(367): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `delta = java.lang.Math.min(delta, lmNorm) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (733(f=2.0), 734(f=4.0), )
Selected to next generation: IDs2--> (733(f=2.0), )
----------Running generation: 368, population size: 1

***** Generation 368 : 0
**Parent Variant: [Variant id: 735, #gens: 356, #ops: 0, parent:-]

--Child created id: 736
--Creating new operations for variant [Variant id: 736, #gens: 356, #ops: 0, parent:735]
---analyzing modificationPoint position: 284
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (java.lang.Double.isInfinite(norm2) || java.lang.Double.isNaN(norm2)) { 	throw new org.apache.com[...]
---analyzing modificationPoint position: 194
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 315
location: AbstractLeastSquaresOptimizer.java185
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian = jF.value(point) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 736, #gens: 355, #ops: 1, parent:735] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 736
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-736/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(368): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian = jF.value(point) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (735(f=2.0), 736(f=18.0), )
Selected to next generation: IDs2--> (735(f=2.0), )
----------Running generation: 369, population size: 1

***** Generation 369 : 0
**Parent Variant: [Variant id: 737, #gens: 356, #ops: 0, parent:-]

--Child created id: 738
--Creating new operations for variant [Variant id: 738, #gens: 356, #ops: 0, parent:737]
---analyzing modificationPoint position: 113
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 305
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)
---analyzing modificationPoint position: 287
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  ak2 = norm2
---analyzing modificationPoint position: 322
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 3 not mutation generated in  if ((++objectiveEvaluations) > maxEvaluations) { 	throw new org.apache.commons.math.FunctionEvaluati[...]
---analyzing modificationPoint position: 105
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [current, residuals, solvedCols, permutation, jacobian, diagR, firstIteration, xNorm, cols, jacNorm, point, diag, delta, initialStepBoundFactor, cost, orthoTolerance, oldX, oldRes, work1, work2, work3, lmDir, objective, lmPar, checker, costRelativeTolerance, parRelativeTolerance, org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE]
---modifPoint 4 not mutation generated in  // store the diagonal element of s and restore // the corresponding diagonal element of R lmDiag[j] [...]
---analyzing modificationPoint position: 185
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  // on the first iteration, adjust the initial step bound. if (firstIteration) { 	delta = java.lang.M[...]
---analyzing modificationPoint position: 242
---modifPoint 6 not mutation generated in  double gamma = 0
---analyzing modificationPoint position: 169
location: LevenbergMarquardtOptimizer.java336
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// save the state for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	oldX[pj] = point[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 738, #gens: 355, #ops: 1, parent:737] gen mutated: 1 , gen not mut: 7, gen not applied  0
-The child compiles: id 738
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-738/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(369): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// save the state for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	oldX[pj] = point[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (737(f=2.0), 738(f=18.0), )
Selected to next generation: IDs2--> (737(f=2.0), )
----------Running generation: 370, population size: 1

***** Generation 370 : 0
**Parent Variant: [Variant id: 739, #gens: 356, #ops: 0, parent:-]

--Child created id: 740
--Creating new operations for variant [Variant id: 740, #gens: 356, #ops: 0, parent:739]
---analyzing modificationPoint position: 60
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; }
---analyzing modificationPoint position: 35
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [xNorm]
--> var from patch: xNorm spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java426
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `xNorm = java.lang.Math.sqrt(xNorm)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 426, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `xNorm = java.lang.Math.sqrt(xNorm)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 740, #gens: 356, #ops: 1, parent:739] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 740
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-740/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(370): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `xNorm = java.lang.Math.sqrt(xNorm)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (739(f=2.0), 740(f=4.0), )
Selected to next generation: IDs2--> (739(f=2.0), )
----------Running generation: 371, population size: 1

***** Generation 371 : 0
**Parent Variant: [Variant id: 741, #gens: 356, #ops: 0, parent:-]

--Child created id: 742
--Creating new operations for variant [Variant id: 742, #gens: 356, #ops: 0, parent:741]
---analyzing modificationPoint position: 3
location: LevenbergMarquardtOptimizer.java605
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 742, #gens: 355, #ops: 1, parent:741] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 742
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-742/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(371): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (741(f=2.0), 742(f=9.0), )
Selected to next generation: IDs2--> (741(f=2.0), )
----------Running generation: 372, population size: 1

***** Generation 372 : 0
**Parent Variant: [Variant id: 743, #gens: 356, #ops: 0, parent:-]

--Child created id: 744
--Creating new operations for variant [Variant id: 744, #gens: 356, #ops: 0, parent:743]
---analyzing modificationPoint position: 108
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...]
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [lmPar, paru, solvedCols, permutation, work1, diag, qy, work2, work3, dxNorm, lmDir, fp, delta, parl, jacobian, sum2]
---modifPoint 1 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 230
location: LevenbergMarquardtOptimizer.java505
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[pk] = ypk ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 744, #gens: 355, #ops: 1, parent:743] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 744
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-744/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(372): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[pk] = ypk ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (743(f=2.0), 744(f=15.0), )
Selected to next generation: IDs2--> (743(f=2.0), )
----------Running generation: 373, population size: 1

***** Generation 373 : 0
**Parent Variant: [Variant id: 745, #gens: 356, #ops: 0, parent:-]

--Child created id: 746
--Creating new operations for variant [Variant id: 746, #gens: 356, #ops: 0, parent:745]
---analyzing modificationPoint position: 184
location: LevenbergMarquardtOptimizer.java357
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmNorm = java.lang.Math.sqrt(lmNorm) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 746, #gens: 355, #ops: 1, parent:745] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 746
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-746/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(373): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmNorm = java.lang.Math.sqrt(lmNorm) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (745(f=2.0), 746(f=13.0), )
Selected to next generation: IDs2--> (745(f=2.0), )
----------Running generation: 374, population size: 1

***** Generation 374 : 0
**Parent Variant: [Variant id: 747, #gens: 356, #ops: 0, parent:-]

--Child created id: 748
--Creating new operations for variant [Variant id: 748, #gens: 356, #ops: 0, parent:747]
---analyzing modificationPoint position: 109
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 	nSing = j; }
---analyzing modificationPoint position: 61
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 94
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan))
---analyzing modificationPoint position: 4
---modifPoint 3 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 285
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  if (norm2 > ak2) { 	nextColumn = i; 	ak2 = norm2; }
---analyzing modificationPoint position: 263
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java266
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// outer loop lmPar = 0 ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 266, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// outer loop lmPar = 0 ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 748, #gens: 357, #ops: 1, parent:747] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 748, errors: [LevenbergMarquardtOptimizer.java:522: error: incompatible types: missing return value
		return; 		// outer loop 		lmPar = 0; 		boolean firstIteration = true; 		org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 		while (true) { 			incrementIterationsCounter(); 			// compute the Q.R. decomposition of the jacobian matrix 			org.apache.commons.math.optimization.VectorialPointValuePair previous = current; 			updateJacobian(); 			qrDecomposition(); 			// compute Qt.res 			qTy(residuals); 			// now we don't need Q anymore, 			// so let jacobian contain the R matrix with its diagonal elements
		^, LevenbergMarquardtOptimizer.java:523: error: cannot find symbol
			for (int k = 0; k < solvedCols; ++k) { 				int pk = permutation[k]; 				jacobian[k][pk] = diagR[pk];} 			if (firstIteration) { 				// scale the point according to the norms of the columns 				// of the initial jacobian 				xNorm = 0; 				for (int k = 0; k < cols; ++k) { 					double dk = jacNorm[k]; 					if (dk == 0) { 						dk = 1.0;} 					double xk = dk * point[k]; 					xNorm += xk * xk; 					diag[k] = dk;} 				xNorm = java.lang.Math.sqrt(xNorm); 				// initialize the step bound delta 				delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundFactor * xNorm;} 			// check orthogonality between function vector and jacobian columns 			double maxCosine = 0; 			if (cost != 0) { 				for (int j = 0; j < solvedCols; ++j) { 					int pj = permutation[j]; 					double s = jacNorm[pj]; 					if (s != 0) { 						double sum = 0; 						for (int i = 0; i <= j; ++i) { 							sum += jacobian[i][pj] * residuals[i];} 						maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost));}}} 			if (maxCosine <= orthoTolerance) { 				// convergence has been reached
			                                       				                         				                              			    ^
  symbol:   variable firstIteration
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:523: error: illegal start of type
			for (int k = 0; k < solvedCols; ++k) { 				int pk = permutation[k]; 				jacobian[k][pk] = diagR[pk];} 			if (firstIteration) { 				// scale the point according to the norms of the columns 				// of the initial jacobian 				xNorm = 0; 				for (int k = 0; k < cols; ++k) { 					double dk = jacNorm[k]; 					if (dk == 0) { 						dk = 1.0;} 					double xk = dk * point[k]; 					xNorm += xk * xk; 					diag[k] = dk;} 				xNorm = java.lang.Math.sqrt(xNorm); 				// initialize the step bound delta 				delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundFactor * xNorm;} 			// check orthogonality between function vector and jacobian columns 			double maxCosine = 0; 			if (cost != 0) { 				for (int j = 0; j < solvedCols; ++j) { 					int pj = permutation[j]; 					double s = jacNorm[pj]; 					if (s != 0) { 						double sum = 0; 						for (int i = 0; i <= j; ++i) { 							sum += jacobian[i][pj] * residuals[i];} 						maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost));}}} 			if (maxCosine <= orthoTolerance) { 				// convergence has been reached
			                                       				                         				                              			   ^, LevenbergMarquardtOptimizer.java:524: error: cannot find symbol
				return current;} 			// rescale if necessary
				       ^
  symbol:   variable current
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:528: error: cannot find symbol
				if (firstIteration) { 					delta = java.lang.Math.min(delta, lmNorm);} 				// evaluate the function at x + p and calculate its norm 				updateResidualsAndCost(); 				current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 				// compute the scaled actual reduction 				double actRed = -1.0; 				if ((0.1 * cost) < previousCost) { 					double r = cost / previousCost; 					actRed = 1.0 - (r * r);} 				// compute the scaled predicted reduction 				// and the scaled directional derivative
				    ^
  symbol:   variable firstIteration
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:528: error: illegal start of type
				if (firstIteration) { 					delta = java.lang.Math.min(delta, lmNorm);} 				// evaluate the function at x + p and calculate its norm 				updateResidualsAndCost(); 				current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 				// compute the scaled actual reduction 				double actRed = -1.0; 				if ((0.1 * cost) < previousCost) { 					double r = cost / previousCost; 					actRed = 1.0 - (r * r);} 				// compute the scaled predicted reduction 				// and the scaled directional derivative
				   ^, LevenbergMarquardtOptimizer.java:528: error: cannot find symbol
				if (firstIteration) { 					delta = java.lang.Math.min(delta, lmNorm);} 				// evaluate the function at x + p and calculate its norm 				updateResidualsAndCost(); 				current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 				// compute the scaled actual reduction 				double actRed = -1.0; 				if ((0.1 * cost) < previousCost) { 					double r = cost / previousCost; 					actRed = 1.0 - (r * r);} 				// compute the scaled predicted reduction 				// and the scaled directional derivative
				                      					                                  ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:529: error: cannot find symbol
				for (int j = 0; j < solvedCols; ++j) { 					int pj = permutation[j]; 					double dirJ = lmDir[pj]; 					work1[j] = 0; 					for (int i = 0; i <= j; ++i) { 						work1[i] += jacobian[i][pj] * dirJ;}} 				double coeff1 = 0; 				for (int j = 0; j < solvedCols; ++j) { 					coeff1 += work1[j] * work1[j];} 				double pc2 = previousCost * previousCost; 				coeff1 = coeff1 / pc2; 				double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2; 				double preRed = coeff1 + (2 * coeff2); 				double dirDer = -(coeff1 + coeff2); 				// ratio of the actual to the predicted reduction 				ratio = (preRed == 0) ? 0 : actRed / preRed; 				// update the step bound
				                                       					                         					                         					              					                               						                                      				                   				                                       					                                				                                          				                       				                          ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:529: error: cannot find symbol
				for (int j = 0; j < solvedCols; ++j) { 					int pj = permutation[j]; 					double dirJ = lmDir[pj]; 					work1[j] = 0; 					for (int i = 0; i <= j; ++i) { 						work1[i] += jacobian[i][pj] * dirJ;}} 				double coeff1 = 0; 				for (int j = 0; j < solvedCols; ++j) { 					coeff1 += work1[j] * work1[j];} 				double pc2 = previousCost * previousCost; 				coeff1 = coeff1 / pc2; 				double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2; 				double preRed = coeff1 + (2 * coeff2); 				double dirDer = -(coeff1 + coeff2); 				// ratio of the actual to the predicted reduction 				ratio = (preRed == 0) ? 0 : actRed / preRed; 				// update the step bound
				                                       					                         					                         					              					                               						                                      				                   				                                       					                                				                                          				                       				                                    ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:530: error: cannot find symbol
				if (ratio <= 0.25) { 					double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5; 					if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 						tmp = 0.1;} 					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm); 					lmPar /= tmp;} else if ((lmPar == 0) || (ratio >= 0.75)) { 					delta = 2 * lmNorm; 					lmPar *= 0.5;} 				// test for successful iteration.
				                     					              ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:530: error: cannot find symbol
				if (ratio <= 0.25) { 					double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5; 					if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 						tmp = 0.1;} 					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm); 					lmPar /= tmp;} else if ((lmPar == 0) || (ratio >= 0.75)) { 					delta = 2 * lmNorm; 					lmPar *= 0.5;} 				// test for successful iteration.
				                     					                                                              ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:530: error: cannot find symbol
				if (ratio <= 0.25) { 					double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5; 					if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 						tmp = 0.1;} 					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm); 					lmPar /= tmp;} else if ((lmPar == 0) || (ratio >= 0.75)) { 					delta = 2 * lmNorm; 					lmPar *= 0.5;} 				// test for successful iteration.
				                     					                                                                              					                                                     						            					                                               ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:530: error: cannot find symbol
				if (ratio <= 0.25) { 					double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5; 					if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 						tmp = 0.1;} 					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm); 					lmPar /= tmp;} else if ((lmPar == 0) || (ratio >= 0.75)) { 					delta = 2 * lmNorm; 					lmPar *= 0.5;} 				// test for successful iteration.
				                     					                                                                              					                                                     						            					                                                        					                                                           					            ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:532: error: cannot find symbol
				if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) { 					throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);} else if (delta <= (2.2204E-16 * xNorm)) { 					throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);} else if (maxCosine <= 2.2204E-16) { 					throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);}}} } 	/**
				                         ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:532: error: cannot find symbol
				if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) { 					throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);} else if (delta <= (2.2204E-16 * xNorm)) { 					throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);} else if (maxCosine <= 2.2204E-16) { 					throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);}}} } 	/**
				                                                                                                					                                                                                                                                                                                                                                   					                                                                                                                                                                                                       ^
  symbol:   variable maxCosine
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:561: error: cannot find symbol
		double paru = gNorm / delta;
		              ^
  symbol:   variable gNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:569: error: cannot find symbol
		lmPar = java.lang.Math.min(paru, java.lang.Math.max(lmPar, parl));
		                                                           ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:571: error: cannot find symbol
			lmPar = gNorm / dxNorm;
			        ^
  symbol:   variable gNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:571: error: cannot find symbol
			lmPar = gNorm / dxNorm;
			                ^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:587: error: cannot find symbol
			dxNorm = 0;
			^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:592: error: cannot find symbol
				dxNorm += s * s;
				^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:594: error: cannot find symbol
			dxNorm = java.lang.Math.sqrt(dxNorm);
			^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:594: error: cannot find symbol
			dxNorm = java.lang.Math.sqrt(dxNorm);
			                             ^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:595: error: cannot find symbol
			double previousFP = fp;
			                    ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:596: error: cannot find symbol
			fp = dxNorm - delta;
			^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:596: error: cannot find symbol
			fp = dxNorm - delta;
			     ^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:600: error: cannot find symbol
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			                        ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:601: error: cannot find symbol
			(((parl == 0) && (fp <= previousFP)) && (previousFP < 0))) {
			   ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:601: error: cannot find symbol
			(((parl == 0) && (fp <= previousFP)) && (previousFP < 0))) {
			                  ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:608: error: cannot find symbol
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				                                     ^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:618: error: cannot find symbol
			sum2 = 0;
			^
  symbol:   variable sum2
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:621: error: cannot find symbol
				sum2 += s * s;
				^
  symbol:   variable sum2
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:623: error: cannot find symbol
			double correction = fp / (delta * sum2);
			                    ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:623: error: cannot find symbol
			double correction = fp / (delta * sum2);
			                                  ^
  symbol:   variable sum2
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:626: error: cannot find symbol
			if (fp > 0) {
			    ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:627: error: cannot find symbol
				parl = java.lang.Math.max(parl, lmPar);
				^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:627: error: cannot find symbol
				parl = java.lang.Math.max(parl, lmPar);
				                          ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:628: error: cannot find symbol
			} else if (fp < 0) {
			           ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:633: error: cannot find symbol
			lmPar = java.lang.Math.max(parl, lmPar + correction);
			                           ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(374): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// outer loop lmPar = 0 ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (747(f=2.0), 748(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (747(f=2.0), )
----------Running generation: 375, population size: 1

***** Generation 375 : 0
**Parent Variant: [Variant id: 749, #gens: 356, #ops: 0, parent:-]

--Child created id: 750
--Creating new operations for variant [Variant id: 750, #gens: 356, #ops: 0, parent:749]
---analyzing modificationPoint position: 326
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 0 not mutation generated in  int index = 0
---analyzing modificationPoint position: 238
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double fp = dxNorm - delta
---analyzing modificationPoint position: 80
location: LevenbergMarquardtOptimizer.java668
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 750, #gens: 355, #ops: 1, parent:749] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 750
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-750/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(375): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (749(f=2.0), 750(f=15.0), )
Selected to next generation: IDs2--> (749(f=2.0), )
----------Running generation: 376, population size: 1

***** Generation 376 : 0
**Parent Variant: [Variant id: 751, #gens: 356, #ops: 0, parent:-]

--Child created id: 752
--Creating new operations for variant [Variant id: 752, #gens: 356, #ops: 0, parent:751]
---analyzing modificationPoint position: 286
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  nextColumn = i
---analyzing modificationPoint position: 347
location: AbstractLeastSquaresOptimizer.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = java.lang.Double.POSITIVE_INFINITY ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 752, #gens: 355, #ops: 1, parent:751] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 752
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-752/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(376): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = java.lang.Double.POSITIVE_INFINITY ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (751(f=2.0), 752(f=2.0), )
Selected to next generation: IDs2--> (751(f=2.0), )
----------Running generation: 377, population size: 1

***** Generation 377 : 0
**Parent Variant: [Variant id: 753, #gens: 356, #ops: 0, parent:-]

--Child created id: 754
--Creating new operations for variant [Variant id: 754, #gens: 356, #ops: 0, parent:753]
---analyzing modificationPoint position: 148
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double dk = jacNorm[k]
---analyzing modificationPoint position: 17
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [jacNorm, cols]
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java625
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 625, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 754, #gens: 357, #ops: 1, parent:753] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 754
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-754/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(377): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (753(f=2.0), 754(f=2.0), )
Selected to next generation: IDs2--> (753(f=2.0), )
----------Running generation: 378, population size: 1

***** Generation 378 : 0
**Parent Variant: [Variant id: 755, #gens: 356, #ops: 0, parent:-]

--Child created id: 756
--Creating new operations for variant [Variant id: 756, #gens: 356, #ops: 0, parent:755]
---analyzing modificationPoint position: 94
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan))
---analyzing modificationPoint position: 214
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  xNorm = 0
---analyzing modificationPoint position: 59
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java579
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sPar = java.lang.Math.sqrt(lmPar) ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 579, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sPar = java.lang.Math.sqrt(lmPar) ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 756, #gens: 357, #ops: 1, parent:755] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 756
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-756/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(378): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sPar = java.lang.Math.sqrt(lmPar) ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (755(f=2.0), 756(f=4.0), )
Selected to next generation: IDs2--> (755(f=2.0), )
----------Running generation: 379, population size: 1

***** Generation 379 : 0
**Parent Variant: [Variant id: 757, #gens: 356, #ops: 0, parent:-]

--Child created id: 758
--Creating new operations for variant [Variant id: 758, #gens: 356, #ops: 0, parent:757]
---analyzing modificationPoint position: 279
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int i = k; i < cols; ++i) { 	double norm2 = 0; 	for (int j = k; j < jacobian.length; ++j) { 		d[...]
---analyzing modificationPoint position: 94
location: LevenbergMarquardtOptimizer.java703
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 758, #gens: 355, #ops: 1, parent:757] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 758, errors: [LevenbergMarquardtOptimizer.java:705: error: variable cos might not have been initialized
						sin = cos * tan;
						      ^]
Ingredient counter is Zero
---Undoing: gnrtn(379): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (757(f=2.0), 758(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (757(f=2.0), )
----------Running generation: 380, population size: 1

***** Generation 380 : 0
**Parent Variant: [Variant id: 759, #gens: 356, #ops: 0, parent:-]

--Child created id: 760
--Creating new operations for variant [Variant id: 760, #gens: 356, #ops: 0, parent:759]
---analyzing modificationPoint position: 325
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 0 not mutation generated in  cost = 0
---analyzing modificationPoint position: 16
---modifPoint 1 not mutation generated in  double correction = fp / (delta * sum2)
---analyzing modificationPoint position: 21
location: LevenbergMarquardtOptimizer.java532
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 760, #gens: 355, #ops: 1, parent:759] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 760, errors: [LevenbergMarquardtOptimizer.java:532: error: variable declaration not allowed here
				int pj = permutation[j];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(380): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (759(f=2.0), 760(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (759(f=2.0), )
----------Running generation: 381, population size: 1

***** Generation 381 : 0
**Parent Variant: [Variant id: 761, #gens: 356, #ops: 0, parent:-]

--Child created id: 762
--Creating new operations for variant [Variant id: 762, #gens: 356, #ops: 0, parent:761]
---analyzing modificationPoint position: 52
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [diagR, cols]
--> var from patch: diagR spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java559
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 559, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 762, #gens: 357, #ops: 1, parent:761] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 762
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-762/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(381): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (761(f=2.0), 762(f=13.0), )
Selected to next generation: IDs2--> (761(f=2.0), )
----------Running generation: 382, population size: 1

***** Generation 382 : 0
**Parent Variant: [Variant id: 763, #gens: 356, #ops: 0, parent:-]

--Child created id: 764
--Creating new operations for variant [Variant id: 764, #gens: 356, #ops: 0, parent:763]
---analyzing modificationPoint position: 84
location: LevenbergMarquardtOptimizer.java678
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (dpj != 0) { 	java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 764, #gens: 355, #ops: 1, parent:763] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 764
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-764/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(382): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (dpj != 0) { 	java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (763(f=2.0), 764(f=13.0), )
Selected to next generation: IDs2--> (763(f=2.0), )
----------Running generation: 383, population size: 1

***** Generation 383 : 0
**Parent Variant: [Variant id: 765, #gens: 356, #ops: 0, parent:-]

--Child created id: 766
--Creating new operations for variant [Variant id: 766, #gens: 356, #ops: 0, parent:765]
---analyzing modificationPoint position: 41
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  oldRes = tmpVec
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 44
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  // calculate an upper bound, paru, for the zero of the function sum2 = 0
---analyzing modificationPoint position: 272
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: orthoTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java789
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < jacobian.length; ++i) { 	double akk = jacobian[i][k]; 	norm2 += akk * akk; } ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 789, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < jacobian.length; ++i) { 	double akk = jacobian[i][k]; 	norm2 += akk * akk; } ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 766, #gens: 357, #ops: 1, parent:765] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 766, errors: [LevenbergMarquardtOptimizer.java:790: error: unreachable statement
			for (int i = 0; i < jacobian.length; ++i) {
			^]
Ingredient counter is Zero
---Undoing: gnrtn(383): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < jacobian.length; ++i) { 	double akk = jacobian[i][k]; 	norm2 += akk * akk; } ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (765(f=2.0), 766(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (765(f=2.0), )
----------Running generation: 384, population size: 1

***** Generation 384 : 0
**Parent Variant: [Variant id: 767, #gens: 356, #ops: 0, parent:-]

--Child created id: 768
--Creating new operations for variant [Variant id: 768, #gens: 356, #ops: 0, parent:767]
---analyzing modificationPoint position: 115
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; }
---analyzing modificationPoint position: 75
location: LevenbergMarquardtOptimizer.java662
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 768, #gens: 355, #ops: 1, parent:767] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 768
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-768/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(384): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (767(f=2.0), 768(f=15.0), )
Selected to next generation: IDs2--> (767(f=2.0), )
----------Running generation: 385, population size: 1

***** Generation 385 : 0
**Parent Variant: [Variant id: 769, #gens: 356, #ops: 0, parent:-]

--Child created id: 770
--Creating new operations for variant [Variant id: 770, #gens: 356, #ops: 0, parent:769]
---analyzing modificationPoint position: 354
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  this.maxEvaluations = maxEvaluations
---analyzing modificationPoint position: 3
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java605
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `double[] diag = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 605, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `double[] diag = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 770, #gens: 357, #ops: 1, parent:769] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 770, errors: [LevenbergMarquardtOptimizer.java:609: error: variable diag is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
			} 			double[] diag = new double[cols];
			  			         ^]
Ingredient counter is Zero
---Undoing: gnrtn(385): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `double[] diag = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (769(f=2.0), 770(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (769(f=2.0), )
----------Running generation: 386, population size: 1

***** Generation 386 : 0
**Parent Variant: [Variant id: 771, #gens: 356, #ops: 0, parent:-]

--Child created id: 772
--Creating new operations for variant [Variant id: 772, #gens: 356, #ops: 0, parent:771]
---analyzing modificationPoint position: 261
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double[] work3 = new double[cols]
---analyzing modificationPoint position: 262
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // evaluate the function at the starting point and calculate its norm updateResidualsAndCost()
---analyzing modificationPoint position: 265
---modifPoint 2 not mutation generated in  org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 180
location: LevenbergMarquardtOptimizer.java352
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[pj] = -lmDir[pj] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 772, #gens: 355, #ops: 1, parent:771] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 772
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-772/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(386): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[pj] = -lmDir[pj] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (771(f=2.0), 772(f=18.0), )
Selected to next generation: IDs2--> (771(f=2.0), )
----------Running generation: 387, population size: 1

***** Generation 387 : 0
**Parent Variant: [Variant id: 773, #gens: 356, #ops: 0, parent:-]

--Child created id: 774
--Creating new operations for variant [Variant id: 774, #gens: 356, #ops: 0, parent:773]
---analyzing modificationPoint position: 97
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  final double temp = (cos * work[k]) + (sin * qtbpj)
---analyzing modificationPoint position: 124
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  parl = java.lang.Math.max(parl, lmPar)
---analyzing modificationPoint position: 12
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 117
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  work[j] = (work[j] - sum) / lmDiag[j]
---analyzing modificationPoint position: 34
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, diag, lmDiag, lmDiag.length, jacobian, work, lmDir]
---modifPoint 4 not mutation generated in  cos = sin * cotan
---analyzing modificationPoint position: 125
Templates availables3
Attempts Base Ingredients  1 total 3
vars from patch []
location: LevenbergMarquardtOptimizer.java440
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 440, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 774, #gens: 356, #ops: 1, parent:773] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 774, errors: [LevenbergMarquardtOptimizer.java:562: error: illegal start of type
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:562: error: <identifier> expected
		if (paru == 0) {
		        ^, LevenbergMarquardtOptimizer.java:562: error: ';' expected
		if (paru == 0) {
		           ^, LevenbergMarquardtOptimizer.java:562: error: illegal start of type
		if (paru == 0) {
		             ^, LevenbergMarquardtOptimizer.java:562: error: <identifier> expected
		if (paru == 0) {
		              ^, LevenbergMarquardtOptimizer.java:562: error: ';' expected
		if (paru == 0) {
		                ^, LevenbergMarquardtOptimizer.java:564: error: illegal start of type
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			     ^, LevenbergMarquardtOptimizer.java:564: error: <identifier> expected
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			      ^, LevenbergMarquardtOptimizer.java:564: error: ';' expected
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			                  ^, LevenbergMarquardtOptimizer.java:564: error: <identifier> expected
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			                                       ^, LevenbergMarquardtOptimizer.java:564: error: <identifier> expected
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			                                             ^, LevenbergMarquardtOptimizer.java:564: error: illegal start of type
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			                                               ^, LevenbergMarquardtOptimizer.java:569: error: class, interface, or enum expected
		lmPar = java.lang.Math.min(paru, java.lang.Math.max(lmPar, parl));
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                    ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                                    ^, LevenbergMarquardtOptimizer.java:667: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:669: error: class, interface, or enum expected
			work[j] = qy[j];
			^, LevenbergMarquardtOptimizer.java:670: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:678: error: class, interface, or enum expected
			double dpj = diag[pj];
			^, LevenbergMarquardtOptimizer.java:679: error: class, interface, or enum expected
			if (dpj != 0) {
			^, LevenbergMarquardtOptimizer.java:681: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:687: error: class, interface, or enum expected
			double qtbpj = 0;
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                ^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                                ^, LevenbergMarquardtOptimizer.java:693: error: class, interface, or enum expected
				if (lmDiag[k] != 0) {
				^, LevenbergMarquardtOptimizer.java:695: error: class, interface, or enum expected
					final double sin;
					      ^, LevenbergMarquardtOptimizer.java:696: error: class, interface, or enum expected
					final double cos;
					      ^, LevenbergMarquardtOptimizer.java:697: error: class, interface, or enum expected
					double rkk = jacobian[k][pk];
					^, LevenbergMarquardtOptimizer.java:698: error: class, interface, or enum expected
					if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) {
					^, LevenbergMarquardtOptimizer.java:699: error: class, interface, or enum expected
						final double cotan = rkk / lmDiag[k];
						      ^, LevenbergMarquardtOptimizer.java:700: error: class, interface, or enum expected
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						^, LevenbergMarquardtOptimizer.java:701: error: class, interface, or enum expected
						cos = sin * cotan;
						^, LevenbergMarquardtOptimizer.java:702: error: class, interface, or enum expected
					} else {
					^, LevenbergMarquardtOptimizer.java:703: error: class, interface, or enum expected
						final double tan = lmDiag[k] / rkk;
						      ^, LevenbergMarquardtOptimizer.java:704: error: class, interface, or enum expected
						cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan));
						^, LevenbergMarquardtOptimizer.java:705: error: class, interface, or enum expected
						sin = cos * tan;
						^, LevenbergMarquardtOptimizer.java:706: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:711: error: class, interface, or enum expected
					final double temp = (cos * work[k]) + (sin * qtbpj);
					      ^, LevenbergMarquardtOptimizer.java:712: error: class, interface, or enum expected
					qtbpj = ((-sin) * work[k]) + (cos * qtbpj);
					^, LevenbergMarquardtOptimizer.java:713: error: class, interface, or enum expected
					work[k] = temp;
					^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					                    ^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					                                    ^, LevenbergMarquardtOptimizer.java:718: error: class, interface, or enum expected
						final double temp2 = (cos * rik) + (sin * lmDiag[i]);
						      ^, LevenbergMarquardtOptimizer.java:719: error: class, interface, or enum expected
						lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]);
						^, LevenbergMarquardtOptimizer.java:720: error: class, interface, or enum expected
						jacobian[i][pk] = temp2;
						^, LevenbergMarquardtOptimizer.java:721: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:729: error: class, interface, or enum expected
			jacobian[j][permutation[j]] = lmDir[j];
			^, LevenbergMarquardtOptimizer.java:731: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^]
Ingredient counter is Zero
---Undoing: gnrtn(387): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (773(f=2.0), 774(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (773(f=2.0), )
----------Running generation: 388, population size: 1

***** Generation 388 : 0
**Parent Variant: [Variant id: 775, #gens: 356, #ops: 0, parent:-]

--Child created id: 776
--Creating new operations for variant [Variant id: 776, #gens: 356, #ops: 0, parent:775]
---analyzing modificationPoint position: 241
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pk = permutation[k]
---analyzing modificationPoint position: 200
location: LevenbergMarquardtOptimizer.java385
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 776, #gens: 355, #ops: 1, parent:775] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 776
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-776/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(388): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (775(f=2.0), 776(f=8.0), )
Selected to next generation: IDs2--> (775(f=2.0), )
----------Running generation: 389, population size: 1

***** Generation 389 : 0
**Parent Variant: [Variant id: 777, #gens: 356, #ops: 0, parent:-]

--Child created id: 778
--Creating new operations for variant [Variant id: 778, #gens: 356, #ops: 0, parent:777]
---analyzing modificationPoint position: 286
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  nextColumn = i
---analyzing modificationPoint position: 248
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)
---analyzing modificationPoint position: 120
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5
---analyzing modificationPoint position: 5
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  work1[pj] = (work3[pj] * diag[pj]) / dxNorm
---analyzing modificationPoint position: 39
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  tmpVec = residuals
---analyzing modificationPoint position: 139
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk]
---analyzing modificationPoint position: 100
location: LevenbergMarquardtOptimizer.java715
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// accumulate the tranformation in the row of s for (int i = k + 1; i < solvedCols; ++i) { 	double r[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 778, #gens: 355, #ops: 1, parent:777] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child compiles: id 778
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-778/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(389): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// accumulate the tranformation in the row of s for (int i = k + 1; i < solvedCols; ++i) { 	double r[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (777(f=2.0), 778(f=8.0), )
Selected to next generation: IDs2--> (777(f=2.0), )
----------Running generation: 390, population size: 1

***** Generation 390 : 0
**Parent Variant: [Variant id: 779, #gens: 356, #ops: 0, parent:-]

--Child created id: 780
--Creating new operations for variant [Variant id: 780, #gens: 356, #ops: 0, parent:779]
---analyzing modificationPoint position: 12
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java617
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 617, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 780, #gens: 357, #ops: 1, parent:779] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 780
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-780/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(390): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (779(f=2.0), 780(f=2.0), )
Selected to next generation: IDs2--> (779(f=2.0), )
----------Running generation: 391, population size: 1

***** Generation 391 : 0
**Parent Variant: [Variant id: 781, #gens: 356, #ops: 0, parent:-]

--Child created id: 782
--Creating new operations for variant [Variant id: 782, #gens: 356, #ops: 0, parent:781]
---analyzing modificationPoint position: 9
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java612
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 612, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 782, #gens: 357, #ops: 1, parent:781] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 782, errors: [LevenbergMarquardtOptimizer.java:840: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:840: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:840: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:840: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:840: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:840: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:840: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:840: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:841: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:841: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:842: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:842: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:843: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:843: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:843: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:845: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:845: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:845: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:845: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:845: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:847: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:847: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:848: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:849: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:850: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:852: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:852: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:851: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:852: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:852: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:852: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:852: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:854: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:854: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:855: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:856: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:857: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:858: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:860: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:861: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:862: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:862: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:862: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:862: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:890: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:890: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:890: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:890: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:890: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:898: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	^, LevenbergMarquardtOptimizer.java:898: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	        ^, LevenbergMarquardtOptimizer.java:898: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                ^, LevenbergMarquardtOptimizer.java:898: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                           ^, LevenbergMarquardtOptimizer.java:898: error: reached end of file while parsing
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                               		                                 			                         			                  			                                 				                                  			                   			                                 				                                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(391): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = work1[pj] ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (781(f=2.0), 782(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (781(f=2.0), )
----------Running generation: 392, population size: 1

***** Generation 392 : 0
**Parent Variant: [Variant id: 783, #gens: 356, #ops: 0, parent:-]

--Child created id: 784
--Creating new operations for variant [Variant id: 784, #gens: 356, #ops: 0, parent:783]
---analyzing modificationPoint position: 243
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int i = k; i < rows; ++i) { 	gamma += jacobian[i][pk] * y[i]; }
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, jacobian, lmDir, diagR, work, qy]
---modifPoint 1 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 92
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...]
---analyzing modificationPoint position: 89
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  int pk = permutation[k]
---analyzing modificationPoint position: 157
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 4 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]
---analyzing modificationPoint position: 2
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  paru = java.lang.Math.min(paru, lmPar)
---analyzing modificationPoint position: 63
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java584
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 584, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 784, #gens: 357, #ops: 1, parent:783] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child does NOT compile: 784, errors: [LevenbergMarquardtOptimizer.java:587: error: unreachable statement
			dxNorm = 0;
			^]
Ingredient counter is Zero
---Undoing: gnrtn(392): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (783(f=2.0), 784(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (783(f=2.0), )
----------Running generation: 393, population size: 1

***** Generation 393 : 0
**Parent Variant: [Variant id: 785, #gens: 356, #ops: 0, parent:-]

--Child created id: 786
--Creating new operations for variant [Variant id: 786, #gens: 356, #ops: 0, parent:785]
---analyzing modificationPoint position: 189
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [solvedCols, rows, cols]
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: rows spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java368
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// compute the scaled actual reduction double actRed = -1.0 ` -topatch--> `// arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 368, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// compute the scaled actual reduction double actRed = -1.0 ` -topatch--> `// arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 786, #gens: 357, #ops: 1, parent:785] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 786
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-786/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(393): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// compute the scaled actual reduction double actRed = -1.0 ` -topatch--> `// arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (785(f=2.0), 786(f=2.0), )
Selected to next generation: IDs2--> (785(f=2.0), )
----------Running generation: 394, population size: 1

***** Generation 394 : 0
**Parent Variant: [Variant id: 787, #gens: 356, #ops: 0, parent:-]

--Child created id: 788
--Creating new operations for variant [Variant id: 788, #gens: 356, #ops: 0, parent:787]
---analyzing modificationPoint position: 81
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [solvedCols]
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java672
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `// eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 672, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `// eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 788, #gens: 357, #ops: 1, parent:787] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 788, errors: [LevenbergMarquardtOptimizer.java:740: error: illegal start of type
			if (nSing < solvedCols) {
			^, LevenbergMarquardtOptimizer.java:740: error: > expected
			if (nSing < solvedCols) {
			                      ^, LevenbergMarquardtOptimizer.java:740: error: ')' expected
			if (nSing < solvedCols) {
			                       ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
			if (nSing < solvedCols) {
			                         ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of type
				work[j] = 0;
				    ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
				work[j] = 0;
				      ^, LevenbergMarquardtOptimizer.java:743: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                        ^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                                ^, LevenbergMarquardtOptimizer.java:747: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                               ^, LevenbergMarquardtOptimizer.java:750: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:752: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                                  ^, LevenbergMarquardtOptimizer.java:758: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:789: error: class, interface, or enum expected
			double norm2 = 0;
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                                     ^, LevenbergMarquardtOptimizer.java:792: error: class, interface, or enum expected
				norm2 += akk * akk;
				^, LevenbergMarquardtOptimizer.java:793: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:795: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:802: error: class, interface, or enum expected
			double ak2 = java.lang.Double.NEGATIVE_INFINITY;
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:807: error: class, interface, or enum expected
					norm2 += aki * aki;
					^, LevenbergMarquardtOptimizer.java:808: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:812: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:815: error: class, interface, or enum expected
					ak2 = norm2;
					^, LevenbergMarquardtOptimizer.java:816: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:820: error: class, interface, or enum expected
				return;
				^, LevenbergMarquardtOptimizer.java:821: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:823: error: class, interface, or enum expected
			permutation[nextColumn] = permutation[k];
			^, LevenbergMarquardtOptimizer.java:824: error: class, interface, or enum expected
			permutation[k] = pk;
			^, LevenbergMarquardtOptimizer.java:827: error: class, interface, or enum expected
			double akk = jacobian[k][pk];
			^, LevenbergMarquardtOptimizer.java:828: error: class, interface, or enum expected
			double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2);
			^, LevenbergMarquardtOptimizer.java:829: error: class, interface, or enum expected
			double betak = 1.0 / (ak2 - (akk * alpha));
			^, LevenbergMarquardtOptimizer.java:830: error: class, interface, or enum expected
			beta[pk] = betak;
			^, LevenbergMarquardtOptimizer.java:833: error: class, interface, or enum expected
			diagR[pk] = alpha;
			^, LevenbergMarquardtOptimizer.java:834: error: class, interface, or enum expected
			jacobian[k][pk] -= alpha;
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                              ^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                                      ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:841: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:845: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:852: error: class, interface, or enum expected
	}
	^, LevenbergMarquardtOptimizer.java:860: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:860: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:862: error: class, interface, or enum expected
			double gamma = 0;
			^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:865: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:869: error: class, interface, or enum expected
			}
			^]
Ingredient counter is Zero
---Undoing: gnrtn(394): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `// eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (787(f=2.0), 788(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (787(f=2.0), )
----------Running generation: 395, population size: 1

***** Generation 395 : 0
**Parent Variant: [Variant id: 789, #gens: 356, #ops: 0, parent:-]

--Child created id: 790
--Creating new operations for variant [Variant id: 790, #gens: 356, #ops: 0, parent:789]
---analyzing modificationPoint position: 310
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  this.qrRankingThreshold = threshold
---analyzing modificationPoint position: 1
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 1 not mutation generated in  if (fp < 0) { 	paru = java.lang.Math.min(paru, lmPar); }
---analyzing modificationPoint position: 29
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  work1[pj] = s
---analyzing modificationPoint position: 242
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 3 not mutation generated in  double gamma = 0
---analyzing modificationPoint position: 27
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 4 not mutation generated in  sum += jacobian[i][pj] * work1[permutation[i]]
---analyzing modificationPoint position: 59
---modifPoint 5 not mutation generated in  double sPar = java.lang.Math.sqrt(lmPar)
---analyzing modificationPoint position: 13
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java618
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	double s = work1[permutation[j]]; 	sum2 += s * s; } ` -topatch--> `boolean firstIteration = true` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 618, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	double s = work1[permutation[j]]; 	sum2 += s * s; } ` -topatch--> `boolean firstIteration = true` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 790, #gens: 357, #ops: 1, parent:789] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child compiles: id 790
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-790/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(395): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	double s = work1[permutation[j]]; 	sum2 += s * s; } ` -topatch--> `boolean firstIteration = true` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (789(f=2.0), 790(f=2.0), )
Selected to next generation: IDs2--> (789(f=2.0), )
----------Running generation: 396, population size: 1

***** Generation 396 : 0
**Parent Variant: [Variant id: 791, #gens: 356, #ops: 0, parent:-]

--Child created id: 792
--Creating new operations for variant [Variant id: 792, #gens: 356, #ops: 0, parent:791]
---analyzing modificationPoint position: 133
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 33
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan))
---analyzing modificationPoint position: 102
Templates availables294
Attempts Base Ingredients  1 total 294
Attempts Base Ingredients  2 total 294
vars from patch [diag, pj]
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java717
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double temp2 = (cos * rik) + (sin * lmDiag[i]) ` -topatch--> `double dpj = diag[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 717, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double temp2 = (cos * rik) + (sin * lmDiag[i]) ` -topatch--> `double dpj = diag[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 792, #gens: 357, #ops: 1, parent:791] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 792, errors: [LevenbergMarquardtOptimizer.java:717: error: variable dpj is already defined in method determineLMDirection(double[],double[],double[],double[])
						double rik = jacobian[i][pk]; 						double dpj = diag[pj];
						                              						       ^]
Ingredient counter is Zero
---Undoing: gnrtn(396): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double temp2 = (cos * rik) + (sin * lmDiag[i]) ` -topatch--> `double dpj = diag[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (791(f=2.0), 792(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (791(f=2.0), )
----------Running generation: 397, population size: 1

***** Generation 397 : 0
**Parent Variant: [Variant id: 793, #gens: 356, #ops: 0, parent:-]

--Child created id: 794
--Creating new operations for variant [Variant id: 794, #gens: 356, #ops: 0, parent:793]
---analyzing modificationPoint position: 298
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // transform the remaining columns for (int dk = (cols - 1) - k; dk > 0; --dk) { 	double gamma = 0; [...]
---analyzing modificationPoint position: 32
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java698
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 698, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 794, #gens: 356, #ops: 1, parent:793] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 794, errors: [LevenbergMarquardtOptimizer.java:698: error: variable cos is already defined in method determineLMDirection(double[],double[],double[],double[])
					if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 						final double cos;
					                                                               						             ^, LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                       ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                               ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:701: error: cannot find symbol
						cos = sin * cotan;
						            ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(397): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (793(f=2.0), 794(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (793(f=2.0), )
----------Running generation: 398, population size: 1

***** Generation 398 : 0
**Parent Variant: [Variant id: 795, #gens: 356, #ops: 0, parent:-]

--Child created id: 796
--Creating new operations for variant [Variant id: 796, #gens: 356, #ops: 0, parent:795]
---analyzing modificationPoint position: 226
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]
---analyzing modificationPoint position: 62
location: LevenbergMarquardtOptimizer.java582
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = sPar * diag[pj] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 796, #gens: 355, #ops: 1, parent:795] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 796, errors: [LevenbergMarquardtOptimizer.java:582: error: variable declaration not allowed here
				int pj = permutation[j];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(398): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = sPar * diag[pj] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (795(f=2.0), 796(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (795(f=2.0), )
----------Running generation: 399, population size: 1

***** Generation 399 : 0
**Parent Variant: [Variant id: 797, #gens: 356, #ops: 0, parent:-]

--Child created id: 798
--Creating new operations for variant [Variant id: 798, #gens: 356, #ops: 0, parent:797]
---analyzing modificationPoint position: 57
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int countdown = 10; countdown >= 0; --countdown) {  	// evaluate the function at the current va[...]
---analyzing modificationPoint position: 279
location: LevenbergMarquardtOptimizer.java802
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = k; i < cols; ++i) { 	double norm2 = 0; 	for (int j = k; j < jacobian.length; ++j) { 		d[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 798, #gens: 355, #ops: 1, parent:797] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 798
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-798/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(399): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = k; i < cols; ++i) { 	double norm2 = 0; 	for (int j = k; j < jacobian.length; ++j) { 		d[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (797(f=2.0), 798(f=18.0), )
Selected to next generation: IDs2--> (797(f=2.0), )
----------Running generation: 400, population size: 1

***** Generation 400 : 0
**Parent Variant: [Variant id: 799, #gens: 356, #ops: 0, parent:-]

--Child created id: 800
--Creating new operations for variant [Variant id: 800, #gens: 356, #ops: 0, parent:799]
---analyzing modificationPoint position: 33
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [jacNorm, cols]
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java699
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 699, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 800, #gens: 356, #ops: 1, parent:799] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 800, errors: [LevenbergMarquardtOptimizer.java:701: error: variable sin might not have been initialized
						cos = sin * cotan;
						      ^]
Ingredient counter is Zero
---Undoing: gnrtn(400): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (799(f=2.0), 800(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (799(f=2.0), )
----------Running generation: 401, population size: 1

***** Generation 401 : 0
**Parent Variant: [Variant id: 801, #gens: 356, #ops: 0, parent:-]

--Child created id: 802
--Creating new operations for variant [Variant id: 802, #gens: 356, #ops: 0, parent:801]
---analyzing modificationPoint position: 310
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  this.qrRankingThreshold = threshold
---analyzing modificationPoint position: 71
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java594
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousFP = fp ` -topatch--> `setParRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 594, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousFP = fp ` -topatch--> `setParRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 802, #gens: 357, #ops: 1, parent:801] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 802
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-802/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(401): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousFP = fp ` -topatch--> `setParRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (801(f=2.0), 802(f=2.0), )
Selected to next generation: IDs2--> (801(f=2.0), )
----------Running generation: 402, population size: 1

***** Generation 402 : 0
**Parent Variant: [Variant id: 803, #gens: 356, #ops: 0, parent:-]

--Child created id: 804
--Creating new operations for variant [Variant id: 804, #gens: 356, #ops: 0, parent:803]
---analyzing modificationPoint position: 223
location: LevenbergMarquardtOptimizer.java493
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 804, #gens: 355, #ops: 1, parent:803] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 804
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-804/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(402): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (803(f=2.0), 804(f=18.0), )
Selected to next generation: IDs2--> (803(f=2.0), )
----------Running generation: 403, population size: 1

***** Generation 403 : 0
**Parent Variant: [Variant id: 805, #gens: 356, #ops: 0, parent:-]

--Child created id: 806
--Creating new operations for variant [Variant id: 806, #gens: 356, #ops: 0, parent:805]
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 196
location: LevenbergMarquardtOptimizer.java379
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[j] = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 806, #gens: 355, #ops: 1, parent:805] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 806
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-806/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 18] ,[]
-Valid?: |false|14|18|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(403): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[j] = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (805(f=2.0), 806(f=14.0), )
Selected to next generation: IDs2--> (805(f=2.0), )
----------Running generation: 404, population size: 1

***** Generation 404 : 0
**Parent Variant: [Variant id: 807, #gens: 356, #ops: 0, parent:-]

--Child created id: 808
--Creating new operations for variant [Variant id: 808, #gens: 356, #ops: 0, parent:807]
---analyzing modificationPoint position: 124
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  parl = java.lang.Math.max(parl, lmPar)
---analyzing modificationPoint position: 4
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [solvedCols]
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java606
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 606, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 808, #gens: 356, #ops: 1, parent:807] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 808, errors: [LevenbergMarquardtOptimizer.java:737: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:737: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:738: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:738: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:739: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:739: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:740: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:740: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:740: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:742: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:742: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:742: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:742: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:742: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:742: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:742: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:743: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:742: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:744: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:744: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:744: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:744: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:744: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:745: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:746: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:746: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:746: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:747: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:747: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:747: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:748: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:748: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:749: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:749: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:748: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:749: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:749: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:749: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:749: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:751: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:751: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:752: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:752: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:752: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:753: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:754: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:755: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:756: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:756: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:757: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:758: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:758: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:759: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:759: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:759: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:759: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:759: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:759: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:759: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:759: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:759: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:759: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:759: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:759: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:759: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:759: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:787: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:787: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:787: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:787: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:787: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(404): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (807(f=2.0), 808(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (807(f=2.0), )
----------Running generation: 405, population size: 1

***** Generation 405 : 0
**Parent Variant: [Variant id: 809, #gens: 356, #ops: 0, parent:-]

--Child created id: 810
--Creating new operations for variant [Variant id: 810, #gens: 356, #ops: 0, parent:809]
---analyzing modificationPoint position: 37
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 86
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  lmDiag[j] = dpj
---analyzing modificationPoint position: 78
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [lmDir, cols]
--> var from patch: lmDir spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java665
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pj] = jacobian[j][permutation[i]] ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 665, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pj] = jacobian[j][permutation[i]] ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 810, #gens: 356, #ops: 1, parent:809] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 810
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-810/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 18] ,[]
-Valid?: |false|14|18|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(405): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pj] = jacobian[j][permutation[i]] ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (809(f=2.0), 810(f=14.0), )
Selected to next generation: IDs2--> (809(f=2.0), )
----------Running generation: 406, population size: 1

***** Generation 406 : 0
**Parent Variant: [Variant id: 811, #gens: 356, #ops: 0, parent:-]

--Child created id: 812
--Creating new operations for variant [Variant id: 812, #gens: 356, #ops: 0, parent:811]
---analyzing modificationPoint position: 12
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 122
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm)
---analyzing modificationPoint position: 9
Templates availables67
Attempts Base Ingredients  1 total 67
Attempts Base Ingredients  2 total 67
---modifPoint 2 not mutation generated in  double tmp = work1[pj]
---analyzing modificationPoint position: 324
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [iterations, maxIterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java213
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (objective.length != rows) { 	throw new org.apache.commons.math.FunctionEvaluationException(point[...] ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 213, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (objective.length != rows) { 	throw new org.apache.commons.math.FunctionEvaluationException(point[...] ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 812, #gens: 356, #ops: 1, parent:811] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 812, errors: [AbstractLeastSquaresOptimizer.java:213: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
		objective = function.value(point); 		if ((++iterations) > maxIterations) { 			throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.MaxIterationsExceededException(maxIterations));}
		                                   		                                      			^]
Ingredient counter is Zero
---Undoing: gnrtn(406): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (objective.length != rows) { 	throw new org.apache.commons.math.FunctionEvaluationException(point[...] ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (811(f=2.0), 812(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (811(f=2.0), )
----------Running generation: 407, population size: 1

***** Generation 407 : 0
**Parent Variant: [Variant id: 813, #gens: 356, #ops: 0, parent:-]

--Child created id: 814
--Creating new operations for variant [Variant id: 814, #gens: 356, #ops: 0, parent:813]
---analyzing modificationPoint position: 115
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; }
---analyzing modificationPoint position: 298
Templates availables50
Attempts Base Ingredients  1 total 50
Name Conflict [cols, permutation, rows, jacobian, y, beta]
---modifPoint 1 not mutation generated in  // transform the remaining columns for (int dk = (cols - 1) - k; dk > 0; --dk) { 	double gamma = 0; [...]
---analyzing modificationPoint position: 203
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  coeff1 = coeff1 / pc2
---analyzing modificationPoint position: 29
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [sum2, s]
--> var from patch: sum2 spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: s spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java542
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `sum2 += s * s` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 542, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `sum2 += s * s` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 814, #gens: 357, #ops: 1, parent:813] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 814
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-814/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 18] ,[]
-Valid?: |false|8|18|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(407): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `sum2 += s * s` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (813(f=2.0), 814(f=8.0), )
Selected to next generation: IDs2--> (813(f=2.0), )
----------Running generation: 408, population size: 1

***** Generation 408 : 0
**Parent Variant: [Variant id: 815, #gens: 356, #ops: 0, parent:-]

--Child created id: 816
--Creating new operations for variant [Variant id: 816, #gens: 356, #ops: 0, parent:815]
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 157
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]
---analyzing modificationPoint position: 145
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 2 not mutation generated in  if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...]
---analyzing modificationPoint position: 79
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [solvedCols]
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java667
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[j] = diagR[pj] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 667, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[j] = diagR[pj] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 816, #gens: 357, #ops: 1, parent:815] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 816, errors: [LevenbergMarquardtOptimizer.java:740: error: illegal start of type
			if (nSing < solvedCols) {
			^, LevenbergMarquardtOptimizer.java:740: error: > expected
			if (nSing < solvedCols) {
			                      ^, LevenbergMarquardtOptimizer.java:740: error: ')' expected
			if (nSing < solvedCols) {
			                       ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
			if (nSing < solvedCols) {
			                         ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of type
				work[j] = 0;
				    ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
				work[j] = 0;
				      ^, LevenbergMarquardtOptimizer.java:743: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                        ^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                                ^, LevenbergMarquardtOptimizer.java:747: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                               ^, LevenbergMarquardtOptimizer.java:750: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:752: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                                  ^, LevenbergMarquardtOptimizer.java:758: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:789: error: class, interface, or enum expected
			double norm2 = 0;
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                                     ^, LevenbergMarquardtOptimizer.java:792: error: class, interface, or enum expected
				norm2 += akk * akk;
				^, LevenbergMarquardtOptimizer.java:793: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:795: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:802: error: class, interface, or enum expected
			double ak2 = java.lang.Double.NEGATIVE_INFINITY;
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:807: error: class, interface, or enum expected
					norm2 += aki * aki;
					^, LevenbergMarquardtOptimizer.java:808: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:812: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:815: error: class, interface, or enum expected
					ak2 = norm2;
					^, LevenbergMarquardtOptimizer.java:816: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:820: error: class, interface, or enum expected
				return;
				^, LevenbergMarquardtOptimizer.java:821: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:823: error: class, interface, or enum expected
			permutation[nextColumn] = permutation[k];
			^, LevenbergMarquardtOptimizer.java:824: error: class, interface, or enum expected
			permutation[k] = pk;
			^, LevenbergMarquardtOptimizer.java:827: error: class, interface, or enum expected
			double akk = jacobian[k][pk];
			^, LevenbergMarquardtOptimizer.java:828: error: class, interface, or enum expected
			double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2);
			^, LevenbergMarquardtOptimizer.java:829: error: class, interface, or enum expected
			double betak = 1.0 / (ak2 - (akk * alpha));
			^, LevenbergMarquardtOptimizer.java:830: error: class, interface, or enum expected
			beta[pk] = betak;
			^, LevenbergMarquardtOptimizer.java:833: error: class, interface, or enum expected
			diagR[pk] = alpha;
			^, LevenbergMarquardtOptimizer.java:834: error: class, interface, or enum expected
			jacobian[k][pk] -= alpha;
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                              ^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                                      ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:841: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:845: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:852: error: class, interface, or enum expected
	}
	^, LevenbergMarquardtOptimizer.java:860: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:860: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:862: error: class, interface, or enum expected
			double gamma = 0;
			^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:865: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:869: error: class, interface, or enum expected
			}
			^]
Ingredient counter is Zero
---Undoing: gnrtn(408): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[j] = diagR[pj] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (815(f=2.0), 816(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (815(f=2.0), )
----------Running generation: 409, population size: 1

***** Generation 409 : 0
**Parent Variant: [Variant id: 817, #gens: 356, #ops: 0, parent:-]

--Child created id: 818
--Creating new operations for variant [Variant id: 818, #gens: 356, #ops: 0, parent:817]
---analyzing modificationPoint position: 352
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 0 not mutation generated in  setMaxEvaluations(java.lang.Integer.MAX_VALUE)
---analyzing modificationPoint position: 184
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [delta, xNorm, org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance, maxCosine, org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: xNorm spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: parRelativeTolerance spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: maxCosine spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: orthoTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java357
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmNorm = java.lang.Math.sqrt(lmNorm) ` -topatch--> `if (delta <= (2.2204E-16 * xNorm)) { 	throw new org.apache.commons.math.optimization.OptimizationExc[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 357, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmNorm = java.lang.Math.sqrt(lmNorm) ` -topatch--> `if (delta <= (2.2204E-16 * xNorm)) { 	throw new org.apache.commons.math.optimization.OptimizationExc[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 818, #gens: 357, #ops: 1, parent:817] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 818, errors: [LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                 ^, LevenbergMarquardtOptimizer.java:661: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                              ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                     ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                      ^, LevenbergMarquardtOptimizer.java:661: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                            ^, LevenbergMarquardtOptimizer.java:661: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:661: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	        ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                            ^, LevenbergMarquardtOptimizer.java:785: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(409): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmNorm = java.lang.Math.sqrt(lmNorm) ` -topatch--> `if (delta <= (2.2204E-16 * xNorm)) { 	throw new org.apache.commons.math.optimization.OptimizationExc[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (817(f=2.0), 818(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (817(f=2.0), )
----------Running generation: 410, population size: 1

***** Generation 410 : 0
**Parent Variant: [Variant id: 819, #gens: 356, #ops: 0, parent:-]

--Child created id: 820
--Creating new operations for variant [Variant id: 820, #gens: 356, #ops: 0, parent:819]
---analyzing modificationPoint position: 117
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  work[j] = (work[j] - sum) / lmDiag[j]
---analyzing modificationPoint position: 284
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 1 not mutation generated in  if (java.lang.Double.isInfinite(norm2) || java.lang.Double.isNaN(norm2)) { 	throw new org.apache.com[...]
---analyzing modificationPoint position: 127
Templates availables11
Attempts Base Ingredients  1 total 11
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java250
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return cost * cost ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 250, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return cost * cost ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 820, #gens: 356, #ops: 1, parent:819] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 820
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-820/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(410): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return cost * cost ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (819(f=2.0), 820(f=18.0), )
Selected to next generation: IDs2--> (819(f=2.0), )
----------Running generation: 411, population size: 1

***** Generation 411 : 0
**Parent Variant: [Variant id: 821, #gens: 356, #ops: 0, parent:-]

--Child created id: 822
--Creating new operations for variant [Variant id: 822, #gens: 356, #ops: 0, parent:821]
---analyzing modificationPoint position: 66
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [sum2]
--> var from patch: sum2 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java588
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double gNorm = java.lang.Math.sqrt(sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 588, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double gNorm = java.lang.Math.sqrt(sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 822, #gens: 357, #ops: 1, parent:821] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 822, errors: [LevenbergMarquardtOptimizer.java:589: error: variable gNorm is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
				int pj = permutation[j]; 				double gNorm = java.lang.Math.sqrt(sum2);
				                         				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(411): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double gNorm = java.lang.Math.sqrt(sum2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (821(f=2.0), 822(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (821(f=2.0), )
----------Running generation: 412, population size: 1

***** Generation 412 : 0
**Parent Variant: [Variant id: 823, #gens: 356, #ops: 0, parent:-]

--Child created id: 824
--Creating new operations for variant [Variant id: 824, #gens: 356, #ops: 0, parent:823]
---analyzing modificationPoint position: 86
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  lmDiag[j] = dpj
---analyzing modificationPoint position: 135
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int j = k; j < jacobian.length; ++j) { 	gamma += jacobian[j][pk] * jacobian[j][permutation[k + [...]
---analyzing modificationPoint position: 321
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 2 not mutation generated in  ji[j] *= factor
---analyzing modificationPoint position: 74
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cost]
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java601
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 601, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 824, #gens: 357, #ops: 1, parent:823] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 824
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-824/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(412): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (823(f=2.0), 824(f=2.0), )
Selected to next generation: IDs2--> (823(f=2.0), )
----------Running generation: 413, population size: 1

***** Generation 413 : 0
**Parent Variant: [Variant id: 825, #gens: 356, #ops: 0, parent:-]

--Child created id: 826
--Creating new operations for variant [Variant id: 826, #gens: 356, #ops: 0, parent:825]
---analyzing modificationPoint position: 217
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [coeff1, pc2]
--> var from patch: coeff1 spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: pc2 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java418
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `coeff1 = coeff1 / pc2` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 418, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `coeff1 = coeff1 / pc2` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 826, #gens: 357, #ops: 1, parent:825] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 826
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-826/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(413): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `coeff1 = coeff1 / pc2` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (825(f=2.0), 826(f=2.0), )
Selected to next generation: IDs2--> (825(f=2.0), )
----------Running generation: 414, population size: 1

***** Generation 414 : 0
**Parent Variant: [Variant id: 827, #gens: 356, #ops: 0, parent:-]

--Child created id: 828
--Creating new operations for variant [Variant id: 828, #gens: 356, #ops: 0, parent:827]
---analyzing modificationPoint position: 23
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [residuals]
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java535
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 535, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 828, #gens: 357, #ops: 1, parent:827] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 828
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-828/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(414): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (827(f=2.0), 828(f=2.0), )
Selected to next generation: IDs2--> (827(f=2.0), )
----------Running generation: 415, population size: 1

***** Generation 415 : 0
**Parent Variant: [Variant id: 829, #gens: 356, #ops: 0, parent:-]

--Child created id: 830
--Creating new operations for variant [Variant id: 830, #gens: 356, #ops: 0, parent:829]
---analyzing modificationPoint position: 27
location: LevenbergMarquardtOptimizer.java539
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 830, #gens: 355, #ops: 1, parent:829] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 830
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-830/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(415): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (829(f=2.0), 830(f=13.0), )
Selected to next generation: IDs2--> (829(f=2.0), )
----------Running generation: 416, population size: 1

***** Generation 416 : 0
**Parent Variant: [Variant id: 831, #gens: 356, #ops: 0, parent:-]

--Child created id: 832
--Creating new operations for variant [Variant id: 832, #gens: 356, #ops: 0, parent:831]
---analyzing modificationPoint position: 12
location: LevenbergMarquardtOptimizer.java617
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 832, #gens: 355, #ops: 1, parent:831] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 832
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-832/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(416): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (831(f=2.0), 832(f=7.0), )
Selected to next generation: IDs2--> (831(f=2.0), )
----------Running generation: 417, population size: 1

***** Generation 417 : 0
**Parent Variant: [Variant id: 833, #gens: 356, #ops: 0, parent:-]

--Child created id: 834
--Creating new operations for variant [Variant id: 834, #gens: 356, #ops: 0, parent:833]
---analyzing modificationPoint position: 232
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]
---analyzing modificationPoint position: 181
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  point[pj] = oldX[pj] + lmDir[pj]
---analyzing modificationPoint position: 8
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 2 not mutation generated in  work1[pj] /= work2[j]
---analyzing modificationPoint position: 34
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 3 not mutation generated in  cos = sin * cotan
---analyzing modificationPoint position: 77
location: LevenbergMarquardtOptimizer.java664
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 834, #gens: 355, #ops: 1, parent:833] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 834
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-834/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(417): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (833(f=2.0), 834(f=13.0), )
Selected to next generation: IDs2--> (833(f=2.0), )
----------Running generation: 418, population size: 1

***** Generation 418 : 0
**Parent Variant: [Variant id: 835, #gens: 356, #ops: 0, parent:-]

--Child created id: 836
--Creating new operations for variant [Variant id: 836, #gens: 356, #ops: 0, parent:835]
---analyzing modificationPoint position: 5
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  work1[pj] = (work3[pj] * diag[pj]) / dxNorm
---analyzing modificationPoint position: 90
location: LevenbergMarquardtOptimizer.java692
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 836, #gens: 355, #ops: 1, parent:835] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 836, errors: [LevenbergMarquardtOptimizer.java:689: error: variable declaration not allowed here
				int pk = permutation[k];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(418): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (835(f=2.0), 836(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (835(f=2.0), )
----------Running generation: 419, population size: 1

***** Generation 419 : 0
**Parent Variant: [Variant id: 837, #gens: 356, #ops: 0, parent:-]

--Child created id: 838
--Creating new operations for variant [Variant id: 838, #gens: 356, #ops: 0, parent:837]
---analyzing modificationPoint position: 19
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java530
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] *= diag[pj] / dxNorm; } ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 530, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] *= diag[pj] / dxNorm; } ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 838, #gens: 357, #ops: 1, parent:837] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 838
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-838/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(419): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] *= diag[pj] / dxNorm; } ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (837(f=2.0), 838(f=2.0), )
Selected to next generation: IDs2--> (837(f=2.0), )
----------Running generation: 420, population size: 1

***** Generation 420 : 0
**Parent Variant: [Variant id: 839, #gens: 356, #ops: 0, parent:-]

--Child created id: 840
--Creating new operations for variant [Variant id: 840, #gens: 356, #ops: 0, parent:839]
---analyzing modificationPoint position: 12
location: LevenbergMarquardtOptimizer.java617
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 840, #gens: 355, #ops: 1, parent:839] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 840
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-840/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(420): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (839(f=2.0), 840(f=7.0), )
Selected to next generation: IDs2--> (839(f=2.0), )
----------Running generation: 421, population size: 1

***** Generation 421 : 0
**Parent Variant: [Variant id: 841, #gens: 356, #ops: 0, parent:-]

--Child created id: 842
--Creating new operations for variant [Variant id: 842, #gens: 356, #ops: 0, parent:841]
---analyzing modificationPoint position: 111
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (nSing > 0) { 	for (int j = nSing - 1; j >= 0; --j) { 		int pj = permutation[j]; 		double sum = 0[...]
---analyzing modificationPoint position: 11
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  work1[permutation[i]] -= jacobian[i][pj] * tmp
---analyzing modificationPoint position: 286
location: LevenbergMarquardtOptimizer.java813
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 842, #gens: 355, #ops: 1, parent:841] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 842
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-842/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(421): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (841(f=2.0), 842(f=18.0), )
Selected to next generation: IDs2--> (841(f=2.0), )
----------Running generation: 422, population size: 1

***** Generation 422 : 0
**Parent Variant: [Variant id: 843, #gens: 356, #ops: 0, parent:-]

--Child created id: 844
--Creating new operations for variant [Variant id: 844, #gens: 356, #ops: 0, parent:843]
---analyzing modificationPoint position: 49
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  sum += jacobian[i][pj] * qy[i]
---analyzing modificationPoint position: 224
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmDir[permutation[j]] = qy[j]
---analyzing modificationPoint position: 182
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, jacNorm, jacobian, residuals, maxCosine, cost]
---modifPoint 2 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 102
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  final double temp2 = (cos * rik) + (sin * lmDiag[i])
---analyzing modificationPoint position: 291
location: LevenbergMarquardtOptimizer.java823
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[k] = pk ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 844, #gens: 355, #ops: 1, parent:843] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 844
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-844/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(422): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation[k] = pk ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (843(f=2.0), 844(f=18.0), )
Selected to next generation: IDs2--> (843(f=2.0), )
----------Running generation: 423, population size: 1

***** Generation 423 : 0
**Parent Variant: [Variant id: 845, #gens: 356, #ops: 0, parent:-]

--Child created id: 846
--Creating new operations for variant [Variant id: 846, #gens: 356, #ops: 0, parent:845]
---analyzing modificationPoint position: 31
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  parl = fp / (delta * sum2)
---analyzing modificationPoint position: 7
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java610
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 610, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 846, #gens: 356, #ops: 1, parent:845] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 846, errors: [LevenbergMarquardtOptimizer.java:612: error: cannot find symbol
				work1[pj] /= work2[j];
				      ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:613: error: cannot find symbol
				double tmp = work1[pj];
				                   ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:615: error: cannot find symbol
					work1[permutation[i]] -= jacobian[i][pj] * tmp;
					                                     ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(423): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (845(f=2.0), 846(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (845(f=2.0), )
----------Running generation: 424, population size: 1

***** Generation 424 : 0
**Parent Variant: [Variant id: 847, #gens: 356, #ops: 0, parent:-]

--Child created id: 848
--Creating new operations for variant [Variant id: 848, #gens: 356, #ops: 0, parent:847]
---analyzing modificationPoint position: 58
location: LevenbergMarquardtOptimizer.java576
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 848, #gens: 355, #ops: 1, parent:847] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 848
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-848/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(424): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (847(f=2.0), 848(f=2.0), )
Selected to next generation: IDs2--> (847(f=2.0), )
----------Running generation: 425, population size: 1

***** Generation 425 : 0
**Parent Variant: [Variant id: 849, #gens: 356, #ops: 0, parent:-]

--Child created id: 850
--Creating new operations for variant [Variant id: 850, #gens: 356, #ops: 0, parent:849]
---analyzing modificationPoint position: 115
location: LevenbergMarquardtOptimizer.java747
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 850, #gens: 355, #ops: 1, parent:849] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 850
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-850/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(425): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (849(f=2.0), 850(f=12.0), )
Selected to next generation: IDs2--> (849(f=2.0), )
----------Running generation: 426, population size: 1

***** Generation 426 : 0
**Parent Variant: [Variant id: 851, #gens: 356, #ops: 0, parent:-]

--Child created id: 852
--Creating new operations for variant [Variant id: 852, #gens: 356, #ops: 0, parent:851]
---analyzing modificationPoint position: 26
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; }
---analyzing modificationPoint position: 53
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double paru = gNorm / delta
---analyzing modificationPoint position: 89
---modifPoint 2 not mutation generated in  int pk = permutation[k]
---analyzing modificationPoint position: 7
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java610
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 610, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 852, #gens: 356, #ops: 1, parent:851] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 852, errors: [LevenbergMarquardtOptimizer.java:803: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:803: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:804: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:804: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:805: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:805: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:807: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:807: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:808: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:808: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:808: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:808: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:809: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:808: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:810: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:810: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:810: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:810: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:811: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:811: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:812: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:812: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:812: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:813: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:814: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:815: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:817: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:817: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:818: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:818: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:819: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:820: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:821: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:822: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:823: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:824: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:824: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:825: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:825: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:825: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:825: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:825: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:825: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:853: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:853: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:853: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:853: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:853: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	        ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	                ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k];
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(426): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (851(f=2.0), 852(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (851(f=2.0), )
----------Running generation: 427, population size: 1

***** Generation 427 : 0
**Parent Variant: [Variant id: 853, #gens: 356, #ops: 0, parent:-]

--Child created id: 854
--Creating new operations for variant [Variant id: 854, #gens: 356, #ops: 0, parent:853]
---analyzing modificationPoint position: 132
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java520
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 520, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 854, #gens: 357, #ops: 1, parent:853] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 854, errors: [LevenbergMarquardtOptimizer.java:520: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
		if (fp <= (0.1 * delta)) { 			qrDecomposition();
		                           			               ^]
Ingredient counter is Zero
---Undoing: gnrtn(427): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (853(f=2.0), 854(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (853(f=2.0), )
----------Running generation: 428, population size: 1

***** Generation 428 : 0
**Parent Variant: [Variant id: 855, #gens: 356, #ops: 0, parent:-]

--Child created id: 856
--Creating new operations for variant [Variant id: 856, #gens: 356, #ops: 0, parent:855]
---analyzing modificationPoint position: 274
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  norm2 += akk * akk
---analyzing modificationPoint position: 7
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cost]
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java610
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 610, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 856, #gens: 357, #ops: 1, parent:855] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 856
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-856/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(428): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (855(f=2.0), 856(f=2.0), )
Selected to next generation: IDs2--> (855(f=2.0), )
----------Running generation: 429, population size: 1

***** Generation 429 : 0
**Parent Variant: [Variant id: 857, #gens: 356, #ops: 0, parent:-]

--Child created id: 858
--Creating new operations for variant [Variant id: 858, #gens: 356, #ops: 0, parent:857]
---analyzing modificationPoint position: 205
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  double preRed = coeff1 + (2 * coeff2)
---analyzing modificationPoint position: 344
location: AbstractLeastSquaresOptimizer.java341
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 858, #gens: 355, #ops: 1, parent:857] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 858
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-858/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(429): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (857(f=2.0), 858(f=18.0), )
Selected to next generation: IDs2--> (857(f=2.0), )
----------Running generation: 430, population size: 1

***** Generation 430 : 0
**Parent Variant: [Variant id: 859, #gens: 356, #ops: 0, parent:-]

--Child created id: 860
--Creating new operations for variant [Variant id: 860, #gens: 356, #ops: 0, parent:859]
---analyzing modificationPoint position: 126
---modifPoint 0 not mutation generated in  return java.lang.Math.sqrt(getChiSquare() / rows)
---analyzing modificationPoint position: 17
location: LevenbergMarquardtOptimizer.java625
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 860, #gens: 355, #ops: 1, parent:859] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 860
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-860/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(430): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (859(f=2.0), 860(f=2.0), )
Selected to next generation: IDs2--> (859(f=2.0), )
----------Running generation: 431, population size: 1

***** Generation 431 : 0
**Parent Variant: [Variant id: 861, #gens: 356, #ops: 0, parent:-]

--Child created id: 862
--Creating new operations for variant [Variant id: 862, #gens: 356, #ops: 0, parent:861]
---analyzing modificationPoint position: 321
Templates availables4
Attempts Base Ingredients  1 total 4
---modifPoint 0 not mutation generated in  ji[j] *= factor
---analyzing modificationPoint position: 250
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  jacNorm = new double[cols]
---analyzing modificationPoint position: 35
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  // failed iteration, reset the previous values cost = previousCost
---analyzing modificationPoint position: 273
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 3 not mutation generated in  double akk = jacobian[i][k]
---analyzing modificationPoint position: 216
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java417
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `double sPar = java.lang.Math.sqrt(lmPar)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 417, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `double sPar = java.lang.Math.sqrt(lmPar)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 862, #gens: 356, #ops: 1, parent:861] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 862, errors: [LevenbergMarquardtOptimizer.java:608: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:608: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:608: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:608: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:608: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:608: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:608: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:608: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:608: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:608: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:608: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:608: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:608: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:608: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:608: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:608: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(431): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double xK = diag[k] * point[k] ` -topatch--> `double sPar = java.lang.Math.sqrt(lmPar)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (861(f=2.0), 862(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (861(f=2.0), )
----------Running generation: 432, population size: 1

***** Generation 432 : 0
**Parent Variant: [Variant id: 863, #gens: 356, #ops: 0, parent:-]

--Child created id: 864
--Creating new operations for variant [Variant id: 864, #gens: 356, #ops: 0, parent:863]
---analyzing modificationPoint position: 65
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]
---analyzing modificationPoint position: 147
location: LevenbergMarquardtOptimizer.java291
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = 0; k < cols; ++k) { 	double dk = jacNorm[k]; 	if (dk == 0) { 		dk = 1.0; 	} 	double xk [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 864, #gens: 355, #ops: 1, parent:863] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 864
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-864/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(432): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = 0; k < cols; ++k) { 	double dk = jacNorm[k]; 	if (dk == 0) { 		dk = 1.0; 	} 	double xk [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (863(f=2.0), 864(f=6.0), )
Selected to next generation: IDs2--> (863(f=2.0), )
----------Running generation: 433, population size: 1

***** Generation 433 : 0
**Parent Variant: [Variant id: 865, #gens: 356, #ops: 0, parent:-]

--Child created id: 866
--Creating new operations for variant [Variant id: 866, #gens: 356, #ops: 0, parent:865]
---analyzing modificationPoint position: 18
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [paru, lmPar]
--> var from patch: paru spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: lmPar spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java632
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `paru = java.lang.Math.min(paru, lmPar)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 632, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `paru = java.lang.Math.min(paru, lmPar)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 866, #gens: 356, #ops: 1, parent:865] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 866
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-866/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(433): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `paru = java.lang.Math.min(paru, lmPar)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (865(f=2.0), 866(f=9.0), )
Selected to next generation: IDs2--> (865(f=2.0), )
----------Running generation: 434, population size: 1

***** Generation 434 : 0
**Parent Variant: [Variant id: 867, #gens: 356, #ops: 0, parent:-]

--Child created id: 868
--Creating new operations for variant [Variant id: 868, #gens: 356, #ops: 0, parent:867]
---analyzing modificationPoint position: 337
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  jacobianEvaluations = 0
---analyzing modificationPoint position: 305
location: LevenbergMarquardtOptimizer.java177
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 868, #gens: 355, #ops: 1, parent:867] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 868
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-868/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(434): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (867(f=2.0), 868(f=2.0), )
Selected to next generation: IDs2--> (867(f=2.0), )
----------Running generation: 435, population size: 1

***** Generation 435 : 0
**Parent Variant: [Variant id: 869, #gens: 356, #ops: 0, parent:-]

--Child created id: 870
--Creating new operations for variant [Variant id: 870, #gens: 356, #ops: 0, parent:869]
---analyzing modificationPoint position: 22
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, solvedCols, permutation, i, sum, jacobian, pj, qy, diag, sum2]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: qy spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum2 spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java534
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 534, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 870, #gens: 357, #ops: 1, parent:869] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 870, errors: [LevenbergMarquardtOptimizer.java:560: error: variable sum2 might not have been initialized
		double gNorm = java.lang.Math.sqrt(sum2);
		                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(435): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (869(f=2.0), 870(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (869(f=2.0), )
----------Running generation: 436, population size: 1

***** Generation 436 : 0
**Parent Variant: [Variant id: 871, #gens: 356, #ops: 0, parent:-]

--Child created id: 872
--Creating new operations for variant [Variant id: 872, #gens: 356, #ops: 0, parent:871]
---analyzing modificationPoint position: 117
location: LevenbergMarquardtOptimizer.java750
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = (work[j] - sum) / lmDiag[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 872, #gens: 355, #ops: 1, parent:871] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 872
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-872/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(436): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = (work[j] - sum) / lmDiag[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (871(f=2.0), 872(f=15.0), )
Selected to next generation: IDs2--> (871(f=2.0), )
----------Running generation: 437, population size: 1

***** Generation 437 : 0
**Parent Variant: [Variant id: 873, #gens: 356, #ops: 0, parent:-]

--Child created id: 874
--Creating new operations for variant [Variant id: 874, #gens: 356, #ops: 0, parent:873]
---analyzing modificationPoint position: 295
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [akk, ak2]
--> var from patch: akk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ak2 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java829
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 829, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 874, #gens: 357, #ops: 1, parent:873] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 874, errors: [LevenbergMarquardtOptimizer.java:830: error: variable alpha is already defined in method qrDecomposition()
			beta[pk] = betak; 			double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2);
			                  			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(437): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (873(f=2.0), 874(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (873(f=2.0), )
----------Running generation: 438, population size: 1

***** Generation 438 : 0
**Parent Variant: [Variant id: 875, #gens: 356, #ops: 0, parent:-]

--Child created id: 876
--Creating new operations for variant [Variant id: 876, #gens: 356, #ops: 0, parent:875]
---analyzing modificationPoint position: 104
location: LevenbergMarquardtOptimizer.java719
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pk] = temp2 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 876, #gens: 355, #ops: 1, parent:875] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 876
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-876/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(438): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pk] = temp2 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (875(f=2.0), 876(f=6.0), )
Selected to next generation: IDs2--> (875(f=2.0), )
----------Running generation: 439, population size: 1

***** Generation 439 : 0
**Parent Variant: [Variant id: 877, #gens: 356, #ops: 0, parent:-]

--Child created id: 878
--Creating new operations for variant [Variant id: 878, #gens: 356, #ops: 0, parent:877]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 190
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if ((0.1 * cost) < previousCost) { 	double r = cost / previousCost; 	actRed = 1.0 - (r * r); }
---analyzing modificationPoint position: 218
location: LevenbergMarquardtOptimizer.java420
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 878, #gens: 355, #ops: 1, parent:877] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 878
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-878/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(439): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (877(f=2.0), 878(f=7.0), )
Selected to next generation: IDs2--> (877(f=2.0), )
----------Running generation: 440, population size: 1

***** Generation 440 : 0
**Parent Variant: [Variant id: 879, #gens: 356, #ops: 0, parent:-]

--Child created id: 880
--Creating new operations for variant [Variant id: 880, #gens: 356, #ops: 0, parent:879]
---analyzing modificationPoint position: 224
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  lmDir[permutation[j]] = qy[j]
---analyzing modificationPoint position: 265
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, solvedCols, permutation, work1, pj, work2, i, jacobian, tmp]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: work2 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: tmp spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java268
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 268, pointed element: CtForImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 880, #gens: 357, #ops: 1, parent:879] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 880, errors: [LevenbergMarquardtOptimizer.java:654: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:654: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:654: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:654: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:654: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:654: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:654: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:654: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:654: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:654: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:654: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:654: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:654: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:654: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:654: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:654: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:660: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:660: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:660: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:660: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:660: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:660: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:660: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:660: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:661: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:662: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:662: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:663: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:663: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:663: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:664: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:664: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:664: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:664: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:664: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:664: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:665: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:665: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:665: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:665: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:665: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:665: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:665: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:666: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:667: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:667: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:665: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:667: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:667: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:667: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:667: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:667: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:667: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:668: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:668: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:667: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:668: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:668: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:669: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:669: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:669: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:670: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:670: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:670: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:671: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:671: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:672: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:672: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:671: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:672: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:672: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:672: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:672: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:674: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:674: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:675: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:675: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:675: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:676: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:677: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:678: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:679: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:679: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:680: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:681: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:681: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:682: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:682: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:682: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:682: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:682: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:682: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:682: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:682: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:682: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(440): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (879(f=2.0), 880(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (879(f=2.0), )
----------Running generation: 441, population size: 1

***** Generation 441 : 0
**Parent Variant: [Variant id: 881, #gens: 356, #ops: 0, parent:-]

--Child created id: 882
--Creating new operations for variant [Variant id: 882, #gens: 356, #ops: 0, parent:881]
---analyzing modificationPoint position: 40
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java432
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 432, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 882, #gens: 357, #ops: 1, parent:881] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 882, errors: [LevenbergMarquardtOptimizer.java:558: error: cannot find symbol
			sum2 += sum * sum;
			^
  symbol:   variable sum2
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:560: error: cannot find symbol
		double gNorm = java.lang.Math.sqrt(sum2);
		                                   ^
  symbol:   variable sum2
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:569: error: cannot find symbol
		lmPar = java.lang.Math.min(paru, java.lang.Math.max(lmPar, parl));
		                                                           ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:571: error: cannot find symbol
			lmPar = gNorm / dxNorm;
			                ^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:587: error: cannot find symbol
			dxNorm = 0;
			^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:592: error: cannot find symbol
				dxNorm += s * s;
				^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:594: error: cannot find symbol
			dxNorm = java.lang.Math.sqrt(dxNorm);
			^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:594: error: cannot find symbol
			dxNorm = java.lang.Math.sqrt(dxNorm);
			                             ^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:595: error: cannot find symbol
			double previousFP = fp;
			                    ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:596: error: cannot find symbol
			fp = dxNorm - delta;
			^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:596: error: cannot find symbol
			fp = dxNorm - delta;
			     ^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:600: error: cannot find symbol
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			                        ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:601: error: cannot find symbol
			(((parl == 0) && (fp <= previousFP)) && (previousFP < 0))) {
			   ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:601: error: cannot find symbol
			(((parl == 0) && (fp <= previousFP)) && (previousFP < 0))) {
			                  ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:608: error: cannot find symbol
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				                                     ^
  symbol:   variable dxNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:618: error: cannot find symbol
			sum2 = 0;
			^
  symbol:   variable sum2
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:621: error: cannot find symbol
				sum2 += s * s;
				^
  symbol:   variable sum2
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:623: error: cannot find symbol
			double correction = fp / (delta * sum2);
			                    ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:623: error: cannot find symbol
			double correction = fp / (delta * sum2);
			                                  ^
  symbol:   variable sum2
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:626: error: cannot find symbol
			if (fp > 0) {
			    ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:627: error: cannot find symbol
				parl = java.lang.Math.max(parl, lmPar);
				^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:627: error: cannot find symbol
				parl = java.lang.Math.max(parl, lmPar);
				                          ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:628: error: cannot find symbol
			} else if (fp < 0) {
			           ^
  symbol:   variable fp
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:633: error: cannot find symbol
			lmPar = java.lang.Math.max(parl, lmPar + correction);
			                           ^
  symbol:   variable parl
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(441): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (881(f=2.0), 882(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (881(f=2.0), )
----------Running generation: 442, population size: 1

***** Generation 442 : 0
**Parent Variant: [Variant id: 883, #gens: 356, #ops: 0, parent:-]

--Child created id: 884
--Creating new operations for variant [Variant id: 884, #gens: 356, #ops: 0, parent:883]
---analyzing modificationPoint position: 68
location: LevenbergMarquardtOptimizer.java590
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work3[pj] = s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 884, #gens: 355, #ops: 1, parent:883] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 884
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-884/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(442): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work3[pj] = s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (883(f=2.0), 884(f=7.0), )
Selected to next generation: IDs2--> (883(f=2.0), )
----------Running generation: 443, population size: 1

***** Generation 443 : 0
**Parent Variant: [Variant id: 885, #gens: 356, #ops: 0, parent:-]

--Child created id: 886
--Creating new operations for variant [Variant id: 886, #gens: 356, #ops: 0, parent:885]
---analyzing modificationPoint position: 220
location: LevenbergMarquardtOptimizer.java449
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 886, #gens: 355, #ops: 1, parent:885] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 886
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-886/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(443): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (885(f=2.0), 886(f=2.0), )
Selected to next generation: IDs2--> (885(f=2.0), )
----------Running generation: 444, population size: 1

***** Generation 444 : 0
**Parent Variant: [Variant id: 887, #gens: 356, #ops: 0, parent:-]

--Child created id: 888
--Creating new operations for variant [Variant id: 888, #gens: 356, #ops: 0, parent:887]
---analyzing modificationPoint position: 156
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...]
---analyzing modificationPoint position: 301
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java173
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setInitialStepBoundFactor(100.0) ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 173, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setInitialStepBoundFactor(100.0) ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 888, #gens: 357, #ops: 1, parent:887] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 888
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-888/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(444): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setInitialStepBoundFactor(100.0) ` -topatch--> `setCostRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (887(f=2.0), 888(f=2.0), )
Selected to next generation: IDs2--> (887(f=2.0), )
----------Running generation: 445, population size: 1

***** Generation 445 : 0
**Parent Variant: [Variant id: 889, #gens: 356, #ops: 0, parent:-]

--Child created id: 890
--Creating new operations for variant [Variant id: 890, #gens: 356, #ops: 0, parent:889]
---analyzing modificationPoint position: 117
location: LevenbergMarquardtOptimizer.java750
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = (work[j] - sum) / lmDiag[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 890, #gens: 355, #ops: 1, parent:889] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 890
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-890/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(445): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = (work[j] - sum) / lmDiag[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (889(f=2.0), 890(f=15.0), )
Selected to next generation: IDs2--> (889(f=2.0), )
----------Running generation: 446, population size: 1

***** Generation 446 : 0
**Parent Variant: [Variant id: 891, #gens: 356, #ops: 0, parent:-]

--Child created id: 892
--Creating new operations for variant [Variant id: 892, #gens: 356, #ops: 0, parent:891]
---analyzing modificationPoint position: 60
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [rank, solvedCols]
--> var from patch: rank spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java580
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; } ` -topatch--> `rank = solvedCols` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 580, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; } ` -topatch--> `rank = solvedCols` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 892, #gens: 357, #ops: 1, parent:891] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 892, errors: [LevenbergMarquardtOptimizer.java:854: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:854: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:854: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:854: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:854: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:854: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:854: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:854: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:855: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:855: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:856: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:856: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:858: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:858: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:858: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:858: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:858: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:858: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:859: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:860: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:859: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:861: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:861: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:861: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:861: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:863: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:863: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:863: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:864: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:864: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:864: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:866: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:866: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:865: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:866: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:866: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:866: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:866: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:868: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:868: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:869: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:869: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:869: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:870: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:871: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:872: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:873: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:873: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:874: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:875: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:875: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:876: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:876: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:876: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:876: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:876: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:876: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:876: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:876: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:876: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:876: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:876: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:876: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:876: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:876: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:904: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:904: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:904: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:904: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:904: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:912: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	^, LevenbergMarquardtOptimizer.java:912: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	        ^, LevenbergMarquardtOptimizer.java:912: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                ^, LevenbergMarquardtOptimizer.java:912: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                           ^, LevenbergMarquardtOptimizer.java:912: error: reached end of file while parsing
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                               		                                 			                         			                  			                                 				                                  			                   			                                 				                                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(446): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; } ` -topatch--> `rank = solvedCols` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (891(f=2.0), 892(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (891(f=2.0), )
----------Running generation: 447, population size: 1

***** Generation 447 : 0
**Parent Variant: [Variant id: 893, #gens: 356, #ops: 0, parent:-]

--Child created id: 894
--Creating new operations for variant [Variant id: 894, #gens: 356, #ops: 0, parent:893]
---analyzing modificationPoint position: 286
location: LevenbergMarquardtOptimizer.java813
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 894, #gens: 355, #ops: 1, parent:893] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 894
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-894/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(447): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (893(f=2.0), 894(f=18.0), )
Selected to next generation: IDs2--> (893(f=2.0), )
----------Running generation: 448, population size: 1

***** Generation 448 : 0
**Parent Variant: [Variant id: 895, #gens: 356, #ops: 0, parent:-]

--Child created id: 896
--Creating new operations for variant [Variant id: 896, #gens: 356, #ops: 0, parent:895]
---analyzing modificationPoint position: 137
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  gamma *= betak
---analyzing modificationPoint position: 62
location: LevenbergMarquardtOptimizer.java582
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = sPar * diag[pj] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 896, #gens: 355, #ops: 1, parent:895] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 896, errors: [LevenbergMarquardtOptimizer.java:582: error: variable declaration not allowed here
				int pj = permutation[j];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(448): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = sPar * diag[pj] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (895(f=2.0), 896(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (895(f=2.0), )
----------Running generation: 449, population size: 1

***** Generation 449 : 0
**Parent Variant: [Variant id: 897, #gens: 356, #ops: 0, parent:-]

--Child created id: 898
--Creating new operations for variant [Variant id: 898, #gens: 356, #ops: 0, parent:897]
---analyzing modificationPoint position: 319
---modifPoint 0 not mutation generated in  final double factor = -java.lang.Math.sqrt(residualsWeights[i])
---analyzing modificationPoint position: 144
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  jacobian[k][pk] = diagR[pk]
---analyzing modificationPoint position: 174
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  residuals = oldRes
---analyzing modificationPoint position: 120
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [coeff1, coeff2]
--> var from patch: coeff1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: coeff2 spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java399
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `double preRed = coeff1 + (2 * coeff2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 399, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `double preRed = coeff1 + (2 * coeff2)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 898, #gens: 357, #ops: 1, parent:897] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 898, errors: [LevenbergMarquardtOptimizer.java:399: error: variable preRed is already defined in method doOptimize()
				if (ratio <= 0.25) { 					double preRed = coeff1 + (2 * coeff2);
				                     					       ^]
Ingredient counter is Zero
---Undoing: gnrtn(449): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `double preRed = coeff1 + (2 * coeff2)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (897(f=2.0), 898(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (897(f=2.0), )
----------Running generation: 450, population size: 1

***** Generation 450 : 0
**Parent Variant: [Variant id: 899, #gens: 356, #ops: 0, parent:-]

--Child created id: 900
--Creating new operations for variant [Variant id: 900, #gens: 356, #ops: 0, parent:899]
---analyzing modificationPoint position: 90
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...]
---analyzing modificationPoint position: 92
location: LevenbergMarquardtOptimizer.java697
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 900, #gens: 355, #ops: 1, parent:899] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 900, errors: [LevenbergMarquardtOptimizer.java:710: error: variable cos might not have been initialized
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                   ^, LevenbergMarquardtOptimizer.java:710: error: variable sin might not have been initialized
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(450): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (899(f=2.0), 900(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (899(f=2.0), )
----------Running generation: 451, population size: 1

***** Generation 451 : 0
**Parent Variant: [Variant id: 901, #gens: 356, #ops: 0, parent:-]

--Child created id: 902
--Creating new operations for variant [Variant id: 902, #gens: 356, #ops: 0, parent:901]
---analyzing modificationPoint position: 209
Templates availables34
Attempts Base Ingredients  1 total 34
vars from patch [checker, previous, current]
--> var from patch: checker spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: previous spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: current spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java406
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((lmPar == 0) || (ratio >= 0.75)) { 	delta = 2 * lmNorm; 	lmPar *= 0.5; } ` -topatch--> `if (checker.converged(getIterations(), previous, current)) { 	return current; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 406, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((lmPar == 0) || (ratio >= 0.75)) { 	delta = 2 * lmNorm; 	lmPar *= 0.5; } ` -topatch--> `if (checker.converged(getIterations(), previous, current)) { 	return current; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 902, #gens: 356, #ops: 1, parent:901] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 902, errors: [LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                 ^, LevenbergMarquardtOptimizer.java:661: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                              ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                     ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                      ^, LevenbergMarquardtOptimizer.java:661: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                            ^, LevenbergMarquardtOptimizer.java:661: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:661: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	        ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                            ^, LevenbergMarquardtOptimizer.java:785: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(451): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((lmPar == 0) || (ratio >= 0.75)) { 	delta = 2 * lmNorm; 	lmPar *= 0.5; } ` -topatch--> `if (checker.converged(getIterations(), previous, current)) { 	return current; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (901(f=2.0), 902(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (901(f=2.0), )
----------Running generation: 452, population size: 1

***** Generation 452 : 0
**Parent Variant: [Variant id: 903, #gens: 356, #ops: 0, parent:-]

--Child created id: 904
--Creating new operations for variant [Variant id: 904, #gens: 356, #ops: 0, parent:903]
---analyzing modificationPoint position: 89
---modifPoint 0 not mutation generated in  int pk = permutation[k]
---analyzing modificationPoint position: 245
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  gamma *= beta[pk]
---analyzing modificationPoint position: 134
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double gamma = 0
---analyzing modificationPoint position: 271
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  double norm2 = 0
---analyzing modificationPoint position: 232
location: LevenbergMarquardtOptimizer.java511
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 904, #gens: 355, #ops: 1, parent:903] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 904
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-904/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(452): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (903(f=2.0), 904(f=15.0), )
Selected to next generation: IDs2--> (903(f=2.0), )
----------Running generation: 453, population size: 1

***** Generation 453 : 0
**Parent Variant: [Variant id: 905, #gens: 356, #ops: 0, parent:-]

--Child created id: 906
--Creating new operations for variant [Variant id: 906, #gens: 356, #ops: 0, parent:905]
---analyzing modificationPoint position: 258
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double[] oldRes = new double[rows]
---analyzing modificationPoint position: 275
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java793
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm[k] = java.lang.Math.sqrt(norm2) ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 793, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm[k] = java.lang.Math.sqrt(norm2) ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 906, #gens: 356, #ops: 1, parent:905] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 906
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-906/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(453): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm[k] = java.lang.Math.sqrt(norm2) ` -topatch--> `lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (905(f=2.0), 906(f=18.0), )
Selected to next generation: IDs2--> (905(f=2.0), )
----------Running generation: 454, population size: 1

***** Generation 454 : 0
**Parent Variant: [Variant id: 907, #gens: 356, #ops: 0, parent:-]

--Child created id: 908
--Creating new operations for variant [Variant id: 908, #gens: 356, #ops: 0, parent:907]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 52
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cost]
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java559
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 559, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 908, #gens: 356, #ops: 1, parent:907] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 908, errors: [LevenbergMarquardtOptimizer.java:561: error: cannot find symbol
		double paru = gNorm / delta;
		              ^
  symbol:   variable gNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:571: error: cannot find symbol
			lmPar = gNorm / dxNorm;
			        ^
  symbol:   variable gNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(454): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (907(f=2.0), 908(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (907(f=2.0), )
----------Running generation: 455, population size: 1

***** Generation 455 : 0
**Parent Variant: [Variant id: 909, #gens: 356, #ops: 0, parent:-]

--Child created id: 910
--Creating new operations for variant [Variant id: 910, #gens: 356, #ops: 0, parent:909]
---analyzing modificationPoint position: 245
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [gamma, beta, pk]
--> var from patch: gamma spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: beta spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pk spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java865
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= beta[pk] ` -topatch--> `gamma *= beta[pk]` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 865, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= beta[pk] ` -topatch--> `gamma *= beta[pk]` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 910, #gens: 356, #ops: 1, parent:909] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 910
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-910/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(455): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= beta[pk] ` -topatch--> `gamma *= beta[pk]` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (909(f=2.0), 910(f=2.0), )
Selected to next generation: IDs2--> (909(f=2.0), )
----------Running generation: 456, population size: 1

***** Generation 456 : 0
**Parent Variant: [Variant id: 911, #gens: 356, #ops: 0, parent:-]

--Child created id: 912
--Creating new operations for variant [Variant id: 912, #gens: 356, #ops: 0, parent:911]
---analyzing modificationPoint position: 29
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [work1, pj, s]
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: s spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java542
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `work1[pj] = s` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 542, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `work1[pj] = s` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 912, #gens: 356, #ops: 1, parent:911] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 912
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-912/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(456): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = s ` -topatch--> `work1[pj] = s` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (911(f=2.0), 912(f=2.0), )
Selected to next generation: IDs2--> (911(f=2.0), )
----------Running generation: 457, population size: 1

***** Generation 457 : 0
**Parent Variant: [Variant id: 913, #gens: 356, #ops: 0, parent:-]

--Child created id: 914
--Creating new operations for variant [Variant id: 914, #gens: 356, #ops: 0, parent:913]
---analyzing modificationPoint position: 319
---modifPoint 0 not mutation generated in  final double factor = -java.lang.Math.sqrt(residualsWeights[i])
---analyzing modificationPoint position: 70
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  dxNorm = java.lang.Math.sqrt(dxNorm)
---analyzing modificationPoint position: 25
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java537
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 537, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 914, #gens: 356, #ops: 1, parent:913] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 914, errors: [LevenbergMarquardtOptimizer.java:540: error: cannot find symbol
					sum += jacobian[i][pj] * work1[permutation[i]];
					^
  symbol:   variable sum
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:542: error: cannot find symbol
				double s = (work1[pj] - sum) / diagR[pj];
				                        ^
  symbol:   variable sum
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(457): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (913(f=2.0), 914(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (913(f=2.0), )
----------Running generation: 458, population size: 1

***** Generation 458 : 0
**Parent Variant: [Variant id: 915, #gens: 356, #ops: 0, parent:-]

--Child created id: 916
--Creating new operations for variant [Variant id: 916, #gens: 356, #ops: 0, parent:915]
---analyzing modificationPoint position: 301
location: LevenbergMarquardtOptimizer.java173
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setInitialStepBoundFactor(100.0) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 916, #gens: 355, #ops: 1, parent:915] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 916
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-916/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(458): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setInitialStepBoundFactor(100.0) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (915(f=2.0), 916(f=18.0), )
Selected to next generation: IDs2--> (915(f=2.0), )
----------Running generation: 459, population size: 1

***** Generation 459 : 0
**Parent Variant: [Variant id: 917, #gens: 356, #ops: 0, parent:-]

--Child created id: 918
--Creating new operations for variant [Variant id: 918, #gens: 356, #ops: 0, parent:917]
---analyzing modificationPoint position: 244
location: LevenbergMarquardtOptimizer.java863
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma += jacobian[i][pk] * y[i] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 918, #gens: 355, #ops: 1, parent:917] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 918
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-918/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(459): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma += jacobian[i][pk] * y[i] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (917(f=2.0), 918(f=18.0), )
Selected to next generation: IDs2--> (917(f=2.0), )
----------Running generation: 460, population size: 1

***** Generation 460 : 0
**Parent Variant: [Variant id: 919, #gens: 356, #ops: 0, parent:-]

--Child created id: 920
--Creating new operations for variant [Variant id: 920, #gens: 356, #ops: 0, parent:919]
---analyzing modificationPoint position: 259
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double[] work1 = new double[cols]
---analyzing modificationPoint position: 115
Templates availables50
Attempts Base Ingredients  1 total 50
Name Conflict [solvedCols, permutation, jacobian, qy, diag, sum2]
---modifPoint 1 not mutation generated in  for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; }
---analyzing modificationPoint position: 125
location: LevenbergMarquardtOptimizer.java440
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 920, #gens: 355, #ops: 1, parent:919] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 920
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-920/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 18] ,[]
-Valid?: |false|16|18|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(460): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (919(f=2.0), 920(f=16.0), )
Selected to next generation: IDs2--> (919(f=2.0), )
----------Running generation: 461, population size: 1

***** Generation 461 : 0
**Parent Variant: [Variant id: 921, #gens: 356, #ops: 0, parent:-]

--Child created id: 922
--Creating new operations for variant [Variant id: 922, #gens: 356, #ops: 0, parent:921]
---analyzing modificationPoint position: 101
---modifPoint 0 not mutation generated in  double rik = jacobian[i][pk]
---analyzing modificationPoint position: 192
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [diagR, cols]
--> var from patch: diagR spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java371
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `actRed = 1.0 - (r * r) ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 371, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `actRed = 1.0 - (r * r) ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 922, #gens: 356, #ops: 1, parent:921] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 922
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-922/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(461): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `actRed = 1.0 - (r * r) ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (921(f=2.0), 922(f=18.0), )
Selected to next generation: IDs2--> (921(f=2.0), )
----------Running generation: 462, population size: 1

***** Generation 462 : 0
**Parent Variant: [Variant id: 923, #gens: 356, #ops: 0, parent:-]

--Child created id: 924
--Creating new operations for variant [Variant id: 924, #gens: 356, #ops: 0, parent:923]
---analyzing modificationPoint position: 35
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // failed iteration, reset the previous values cost = previousCost
---analyzing modificationPoint position: 130
location: LevenbergMarquardtOptimizer.java503
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmDir[permutation[i]] -= ypk * jacobian[i][pk] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 924, #gens: 355, #ops: 1, parent:923] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 924
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-924/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(462): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmDir[permutation[i]] -= ypk * jacobian[i][pk] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (923(f=2.0), 924(f=13.0), )
Selected to next generation: IDs2--> (923(f=2.0), )
----------Running generation: 463, population size: 1

***** Generation 463 : 0
**Parent Variant: [Variant id: 925, #gens: 356, #ops: 0, parent:-]

--Child created id: 926
--Creating new operations for variant [Variant id: 926, #gens: 356, #ops: 0, parent:925]
---analyzing modificationPoint position: 325
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch []
location: AbstractLeastSquaresOptimizer.java217
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = 0 ` -topatch--> `// set up the jacobian updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 217, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = 0 ` -topatch--> `// set up the jacobian updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 926, #gens: 357, #ops: 1, parent:925] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 926, errors: [AbstractLeastSquaresOptimizer.java:303: error: illegal start of expression
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) {
	    	^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) {
	    	                                     ^, AbstractLeastSquaresOptimizer.java:303: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) {
	    	                                                                      ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) {
	    	                                                                                                  ^, AbstractLeastSquaresOptimizer.java:303: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) {
	    	                                                                                                                                        ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) {
	    	                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:319: error: illegal start of expression
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	^, AbstractLeastSquaresOptimizer.java:319: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                            ^, AbstractLeastSquaresOptimizer.java:319: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                  ^, AbstractLeastSquaresOptimizer.java:319: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                                         ^, AbstractLeastSquaresOptimizer.java:319: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                                                                 ^, AbstractLeastSquaresOptimizer.java:320: error: ';' expected
	double[] startPoint) throws 
	                   ^, AbstractLeastSquaresOptimizer.java:321: error: not a statement
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                       ^, AbstractLeastSquaresOptimizer.java:321: error: ';' expected
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                   ^, AbstractLeastSquaresOptimizer.java:321: error: not a statement
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                         ^, AbstractLeastSquaresOptimizer.java:321: error: ';' expected
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                                               ^, AbstractLeastSquaresOptimizer.java:321: error: not a statement
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                                                          ^, AbstractLeastSquaresOptimizer.java:321: error: ';' expected
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                                                                                   ^, AbstractLeastSquaresOptimizer.java:363: error: illegal start of expression
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	^, AbstractLeastSquaresOptimizer.java:363: error: class, interface, or enum expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                   ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                          ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                           ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                       ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                             ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                   ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:363: error: reached end of file while parsing
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(463): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `cost = 0 ` -topatch--> `// set up the jacobian updateJacobian()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (925(f=2.0), 926(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (925(f=2.0), )
----------Running generation: 464, population size: 1

***** Generation 464 : 0
**Parent Variant: [Variant id: 927, #gens: 356, #ops: 0, parent:-]

--Child created id: 928
--Creating new operations for variant [Variant id: 928, #gens: 356, #ops: 0, parent:927]
---analyzing modificationPoint position: 177
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  // compute the new point and the norm of the evolution direction double lmNorm = 0
---analyzing modificationPoint position: 293
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2)
---analyzing modificationPoint position: 116
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 2 not mutation generated in  sum += jacobian[i][pj] * work[i]
---analyzing modificationPoint position: 172
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  double previousCost = cost
---analyzing modificationPoint position: 115
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; }
---analyzing modificationPoint position: 25
---modifPoint 5 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 10
location: LevenbergMarquardtOptimizer.java613
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	work1[permutation[i]] -= jacobian[i][pj] * tmp; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 928, #gens: 355, #ops: 1, parent:927] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child compiles: id 928
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-928/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(464): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	work1[permutation[i]] -= jacobian[i][pj] * tmp; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (927(f=2.0), 928(f=5.0), )
Selected to next generation: IDs2--> (927(f=2.0), )
----------Running generation: 465, population size: 1

***** Generation 465 : 0
**Parent Variant: [Variant id: 929, #gens: 356, #ops: 0, parent:-]

--Child created id: 930
--Creating new operations for variant [Variant id: 930, #gens: 356, #ops: 0, parent:929]
---analyzing modificationPoint position: 218
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  xNorm = java.lang.Math.sqrt(xNorm)
---analyzing modificationPoint position: 125
location: LevenbergMarquardtOptimizer.java440
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 930, #gens: 355, #ops: 1, parent:929] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 930
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-930/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 18] ,[]
-Valid?: |false|16|18|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(465): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (929(f=2.0), 930(f=16.0), )
Selected to next generation: IDs2--> (929(f=2.0), )
----------Running generation: 466, population size: 1

***** Generation 466 : 0
**Parent Variant: [Variant id: 931, #gens: 356, #ops: 0, parent:-]

--Child created id: 932
--Creating new operations for variant [Variant id: 932, #gens: 356, #ops: 0, parent:931]
---analyzing modificationPoint position: 310
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  this.qrRankingThreshold = threshold
---analyzing modificationPoint position: 21
location: LevenbergMarquardtOptimizer.java532
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 932, #gens: 355, #ops: 1, parent:931] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 932, errors: [LevenbergMarquardtOptimizer.java:532: error: variable declaration not allowed here
				int pj = permutation[j];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(466): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (931(f=2.0), 932(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (931(f=2.0), )
----------Running generation: 467, population size: 1

***** Generation 467 : 0
**Parent Variant: [Variant id: 933, #gens: 356, #ops: 0, parent:-]

--Child created id: 934
--Creating new operations for variant [Variant id: 934, #gens: 356, #ops: 0, parent:933]
---analyzing modificationPoint position: 39
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [xNorm]
--> var from patch: xNorm spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java431
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmpVec = residuals ` -topatch--> `xNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 431, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmpVec = residuals ` -topatch--> `xNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 934, #gens: 357, #ops: 1, parent:933] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 934
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-934/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(467): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmpVec = residuals ` -topatch--> `xNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (933(f=2.0), 934(f=2.0), )
Selected to next generation: IDs2--> (933(f=2.0), )
----------Running generation: 468, population size: 1

***** Generation 468 : 0
**Parent Variant: [Variant id: 935, #gens: 356, #ops: 0, parent:-]

--Child created id: 936
--Creating new operations for variant [Variant id: 936, #gens: 356, #ops: 0, parent:935]
---analyzing modificationPoint position: 27
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [jacNorm, pj]
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java539
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `double s = jacNorm[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 539, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `double s = jacNorm[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 936, #gens: 357, #ops: 1, parent:935] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 936
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-936/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(468): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `double s = jacNorm[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (935(f=2.0), 936(f=2.0), )
Selected to next generation: IDs2--> (935(f=2.0), )
----------Running generation: 469, population size: 1

***** Generation 469 : 0
**Parent Variant: [Variant id: 937, #gens: 356, #ops: 0, parent:-]

--Child created id: 938
--Creating new operations for variant [Variant id: 938, #gens: 356, #ops: 0, parent:937]
---analyzing modificationPoint position: 41
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  oldRes = tmpVec
---analyzing modificationPoint position: 224
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmDir[permutation[j]] = qy[j]
---analyzing modificationPoint position: 32
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java698
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 698, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 938, #gens: 356, #ops: 1, parent:937] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 938, errors: [LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                       ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                               ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:701: error: cannot find symbol
						cos = sin * cotan;
						            ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(469): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (937(f=2.0), 938(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (937(f=2.0), )
----------Running generation: 470, population size: 1

***** Generation 470 : 0
**Parent Variant: [Variant id: 939, #gens: 356, #ops: 0, parent:-]

--Child created id: 940
--Creating new operations for variant [Variant id: 940, #gens: 356, #ops: 0, parent:939]
---analyzing modificationPoint position: 182
---modifPoint 0 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 23
location: LevenbergMarquardtOptimizer.java535
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 940, #gens: 355, #ops: 1, parent:939] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 940
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-940/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(470): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (939(f=2.0), 940(f=13.0), )
Selected to next generation: IDs2--> (939(f=2.0), )
----------Running generation: 471, population size: 1

***** Generation 471 : 0
**Parent Variant: [Variant id: 941, #gens: 356, #ops: 0, parent:-]

--Child created id: 942
--Creating new operations for variant [Variant id: 942, #gens: 356, #ops: 0, parent:941]
---analyzing modificationPoint position: 51
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  sum2 += sum * sum
---analyzing modificationPoint position: 36
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; }
---analyzing modificationPoint position: 176
location: LevenbergMarquardtOptimizer.java346
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// determine the Levenberg-Marquardt parameter determineLMParameter(oldRes, delta, diag, work1, work[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 942, #gens: 355, #ops: 1, parent:941] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 942
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-942/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(471): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// determine the Levenberg-Marquardt parameter determineLMParameter(oldRes, delta, diag, work1, work[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (941(f=2.0), 942(f=18.0), )
Selected to next generation: IDs2--> (941(f=2.0), )
----------Running generation: 472, population size: 1

***** Generation 472 : 0
**Parent Variant: [Variant id: 943, #gens: 356, #ops: 0, parent:-]

--Child created id: 944
--Creating new operations for variant [Variant id: 944, #gens: 356, #ops: 0, parent:943]
---analyzing modificationPoint position: 158
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java311
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `boolean firstIteration = true` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 311, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `boolean firstIteration = true` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 944, #gens: 356, #ops: 1, parent:943] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 944, errors: [LevenbergMarquardtOptimizer.java:311: error: variable firstIteration is already defined in method doOptimize()
				for (int j = 0; j < solvedCols; ++j) { 					boolean firstIteration = true;
				                                       					        ^, LevenbergMarquardtOptimizer.java:313: error: cannot find symbol
					double s = jacNorm[pj];
					                   ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:317: error: cannot find symbol
							sum += jacobian[i][pj] * residuals[i];
							                   ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(472): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `boolean firstIteration = true` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (943(f=2.0), 944(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (943(f=2.0), )
----------Running generation: 473, population size: 1

***** Generation 473 : 0
**Parent Variant: [Variant id: 945, #gens: 356, #ops: 0, parent:-]

--Child created id: 946
--Creating new operations for variant [Variant id: 946, #gens: 356, #ops: 0, parent:945]
---analyzing modificationPoint position: 5
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  work1[pj] = (work3[pj] * diag[pj]) / dxNorm
---analyzing modificationPoint position: 8
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 1 not mutation generated in  work1[pj] /= work2[j]
---analyzing modificationPoint position: 45
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]
---analyzing modificationPoint position: 12
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [dxNorm]
--> var from patch: dxNorm spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java617
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `dxNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 617, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `dxNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 946, #gens: 356, #ops: 1, parent:945] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 946
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-946/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(473): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `dxNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (945(f=2.0), 946(f=7.0), )
Selected to next generation: IDs2--> (945(f=2.0), )
----------Running generation: 474, population size: 1

***** Generation 474 : 0
**Parent Variant: [Variant id: 947, #gens: 356, #ops: 0, parent:-]

--Child created id: 948
--Creating new operations for variant [Variant id: 948, #gens: 356, #ops: 0, parent:947]
---analyzing modificationPoint position: 200
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [delta, lmNorm]
--> var from patch: delta spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: lmNorm spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java385
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `delta = 2 * lmNorm` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 385, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `delta = 2 * lmNorm` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 948, #gens: 357, #ops: 1, parent:947] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 948
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-948/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
-Killed id: pid->595
The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
Killed the Process that runs JUnit test cases 595
**The validation 1 have not finished well**
-Valid?: null, fitness 1.7976931348623157E308
Ingredient counter is Zero
---Undoing: gnrtn(474): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; } ` -topatch--> `delta = 2 * lmNorm` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (947(f=2.0), 948(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (947(f=2.0), )
----------Running generation: 475, population size: 1

***** Generation 475 : 0
**Parent Variant: [Variant id: 949, #gens: 356, #ops: 0, parent:-]

--Child created id: 950
--Creating new operations for variant [Variant id: 950, #gens: 356, #ops: 0, parent:949]
---analyzing modificationPoint position: 80
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  work[j] = qy[j]
---analyzing modificationPoint position: 108
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...]
---analyzing modificationPoint position: 119
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  lmDir[permutation[j]] = work[j]
---analyzing modificationPoint position: 45
location: LevenbergMarquardtOptimizer.java550
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 950, #gens: 355, #ops: 1, parent:949] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 950
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-950/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(475): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (949(f=2.0), 950(f=4.0), )
Selected to next generation: IDs2--> (949(f=2.0), )
----------Running generation: 476, population size: 1

***** Generation 476 : 0
**Parent Variant: [Variant id: 951, #gens: 356, #ops: 0, parent:-]

--Child created id: 952
--Creating new operations for variant [Variant id: 952, #gens: 356, #ops: 0, parent:951]
---analyzing modificationPoint position: 255
---modifPoint 0 not mutation generated in  double xNorm = 0
---analyzing modificationPoint position: 28
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 21
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [dxNorm]
--> var from patch: dxNorm spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java532
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `dxNorm = java.lang.Math.sqrt(dxNorm)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 532, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `dxNorm = java.lang.Math.sqrt(dxNorm)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 952, #gens: 357, #ops: 1, parent:951] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 952
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-952/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(476): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[pj] *= diag[pj] / dxNorm ` -topatch--> `dxNorm = java.lang.Math.sqrt(dxNorm)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (951(f=2.0), 952(f=6.0), )
Selected to next generation: IDs2--> (951(f=2.0), )
----------Running generation: 477, population size: 1

***** Generation 477 : 0
**Parent Variant: [Variant id: 953, #gens: 356, #ops: 0, parent:-]

--Child created id: 954
--Creating new operations for variant [Variant id: 954, #gens: 356, #ops: 0, parent:953]
---analyzing modificationPoint position: 15
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  sum2 += s * s
---analyzing modificationPoint position: 176
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // determine the Levenberg-Marquardt parameter determineLMParameter(oldRes, delta, diag, work1, work[...]
---analyzing modificationPoint position: 298
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  // transform the remaining columns for (int dk = (cols - 1) - k; dk > 0; --dk) { 	double gamma = 0; [...]
---analyzing modificationPoint position: 320
Templates availables7
Attempts Base Ingredients  1 total 7
Attempts Base Ingredients  2 total 7
vars from patch [j, cols, ji, factor]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: ji spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: factor spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLeastSquaresOptimizer.java193
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < cols; ++j) { 	ji[j] *= factor; } ` -topatch--> `for (int j = 0; j < cols; ++j) { 	ji[j] *= factor; }` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 193, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < cols; ++j) { 	ji[j] *= factor; } ` -topatch--> `for (int j = 0; j < cols; ++j) { 	ji[j] *= factor; }` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 954, #gens: 356, #ops: 1, parent:953] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 954
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-954/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(477): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < cols; ++j) { 	ji[j] *= factor; } ` -topatch--> `for (int j = 0; j < cols; ++j) { 	ji[j] *= factor; }` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (953(f=2.0), 954(f=2.0), )
Selected to next generation: IDs2--> (953(f=2.0), )
----------Running generation: 478, population size: 1

***** Generation 478 : 0
**Parent Variant: [Variant id: 955, #gens: 356, #ops: 0, parent:-]

--Child created id: 956
--Creating new operations for variant [Variant id: 956, #gens: 356, #ops: 0, parent:955]
---analyzing modificationPoint position: 122
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm)
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 121
Templates availables34
Attempts Base Ingredients  1 total 34
vars from patch [maxCosine, orthoTolerance, current]
--> var from patch: maxCosine spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: orthoTolerance spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: current spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java401
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; } ` -topatch--> `if (maxCosine <= orthoTolerance) { 	// convergence has been reached 	return current; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 401, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; } ` -topatch--> `if (maxCosine <= orthoTolerance) { 	// convergence has been reached 	return current; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 956, #gens: 356, #ops: 1, parent:955] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 956
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-956/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(478): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; } ` -topatch--> `if (maxCosine <= orthoTolerance) { 	// convergence has been reached 	return current; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (955(f=2.0), 956(f=5.0), )
Selected to next generation: IDs2--> (955(f=2.0), )
----------Running generation: 479, population size: 1

***** Generation 479 : 0
**Parent Variant: [Variant id: 957, #gens: 356, #ops: 0, parent:-]

--Child created id: 958
--Creating new operations for variant [Variant id: 958, #gens: 356, #ops: 0, parent:957]
---analyzing modificationPoint position: 113
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 33
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan))
---analyzing modificationPoint position: 24
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 95
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  sin = cos * tan
---analyzing modificationPoint position: 175
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldRes = tmpVec ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 343, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldRes = tmpVec ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 958, #gens: 356, #ops: 1, parent:957] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 958
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-958/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(479): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldRes = tmpVec ` -topatch--> `// outer loop lmPar = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (957(f=2.0), 958(f=18.0), )
Selected to next generation: IDs2--> (957(f=2.0), )
----------Running generation: 480, population size: 1

***** Generation 480 : 0
**Parent Variant: [Variant id: 959, #gens: 356, #ops: 0, parent:-]

--Child created id: 960
--Creating new operations for variant [Variant id: 960, #gens: 356, #ops: 0, parent:959]
---analyzing modificationPoint position: 95
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  sin = cos * tan
---analyzing modificationPoint position: 121
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; }
---analyzing modificationPoint position: 112
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...]
---analyzing modificationPoint position: 293
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 3 not mutation generated in  double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2)
---analyzing modificationPoint position: 36
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; }
---analyzing modificationPoint position: 353
location: AbstractLeastSquaresOptimizer.java124
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 960, #gens: 355, #ops: 1, parent:959] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 960
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-960/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(480): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (959(f=2.0), 960(f=18.0), )
Selected to next generation: IDs2--> (959(f=2.0), )
----------Running generation: 481, population size: 1

***** Generation 481 : 0
**Parent Variant: [Variant id: 961, #gens: 356, #ops: 0, parent:-]

--Child created id: 962
--Creating new operations for variant [Variant id: 962, #gens: 356, #ops: 0, parent:961]
---analyzing modificationPoint position: 218
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [this.parRelativeTolerance]
--> var from patch: this.parRelativeTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java420
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `this.parRelativeTolerance = parRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 420, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `this.parRelativeTolerance = parRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 962, #gens: 356, #ops: 1, parent:961] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 962
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-962/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(481): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `this.parRelativeTolerance = parRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (961(f=2.0), 962(f=7.0), )
Selected to next generation: IDs2--> (961(f=2.0), )
----------Running generation: 482, population size: 1

***** Generation 482 : 0
**Parent Variant: [Variant id: 963, #gens: 356, #ops: 0, parent:-]

--Child created id: 964
--Creating new operations for variant [Variant id: 964, #gens: 356, #ops: 0, parent:963]
---analyzing modificationPoint position: 149
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (dk == 0) { 	dk = 1.0; }
---analyzing modificationPoint position: 184
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  lmNorm = java.lang.Math.sqrt(lmNorm)
---analyzing modificationPoint position: 162
Templates availables50
Attempts Base Ingredients  1 total 50
Name Conflict [solvedCols, permutation, work1, sPar, diag]
---modifPoint 2 not mutation generated in  for (int i = 0; i <= j; ++i) { 	sum += jacobian[i][pj] * residuals[i]; }
---analyzing modificationPoint position: 172
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  double previousCost = cost
---analyzing modificationPoint position: 12
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 33
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java699
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `lmPar *= 0.5` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 699, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `lmPar *= 0.5` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 964, #gens: 357, #ops: 1, parent:963] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 964
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-964/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(482): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `lmPar *= 0.5` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (963(f=2.0), 964(f=7.0), )
Selected to next generation: IDs2--> (963(f=2.0), )
----------Running generation: 483, population size: 1

***** Generation 483 : 0
**Parent Variant: [Variant id: 965, #gens: 356, #ops: 0, parent:-]

--Child created id: 966
--Creating new operations for variant [Variant id: 966, #gens: 356, #ops: 0, parent:965]
---analyzing modificationPoint position: 30
location: LevenbergMarquardtOptimizer.java543
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 966, #gens: 355, #ops: 1, parent:965] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 966
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-966/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(483): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (965(f=2.0), 966(f=13.0), )
Selected to next generation: IDs2--> (965(f=2.0), )
----------Running generation: 484, population size: 1

***** Generation 484 : 0
**Parent Variant: [Variant id: 967, #gens: 356, #ops: 0, parent:-]

--Child created id: 968
--Creating new operations for variant [Variant id: 968, #gens: 356, #ops: 0, parent:967]
---analyzing modificationPoint position: 203
location: LevenbergMarquardtOptimizer.java389
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coeff1 = coeff1 / pc2 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 968, #gens: 355, #ops: 1, parent:967] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 968
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-968/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(484): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coeff1 = coeff1 / pc2 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (967(f=2.0), 968(f=13.0), )
Selected to next generation: IDs2--> (967(f=2.0), )
----------Running generation: 485, population size: 1

***** Generation 485 : 0
**Parent Variant: [Variant id: 969, #gens: 356, #ops: 0, parent:-]

--Child created id: 970
--Creating new operations for variant [Variant id: 970, #gens: 356, #ops: 0, parent:969]
---analyzing modificationPoint position: 323
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java212
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `objective = function.value(point) ` -topatch--> `// compute transpose(J).J, avoiding building big intermediate matrices double[][] jTj = new double[c[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 212, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `objective = function.value(point) ` -topatch--> `// compute transpose(J).J, avoiding building big intermediate matrices double[][] jTj = new double[c[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 970, #gens: 357, #ops: 1, parent:969] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 970, errors: [AbstractLeastSquaresOptimizer.java:295: error: illegal start of expression
	 * Guess the errors in optimized parameters.
	 ^, AbstractLeastSquaresOptimizer.java:295: error: ';' expected
	 * Guess the errors in optimized parameters.
	        ^, AbstractLeastSquaresOptimizer.java:295: error: ';' expected
	 * Guess the errors in optimized parameters.
	                   ^, AbstractLeastSquaresOptimizer.java:295: error: ';' expected
	 * Guess the errors in optimized parameters.
	                                ^, AbstractLeastSquaresOptimizer.java:295: error: <identifier> expected
	 * Guess the errors in optimized parameters.
	                                            ^, AbstractLeastSquaresOptimizer.java:296: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	      ^, AbstractLeastSquaresOptimizer.java:296: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	 ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                            ^, AbstractLeastSquaresOptimizer.java:296: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                             ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                  ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                           ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                       ^, AbstractLeastSquaresOptimizer.java:296: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                ^, AbstractLeastSquaresOptimizer.java:296: error: illegal start of type
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                            ^, AbstractLeastSquaresOptimizer.java:296: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                              ^, AbstractLeastSquaresOptimizer.java:298: error: illegal start of expression
	 * @return errors in optimized parameters
	 ^, AbstractLeastSquaresOptimizer.java:298: error: <identifier> expected
	 * @return errors in optimized parameters
	    ^, AbstractLeastSquaresOptimizer.java:298: error: ';' expected
	 * @return errors in optimized parameters
	                 ^, AbstractLeastSquaresOptimizer.java:298: error: ';' expected
	 * @return errors in optimized parameters
	                                         ^, AbstractLeastSquaresOptimizer.java:299: error: <identifier> expected
	 * @exception FunctionEvaluationException
	                                         ^, AbstractLeastSquaresOptimizer.java:300: error: '(' expected
	 * 		if the function jacobian cannot b evaluated
	   		  ^, AbstractLeastSquaresOptimizer.java:300: error: ')' expected
	 * 		if the function jacobian cannot b evaluated
	   		      ^, AbstractLeastSquaresOptimizer.java:300: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                        ^, AbstractLeastSquaresOptimizer.java:300: error: variable declaration not allowed here
	 * 		if the function jacobian cannot b evaluated
	   		                ^, AbstractLeastSquaresOptimizer.java:300: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                                 ^, AbstractLeastSquaresOptimizer.java:301: error: illegal start of expression
	 * @exception OptimizationException
	   ^, AbstractLeastSquaresOptimizer.java:302: error: illegal start of expression
	 * 		if the covariances matrix cannot be computed
	   		^, AbstractLeastSquaresOptimizer.java:302: error: not a statement
	 * 		if the covariances matrix cannot be computed
	 ^, AbstractLeastSquaresOptimizer.java:302: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                  ^, AbstractLeastSquaresOptimizer.java:302: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                ^, AbstractLeastSquaresOptimizer.java:302: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                            ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		      ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                           ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                      ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                   ^, AbstractLeastSquaresOptimizer.java:303: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                              ^, AbstractLeastSquaresOptimizer.java:304: error: not a statement
	 * 		lesser or equal to number of parameters)
	 ^, AbstractLeastSquaresOptimizer.java:304: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		      ^, AbstractLeastSquaresOptimizer.java:304: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		               ^, AbstractLeastSquaresOptimizer.java:304: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                         ^, AbstractLeastSquaresOptimizer.java:304: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                                       ^, AbstractLeastSquaresOptimizer.java:305: error: illegal start of expression
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	^, AbstractLeastSquaresOptimizer.java:305: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                     ^, AbstractLeastSquaresOptimizer.java:305: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                                                      ^, AbstractLeastSquaresOptimizer.java:305: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                                                                                  ^, AbstractLeastSquaresOptimizer.java:305: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                                                                                                                        ^, AbstractLeastSquaresOptimizer.java:305: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, 
	    	                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:319: error: illegal start of expression
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	^, AbstractLeastSquaresOptimizer.java:319: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                            ^, AbstractLeastSquaresOptimizer.java:319: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                  ^, AbstractLeastSquaresOptimizer.java:319: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                                         ^, AbstractLeastSquaresOptimizer.java:319: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                                                                 ^, AbstractLeastSquaresOptimizer.java:320: error: ';' expected
	double[] startPoint) throws 
	                   ^, AbstractLeastSquaresOptimizer.java:321: error: not a statement
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                       ^, AbstractLeastSquaresOptimizer.java:321: error: ';' expected
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                   ^, AbstractLeastSquaresOptimizer.java:321: error: not a statement
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                         ^, AbstractLeastSquaresOptimizer.java:321: error: ';' expected
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                                               ^, AbstractLeastSquaresOptimizer.java:321: error: not a statement
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                                                          ^, AbstractLeastSquaresOptimizer.java:321: error: ';' expected
	org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException {
	                                                                                                                                                   ^, AbstractLeastSquaresOptimizer.java:363: error: illegal start of expression
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	^, AbstractLeastSquaresOptimizer.java:363: error: class, interface, or enum expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                   ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                          ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                           ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                       ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                             ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                   ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:363: error: reached end of file while parsing
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(485): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `objective = function.value(point) ` -topatch--> `// compute transpose(J).J, avoiding building big intermediate matrices double[][] jTj = new double[c[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (969(f=2.0), 970(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (969(f=2.0), )
----------Running generation: 486, population size: 1

***** Generation 486 : 0
**Parent Variant: [Variant id: 971, #gens: 356, #ops: 0, parent:-]

--Child created id: 972
--Creating new operations for variant [Variant id: 972, #gens: 356, #ops: 0, parent:971]
---analyzing modificationPoint position: 50
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  sum /= diag[pj]
---analyzing modificationPoint position: 191
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double r = cost / previousCost
---analyzing modificationPoint position: 203
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  coeff1 = coeff1 / pc2
---analyzing modificationPoint position: 278
---modifPoint 3 not mutation generated in  double ak2 = java.lang.Double.NEGATIVE_INFINITY
---analyzing modificationPoint position: 42
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  double parl = 0
---analyzing modificationPoint position: 20
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 63
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  determineLMDirection(qy, work1, work2, work3)
---analyzing modificationPoint position: 34
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 7 not mutation generated in  cos = sin * cotan
---analyzing modificationPoint position: 99
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 8 not mutation generated in  work[k] = temp
---analyzing modificationPoint position: 142
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 9 not mutation generated in  // now we don't need Q anymore, // so let jacobian contain the R matrix with its diagonal elements f[...]
---analyzing modificationPoint position: 22
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 10 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 127
Templates availables11
Attempts Base Ingredients  1 total 11
vars from patch [objectiveEvaluations]
--> var from patch: objectiveEvaluations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java250
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return cost * cost ` -topatch--> `return objectiveEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 250, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return cost * cost ` -topatch--> `return objectiveEvaluations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 972, #gens: 356, #ops: 1, parent:971] gen mutated: 1 , gen not mut: 11, gen not applied  0
-The child compiles: id 972
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-972/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(486): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return cost * cost ` -topatch--> `return objectiveEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (971(f=2.0), 972(f=18.0), )
Selected to next generation: IDs2--> (971(f=2.0), )
----------Running generation: 487, population size: 1

***** Generation 487 : 0
**Parent Variant: [Variant id: 973, #gens: 356, #ops: 0, parent:-]

--Child created id: 974
--Creating new operations for variant [Variant id: 974, #gens: 356, #ops: 0, parent:973]
---analyzing modificationPoint position: 0
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [solvedCols]
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java402
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmp = 0.1 ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 402, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmp = 0.1 ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 974, #gens: 357, #ops: 1, parent:973] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 974, errors: [LevenbergMarquardtOptimizer.java:764: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:764: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:764: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:764: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:764: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:764: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:764: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:764: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:764: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:764: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:764: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:764: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:764: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:764: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:764: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:764: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:770: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:770: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:770: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:770: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:770: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:770: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:770: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:770: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:771: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:771: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:772: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:772: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:773: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:773: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:773: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:774: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:774: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:774: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:774: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:774: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:774: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:775: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:775: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:775: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:775: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:775: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:775: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:775: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:776: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:777: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:777: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:775: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:777: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:777: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:777: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:777: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:777: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:777: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:778: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:778: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:777: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:778: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:779: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:779: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:779: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:780: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:780: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:780: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:781: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:781: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:781: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:782: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:782: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:784: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:784: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:785: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:786: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:787: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:788: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:789: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:789: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:790: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:791: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:791: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:792: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:792: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:792: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:792: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:792: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:792: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:792: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:792: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:792: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(487): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmp = 0.1 ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (973(f=2.0), 974(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (973(f=2.0), )
----------Running generation: 488, population size: 1

***** Generation 488 : 0
**Parent Variant: [Variant id: 975, #gens: 356, #ops: 0, parent:-]

--Child created id: 976
--Creating new operations for variant [Variant id: 976, #gens: 356, #ops: 0, parent:975]
---analyzing modificationPoint position: 163
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  sum += jacobian[i][pj] * residuals[i]
---analyzing modificationPoint position: 233
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 242
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmDir, pk, diagR]
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diagR spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java861
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gamma = 0 ` -topatch--> `double ypk = lmDir[pk] / diagR[pk]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 861, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gamma = 0 ` -topatch--> `double ypk = lmDir[pk] / diagR[pk]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 976, #gens: 357, #ops: 1, parent:975] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 976
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-976/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(488): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gamma = 0 ` -topatch--> `double ypk = lmDir[pk] / diagR[pk]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (975(f=2.0), 976(f=2.0), )
Selected to next generation: IDs2--> (975(f=2.0), )
----------Running generation: 489, population size: 1

***** Generation 489 : 0
**Parent Variant: [Variant id: 977, #gens: 356, #ops: 0, parent:-]

--Child created id: 978
--Creating new operations for variant [Variant id: 978, #gens: 356, #ops: 0, parent:977]
---analyzing modificationPoint position: 17
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // depending on the sign of the function, update parl or paru. if (fp > 0) { 	parl = java.lang.Math.[...]
---analyzing modificationPoint position: 50
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  sum /= diag[pj]
---analyzing modificationPoint position: 0
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  tmp = 0.1
---analyzing modificationPoint position: 13
location: LevenbergMarquardtOptimizer.java618
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	double s = work1[permutation[j]]; 	sum2 += s * s; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 978, #gens: 355, #ops: 1, parent:977] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 978
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-978/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(489): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	double s = work1[permutation[j]]; 	sum2 += s * s; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (977(f=2.0), 978(f=12.0), )
Selected to next generation: IDs2--> (977(f=2.0), )
----------Running generation: 490, population size: 1

***** Generation 490 : 0
**Parent Variant: [Variant id: 979, #gens: 356, #ops: 0, parent:-]

--Child created id: 980
--Creating new operations for variant [Variant id: 980, #gens: 356, #ops: 0, parent:979]
---analyzing modificationPoint position: 314
Templates availables1
Attempts Base Ingredients  1 total 1
vars from patch [jacobianEvaluations]
--> var from patch: jacobianEvaluations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java184
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++jacobianEvaluations ` -topatch--> `++jacobianEvaluations` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 184, pointed element: CtUnaryOperatorImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++jacobianEvaluations ` -topatch--> `++jacobianEvaluations` (spoon.support.reflect.code.CtUnaryOperatorImpl) 

--Summary Creation: for variant [Variant id: 980, #gens: 356, #ops: 1, parent:979] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 980
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-980/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(490): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++jacobianEvaluations ` -topatch--> `++jacobianEvaluations` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (979(f=2.0), 980(f=2.0), )
Selected to next generation: IDs2--> (979(f=2.0), )
----------Running generation: 491, population size: 1

***** Generation 491 : 0
**Parent Variant: [Variant id: 981, #gens: 356, #ops: 0, parent:-]

--Child created id: 982
--Creating new operations for variant [Variant id: 982, #gens: 356, #ops: 0, parent:981]
---analyzing modificationPoint position: 73
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  // if the function is small enough, accept the current value // of lmPar, also test for the exceptio[...]
---analyzing modificationPoint position: 49
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, work1, sPar, diag]
---modifPoint 1 not mutation generated in  sum += jacobian[i][pj] * qy[i]
---analyzing modificationPoint position: 136
location: LevenbergMarquardtOptimizer.java839
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 982, #gens: 355, #ops: 1, parent:981] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 982
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-982/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(491): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (981(f=2.0), 982(f=18.0), )
Selected to next generation: IDs2--> (981(f=2.0), )
----------Running generation: 492, population size: 1

***** Generation 492 : 0
**Parent Variant: [Variant id: 983, #gens: 356, #ops: 0, parent:-]

--Child created id: 984
--Creating new operations for variant [Variant id: 984, #gens: 356, #ops: 0, parent:983]
---analyzing modificationPoint position: 200
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	coeff1 += work1[j] * work1[j]; }
---analyzing modificationPoint position: 161
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 171
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  oldX[pj] = point[pj]
---analyzing modificationPoint position: 56
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: parRelativeTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java569
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (lmPar == 0) { 	lmPar = gNorm / dxNorm; } ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 569, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (lmPar == 0) { 	lmPar = gNorm / dxNorm; } ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 984, #gens: 357, #ops: 1, parent:983] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 984, errors: [LevenbergMarquardtOptimizer.java:570: error: unreachable statement
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:569: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
		lmPar = java.lang.Math.min(paru, java.lang.Math.max(lmPar, parl)); 		throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);
		                                                                   		^]
Ingredient counter is Zero
---Undoing: gnrtn(492): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (lmPar == 0) { 	lmPar = gNorm / dxNorm; } ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (983(f=2.0), 984(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (983(f=2.0), )
----------Running generation: 493, population size: 1

***** Generation 493 : 0
**Parent Variant: [Variant id: 985, #gens: 356, #ops: 0, parent:-]

--Child created id: 986
--Creating new operations for variant [Variant id: 986, #gens: 356, #ops: 0, parent:985]
---analyzing modificationPoint position: 67
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 214
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  xNorm = 0
---analyzing modificationPoint position: 126
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [objectiveEvaluations]
--> var from patch: objectiveEvaluations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java240
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return java.lang.Math.sqrt(getChiSquare() / rows) ` -topatch--> `objectiveEvaluations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 240, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return java.lang.Math.sqrt(getChiSquare() / rows) ` -topatch--> `objectiveEvaluations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 986, #gens: 357, #ops: 1, parent:985] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 986, errors: [AbstractLeastSquaresOptimizer.java:347: error: illegal start of expression
	 * Guess the errors in optimized parameters.
	 ^, AbstractLeastSquaresOptimizer.java:347: error: ';' expected
	 * Guess the errors in optimized parameters.
	        ^, AbstractLeastSquaresOptimizer.java:347: error: ';' expected
	 * Guess the errors in optimized parameters.
	                   ^, AbstractLeastSquaresOptimizer.java:347: error: ';' expected
	 * Guess the errors in optimized parameters.
	                                ^, AbstractLeastSquaresOptimizer.java:347: error: <identifier> expected
	 * Guess the errors in optimized parameters.
	                                            ^, AbstractLeastSquaresOptimizer.java:348: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	      ^, AbstractLeastSquaresOptimizer.java:348: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	 ^, AbstractLeastSquaresOptimizer.java:348: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                            ^, AbstractLeastSquaresOptimizer.java:348: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                             ^, AbstractLeastSquaresOptimizer.java:348: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                  ^, AbstractLeastSquaresOptimizer.java:348: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                           ^, AbstractLeastSquaresOptimizer.java:348: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                       ^, AbstractLeastSquaresOptimizer.java:348: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                ^, AbstractLeastSquaresOptimizer.java:348: error: illegal start of type
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                            ^, AbstractLeastSquaresOptimizer.java:348: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                              ^, AbstractLeastSquaresOptimizer.java:350: error: illegal start of expression
	 * @return errors in optimized parameters
	 ^, AbstractLeastSquaresOptimizer.java:350: error: <identifier> expected
	 * @return errors in optimized parameters
	    ^, AbstractLeastSquaresOptimizer.java:350: error: ';' expected
	 * @return errors in optimized parameters
	                 ^, AbstractLeastSquaresOptimizer.java:350: error: ';' expected
	 * @return errors in optimized parameters
	                                         ^, AbstractLeastSquaresOptimizer.java:351: error: <identifier> expected
	 * @exception FunctionEvaluationException
	                                         ^, AbstractLeastSquaresOptimizer.java:352: error: '(' expected
	 * 		if the function jacobian cannot b evaluated
	   		  ^, AbstractLeastSquaresOptimizer.java:352: error: ')' expected
	 * 		if the function jacobian cannot b evaluated
	   		      ^, AbstractLeastSquaresOptimizer.java:352: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                        ^, AbstractLeastSquaresOptimizer.java:352: error: variable declaration not allowed here
	 * 		if the function jacobian cannot b evaluated
	   		                ^, AbstractLeastSquaresOptimizer.java:352: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                                 ^, AbstractLeastSquaresOptimizer.java:353: error: illegal start of expression
	 * @exception OptimizationException
	   ^, AbstractLeastSquaresOptimizer.java:354: error: illegal start of expression
	 * 		if the covariances matrix cannot be computed
	   		^, AbstractLeastSquaresOptimizer.java:354: error: not a statement
	 * 		if the covariances matrix cannot be computed
	 ^, AbstractLeastSquaresOptimizer.java:354: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                  ^, AbstractLeastSquaresOptimizer.java:354: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                ^, AbstractLeastSquaresOptimizer.java:354: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                            ^, AbstractLeastSquaresOptimizer.java:355: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		      ^, AbstractLeastSquaresOptimizer.java:355: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                ^, AbstractLeastSquaresOptimizer.java:355: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                           ^, AbstractLeastSquaresOptimizer.java:355: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                      ^, AbstractLeastSquaresOptimizer.java:355: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                   ^, AbstractLeastSquaresOptimizer.java:355: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                              ^, AbstractLeastSquaresOptimizer.java:356: error: not a statement
	 * 		lesser or equal to number of parameters)
	 ^, AbstractLeastSquaresOptimizer.java:356: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		      ^, AbstractLeastSquaresOptimizer.java:356: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		               ^, AbstractLeastSquaresOptimizer.java:356: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                         ^, AbstractLeastSquaresOptimizer.java:356: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                                       ^, AbstractLeastSquaresOptimizer.java:357: error: illegal start of expression
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	^, AbstractLeastSquaresOptimizer.java:357: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                     ^, AbstractLeastSquaresOptimizer.java:357: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                      ^, AbstractLeastSquaresOptimizer.java:357: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                                                  ^, AbstractLeastSquaresOptimizer.java:357: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                                                                                        ^, AbstractLeastSquaresOptimizer.java:357: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:359: error: illegal start of expression
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	^, AbstractLeastSquaresOptimizer.java:359: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                            ^, AbstractLeastSquaresOptimizer.java:359: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                  ^, AbstractLeastSquaresOptimizer.java:359: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                         ^, AbstractLeastSquaresOptimizer.java:359: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                 ^, AbstractLeastSquaresOptimizer.java:359: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                           ^, AbstractLeastSquaresOptimizer.java:359: error: not a statement
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                           ^, AbstractLeastSquaresOptimizer.java:359: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                       ^, AbstractLeastSquaresOptimizer.java:359: error: not a statement
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                             ^, AbstractLeastSquaresOptimizer.java:359: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                                                   ^, AbstractLeastSquaresOptimizer.java:359: error: not a statement
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:359: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                                                                                       ^, AbstractLeastSquaresOptimizer.java:360: error: illegal start of expression
	 * Perform the bulk of optimization algorithm.
	 ^, AbstractLeastSquaresOptimizer.java:360: error: ';' expected
	 * Perform the bulk of optimization algorithm.
	          ^, AbstractLeastSquaresOptimizer.java:360: error: ';' expected
	 * Perform the bulk of optimization algorithm.
	                   ^, AbstractLeastSquaresOptimizer.java:360: error: ';' expected
	 * Perform the bulk of optimization algorithm.
	                                   ^, AbstractLeastSquaresOptimizer.java:360: error: <identifier> expected
	 * Perform the bulk of optimization algorithm.
	                                              ^, AbstractLeastSquaresOptimizer.java:362: error: illegal start of expression
	 * @return the point/value pair giving the optimal value for objective function
	 ^, AbstractLeastSquaresOptimizer.java:362: error: <identifier> expected
	 * @return the point/value pair giving the optimal value for objective function
	    ^, AbstractLeastSquaresOptimizer.java:362: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	              ^, AbstractLeastSquaresOptimizer.java:362: error: illegal start of expression
	 * @return the point/value pair giving the optimal value for objective function
	                    ^, AbstractLeastSquaresOptimizer.java:362: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                          ^, AbstractLeastSquaresOptimizer.java:362: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                      ^, AbstractLeastSquaresOptimizer.java:362: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                  ^, AbstractLeastSquaresOptimizer.java:362: error: not a statement
	 * @return the point/value pair giving the optimal value for objective function
	                                                   ^, AbstractLeastSquaresOptimizer.java:362: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                        ^, AbstractLeastSquaresOptimizer.java:362: error: '(' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                            ^, AbstractLeastSquaresOptimizer.java:362: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                                               ^, AbstractLeastSquaresOptimizer.java:363: error: illegal start of expression
	 * @exception FunctionEvaluationException
	 ^, AbstractLeastSquaresOptimizer.java:363: error: ';' expected
	 * @exception FunctionEvaluationException
	  ^, AbstractLeastSquaresOptimizer.java:363: error: not a statement
	 * @exception FunctionEvaluationException
	    ^, AbstractLeastSquaresOptimizer.java:363: error: ')' expected
	 * @exception FunctionEvaluationException
	             ^, AbstractLeastSquaresOptimizer.java:364: error: illegal start of expression
	 * 		if the objective function throws one during
	   		^, AbstractLeastSquaresOptimizer.java:364: error: not a statement
	 * 		if the objective function throws one during
	 ^, AbstractLeastSquaresOptimizer.java:364: error: ';' expected
	 * 		if the objective function throws one during
	   		                ^, AbstractLeastSquaresOptimizer.java:364: error: not a statement
	 * 		if the objective function throws one during
	   		                 ^, AbstractLeastSquaresOptimizer.java:364: error: ';' expected
	 * 		if the objective function throws one during
	   		                         ^, AbstractLeastSquaresOptimizer.java:364: error: ';' expected
	 * 		if the objective function throws one during
	   		                                           ^, AbstractLeastSquaresOptimizer.java:365: error: ';' expected
	 * 		the search
	   		          ^, AbstractLeastSquaresOptimizer.java:366: error: <identifier> expected
	 * @exception OptimizationException
	                                   ^, AbstractLeastSquaresOptimizer.java:367: error: '(' expected
	 * 		if the algorithm failed to converge
	   		  ^, AbstractLeastSquaresOptimizer.java:367: error: ')' expected
	 * 		if the algorithm failed to converge
	   		      ^, AbstractLeastSquaresOptimizer.java:367: error: ';' expected
	 * 		if the algorithm failed to converge
	   		                       ^, AbstractLeastSquaresOptimizer.java:367: error: variable declaration not allowed here
	 * 		if the algorithm failed to converge
	   		                 ^, AbstractLeastSquaresOptimizer.java:367: error: ';' expected
	 * 		if the algorithm failed to converge
	   		                                   ^, AbstractLeastSquaresOptimizer.java:368: error: <identifier> expected
	 * @exception IllegalArgumentException
	                                      ^, AbstractLeastSquaresOptimizer.java:369: error: '(' expected
	 * 		if the start point dimension is wrong
	   		  ^, AbstractLeastSquaresOptimizer.java:369: error: ')' expected
	 * 		if the start point dimension is wrong
	   		      ^, AbstractLeastSquaresOptimizer.java:369: error: ';' expected
	 * 		if the start point dimension is wrong
	   		                  ^, AbstractLeastSquaresOptimizer.java:369: error: variable declaration not allowed here
	 * 		if the start point dimension is wrong
	   		             ^, AbstractLeastSquaresOptimizer.java:369: error: ';' expected
	 * 		if the start point dimension is wrong
	   		                               ^, AbstractLeastSquaresOptimizer.java:370: error: illegal start of expression
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	  ^]
Ingredient counter is Zero
---Undoing: gnrtn(493): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return java.lang.Math.sqrt(getChiSquare() / rows) ` -topatch--> `objectiveEvaluations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (985(f=2.0), 986(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (985(f=2.0), )
----------Running generation: 494, population size: 1

***** Generation 494 : 0
**Parent Variant: [Variant id: 987, #gens: 356, #ops: 0, parent:-]

--Child created id: 988
--Creating new operations for variant [Variant id: 988, #gens: 356, #ops: 0, parent:987]
---analyzing modificationPoint position: 338
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [objective, function, point]
--> var from patch: objective spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: function spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java333
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store least squares problem characteristics function = f ` -topatch--> `objective = function.value(point)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 333, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store least squares problem characteristics function = f ` -topatch--> `objective = function.value(point)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 988, #gens: 357, #ops: 1, parent:987] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 988
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-988/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(494): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store least squares problem characteristics function = f ` -topatch--> `objective = function.value(point)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (987(f=2.0), 988(f=18.0), )
Selected to next generation: IDs2--> (987(f=2.0), )
----------Running generation: 495, population size: 1

***** Generation 495 : 0
**Parent Variant: [Variant id: 989, #gens: 356, #ops: 0, parent:-]

--Child created id: 990
--Creating new operations for variant [Variant id: 990, #gens: 356, #ops: 0, parent:989]
---analyzing modificationPoint position: 47
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [rank, solvedCols]
--> var from patch: rank spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java552
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `rank = solvedCols` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 552, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `rank = solvedCols` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 990, #gens: 357, #ops: 1, parent:989] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 990, errors: [LevenbergMarquardtOptimizer.java:855: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:855: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:856: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:856: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:857: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:858: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:858: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:858: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:860: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:860: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:860: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:860: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:860: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:860: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:860: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:861: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:860: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:862: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:862: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:863: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:863: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:862: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:863: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:863: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:864: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:864: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:864: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:866: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:866: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:867: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:867: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:866: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:867: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:867: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:867: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:867: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:869: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:869: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:870: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:870: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:870: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:871: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:872: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:873: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:874: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:874: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:875: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:876: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:876: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:877: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:877: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:877: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:877: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:877: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:877: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:877: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:877: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:877: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:877: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:877: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:877: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:877: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:877: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:905: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:905: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:905: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:905: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:905: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:913: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	^, LevenbergMarquardtOptimizer.java:913: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	        ^, LevenbergMarquardtOptimizer.java:913: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                ^, LevenbergMarquardtOptimizer.java:913: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                           ^, LevenbergMarquardtOptimizer.java:913: error: reached end of file while parsing
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                               		                                 			                         			                  			                                 				                                  			                   			                                 				                                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(495): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `rank = solvedCols` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (989(f=2.0), 990(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (989(f=2.0), )
----------Running generation: 496, population size: 1

***** Generation 496 : 0
**Parent Variant: [Variant id: 991, #gens: 356, #ops: 0, parent:-]

--Child created id: 992
--Creating new operations for variant [Variant id: 992, #gens: 356, #ops: 0, parent:991]
---analyzing modificationPoint position: 192
location: LevenbergMarquardtOptimizer.java371
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `actRed = 1.0 - (r * r) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 992, #gens: 355, #ops: 1, parent:991] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 992, errors: [LevenbergMarquardtOptimizer.java:371: error: variable declaration not allowed here
					double r = cost / previousCost;
					       ^]
Ingredient counter is Zero
---Undoing: gnrtn(496): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `actRed = 1.0 - (r * r) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (991(f=2.0), 992(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (991(f=2.0), )
----------Running generation: 497, population size: 1

***** Generation 497 : 0
**Parent Variant: [Variant id: 993, #gens: 356, #ops: 0, parent:-]

--Child created id: 994
--Creating new operations for variant [Variant id: 994, #gens: 356, #ops: 0, parent:993]
---analyzing modificationPoint position: 211
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  lmPar *= 0.5
---analyzing modificationPoint position: 225
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }
---analyzing modificationPoint position: 49
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  sum += jacobian[i][pj] * qy[i]
---analyzing modificationPoint position: 244
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  gamma += jacobian[i][pk] * y[i]
---analyzing modificationPoint position: 47
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 226
location: LevenbergMarquardtOptimizer.java499
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 994, #gens: 355, #ops: 1, parent:993] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 994
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-994/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(497): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (993(f=2.0), 994(f=15.0), )
Selected to next generation: IDs2--> (993(f=2.0), )
----------Running generation: 498, population size: 1

***** Generation 498 : 0
**Parent Variant: [Variant id: 995, #gens: 356, #ops: 0, parent:-]

--Child created id: 996
--Creating new operations for variant [Variant id: 996, #gens: 356, #ops: 0, parent:995]
---analyzing modificationPoint position: 39
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java431
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmpVec = residuals ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 431, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmpVec = residuals ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 996, #gens: 357, #ops: 1, parent:995] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 996, errors: [LevenbergMarquardtOptimizer.java:431: error: variable work1 is already defined in method doOptimize()
					} 					double[] work1 = new double[cols];
					  					         ^]
Ingredient counter is Zero
---Undoing: gnrtn(498): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `tmpVec = residuals ` -topatch--> `double[] work1 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (995(f=2.0), 996(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (995(f=2.0), )
----------Running generation: 499, population size: 1

***** Generation 499 : 0
**Parent Variant: [Variant id: 997, #gens: 356, #ops: 0, parent:-]

--Child created id: 998
--Creating new operations for variant [Variant id: 998, #gens: 356, #ops: 0, parent:997]
---analyzing modificationPoint position: 302
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java174
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setCostRelativeTolerance(1.0E-10) ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 174, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setCostRelativeTolerance(1.0E-10) ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 998, #gens: 357, #ops: 1, parent:997] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 998, errors: [LevenbergMarquardtOptimizer.java:494: error: class, interface, or enum expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^, LevenbergMarquardtOptimizer.java:534: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:538: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                ^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                       ^, LevenbergMarquardtOptimizer.java:541: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:543: error: class, interface, or enum expected
				work1[pj] = s;
				^, LevenbergMarquardtOptimizer.java:544: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:545: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:547: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(499): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setCostRelativeTolerance(1.0E-10) ` -topatch--> `qrDecomposition()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (997(f=2.0), 998(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (997(f=2.0), )
----------Running generation: 500, population size: 1

***** Generation 500 : 0
**Parent Variant: [Variant id: 999, #gens: 356, #ops: 0, parent:-]

--Child created id: 1000
--Creating new operations for variant [Variant id: 1000, #gens: 356, #ops: 0, parent:999]
---analyzing modificationPoint position: 16
---modifPoint 0 not mutation generated in  double correction = fp / (delta * sum2)
---analyzing modificationPoint position: 46
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 11
location: LevenbergMarquardtOptimizer.java614
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1000, #gens: 355, #ops: 1, parent:999] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1000
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1000/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(500): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (999(f=2.0), 1000(f=5.0), )
Selected to next generation: IDs2--> (999(f=2.0), )
----------Running generation: 501, population size: 1

***** Generation 501 : 0
**Parent Variant: [Variant id: 1001, #gens: 356, #ops: 0, parent:-]

--Child created id: 1002
--Creating new operations for variant [Variant id: 1002, #gens: 356, #ops: 0, parent:1001]
---analyzing modificationPoint position: 196
location: LevenbergMarquardtOptimizer.java379
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[j] = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1002, #gens: 355, #ops: 1, parent:1001] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1002
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1002/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 18] ,[]
-Valid?: |false|14|18|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(501): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[j] = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1001(f=2.0), 1002(f=14.0), )
Selected to next generation: IDs2--> (1001(f=2.0), )
----------Running generation: 502, population size: 1

***** Generation 502 : 0
**Parent Variant: [Variant id: 1003, #gens: 356, #ops: 0, parent:-]

--Child created id: 1004
--Creating new operations for variant [Variant id: 1004, #gens: 356, #ops: 0, parent:1003]
---analyzing modificationPoint position: 108
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	if ((lmDiag[j] == 0) && (nSing == solvedCols)) { 		nSing = j[...]
---analyzing modificationPoint position: 12
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 352
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [this.maxEvaluations]
--> var from patch: this.maxEvaluations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java119
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxEvaluations(java.lang.Integer.MAX_VALUE) ` -topatch--> `this.maxEvaluations = maxEvaluations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 119, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxEvaluations(java.lang.Integer.MAX_VALUE) ` -topatch--> `this.maxEvaluations = maxEvaluations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1004, #gens: 357, #ops: 1, parent:1003] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1004
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1004/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(502): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxEvaluations(java.lang.Integer.MAX_VALUE) ` -topatch--> `this.maxEvaluations = maxEvaluations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1003(f=2.0), 1004(f=2.0), )
Selected to next generation: IDs2--> (1003(f=2.0), )
----------Running generation: 503, population size: 1

***** Generation 503 : 0
**Parent Variant: [Variant id: 1005, #gens: 356, #ops: 0, parent:-]

--Child created id: 1006
--Creating new operations for variant [Variant id: 1006, #gens: 356, #ops: 0, parent:1005]
---analyzing modificationPoint position: 50
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, work1, sPar, diag]
---modifPoint 0 not mutation generated in  sum /= diag[pj]
---analyzing modificationPoint position: 103
location: LevenbergMarquardtOptimizer.java718
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1006, #gens: 355, #ops: 1, parent:1005] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1006
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1006/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(503): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1005(f=2.0), 1006(f=9.0), )
Selected to next generation: IDs2--> (1005(f=2.0), )
----------Running generation: 504, population size: 1

***** Generation 504 : 0
**Parent Variant: [Variant id: 1007, #gens: 356, #ops: 0, parent:-]

--Child created id: 1008
--Creating new operations for variant [Variant id: 1008, #gens: 356, #ops: 0, parent:1007]
---analyzing modificationPoint position: 238
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double fp = dxNorm - delta
---analyzing modificationPoint position: 78
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  jacobian[i][pj] = jacobian[j][permutation[i]]
---analyzing modificationPoint position: 65
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]
---analyzing modificationPoint position: 121
Templates availables34
Attempts Base Ingredients  1 total 34
vars from patch [firstIteration, xNorm, k, cols, jacNorm, dk, point, xk, diag, delta, initialStepBoundFactor]
--> var from patch: firstIteration spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: xNorm spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: k spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: dk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: xk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: initialStepBoundFactor spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java401
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; } ` -topatch--> `if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 401, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; } ` -topatch--> `if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 1008, #gens: 356, #ops: 1, parent:1007] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 1008, errors: [LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:494: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:494: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:494: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:494: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                 ^, LevenbergMarquardtOptimizer.java:661: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                              ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                     ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                      ^, LevenbergMarquardtOptimizer.java:661: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                            ^, LevenbergMarquardtOptimizer.java:661: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:661: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:661: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:661: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	        ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                            ^, LevenbergMarquardtOptimizer.java:785: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException {
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(504): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 	tmp = 0.1; } ` -topatch--> `if (firstIteration) {  	// scale the point according to the norms of the columns 	// of the initial [...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1007(f=2.0), 1008(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1007(f=2.0), )
----------Running generation: 505, population size: 1

***** Generation 505 : 0
**Parent Variant: [Variant id: 1009, #gens: 356, #ops: 0, parent:-]

--Child created id: 1010
--Creating new operations for variant [Variant id: 1010, #gens: 356, #ops: 0, parent:1009]
---analyzing modificationPoint position: 40
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [delta, lmNorm]
--> var from patch: delta spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: lmNorm spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java432
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `delta = 2 * lmNorm` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 432, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `delta = 2 * lmNorm` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1010, #gens: 356, #ops: 1, parent:1009] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1010
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1010/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
-Killed id: pid->649
The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
Killed the Process that runs JUnit test cases 649
**The validation 1 have not finished well**
-Valid?: null, fitness 1.7976931348623157E308
Ingredient counter is Zero
---Undoing: gnrtn(505): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `delta = 2 * lmNorm` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1009(f=2.0), 1010(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1009(f=2.0), )
----------Running generation: 506, population size: 1

***** Generation 506 : 0
**Parent Variant: [Variant id: 1011, #gens: 356, #ops: 0, parent:-]

--Child created id: 1012
--Creating new operations for variant [Variant id: 1012, #gens: 356, #ops: 0, parent:1011]
---analyzing modificationPoint position: 105
location: LevenbergMarquardtOptimizer.java727
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store the diagonal element of s and restore // the corresponding diagonal element of R lmDiag[j] [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1012, #gens: 355, #ops: 1, parent:1011] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1012
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1012/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(506): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store the diagonal element of s and restore // the corresponding diagonal element of R lmDiag[j] [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1011(f=2.0), 1012(f=13.0), )
Selected to next generation: IDs2--> (1011(f=2.0), )
----------Running generation: 507, population size: 1

***** Generation 507 : 0
**Parent Variant: [Variant id: 1013, #gens: 356, #ops: 0, parent:-]

--Child created id: 1014
--Creating new operations for variant [Variant id: 1014, #gens: 356, #ops: 0, parent:1013]
---analyzing modificationPoint position: 7
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 51
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.util.MathUtils.SAFE_MIN]
--> var from patch: org.apache.commons.math.util.MathUtils.SAFE_MIN spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java557
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += sum * sum ` -topatch--> `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 557, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += sum * sum ` -topatch--> `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1014, #gens: 357, #ops: 1, parent:1013] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1014
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1014/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(507): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += sum * sum ` -topatch--> `setQRRankingThreshold(org.apache.commons.math.util.MathUtils.SAFE_MIN)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1013(f=2.0), 1014(f=2.0), )
Selected to next generation: IDs2--> (1013(f=2.0), )
----------Running generation: 508, population size: 1

***** Generation 508 : 0
**Parent Variant: [Variant id: 1015, #gens: 356, #ops: 0, parent:-]

--Child created id: 1016
--Creating new operations for variant [Variant id: 1016, #gens: 356, #ops: 0, parent:1015]
---analyzing modificationPoint position: 115
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java747
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; } ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 747, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; } ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1016, #gens: 357, #ops: 1, parent:1015] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1016
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1016/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(508): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; } ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1015(f=2.0), 1016(f=2.0), )
Selected to next generation: IDs2--> (1015(f=2.0), )
----------Running generation: 509, population size: 1

***** Generation 509 : 0
**Parent Variant: [Variant id: 1017, #gens: 356, #ops: 0, parent:-]

--Child created id: 1018
--Creating new operations for variant [Variant id: 1018, #gens: 356, #ops: 0, parent:1017]
---analyzing modificationPoint position: 33
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [lmPar, paru, solvedCols, permutation, work1, diag, qy, work2, work3, dxNorm, lmDir, fp, delta, parl, jacobian, sum2]
---modifPoint 0 not mutation generated in  sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan))
---analyzing modificationPoint position: 252
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java249
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation = new int[cols] ` -topatch--> `// local point double delta = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 249, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation = new int[cols] ` -topatch--> `// local point double delta = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1018, #gens: 357, #ops: 1, parent:1017] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1018
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1018/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(509): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation = new int[cols] ` -topatch--> `// local point double delta = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1017(f=2.0), 1018(f=2.0), )
Selected to next generation: IDs2--> (1017(f=2.0), )
----------Running generation: 510, population size: 1

***** Generation 510 : 0
**Parent Variant: [Variant id: 1019, #gens: 356, #ops: 0, parent:-]

--Child created id: 1020
--Creating new operations for variant [Variant id: 1020, #gens: 356, #ops: 0, parent:1019]
---analyzing modificationPoint position: 46
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 137
location: LevenbergMarquardtOptimizer.java841
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= betak ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1020, #gens: 355, #ops: 1, parent:1019] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1020
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1020/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(510): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `gamma *= betak ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1019(f=2.0), 1020(f=18.0), )
Selected to next generation: IDs2--> (1019(f=2.0), )
----------Running generation: 511, population size: 1

***** Generation 511 : 0
**Parent Variant: [Variant id: 1021, #gens: 356, #ops: 0, parent:-]

--Child created id: 1022
--Creating new operations for variant [Variant id: 1022, #gens: 356, #ops: 0, parent:1021]
---analyzing modificationPoint position: 282
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [point, objective]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: objective spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java805
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double aki = jacobian[j][permutation[i]] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 805, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double aki = jacobian[j][permutation[i]] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1022, #gens: 356, #ops: 1, parent:1021] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1022, errors: [LevenbergMarquardtOptimizer.java:807: error: cannot find symbol
					norm2 += aki * aki;
					         ^
  symbol:   variable aki
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:807: error: cannot find symbol
					norm2 += aki * aki;
					               ^
  symbol:   variable aki
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(511): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double aki = jacobian[j][permutation[i]] ` -topatch--> `org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1021(f=2.0), 1022(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1021(f=2.0), )
----------Running generation: 512, population size: 1

***** Generation 512 : 0
**Parent Variant: [Variant id: 1023, #gens: 356, #ops: 0, parent:-]

--Child created id: 1024
--Creating new operations for variant [Variant id: 1024, #gens: 356, #ops: 0, parent:1023]
---analyzing modificationPoint position: 110
location: LevenbergMarquardtOptimizer.java739
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nSing < solvedCols) { 	work[j] = 0; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1024, #gens: 355, #ops: 1, parent:1023] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1024
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1024/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(512): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nSing < solvedCols) { 	work[j] = 0; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1023(f=2.0), 1024(f=2.0), )
Selected to next generation: IDs2--> (1023(f=2.0), )
----------Running generation: 513, population size: 1

***** Generation 513 : 0
**Parent Variant: [Variant id: 1025, #gens: 356, #ops: 0, parent:-]

--Child created id: 1026
--Creating new operations for variant [Variant id: 1026, #gens: 356, #ops: 0, parent:1025]
---analyzing modificationPoint position: 117
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  work[j] = (work[j] - sum) / lmDiag[j]
---analyzing modificationPoint position: 36
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; }
---analyzing modificationPoint position: 154
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  // initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...]
---analyzing modificationPoint position: 214
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  xNorm = 0
---analyzing modificationPoint position: 141
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  // compute Qt.res qTy(residuals)
---analyzing modificationPoint position: 42
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java528
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 528, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1026, #gens: 356, #ops: 1, parent:1025] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 1026, errors: [LevenbergMarquardtOptimizer.java:843: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:843: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:843: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:845: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:848: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:848: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:848: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:848: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:848: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:850: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:850: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:850: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:850: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:850: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:850: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:851: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:852: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:852: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:852: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:853: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:853: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:853: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:854: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:854: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:855: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:855: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:854: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:855: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:855: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:855: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:858: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:858: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:858: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:859: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:860: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:861: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:862: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:863: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:864: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:864: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:865: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:865: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:865: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:865: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:865: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:865: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:893: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:893: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:893: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:893: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:893: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:901: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	^, LevenbergMarquardtOptimizer.java:901: error: illegal start of expression
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	        ^, LevenbergMarquardtOptimizer.java:901: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                ^, LevenbergMarquardtOptimizer.java:901: error: ';' expected
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                           ^, LevenbergMarquardtOptimizer.java:901: error: reached end of file while parsing
	 */ 	private void qTy(double[] y) { 		for (int k = 0; k < cols; ++k) { 			int pk = permutation[k]; 			double gamma = 0; 			for (int i = k; i < rows; ++i) { 				gamma += jacobian[i][pk] * y[i];} 			gamma *= beta[pk]; 			for (int i = k; i < rows; ++i) { 				y[i] -= gamma * jacobian[i][pk];}}}}
	    	                               		                                 			                         			                  			                                 				                                  			                   			                                 				                                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(513): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double parl = 0 ` -topatch--> `double gamma = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1025(f=2.0), 1026(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1025(f=2.0), )
----------Running generation: 514, population size: 1

***** Generation 514 : 0
**Parent Variant: [Variant id: 1027, #gens: 356, #ops: 0, parent:-]

--Child created id: 1028
--Creating new operations for variant [Variant id: 1028, #gens: 356, #ops: 0, parent:1027]
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 82
---modifPoint 1 not mutation generated in  // prepare the row of d to be eliminated, locating the // diagonal element using p from the Q.R. fac[...]
---analyzing modificationPoint position: 32
Templates availables67
Attempts Base Ingredients  1 total 67
Attempts Base Ingredients  2 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java698
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 698, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1028, #gens: 356, #ops: 1, parent:1027] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1028, errors: [LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                       ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:700: error: cannot find symbol
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						                                               ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:701: error: cannot find symbol
						cos = sin * cotan;
						            ^
  symbol:   variable cotan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(514): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double cotan = rkk / lmDiag[k] ` -topatch--> `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1027(f=2.0), 1028(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1027(f=2.0), )
----------Running generation: 515, population size: 1

***** Generation 515 : 0
**Parent Variant: [Variant id: 1029, #gens: 356, #ops: 0, parent:-]

--Child created id: 1030
--Creating new operations for variant [Variant id: 1030, #gens: 356, #ops: 0, parent:1029]
---analyzing modificationPoint position: 149
location: LevenbergMarquardtOptimizer.java293
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (dk == 0) { 	dk = 1.0; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1030, #gens: 355, #ops: 1, parent:1029] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1030
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1030/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(515): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (dk == 0) { 	dk = 1.0; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1029(f=2.0), 1030(f=3.0), )
Selected to next generation: IDs2--> (1029(f=2.0), )
----------Running generation: 516, population size: 1

***** Generation 516 : 0
**Parent Variant: [Variant id: 1031, #gens: 356, #ops: 0, parent:-]

--Child created id: 1032
--Creating new operations for variant [Variant id: 1032, #gens: 356, #ops: 0, parent:1031]
---analyzing modificationPoint position: 249
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  diagR = new double[cols]
---analyzing modificationPoint position: 82
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // prepare the row of d to be eliminated, locating the // diagonal element using p from the Q.R. fac[...]
---analyzing modificationPoint position: 21
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  work1[pj] *= diag[pj] / dxNorm
---analyzing modificationPoint position: 271
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  double norm2 = 0
---analyzing modificationPoint position: 295
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java829
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 829, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1032, #gens: 357, #ops: 1, parent:1031] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 1032, errors: [LevenbergMarquardtOptimizer.java:830: error: unreachable statement
			beta[pk] = betak;
			^]
Ingredient counter is Zero
---Undoing: gnrtn(516): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1031(f=2.0), 1032(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1031(f=2.0), )
----------Running generation: 517, population size: 1

***** Generation 517 : 0
**Parent Variant: [Variant id: 1033, #gens: 356, #ops: 0, parent:-]

--Child created id: 1034
--Creating new operations for variant [Variant id: 1034, #gens: 356, #ops: 0, parent:1033]
---analyzing modificationPoint position: 118
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // permute the components of z back to components of lmDir for (int j = 0; j < lmDir.length; ++j) { [...]
---analyzing modificationPoint position: 28
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java541
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = (work1[pj] - sum) / diagR[pj] ` -topatch--> `// if the jacobian is not rank deficient, the Newton step provides // a lower bound, parl, for the z[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 541, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = (work1[pj] - sum) / diagR[pj] ` -topatch--> `// if the jacobian is not rank deficient, the Newton step provides // a lower bound, parl, for the z[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1034, #gens: 356, #ops: 1, parent:1033] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1034, errors: [LevenbergMarquardtOptimizer.java:543: error: cannot find symbol
				work1[pj] = s;
				            ^
  symbol:   variable s
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:544: error: cannot find symbol
				sum2 += s * s;
				        ^
  symbol:   variable s
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:544: error: cannot find symbol
				sum2 += s * s;
				            ^
  symbol:   variable s
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(517): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double s = (work1[pj] - sum) / diagR[pj] ` -topatch--> `// if the jacobian is not rank deficient, the Newton step provides // a lower bound, parl, for the z[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1033(f=2.0), 1034(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1033(f=2.0), )
----------Running generation: 518, population size: 1

***** Generation 518 : 0
**Parent Variant: [Variant id: 1035, #gens: 356, #ops: 0, parent:-]

--Child created id: 1036
--Creating new operations for variant [Variant id: 1036, #gens: 356, #ops: 0, parent:1035]
---analyzing modificationPoint position: 93
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java702
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 702, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1036, #gens: 356, #ops: 1, parent:1035] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1036, errors: [LevenbergMarquardtOptimizer.java:704: error: cannot find symbol
						cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan));
						                                       ^
  symbol:   variable tan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:704: error: cannot find symbol
						cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan));
						                                             ^
  symbol:   variable tan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:705: error: cannot find symbol
						sin = cos * tan;
						            ^
  symbol:   variable tan
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(518): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double tan = lmDiag[k] / rkk ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1035(f=2.0), 1036(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1035(f=2.0), )
----------Running generation: 519, population size: 1

***** Generation 519 : 0
**Parent Variant: [Variant id: 1037, #gens: 356, #ops: 0, parent:-]

--Child created id: 1038
--Creating new operations for variant [Variant id: 1038, #gens: 356, #ops: 0, parent:1037]
---analyzing modificationPoint position: 343
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 0 not mutation generated in  this.residuals = new double[target.length]
---analyzing modificationPoint position: 113
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java745
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 745, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1038, #gens: 356, #ops: 1, parent:1037] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1038, errors: [LevenbergMarquardtOptimizer.java:749: error: cannot find symbol
					sum += jacobian[i][pj] * work[i];
					                   ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(519): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1037(f=2.0), 1038(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1037(f=2.0), )
----------Running generation: 520, population size: 1

***** Generation 520 : 0
**Parent Variant: [Variant id: 1039, #gens: 356, #ops: 0, parent:-]

--Child created id: 1040
--Creating new operations for variant [Variant id: 1040, #gens: 356, #ops: 0, parent:1039]
---analyzing modificationPoint position: 98
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  qtbpj = ((-sin) * work[k]) + (cos * qtbpj)
---analyzing modificationPoint position: 274
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 1 not mutation generated in  norm2 += akk * akk
---analyzing modificationPoint position: 287
location: LevenbergMarquardtOptimizer.java814
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ak2 = norm2 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1040, #gens: 355, #ops: 1, parent:1039] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1040
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1040/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(520): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ak2 = norm2 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1039(f=2.0), 1040(f=18.0), )
Selected to next generation: IDs2--> (1039(f=2.0), )
----------Running generation: 521, population size: 1

***** Generation 521 : 0
**Parent Variant: [Variant id: 1041, #gens: 356, #ops: 0, parent:-]

--Child created id: 1042
--Creating new operations for variant [Variant id: 1042, #gens: 356, #ops: 0, parent:1041]
---analyzing modificationPoint position: 178
location: LevenbergMarquardtOptimizer.java350
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	lmDir[pj] = -lmDir[pj]; 	point[pj][...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1042, #gens: 355, #ops: 1, parent:1041] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1042
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1042/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(521): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	lmDir[pj] = -lmDir[pj]; 	point[pj][...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1041(f=2.0), 1042(f=18.0), )
Selected to next generation: IDs2--> (1041(f=2.0), )
----------Running generation: 522, population size: 1

***** Generation 522 : 0
**Parent Variant: [Variant id: 1043, #gens: 356, #ops: 0, parent:-]

--Child created id: 1044
--Creating new operations for variant [Variant id: 1044, #gens: 356, #ops: 0, parent:1043]
---analyzing modificationPoint position: 27
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [sum2, sum]
--> var from patch: sum2 spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: sum spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java539
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `sum2 += sum * sum` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 539, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `sum2 += sum * sum` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1044, #gens: 357, #ops: 1, parent:1043] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1044, errors: [LevenbergMarquardtOptimizer.java:562: error: illegal start of type
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:562: error: <identifier> expected
		if (paru == 0) {
		        ^, LevenbergMarquardtOptimizer.java:562: error: ';' expected
		if (paru == 0) {
		           ^, LevenbergMarquardtOptimizer.java:562: error: illegal start of type
		if (paru == 0) {
		             ^, LevenbergMarquardtOptimizer.java:562: error: <identifier> expected
		if (paru == 0) {
		              ^, LevenbergMarquardtOptimizer.java:562: error: ';' expected
		if (paru == 0) {
		                ^, LevenbergMarquardtOptimizer.java:564: error: illegal start of type
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			     ^, LevenbergMarquardtOptimizer.java:564: error: <identifier> expected
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			      ^, LevenbergMarquardtOptimizer.java:564: error: ';' expected
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			                  ^, LevenbergMarquardtOptimizer.java:564: error: <identifier> expected
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			                                       ^, LevenbergMarquardtOptimizer.java:564: error: <identifier> expected
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			                                             ^, LevenbergMarquardtOptimizer.java:564: error: illegal start of type
			paru = 2.2251E-308 / java.lang.Math.min(delta, 0.1);
			                                               ^, LevenbergMarquardtOptimizer.java:569: error: class, interface, or enum expected
		lmPar = java.lang.Math.min(paru, java.lang.Math.max(lmPar, parl));
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                    ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                                    ^, LevenbergMarquardtOptimizer.java:667: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:669: error: class, interface, or enum expected
			work[j] = qy[j];
			^, LevenbergMarquardtOptimizer.java:670: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:678: error: class, interface, or enum expected
			double dpj = diag[pj];
			^, LevenbergMarquardtOptimizer.java:679: error: class, interface, or enum expected
			if (dpj != 0) {
			^, LevenbergMarquardtOptimizer.java:681: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:687: error: class, interface, or enum expected
			double qtbpj = 0;
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                ^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                                ^, LevenbergMarquardtOptimizer.java:693: error: class, interface, or enum expected
				if (lmDiag[k] != 0) {
				^, LevenbergMarquardtOptimizer.java:695: error: class, interface, or enum expected
					final double sin;
					      ^, LevenbergMarquardtOptimizer.java:696: error: class, interface, or enum expected
					final double cos;
					      ^, LevenbergMarquardtOptimizer.java:697: error: class, interface, or enum expected
					double rkk = jacobian[k][pk];
					^, LevenbergMarquardtOptimizer.java:698: error: class, interface, or enum expected
					if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) {
					^, LevenbergMarquardtOptimizer.java:699: error: class, interface, or enum expected
						final double cotan = rkk / lmDiag[k];
						      ^, LevenbergMarquardtOptimizer.java:700: error: class, interface, or enum expected
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						^, LevenbergMarquardtOptimizer.java:701: error: class, interface, or enum expected
						cos = sin * cotan;
						^, LevenbergMarquardtOptimizer.java:702: error: class, interface, or enum expected
					} else {
					^, LevenbergMarquardtOptimizer.java:703: error: class, interface, or enum expected
						final double tan = lmDiag[k] / rkk;
						      ^, LevenbergMarquardtOptimizer.java:704: error: class, interface, or enum expected
						cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan));
						^, LevenbergMarquardtOptimizer.java:705: error: class, interface, or enum expected
						sin = cos * tan;
						^, LevenbergMarquardtOptimizer.java:706: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:711: error: class, interface, or enum expected
					final double temp = (cos * work[k]) + (sin * qtbpj);
					      ^, LevenbergMarquardtOptimizer.java:712: error: class, interface, or enum expected
					qtbpj = ((-sin) * work[k]) + (cos * qtbpj);
					^, LevenbergMarquardtOptimizer.java:713: error: class, interface, or enum expected
					work[k] = temp;
					^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					                    ^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					                                    ^, LevenbergMarquardtOptimizer.java:718: error: class, interface, or enum expected
						final double temp2 = (cos * rik) + (sin * lmDiag[i]);
						      ^, LevenbergMarquardtOptimizer.java:719: error: class, interface, or enum expected
						lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]);
						^, LevenbergMarquardtOptimizer.java:720: error: class, interface, or enum expected
						jacobian[i][pk] = temp2;
						^, LevenbergMarquardtOptimizer.java:721: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:729: error: class, interface, or enum expected
			jacobian[j][permutation[j]] = lmDir[j];
			^, LevenbergMarquardtOptimizer.java:731: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^]
Ingredient counter is Zero
---Undoing: gnrtn(522): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `sum2 += sum * sum` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1043(f=2.0), 1044(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1043(f=2.0), )
----------Running generation: 523, population size: 1

***** Generation 523 : 0
**Parent Variant: [Variant id: 1045, #gens: 356, #ops: 0, parent:-]

--Child created id: 1046
--Creating new operations for variant [Variant id: 1046, #gens: 356, #ops: 0, parent:1045]
---analyzing modificationPoint position: 216
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double xK = diag[k] * point[k]
---analyzing modificationPoint position: 119
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmDir[permutation[j]] = work[j]
---analyzing modificationPoint position: 282
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double aki = jacobian[j][permutation[i]]
---analyzing modificationPoint position: 288
location: LevenbergMarquardtOptimizer.java817
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (ak2 <= qrRankingThreshold) { 	rank = k; 	return; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1046, #gens: 355, #ops: 1, parent:1045] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1046
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1046/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(523): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (ak2 <= qrRankingThreshold) { 	rank = k; 	return; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1045(f=2.0), 1046(f=4.0), )
Selected to next generation: IDs2--> (1045(f=2.0), )
----------Running generation: 524, population size: 1

***** Generation 524 : 0
**Parent Variant: [Variant id: 1047, #gens: 356, #ops: 0, parent:-]

--Child created id: 1048
--Creating new operations for variant [Variant id: 1048, #gens: 356, #ops: 0, parent:1047]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 225
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int j = rank; j < cols; ++j) { 	lmDir[permutation[j]] = 0; }
---analyzing modificationPoint position: 92
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, jacobian, qy, diag, sum2]
---modifPoint 2 not mutation generated in  if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...]
---analyzing modificationPoint position: 286
location: LevenbergMarquardtOptimizer.java813
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1048, #gens: 355, #ops: 1, parent:1047] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1048
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1048/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(524): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1047(f=2.0), 1048(f=18.0), )
Selected to next generation: IDs2--> (1047(f=2.0), )
----------Running generation: 525, population size: 1

***** Generation 525 : 0
**Parent Variant: [Variant id: 1049, #gens: 356, #ops: 0, parent:-]

--Child created id: 1050
--Creating new operations for variant [Variant id: 1050, #gens: 356, #ops: 0, parent:1049]
---analyzing modificationPoint position: 172
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousCost = cost ` -topatch--> `lmPar *= 0.5` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 340, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousCost = cost ` -topatch--> `lmPar *= 0.5` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1050, #gens: 357, #ops: 1, parent:1049] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1050, errors: [LevenbergMarquardtOptimizer.java:410: error: cannot find symbol
				if (firstIteration) { 					delta = java.lang.Math.min(delta, lmNorm);} 				// evaluate the function at x + p and calculate its norm 				updateResidualsAndCost(); 				current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective); 				// compute the scaled actual reduction 				double actRed = -1.0; 				if ((0.1 * cost) < previousCost) { 					double r = cost / previousCost; 					actRed = 1.0 - (r * r);} 				// compute the scaled predicted reduction 				// and the scaled directional derivative
				                      					                                  ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:411: error: cannot find symbol
				for (int j = 0; j < solvedCols; ++j) { 					int pj = permutation[j]; 					double dirJ = lmDir[pj]; 					work1[j] = 0; 					for (int i = 0; i <= j; ++i) { 						work1[i] += jacobian[i][pj] * dirJ;}} 				double coeff1 = 0; 				for (int j = 0; j < solvedCols; ++j) { 					coeff1 += work1[j] * work1[j];} 				double pc2 = previousCost * previousCost; 				coeff1 = coeff1 / pc2; 				double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2; 				double preRed = coeff1 + (2 * coeff2); 				double dirDer = -(coeff1 + coeff2); 				// ratio of the actual to the predicted reduction 				ratio = (preRed == 0) ? 0 : actRed / preRed; 				// update the step bound
				                                       					                         					                         					              					                               						                                      				                   				                                       					                                				                                          				                       				                          ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:411: error: cannot find symbol
				for (int j = 0; j < solvedCols; ++j) { 					int pj = permutation[j]; 					double dirJ = lmDir[pj]; 					work1[j] = 0; 					for (int i = 0; i <= j; ++i) { 						work1[i] += jacobian[i][pj] * dirJ;}} 				double coeff1 = 0; 				for (int j = 0; j < solvedCols; ++j) { 					coeff1 += work1[j] * work1[j];} 				double pc2 = previousCost * previousCost; 				coeff1 = coeff1 / pc2; 				double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2; 				double preRed = coeff1 + (2 * coeff2); 				double dirDer = -(coeff1 + coeff2); 				// ratio of the actual to the predicted reduction 				ratio = (preRed == 0) ? 0 : actRed / preRed; 				// update the step bound
				                                       					                         					                         					              					                               						                                      				                   				                                       					                                				                                          				                       				                                    ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:412: error: cannot find symbol
				if (ratio <= 0.25) { 					double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5; 					if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 						tmp = 0.1;} 					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm); 					lmPar /= tmp;} else if ((lmPar == 0) || (ratio >= 0.75)) { 					delta = 2 * lmNorm; 					lmPar *= 0.5;} 				// test for successful iteration.
				                     					              ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:412: error: cannot find symbol
				if (ratio <= 0.25) { 					double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5; 					if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 						tmp = 0.1;} 					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm); 					lmPar /= tmp;} else if ((lmPar == 0) || (ratio >= 0.75)) { 					delta = 2 * lmNorm; 					lmPar *= 0.5;} 				// test for successful iteration.
				                     					                                                              ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:412: error: cannot find symbol
				if (ratio <= 0.25) { 					double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5; 					if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 						tmp = 0.1;} 					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm); 					lmPar /= tmp;} else if ((lmPar == 0) || (ratio >= 0.75)) { 					delta = 2 * lmNorm; 					lmPar *= 0.5;} 				// test for successful iteration.
				                     					                                                                              					                                                     						            					                                               ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:412: error: cannot find symbol
				if (ratio <= 0.25) { 					double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5; 					if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) { 						tmp = 0.1;} 					delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm); 					lmPar /= tmp;} else if ((lmPar == 0) || (ratio >= 0.75)) { 					delta = 2 * lmNorm; 					lmPar *= 0.5;} 				// test for successful iteration.
				                     					                                                                              					                                                     						            					                                                        					                                                           					            ^
  symbol:   variable lmNorm
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:437: error: cannot find symbol
					if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && 
					                          ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:450: error: cannot find symbol
				if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) {
				                         ^
  symbol:   variable actRed
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(525): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double previousCost = cost ` -topatch--> `lmPar *= 0.5` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1049(f=2.0), 1050(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1049(f=2.0), )
----------Running generation: 526, population size: 1

***** Generation 526 : 0
**Parent Variant: [Variant id: 1051, #gens: 356, #ops: 0, parent:-]

--Child created id: 1052
--Creating new operations for variant [Variant id: 1052, #gens: 356, #ops: 0, parent:1051]
---analyzing modificationPoint position: 165
location: LevenbergMarquardtOptimizer.java322
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= orthoTolerance) { 	// convergence has been reached 	return current; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1052, #gens: 355, #ops: 1, parent:1051] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1052
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1052/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(526): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= orthoTolerance) { 	// convergence has been reached 	return current; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1051(f=2.0), 1052(f=3.0), )
Selected to next generation: IDs2--> (1051(f=2.0), )
----------Running generation: 527, population size: 1

***** Generation 527 : 0
**Parent Variant: [Variant id: 1053, #gens: 356, #ops: 0, parent:-]

--Child created id: 1054
--Creating new operations for variant [Variant id: 1054, #gens: 356, #ops: 0, parent:1053]
---analyzing modificationPoint position: 150
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double xk = dk * point[k]
---analyzing modificationPoint position: 87
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cost]
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java686
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...] ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 686, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...] ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1054, #gens: 356, #ops: 1, parent:1053] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1054, errors: [LevenbergMarquardtOptimizer.java:711: error: cannot find symbol
					final double temp = (cos * work[k]) + (sin * qtbpj);
					                                             ^
  symbol:   variable qtbpj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:712: error: cannot find symbol
					qtbpj = ((-sin) * work[k]) + (cos * qtbpj);
					^
  symbol:   variable qtbpj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:712: error: cannot find symbol
					qtbpj = ((-sin) * work[k]) + (cos * qtbpj);
					                                    ^
  symbol:   variable qtbpj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(527): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...] ` -topatch--> `double previousCost = cost` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1053(f=2.0), 1054(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1053(f=2.0), )
----------Running generation: 528, population size: 1

***** Generation 528 : 0
**Parent Variant: [Variant id: 1055, #gens: 356, #ops: 0, parent:-]

--Child created id: 1056
--Creating new operations for variant [Variant id: 1056, #gens: 356, #ops: 0, parent:1055]
---analyzing modificationPoint position: 120
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java399
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 399, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1056, #gens: 357, #ops: 1, parent:1055] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1056
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1056/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(528): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1055(f=2.0), 1056(f=2.0), )
Selected to next generation: IDs2--> (1055(f=2.0), )
----------Running generation: 529, population size: 1

***** Generation 529 : 0
**Parent Variant: [Variant id: 1057, #gens: 356, #ops: 0, parent:-]

--Child created id: 1058
--Creating new operations for variant [Variant id: 1058, #gens: 356, #ops: 0, parent:1057]
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 24
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 12
location: LevenbergMarquardtOptimizer.java617
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1058, #gens: 355, #ops: 1, parent:1057] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1058
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1058/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(529): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum2 = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1057(f=2.0), 1058(f=7.0), )
Selected to next generation: IDs2--> (1057(f=2.0), )
----------Running generation: 530, population size: 1

***** Generation 530 : 0
**Parent Variant: [Variant id: 1059, #gens: 356, #ops: 0, parent:-]

--Child created id: 1060
--Creating new operations for variant [Variant id: 1060, #gens: 356, #ops: 0, parent:1059]
---analyzing modificationPoint position: 111
location: LevenbergMarquardtOptimizer.java743
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nSing > 0) { 	for (int j = nSing - 1; j >= 0; --j) { 		int pj = permutation[j]; 		double sum = 0[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1060, #gens: 355, #ops: 1, parent:1059] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1060
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1060/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(530): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nSing > 0) { 	for (int j = nSing - 1; j >= 0; --j) { 		int pj = permutation[j]; 		double sum = 0[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1059(f=2.0), 1060(f=15.0), )
Selected to next generation: IDs2--> (1059(f=2.0), )
----------Running generation: 531, population size: 1

***** Generation 531 : 0
**Parent Variant: [Variant id: 1061, #gens: 356, #ops: 0, parent:-]

--Child created id: 1062
--Creating new operations for variant [Variant id: 1062, #gens: 356, #ops: 0, parent:1061]
---analyzing modificationPoint position: 192
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java371
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `actRed = 1.0 - (r * r) ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 371, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `actRed = 1.0 - (r * r) ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1062, #gens: 357, #ops: 1, parent:1061] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1062, errors: [LevenbergMarquardtOptimizer.java:727: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:727: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:727: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:727: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:727: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:727: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:727: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:727: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:727: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:727: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:727: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:727: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:727: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:727: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:727: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:727: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:733: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:733: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:733: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:733: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:733: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:733: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:733: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:733: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:734: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:734: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:734: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:735: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:735: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:736: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:736: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:736: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:737: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:737: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:737: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:738: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:738: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:738: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:738: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:738: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:739: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:740: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:740: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:738: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:740: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:740: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:740: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:740: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:742: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:742: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:742: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:743: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:743: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:743: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:744: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:745: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:745: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:747: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:747: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:748: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:748: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:748: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:749: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:750: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:751: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:752: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:752: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:753: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:754: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:754: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:755: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:755: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:755: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:755: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:755: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:755: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:755: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:755: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:755: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(531): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `actRed = 1.0 - (r * r) ` -topatch--> `final double cos` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1061(f=2.0), 1062(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1061(f=2.0), )
----------Running generation: 532, population size: 1

***** Generation 532 : 0
**Parent Variant: [Variant id: 1063, #gens: 356, #ops: 0, parent:-]

--Child created id: 1064
--Creating new operations for variant [Variant id: 1064, #gens: 356, #ops: 0, parent:1063]
---analyzing modificationPoint position: 335
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [jacobian, jF, point]
--> var from patch: jacobian spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: jF spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java328
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// reset counters iterations = 0 ` -topatch--> `jacobian = jF.value(point)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 328, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// reset counters iterations = 0 ` -topatch--> `jacobian = jF.value(point)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1064, #gens: 356, #ops: 1, parent:1063] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1064
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1064/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(532): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// reset counters iterations = 0 ` -topatch--> `jacobian = jF.value(point)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1063(f=2.0), 1064(f=18.0), )
Selected to next generation: IDs2--> (1063(f=2.0), )
----------Running generation: 533, population size: 1

***** Generation 533 : 0
**Parent Variant: [Variant id: 1065, #gens: 356, #ops: 0, parent:-]

--Child created id: 1066
--Creating new operations for variant [Variant id: 1066, #gens: 356, #ops: 0, parent:1065]
---analyzing modificationPoint position: 92
location: LevenbergMarquardtOptimizer.java697
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1066, #gens: 355, #ops: 1, parent:1065] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1066, errors: [LevenbergMarquardtOptimizer.java:710: error: variable cos might not have been initialized
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                   ^, LevenbergMarquardtOptimizer.java:710: error: variable sin might not have been initialized
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(533): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1065(f=2.0), 1066(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1065(f=2.0), )
----------Running generation: 534, population size: 1

***** Generation 534 : 0
**Parent Variant: [Variant id: 1067, #gens: 356, #ops: 0, parent:-]

--Child created id: 1068
--Creating new operations for variant [Variant id: 1068, #gens: 356, #ops: 0, parent:1067]
---analyzing modificationPoint position: 102
---modifPoint 0 not mutation generated in  final double temp2 = (cos * rik) + (sin * lmDiag[i])
---analyzing modificationPoint position: 103
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [lmDir, cols]
--> var from patch: lmDir spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java718
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]) ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 718, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]) ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1068, #gens: 356, #ops: 1, parent:1067] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1068
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1068/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(534): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]) ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1067(f=2.0), 1068(f=15.0), )
Selected to next generation: IDs2--> (1067(f=2.0), )
----------Running generation: 535, population size: 1

***** Generation 535 : 0
**Parent Variant: [Variant id: 1069, #gens: 356, #ops: 0, parent:-]

--Child created id: 1070
--Creating new operations for variant [Variant id: 1070, #gens: 356, #ops: 0, parent:1069]
---analyzing modificationPoint position: 14
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double s = work1[permutation[j]]
---analyzing modificationPoint position: 122
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm)
---analyzing modificationPoint position: 263
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [delta, xNorm, initialStepBoundFactor]
--> var from patch: delta spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: xNorm spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: initialStepBoundFactor spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java266
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// outer loop lmPar = 0 ` -topatch--> `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 266, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// outer loop lmPar = 0 ` -topatch--> `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1070, #gens: 357, #ops: 1, parent:1069] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1070, errors: [LevenbergMarquardtOptimizer.java:444: error: cannot find symbol
				if (checker.converged(getIterations(), previous, current)) {
				                                       ^
  symbol:   variable previous
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(535): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// outer loop lmPar = 0 ` -topatch--> `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1069(f=2.0), 1070(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1069(f=2.0), )
----------Running generation: 536, population size: 1

***** Generation 536 : 0
**Parent Variant: [Variant id: 1071, #gens: 356, #ops: 0, parent:-]

--Child created id: 1072
--Creating new operations for variant [Variant id: 1072, #gens: 356, #ops: 0, parent:1071]
---analyzing modificationPoint position: 291
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  permutation[k] = pk
---analyzing modificationPoint position: 16
---modifPoint 1 not mutation generated in  double correction = fp / (delta * sum2)
---analyzing modificationPoint position: 64
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  dxNorm = 0
---analyzing modificationPoint position: 110
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  if (nSing < solvedCols) { 	work[j] = 0; }
---analyzing modificationPoint position: 79
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  lmDir[j] = diagR[pj]
---analyzing modificationPoint position: 51
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  sum2 += sum * sum
---analyzing modificationPoint position: 95
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  sin = cos * tan
---analyzing modificationPoint position: 231
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 7 not mutation generated in  // evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]
---analyzing modificationPoint position: 197
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 8 not mutation generated in  for (int i = 0; i <= j; ++i) { 	work1[i] += jacobian[i][pj] * dirJ; }
---analyzing modificationPoint position: 27
Templates availables28
Attempts Base Ingredients  1 total 28
Attempts Base Ingredients  2 total 28
vars from patch [work1, pj, diag, dxNorm]
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: dxNorm spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java539
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `work1[pj] *= diag[pj] / dxNorm` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 539, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `work1[pj] *= diag[pj] / dxNorm` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1072, #gens: 356, #ops: 1, parent:1071] gen mutated: 1 , gen not mut: 9, gen not applied  0
-The child compiles: id 1072
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1072/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 18] ,[]
-Valid?: |false|10|18|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(536): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * work1[permutation[i]] ` -topatch--> `work1[pj] *= diag[pj] / dxNorm` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1071(f=2.0), 1072(f=10.0), )
Selected to next generation: IDs2--> (1071(f=2.0), )
----------Running generation: 537, population size: 1

***** Generation 537 : 0
**Parent Variant: [Variant id: 1073, #gens: 356, #ops: 0, parent:-]

--Child created id: 1074
--Creating new operations for variant [Variant id: 1074, #gens: 356, #ops: 0, parent:1073]
---analyzing modificationPoint position: 340
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  targetValues = target.clone()
---analyzing modificationPoint position: 237
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  dxNorm = java.lang.Math.sqrt(dxNorm)
---analyzing modificationPoint position: 352
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch []
location: AbstractLeastSquaresOptimizer.java119
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxEvaluations(java.lang.Integer.MAX_VALUE) ` -topatch--> `setConvergenceChecker(new org.apache.commons.math.optimization.SimpleVectorialValueChecker())` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 119, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxEvaluations(java.lang.Integer.MAX_VALUE) ` -topatch--> `setConvergenceChecker(new org.apache.commons.math.optimization.SimpleVectorialValueChecker())` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1074, #gens: 356, #ops: 1, parent:1073] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1074
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1074/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(537): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxEvaluations(java.lang.Integer.MAX_VALUE) ` -topatch--> `setConvergenceChecker(new org.apache.commons.math.optimization.SimpleVectorialValueChecker())` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1073(f=2.0), 1074(f=18.0), )
Selected to next generation: IDs2--> (1073(f=2.0), )
----------Running generation: 538, population size: 1

***** Generation 538 : 0
**Parent Variant: [Variant id: 1075, #gens: 356, #ops: 0, parent:-]

--Child created id: 1076
--Creating new operations for variant [Variant id: 1076, #gens: 356, #ops: 0, parent:1075]
---analyzing modificationPoint position: 117
location: LevenbergMarquardtOptimizer.java750
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = (work[j] - sum) / lmDiag[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1076, #gens: 355, #ops: 1, parent:1075] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1076
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1076/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(538): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = (work[j] - sum) / lmDiag[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1075(f=2.0), 1076(f=15.0), )
Selected to next generation: IDs2--> (1075(f=2.0), )
----------Running generation: 539, population size: 1

***** Generation 539 : 0
**Parent Variant: [Variant id: 1077, #gens: 356, #ops: 0, parent:-]

--Child created id: 1078
--Creating new operations for variant [Variant id: 1078, #gens: 356, #ops: 0, parent:1077]
---analyzing modificationPoint position: 272
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int i = 0; i < jacobian.length; ++i) { 	double akk = jacobian[i][k]; 	norm2 += akk * akk; }
---analyzing modificationPoint position: 129
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  rank = solvedCols
---analyzing modificationPoint position: 308
location: LevenbergMarquardtOptimizer.java212
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.parRelativeTolerance = parRelativeTolerance ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1078, #gens: 355, #ops: 1, parent:1077] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1078
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1078/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(539): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.parRelativeTolerance = parRelativeTolerance ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1077(f=2.0), 1078(f=6.0), )
Selected to next generation: IDs2--> (1077(f=2.0), )
----------Running generation: 540, population size: 1

***** Generation 540 : 0
**Parent Variant: [Variant id: 1079, #gens: 356, #ops: 0, parent:-]

--Child created id: 1080
--Creating new operations for variant [Variant id: 1080, #gens: 356, #ops: 0, parent:1079]
---analyzing modificationPoint position: 167
location: LevenbergMarquardtOptimizer.java329
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `diag[j] = java.lang.Math.max(diag[j], jacNorm[j]) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1080, #gens: 355, #ops: 1, parent:1079] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1080
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1080/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(540): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `diag[j] = java.lang.Math.max(diag[j], jacNorm[j]) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1079(f=2.0), 1080(f=5.0), )
Selected to next generation: IDs2--> (1079(f=2.0), )
----------Running generation: 541, population size: 1

***** Generation 541 : 0
**Parent Variant: [Variant id: 1081, #gens: 356, #ops: 0, parent:-]

--Child created id: 1082
--Creating new operations for variant [Variant id: 1082, #gens: 356, #ops: 0, parent:1081]
---analyzing modificationPoint position: 66
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java588
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 588, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1082, #gens: 357, #ops: 1, parent:1081] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1082
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1082/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(541): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1081(f=2.0), 1082(f=2.0), )
Selected to next generation: IDs2--> (1081(f=2.0), )
----------Running generation: 542, population size: 1

***** Generation 542 : 0
**Parent Variant: [Variant id: 1083, #gens: 356, #ops: 0, parent:-]

--Child created id: 1084
--Creating new operations for variant [Variant id: 1084, #gens: 356, #ops: 0, parent:1083]
---analyzing modificationPoint position: 36
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, solvedCols, permutation, lmDir, pj, work1, i, jacobian, dirJ]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: dirJ spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java427
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 427, pointed element: CtForImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 1084, #gens: 357, #ops: 1, parent:1083] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1084
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1084/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(542): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `// compute the scaled predicted reduction // and the scaled directional derivative for (int j = 0; j[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1083(f=2.0), 1084(f=2.0), )
Selected to next generation: IDs2--> (1083(f=2.0), )
----------Running generation: 543, population size: 1

***** Generation 543 : 0
**Parent Variant: [Variant id: 1085, #gens: 356, #ops: 0, parent:-]

--Child created id: 1086
--Creating new operations for variant [Variant id: 1086, #gens: 356, #ops: 0, parent:1085]
---analyzing modificationPoint position: 126
---modifPoint 0 not mutation generated in  return java.lang.Math.sqrt(getChiSquare() / rows)
---analyzing modificationPoint position: 116
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 1 not mutation generated in  sum += jacobian[i][pj] * work[i]
---analyzing modificationPoint position: 75
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [rank, k, permutation, lmDir, pk, diagR, i, ypk, jacobian]
--> var from patch: rank spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: k spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diagR spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ypk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java662
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...] ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 662, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...] ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 1086, #gens: 357, #ops: 1, parent:1085] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1086
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1086/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(543): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...] ` -topatch--> `for (int k = rank - 1; k >= 0; --k) { 	int pk = permutation[k]; 	double ypk = lmDir[pk] / diagR[pk];[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1085(f=2.0), 1086(f=13.0), )
Selected to next generation: IDs2--> (1085(f=2.0), )
----------Running generation: 544, population size: 1

***** Generation 544 : 0
**Parent Variant: [Variant id: 1087, #gens: 356, #ops: 0, parent:-]

--Child created id: 1088
--Creating new operations for variant [Variant id: 1088, #gens: 356, #ops: 0, parent:1087]
---analyzing modificationPoint position: 248
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  // arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)
---analyzing modificationPoint position: 252
location: LevenbergMarquardtOptimizer.java249
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation = new int[cols] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1088, #gens: 355, #ops: 1, parent:1087] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1088
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1088/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(544): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `permutation = new int[cols] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1087(f=2.0), 1088(f=18.0), )
Selected to next generation: IDs2--> (1087(f=2.0), )
----------Running generation: 545, population size: 1

***** Generation 545 : 0
**Parent Variant: [Variant id: 1089, #gens: 356, #ops: 0, parent:-]

--Child created id: 1090
--Creating new operations for variant [Variant id: 1090, #gens: 356, #ops: 0, parent:1089]
---analyzing modificationPoint position: 120
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5
---analyzing modificationPoint position: 178
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	lmDir[pj] = -lmDir[pj]; 	point[pj][...]
---analyzing modificationPoint position: 86
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  lmDiag[j] = dpj
---analyzing modificationPoint position: 240
location: LevenbergMarquardtOptimizer.java859
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = 0; k < cols; ++k) { 	int pk = permutation[k]; 	double gamma = 0; 	for (int i = k; i < r[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1090, #gens: 355, #ops: 1, parent:1089] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1090
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1090/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(545): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int k = 0; k < cols; ++k) { 	int pk = permutation[k]; 	double gamma = 0; 	for (int i = k; i < r[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1089(f=2.0), 1090(f=18.0), )
Selected to next generation: IDs2--> (1089(f=2.0), )
----------Running generation: 546, population size: 1

***** Generation 546 : 0
**Parent Variant: [Variant id: 1091, #gens: 356, #ops: 0, parent:-]

--Child created id: 1092
--Creating new operations for variant [Variant id: 1092, #gens: 356, #ops: 0, parent:1091]
---analyzing modificationPoint position: 65
location: LevenbergMarquardtOptimizer.java587
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1092, #gens: 355, #ops: 1, parent:1091] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1092
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1092/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(546): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1091(f=2.0), 1092(f=15.0), )
Selected to next generation: IDs2--> (1091(f=2.0), )
----------Running generation: 547, population size: 1

***** Generation 547 : 0
**Parent Variant: [Variant id: 1093, #gens: 356, #ops: 0, parent:-]

--Child created id: 1094
--Creating new operations for variant [Variant id: 1094, #gens: 356, #ops: 0, parent:1093]
---analyzing modificationPoint position: 213
location: LevenbergMarquardtOptimizer.java414
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// successful iteration, update the norm firstIteration = false ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1094, #gens: 355, #ops: 1, parent:1093] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1094
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1094/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(547): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// successful iteration, update the norm firstIteration = false ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1093(f=2.0), 1094(f=5.0), )
Selected to next generation: IDs2--> (1093(f=2.0), )
----------Running generation: 548, population size: 1

***** Generation 548 : 0
**Parent Variant: [Variant id: 1095, #gens: 356, #ops: 0, parent:-]

--Child created id: 1096
--Creating new operations for variant [Variant id: 1096, #gens: 356, #ops: 0, parent:1095]
---analyzing modificationPoint position: 65
Templates availables50
Attempts Base Ingredients  1 total 50
Name Conflict [lmPar, paru, solvedCols, permutation, work1, diag, qy, work2, work3, dxNorm, lmDir, fp, delta, parl, jacobian, sum2]
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]
---analyzing modificationPoint position: 5
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [this.costRelativeTolerance]
--> var from patch: this.costRelativeTolerance spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java607
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 607, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1096, #gens: 357, #ops: 1, parent:1095] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1096
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1096/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(548): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `this.costRelativeTolerance = costRelativeTolerance` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1095(f=2.0), 1096(f=2.0), )
Selected to next generation: IDs2--> (1095(f=2.0), )
----------Running generation: 549, population size: 1

***** Generation 549 : 0
**Parent Variant: [Variant id: 1097, #gens: 356, #ops: 0, parent:-]

--Child created id: 1098
--Creating new operations for variant [Variant id: 1098, #gens: 356, #ops: 0, parent:1097]
---analyzing modificationPoint position: 116
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  sum += jacobian[i][pj] * work[i]
---analyzing modificationPoint position: 10
location: LevenbergMarquardtOptimizer.java613
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	work1[permutation[i]] -= jacobian[i][pj] * tmp; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1098, #gens: 355, #ops: 1, parent:1097] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1098
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1098/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(549): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	work1[permutation[i]] -= jacobian[i][pj] * tmp; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1097(f=2.0), 1098(f=5.0), )
Selected to next generation: IDs2--> (1097(f=2.0), )
----------Running generation: 550, population size: 1

***** Generation 550 : 0
**Parent Variant: [Variant id: 1099, #gens: 356, #ops: 0, parent:-]

--Child created id: 1100
--Creating new operations for variant [Variant id: 1100, #gens: 356, #ops: 0, parent:1099]
---analyzing modificationPoint position: 115
location: LevenbergMarquardtOptimizer.java747
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1100, #gens: 355, #ops: 1, parent:1099] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1100
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1100/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(550): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1099(f=2.0), 1100(f=12.0), )
Selected to next generation: IDs2--> (1099(f=2.0), )
----------Running generation: 551, population size: 1

***** Generation 551 : 0
**Parent Variant: [Variant id: 1101, #gens: 356, #ops: 0, parent:-]

--Child created id: 1102
--Creating new operations for variant [Variant id: 1102, #gens: 356, #ops: 0, parent:1101]
---analyzing modificationPoint position: 87
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]
---analyzing modificationPoint position: 59
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double sPar = java.lang.Math.sqrt(lmPar)
---analyzing modificationPoint position: 43
location: LevenbergMarquardtOptimizer.java529
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1102, #gens: 355, #ops: 1, parent:1101] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1102
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1102/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(551): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1101(f=2.0), 1102(f=7.0), )
Selected to next generation: IDs2--> (1101(f=2.0), )
----------Running generation: 552, population size: 1

***** Generation 552 : 0
**Parent Variant: [Variant id: 1103, #gens: 356, #ops: 0, parent:-]

--Child created id: 1104
--Creating new operations for variant [Variant id: 1104, #gens: 356, #ops: 0, parent:1103]
---analyzing modificationPoint position: 115
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, lmDir, work1, jacobian]
---modifPoint 0 not mutation generated in  for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; }
---analyzing modificationPoint position: 25
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 7
---modifPoint 2 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 0
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 3 not mutation generated in  tmp = 0.1
---analyzing modificationPoint position: 74
---modifPoint 4 not mutation generated in  return
---analyzing modificationPoint position: 101
---modifPoint 5 not mutation generated in  double rik = jacobian[i][pk]
---analyzing modificationPoint position: 70
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  dxNorm = java.lang.Math.sqrt(dxNorm)
---analyzing modificationPoint position: 22
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 7 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 277
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 8 not mutation generated in  // select the column with the greatest norm on active components int nextColumn = -1
---analyzing modificationPoint position: 155
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 9 not mutation generated in  // check orthogonality between function vector and jacobian columns double maxCosine = 0
---analyzing modificationPoint position: 163
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 10 not mutation generated in  sum += jacobian[i][pj] * residuals[i]
---analyzing modificationPoint position: 21
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 11 not mutation generated in  work1[pj] *= diag[pj] / dxNorm
---analyzing modificationPoint position: 13
location: LevenbergMarquardtOptimizer.java618
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	double s = work1[permutation[j]]; 	sum2 += s * s; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1104, #gens: 355, #ops: 1, parent:1103] gen mutated: 1 , gen not mut: 12, gen not applied  0
-The child compiles: id 1104
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1104/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(552): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	double s = work1[permutation[j]]; 	sum2 += s * s; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1103(f=2.0), 1104(f=12.0), )
Selected to next generation: IDs2--> (1103(f=2.0), )
----------Running generation: 553, population size: 1

***** Generation 553 : 0
**Parent Variant: [Variant id: 1105, #gens: 356, #ops: 0, parent:-]

--Child created id: 1106
--Creating new operations for variant [Variant id: 1106, #gens: 356, #ops: 0, parent:1105]
---analyzing modificationPoint position: 341
location: AbstractLeastSquaresOptimizer.java336
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1106, #gens: 355, #ops: 1, parent:1105] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1106
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1106/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(553): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1105(f=2.0), 1106(f=18.0), )
Selected to next generation: IDs2--> (1105(f=2.0), )
----------Running generation: 554, population size: 1

***** Generation 554 : 0
**Parent Variant: [Variant id: 1107, #gens: 356, #ops: 0, parent:-]

--Child created id: 1108
--Creating new operations for variant [Variant id: 1108, #gens: 356, #ops: 0, parent:1107]
---analyzing modificationPoint position: 63
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  determineLMDirection(qy, work1, work2, work3)
---analyzing modificationPoint position: 24
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 168
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  // inner loop for (double ratio = 0; ratio < 1.0E-4;) {  	// save the state 	for (int j = 0; j < sol[...]
---analyzing modificationPoint position: 148
---modifPoint 3 not mutation generated in  double dk = jacNorm[k]
---analyzing modificationPoint position: 231
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  // evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]
---analyzing modificationPoint position: 47
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
--> var from patch: org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: orthoTolerance spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java552
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 552, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 1108, #gens: 357, #ops: 1, parent:1107] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 1108, errors: [LevenbergMarquardtOptimizer.java:553: error: unreachable statement
			double sum = 0;
			       ^, LevenbergMarquardtOptimizer.java:552: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
			int pj = permutation[j]; 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);
			                         			^]
Ingredient counter is Zero
---Undoing: gnrtn(554): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.excepti[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1107(f=2.0), 1108(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1107(f=2.0), )
----------Running generation: 555, population size: 1

***** Generation 555 : 0
**Parent Variant: [Variant id: 1109, #gens: 356, #ops: 0, parent:-]

--Child created id: 1110
--Creating new operations for variant [Variant id: 1110, #gens: 356, #ops: 0, parent:1109]
---analyzing modificationPoint position: 52
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [solvedCols]
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java559
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 559, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1110, #gens: 356, #ops: 1, parent:1109] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1110, errors: [LevenbergMarquardtOptimizer.java:740: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:740: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:740: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:741: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:741: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:741: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:742: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:742: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:743: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:743: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:743: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:744: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:744: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:744: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:744: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:745: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:745: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:745: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:745: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:745: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:746: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:747: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:747: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:745: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:747: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:747: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:747: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:747: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:747: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:747: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:748: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:748: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:747: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:748: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:748: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:749: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:749: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:749: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:750: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:750: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:750: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:751: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:751: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:752: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:752: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:751: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:752: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:752: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:752: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:752: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:754: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:754: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:755: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:755: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:755: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:756: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:757: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:758: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:759: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:759: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:760: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:761: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:761: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:762: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:762: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:762: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:762: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:762: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:762: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:762: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:762: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:762: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:762: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:762: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:762: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:762: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:762: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:790: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:790: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:790: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:790: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:790: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(555): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double gNorm = java.lang.Math.sqrt(sum2) ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1109(f=2.0), 1110(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1109(f=2.0), )
----------Running generation: 556, population size: 1

***** Generation 556 : 0
**Parent Variant: [Variant id: 1111, #gens: 356, #ops: 0, parent:-]

--Child created id: 1112
--Creating new operations for variant [Variant id: 1112, #gens: 356, #ops: 0, parent:1111]
---analyzing modificationPoint position: 98
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  qtbpj = ((-sin) * work[k]) + (cos * qtbpj)
---analyzing modificationPoint position: 245
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  gamma *= beta[pk]
---analyzing modificationPoint position: 106
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  jacobian[j][permutation[j]] = lmDir[j]
---analyzing modificationPoint position: 104
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 3 not mutation generated in  jacobian[i][pk] = temp2
---analyzing modificationPoint position: 96
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  // compute the modified diagonal element of R and // the modified element of (Qty,0) jacobian[k][pk][...]
---analyzing modificationPoint position: 189
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  // compute the scaled actual reduction double actRed = -1.0
---analyzing modificationPoint position: 15
location: LevenbergMarquardtOptimizer.java620
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1112, #gens: 355, #ops: 1, parent:1111] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child does NOT compile: 1112, errors: [LevenbergMarquardtOptimizer.java:620: error: variable declaration not allowed here
				double s = work1[permutation[j]];
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(556): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1111(f=2.0), 1112(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1111(f=2.0), )
----------Running generation: 557, population size: 1

***** Generation 557 : 0
**Parent Variant: [Variant id: 1113, #gens: 356, #ops: 0, parent:-]

--Child created id: 1114
--Creating new operations for variant [Variant id: 1114, #gens: 356, #ops: 0, parent:1113]
---analyzing modificationPoint position: 319
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch []
location: AbstractLeastSquaresOptimizer.java192
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double factor = -java.lang.Math.sqrt(residualsWeights[i]) ` -topatch--> `setConvergenceChecker(new org.apache.commons.math.optimization.SimpleVectorialValueChecker())` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 192, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double factor = -java.lang.Math.sqrt(residualsWeights[i]) ` -topatch--> `setConvergenceChecker(new org.apache.commons.math.optimization.SimpleVectorialValueChecker())` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1114, #gens: 357, #ops: 1, parent:1113] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1114
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1114/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(557): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double factor = -java.lang.Math.sqrt(residualsWeights[i]) ` -topatch--> `setConvergenceChecker(new org.apache.commons.math.optimization.SimpleVectorialValueChecker())` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1113(f=2.0), 1114(f=15.0), )
Selected to next generation: IDs2--> (1113(f=2.0), )
----------Running generation: 558, population size: 1

***** Generation 558 : 0
**Parent Variant: [Variant id: 1115, #gens: 356, #ops: 0, parent:-]

--Child created id: 1116
--Creating new operations for variant [Variant id: 1116, #gens: 356, #ops: 0, parent:1115]
---analyzing modificationPoint position: 104
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  jacobian[i][pk] = temp2
---analyzing modificationPoint position: 56
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 1 not mutation generated in  if (lmPar == 0) { 	lmPar = gNorm / dxNorm; }
---analyzing modificationPoint position: 95
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [jacNorm, cols]
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java704
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = cos * tan ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 704, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = cos * tan ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1116, #gens: 357, #ops: 1, parent:1115] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1116
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1116/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(558): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = cos * tan ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1115(f=2.0), 1116(f=2.0), )
Selected to next generation: IDs2--> (1115(f=2.0), )
----------Running generation: 559, population size: 1

***** Generation 559 : 0
**Parent Variant: [Variant id: 1117, #gens: 356, #ops: 0, parent:-]

--Child created id: 1118
--Creating new operations for variant [Variant id: 1118, #gens: 356, #ops: 0, parent:1117]
---analyzing modificationPoint position: 0
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  tmp = 0.1
---analyzing modificationPoint position: 86
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmDiag[j] = dpj
---analyzing modificationPoint position: 35
location: LevenbergMarquardtOptimizer.java426
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1118, #gens: 355, #ops: 1, parent:1117] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1118
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1118/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 18] ,[]
-Valid?: |false|4|18|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(559): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1117(f=2.0), 1118(f=4.0), )
Selected to next generation: IDs2--> (1117(f=2.0), )
----------Running generation: 560, population size: 1

***** Generation 560 : 0
**Parent Variant: [Variant id: 1119, #gens: 356, #ops: 0, parent:-]

--Child created id: 1120
--Creating new operations for variant [Variant id: 1120, #gens: 356, #ops: 0, parent:1119]
---analyzing modificationPoint position: 164
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost))
---analyzing modificationPoint position: 4
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java606
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 606, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1120, #gens: 357, #ops: 1, parent:1119] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1120
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1120/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(560): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1119(f=2.0), 1120(f=2.0), )
Selected to next generation: IDs2--> (1119(f=2.0), )
----------Running generation: 561, population size: 1

***** Generation 561 : 0
**Parent Variant: [Variant id: 1121, #gens: 356, #ops: 0, parent:-]

--Child created id: 1122
--Creating new operations for variant [Variant id: 1122, #gens: 356, #ops: 0, parent:1121]
---analyzing modificationPoint position: 15
Templates availables28
Attempts Base Ingredients  1 total 28
Attempts Base Ingredients  2 total 28
---modifPoint 0 not mutation generated in  sum2 += s * s
---analyzing modificationPoint position: 315
location: AbstractLeastSquaresOptimizer.java185
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian = jF.value(point) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1122, #gens: 355, #ops: 1, parent:1121] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1122
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1122/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(561): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian = jF.value(point) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1121(f=2.0), 1122(f=18.0), )
Selected to next generation: IDs2--> (1121(f=2.0), )
----------Running generation: 562, population size: 1

***** Generation 562 : 0
**Parent Variant: [Variant id: 1123, #gens: 356, #ops: 0, parent:-]

--Child created id: 1124
--Creating new operations for variant [Variant id: 1124, #gens: 356, #ops: 0, parent:1123]
---analyzing modificationPoint position: 135
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = k; j < jacobian.length; ++j) { 	gamma += jacobian[j][pk] * jacobian[j][permutation[k + [...]
---analyzing modificationPoint position: 104
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [java.lang.Double.NEGATIVE_INFINITY]
--> var from patch: java.lang.Double.NEGATIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java719
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pk] = temp2 ` -topatch--> `double ak2 = java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 719, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pk] = temp2 ` -topatch--> `double ak2 = java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1124, #gens: 357, #ops: 1, parent:1123] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1124, errors: [LevenbergMarquardtOptimizer.java:826: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:826: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:826: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:826: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:826: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(562): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobian[i][pk] = temp2 ` -topatch--> `double ak2 = java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1123(f=2.0), 1124(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1123(f=2.0), )
----------Running generation: 563, population size: 1

***** Generation 563 : 0
**Parent Variant: [Variant id: 1125, #gens: 356, #ops: 0, parent:-]

--Child created id: 1126
--Creating new operations for variant [Variant id: 1126, #gens: 356, #ops: 0, parent:1125]
---analyzing modificationPoint position: 36
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java427
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 427, pointed element: CtCommentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 

--Summary Creation: for variant [Variant id: 1126, #gens: 357, #ops: 1, parent:1125] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1126
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1126/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(563): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; } ` -topatch--> `// tests for convergence.` (spoon.support.reflect.code.CtCommentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1125(f=2.0), 1126(f=2.0), )
Selected to next generation: IDs2--> (1125(f=2.0), )
----------Running generation: 564, population size: 1

***** Generation 564 : 0
**Parent Variant: [Variant id: 1127, #gens: 356, #ops: 0, parent:-]

--Child created id: 1128
--Creating new operations for variant [Variant id: 1128, #gens: 356, #ops: 0, parent:1127]
---analyzing modificationPoint position: 77
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java664
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; } ` -topatch--> `setParRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 664, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; } ` -topatch--> `setParRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1128, #gens: 357, #ops: 1, parent:1127] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1128
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1128/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(564): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; } ` -topatch--> `setParRelativeTolerance(1.0E-10)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1127(f=2.0), 1128(f=2.0), )
Selected to next generation: IDs2--> (1127(f=2.0), )
----------Running generation: 565, population size: 1

***** Generation 565 : 0
**Parent Variant: [Variant id: 1129, #gens: 356, #ops: 0, parent:-]

--Child created id: 1130
--Creating new operations for variant [Variant id: 1130, #gens: 356, #ops: 0, parent:1129]
---analyzing modificationPoint position: 90
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  // determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...]
---analyzing modificationPoint position: 68
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [dxNorm]
--> var from patch: dxNorm spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java590
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work3[pj] = s ` -topatch--> `dxNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 590, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work3[pj] = s ` -topatch--> `dxNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1130, #gens: 356, #ops: 1, parent:1129] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1130
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1130/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(565): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work3[pj] = s ` -topatch--> `dxNorm = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1129(f=2.0), 1130(f=9.0), )
Selected to next generation: IDs2--> (1129(f=2.0), )
----------Running generation: 566, population size: 1

***** Generation 566 : 0
**Parent Variant: [Variant id: 1131, #gens: 356, #ops: 0, parent:-]

--Child created id: 1132
--Creating new operations for variant [Variant id: 1132, #gens: 356, #ops: 0, parent:1131]
---analyzing modificationPoint position: 160
Templates availables34
Attempts Base Ingredients  1 total 34
Name Conflict [cost, solvedCols, permutation, jacNorm, jacobian, residuals, maxCosine]
---modifPoint 0 not mutation generated in  if (s != 0) { 	double sum = 0; 	for (int i = 0; i <= j; ++i) { 		sum += jacobian[i][pj] * residuals[[...]
---analyzing modificationPoint position: 26
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [fp, delta, lmPar]
--> var from patch: fp spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java538
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; } ` -topatch--> `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 538, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; } ` -topatch--> `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 1132, #gens: 357, #ops: 1, parent:1131] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1132
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1132/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(566): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < j; ++i) { 	sum += jacobian[i][pj] * work1[permutation[i]]; } ` -topatch--> `if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1131(f=2.0), 1132(f=2.0), )
Selected to next generation: IDs2--> (1131(f=2.0), )
----------Running generation: 567, population size: 1

***** Generation 567 : 0
**Parent Variant: [Variant id: 1133, #gens: 356, #ops: 0, parent:-]

--Child created id: 1134
--Creating new operations for variant [Variant id: 1134, #gens: 356, #ops: 0, parent:1133]
---analyzing modificationPoint position: 116
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  sum += jacobian[i][pj] * work[i]
---analyzing modificationPoint position: 63
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java584
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 584, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1134, #gens: 357, #ops: 1, parent:1133] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1134
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1134/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(567): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `determineLMDirection(qy, work1, work2, work3) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1133(f=2.0), 1134(f=2.0), )
Selected to next generation: IDs2--> (1133(f=2.0), )
----------Running generation: 568, population size: 1

***** Generation 568 : 0
**Parent Variant: [Variant id: 1135, #gens: 356, #ops: 0, parent:-]

--Child created id: 1136
--Creating new operations for variant [Variant id: 1136, #gens: 356, #ops: 0, parent:1135]
---analyzing modificationPoint position: 229
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java502
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < k; ++i) { 	lmDir[permutation[i]] -= ypk * jacobian[i][pk]; } ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 502, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < k; ++i) { 	lmDir[permutation[i]] -= ypk * jacobian[i][pk]; } ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1136, #gens: 357, #ops: 1, parent:1135] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1136
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1136/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(568): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < k; ++i) { 	lmDir[permutation[i]] -= ypk * jacobian[i][pk]; } ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1135(f=2.0), 1136(f=2.0), )
Selected to next generation: IDs2--> (1135(f=2.0), )
----------Running generation: 569, population size: 1

***** Generation 569 : 0
**Parent Variant: [Variant id: 1137, #gens: 356, #ops: 0, parent:-]

--Child created id: 1138
--Creating new operations for variant [Variant id: 1138, #gens: 356, #ops: 0, parent:1137]
---analyzing modificationPoint position: 18
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  // compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction)
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 32
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  final double cotan = rkk / lmDiag[k]
---analyzing modificationPoint position: 10
Templates availables50
Attempts Base Ingredients  1 total 50
Name Conflict [solvedCols, permutation, lmDir, point, oldX, diag, lmNorm]
---modifPoint 3 not mutation generated in  for (int i = j + 1; i < solvedCols; ++i) { 	work1[permutation[i]] -= jacobian[i][pj] * tmp; }
---analyzing modificationPoint position: 77
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java664
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; } ` -topatch--> `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 664, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; } ` -topatch--> `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1138, #gens: 357, #ops: 1, parent:1137] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 1138, errors: [LevenbergMarquardtOptimizer.java:736: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:736: error: ')' expected
		for (int j = 0; j < solvedCols; ++j) {
		          ^, LevenbergMarquardtOptimizer.java:736: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		             ^, LevenbergMarquardtOptimizer.java:736: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		              ^, LevenbergMarquardtOptimizer.java:736: error: ';' expected
		for (int j = 0; j < solvedCols; ++j) {
		               ^, LevenbergMarquardtOptimizer.java:736: error: > expected
		for (int j = 0; j < solvedCols; ++j) {
		                              ^, LevenbergMarquardtOptimizer.java:736: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		                               ^, LevenbergMarquardtOptimizer.java:736: error: '(' expected
		for (int j = 0; j < solvedCols; ++j) {
		                                  ^, LevenbergMarquardtOptimizer.java:736: error: illegal start of type
		for (int j = 0; j < solvedCols; ++j) {
		                                   ^, LevenbergMarquardtOptimizer.java:736: error: <identifier> expected
		for (int j = 0; j < solvedCols; ++j) {
		                                    ^, LevenbergMarquardtOptimizer.java:736: error: ';' expected
		for (int j = 0; j < solvedCols; ++j) {
		                                      ^, LevenbergMarquardtOptimizer.java:737: error: illegal start of type
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			   ^, LevenbergMarquardtOptimizer.java:737: error: <identifier> expected
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			    ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			     ^, LevenbergMarquardtOptimizer.java:737: error: illegal start of type
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			           ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			             ^, LevenbergMarquardtOptimizer.java:737: error: <identifier> expected
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			                              ^, LevenbergMarquardtOptimizer.java:737: error: <identifier> expected
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			                                            ^, LevenbergMarquardtOptimizer.java:737: error: illegal start of type
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			                                             ^, LevenbergMarquardtOptimizer.java:737: error: <identifier> expected
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			                                              ^, LevenbergMarquardtOptimizer.java:737: error: ';' expected
			if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
			                                                ^, LevenbergMarquardtOptimizer.java:738: error: illegal start of type
				nSing = j;
				      ^, LevenbergMarquardtOptimizer.java:740: error: class, interface, or enum expected
			if (nSing < solvedCols) {
			^, LevenbergMarquardtOptimizer.java:742: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                        ^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                                ^, LevenbergMarquardtOptimizer.java:747: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                               ^, LevenbergMarquardtOptimizer.java:750: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:752: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                                  ^, LevenbergMarquardtOptimizer.java:758: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:789: error: class, interface, or enum expected
			double norm2 = 0;
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                                     ^, LevenbergMarquardtOptimizer.java:792: error: class, interface, or enum expected
				norm2 += akk * akk;
				^, LevenbergMarquardtOptimizer.java:793: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:795: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:802: error: class, interface, or enum expected
			double ak2 = java.lang.Double.NEGATIVE_INFINITY;
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:807: error: class, interface, or enum expected
					norm2 += aki * aki;
					^, LevenbergMarquardtOptimizer.java:808: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:812: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:815: error: class, interface, or enum expected
					ak2 = norm2;
					^, LevenbergMarquardtOptimizer.java:816: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:820: error: class, interface, or enum expected
				return;
				^, LevenbergMarquardtOptimizer.java:821: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:823: error: class, interface, or enum expected
			permutation[nextColumn] = permutation[k];
			^, LevenbergMarquardtOptimizer.java:824: error: class, interface, or enum expected
			permutation[k] = pk;
			^, LevenbergMarquardtOptimizer.java:827: error: class, interface, or enum expected
			double akk = jacobian[k][pk];
			^, LevenbergMarquardtOptimizer.java:828: error: class, interface, or enum expected
			double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2);
			^, LevenbergMarquardtOptimizer.java:829: error: class, interface, or enum expected
			double betak = 1.0 / (ak2 - (akk * alpha));
			^, LevenbergMarquardtOptimizer.java:830: error: class, interface, or enum expected
			beta[pk] = betak;
			^, LevenbergMarquardtOptimizer.java:833: error: class, interface, or enum expected
			diagR[pk] = alpha;
			^, LevenbergMarquardtOptimizer.java:834: error: class, interface, or enum expected
			jacobian[k][pk] -= alpha;
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                              ^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                                      ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:841: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:845: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:852: error: class, interface, or enum expected
	}
	^, LevenbergMarquardtOptimizer.java:860: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:860: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:862: error: class, interface, or enum expected
			double gamma = 0;
			^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:863: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:865: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:867: error: class, interface, or enum expected
			for (int i = k; i < rows; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:869: error: class, interface, or enum expected
			}
			^]
Ingredient counter is Zero
---Undoing: gnrtn(569): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = j + 1; i < solvedCols; ++i) { 	jacobian[i][pj] = jacobian[j][permutation[i]]; } ` -topatch--> `// the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1137(f=2.0), 1138(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1137(f=2.0), )
----------Running generation: 570, population size: 1

***** Generation 570 : 0
**Parent Variant: [Variant id: 1139, #gens: 356, #ops: 0, parent:-]

--Child created id: 1140
--Creating new operations for variant [Variant id: 1140, #gens: 356, #ops: 0, parent:1139]
---analyzing modificationPoint position: 162
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [solvedCols]
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java315
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i <= j; ++i) { 	sum += jacobian[i][pj] * residuals[i]; } ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 315, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i <= j; ++i) { 	sum += jacobian[i][pj] * residuals[i]; } ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1140, #gens: 357, #ops: 1, parent:1139] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1140, errors: [LevenbergMarquardtOptimizer.java:771: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:771: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:771: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:771: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:771: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:771: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:771: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:771: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:771: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:771: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:771: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:777: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:777: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:777: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:777: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:777: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:777: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:777: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:777: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:778: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:778: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:779: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:779: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:780: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:780: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:780: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:781: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:781: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:781: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:781: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:781: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:781: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:782: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:782: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:782: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:782: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:783: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:784: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:784: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:782: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:784: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:784: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:784: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:784: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:784: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:784: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:784: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:786: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:786: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:786: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:787: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:787: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:787: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:788: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:788: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:789: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:789: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:788: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:789: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:789: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:789: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:789: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:791: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:791: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:792: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:792: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:792: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:793: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:795: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:796: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:796: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:798: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:799: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:799: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(570): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i <= j; ++i) { 	sum += jacobian[i][pj] * residuals[i]; } ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1139(f=2.0), 1140(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1139(f=2.0), )
----------Running generation: 571, population size: 1

***** Generation 571 : 0
**Parent Variant: [Variant id: 1141, #gens: 356, #ops: 0, parent:-]

--Child created id: 1142
--Creating new operations for variant [Variant id: 1142, #gens: 356, #ops: 0, parent:1141]
---analyzing modificationPoint position: 179
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 206
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java392
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double dirDer = -(coeff1 + coeff2) ` -topatch--> `// compute the scaled actual reduction double actRed = -1.0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 392, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double dirDer = -(coeff1 + coeff2) ` -topatch--> `// compute the scaled actual reduction double actRed = -1.0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1142, #gens: 356, #ops: 1, parent:1141] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1142, errors: [LevenbergMarquardtOptimizer.java:401: error: cannot find symbol
					(actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;
					                      ^
  symbol:   variable dirDer
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:401: error: cannot find symbol
					(actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;
					                                 ^
  symbol:   variable dirDer
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(571): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double dirDer = -(coeff1 + coeff2) ` -topatch--> `// compute the scaled actual reduction double actRed = -1.0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1141(f=2.0), 1142(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1141(f=2.0), )
----------Running generation: 572, population size: 1

***** Generation 572 : 0
**Parent Variant: [Variant id: 1143, #gens: 356, #ops: 0, parent:-]

--Child created id: 1144
--Creating new operations for variant [Variant id: 1144, #gens: 356, #ops: 0, parent:1143]
---analyzing modificationPoint position: 106
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  jacobian[j][permutation[j]] = lmDir[j]
---analyzing modificationPoint position: 273
---modifPoint 1 not mutation generated in  double akk = jacobian[i][k]
---analyzing modificationPoint position: 31
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  parl = fp / (delta * sum2)
---analyzing modificationPoint position: 150
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 3 not mutation generated in  double xk = dk * point[k]
---analyzing modificationPoint position: 92
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java697
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...] ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 697, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...] ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1144, #gens: 357, #ops: 1, parent:1143] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 1144, errors: [LevenbergMarquardtOptimizer.java:697: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
					double rkk = jacobian[k][pk]; 					incrementIterationsCounter();
					                              					                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(572): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) { 	final double cotan = rkk / lmDiag[k][...] ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1143(f=2.0), 1144(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1143(f=2.0), )
----------Running generation: 573, population size: 1

***** Generation 573 : 0
**Parent Variant: [Variant id: 1145, #gens: 356, #ops: 0, parent:-]

--Child created id: 1146
--Creating new operations for variant [Variant id: 1146, #gens: 356, #ops: 0, parent:1145]
---analyzing modificationPoint position: 137
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  gamma *= betak
---analyzing modificationPoint position: 5
location: LevenbergMarquardtOptimizer.java607
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1146, #gens: 355, #ops: 1, parent:1145] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1146, errors: [LevenbergMarquardtOptimizer.java:607: error: variable declaration not allowed here
				int pj = permutation[j];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(573): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1145(f=2.0), 1146(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1145(f=2.0), )
----------Running generation: 574, population size: 1

***** Generation 574 : 0
**Parent Variant: [Variant id: 1147, #gens: 356, #ops: 0, parent:-]

--Child created id: 1148
--Creating new operations for variant [Variant id: 1148, #gens: 356, #ops: 0, parent:1147]
---analyzing modificationPoint position: 111
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (nSing > 0) { 	for (int j = nSing - 1; j >= 0; --j) { 		int pj = permutation[j]; 		double sum = 0[...]
---analyzing modificationPoint position: 30
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  sum2 += s * s
---analyzing modificationPoint position: 33
location: LevenbergMarquardtOptimizer.java699
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1148, #gens: 355, #ops: 1, parent:1147] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1148, errors: [LevenbergMarquardtOptimizer.java:701: error: variable sin might not have been initialized
						cos = sin * cotan;
						      ^]
Ingredient counter is Zero
---Undoing: gnrtn(574): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1147(f=2.0), 1148(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1147(f=2.0), )
----------Running generation: 575, population size: 1

***** Generation 575 : 0
**Parent Variant: [Variant id: 1149, #gens: 356, #ops: 0, parent:-]

--Child created id: 1150
--Creating new operations for variant [Variant id: 1150, #gens: 356, #ops: 0, parent:1149]
---analyzing modificationPoint position: 69
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  dxNorm += s * s
---analyzing modificationPoint position: 261
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double[] work3 = new double[cols]
---analyzing modificationPoint position: 55
location: LevenbergMarquardtOptimizer.java568
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1150, #gens: 355, #ops: 1, parent:1149] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1150
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1150/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(575): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1149(f=2.0), 1150(f=3.0), )
Selected to next generation: IDs2--> (1149(f=2.0), )
----------Running generation: 576, population size: 1

***** Generation 576 : 0
**Parent Variant: [Variant id: 1151, #gens: 356, #ops: 0, parent:-]

--Child created id: 1152
--Creating new operations for variant [Variant id: 1152, #gens: 356, #ops: 0, parent:1151]
---analyzing modificationPoint position: 237
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  dxNorm = java.lang.Math.sqrt(dxNorm)
---analyzing modificationPoint position: 150
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  double xk = dk * point[k]
---analyzing modificationPoint position: 11
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java614
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 614, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1152, #gens: 357, #ops: 1, parent:1151] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1152
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1152/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(576): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `work1[permutation[i]] -= jacobian[i][pj] * tmp ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1151(f=2.0), 1152(f=2.0), )
Selected to next generation: IDs2--> (1151(f=2.0), )
----------Running generation: 577, population size: 1

***** Generation 577 : 0
**Parent Variant: [Variant id: 1153, #gens: 356, #ops: 0, parent:-]

--Child created id: 1154
--Creating new operations for variant [Variant id: 1154, #gens: 356, #ops: 0, parent:1153]
---analyzing modificationPoint position: 44
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // calculate an upper bound, paru, for the zero of the function sum2 = 0
---analyzing modificationPoint position: 79
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [this.initialStepBoundFactor]
--> var from patch: this.initialStepBoundFactor spoon.support.reflect.code.CtFieldWriteImpl
location: LevenbergMarquardtOptimizer.java667
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[j] = diagR[pj] ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 667, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[j] = diagR[pj] ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1154, #gens: 356, #ops: 1, parent:1153] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1154
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1154/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(577): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[j] = diagR[pj] ` -topatch--> `this.initialStepBoundFactor = initialStepBoundFactor` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1153(f=2.0), 1154(f=13.0), )
Selected to next generation: IDs2--> (1153(f=2.0), )
----------Running generation: 578, population size: 1

***** Generation 578 : 0
**Parent Variant: [Variant id: 1155, #gens: 356, #ops: 0, parent:-]

--Child created id: 1156
--Creating new operations for variant [Variant id: 1156, #gens: 356, #ops: 0, parent:1155]
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [sum2]
--> var from patch: sum2 spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java529
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `// calculate an upper bound, paru, for the zero of the function sum2 = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 529, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `// calculate an upper bound, paru, for the zero of the function sum2 = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1156, #gens: 357, #ops: 1, parent:1155] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1156
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1156/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(578): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `// calculate an upper bound, paru, for the zero of the function sum2 = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1155(f=2.0), 1156(f=2.0), )
Selected to next generation: IDs2--> (1155(f=2.0), )
----------Running generation: 579, population size: 1

***** Generation 579 : 0
**Parent Variant: [Variant id: 1157, #gens: 356, #ops: 0, parent:-]

--Child created id: 1158
--Creating new operations for variant [Variant id: 1158, #gens: 356, #ops: 0, parent:1157]
---analyzing modificationPoint position: 115
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int i = j + 1; i < nSing; ++i) { 	sum += jacobian[i][pj] * work[i]; }
---analyzing modificationPoint position: 49
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java554
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * qy[i] ` -topatch--> `double[] work2 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 554, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * qy[i] ` -topatch--> `double[] work2 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1158, #gens: 357, #ops: 1, parent:1157] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1158, errors: [LevenbergMarquardtOptimizer.java:555: error: variable work2 is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
				sum += jacobian[i][pj] * qy[i]; 				double[] work2 = new double[cols];
				                                				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(579): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum += jacobian[i][pj] * qy[i] ` -topatch--> `double[] work2 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1157(f=2.0), 1158(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1157(f=2.0), )
----------Running generation: 580, population size: 1

***** Generation 580 : 0
**Parent Variant: [Variant id: 1159, #gens: 356, #ops: 0, parent:-]

--Child created id: 1160
--Creating new operations for variant [Variant id: 1160, #gens: 356, #ops: 0, parent:1159]
---analyzing modificationPoint position: 222
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...]
---analyzing modificationPoint position: 309
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  this.orthoTolerance = orthoTolerance
---analyzing modificationPoint position: 355
location: AbstractLeastSquaresOptimizer.java159
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.checker = convergenceChecker ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1160, #gens: 355, #ops: 1, parent:1159] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1160
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1160/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(580): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.checker = convergenceChecker ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1159(f=2.0), 1160(f=2.0), )
Selected to next generation: IDs2--> (1159(f=2.0), )
----------Running generation: 581, population size: 1

***** Generation 581 : 0
**Parent Variant: [Variant id: 1161, #gens: 356, #ops: 0, parent:-]

--Child created id: 1162
--Creating new operations for variant [Variant id: 1162, #gens: 356, #ops: 0, parent:1161]
---analyzing modificationPoint position: 280
---modifPoint 0 not mutation generated in  double norm2 = 0
---analyzing modificationPoint position: 58
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 1 not mutation generated in  // evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...]
---analyzing modificationPoint position: 4
---modifPoint 2 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 190
location: LevenbergMarquardtOptimizer.java369
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((0.1 * cost) < previousCost) { 	double r = cost / previousCost; 	actRed = 1.0 - (r * r); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1162, #gens: 355, #ops: 1, parent:1161] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1162
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1162/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(581): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((0.1 * cost) < previousCost) { 	double r = cost / previousCost; 	actRed = 1.0 - (r * r); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1161(f=2.0), 1162(f=18.0), )
Selected to next generation: IDs2--> (1161(f=2.0), )
----------Running generation: 582, population size: 1

***** Generation 582 : 0
**Parent Variant: [Variant id: 1163, #gens: 356, #ops: 0, parent:-]

--Child created id: 1164
--Creating new operations for variant [Variant id: 1164, #gens: 356, #ops: 0, parent:1163]
---analyzing modificationPoint position: 196
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java379
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[j] = 0 ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 379, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[j] = 0 ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1164, #gens: 357, #ops: 1, parent:1163] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1164, errors: [LevenbergMarquardtOptimizer.java:831: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:831: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:831: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:831: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:831: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:831: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:831: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:831: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:831: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:831: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:831: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:837: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:837: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:837: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:838: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:838: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:838: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:838: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:838: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:838: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:839: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:839: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:840: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:840: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:840: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:841: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:841: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:841: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:841: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:842: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:842: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:842: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:842: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:842: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:842: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:842: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:843: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:842: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:845: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:845: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:846: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:846: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:847: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:847: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:848: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:848: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:849: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:849: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:849: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:851: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:852: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:852: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:852: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:853: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:854: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:855: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:856: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:857: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:858: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:858: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:859: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:859: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(582): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[j] = 0 ` -topatch--> `// select the column with the greatest norm on active components int nextColumn = -1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1163(f=2.0), 1164(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1163(f=2.0), )
----------Running generation: 583, population size: 1

***** Generation 583 : 0
**Parent Variant: [Variant id: 1165, #gens: 356, #ops: 0, parent:-]

--Child created id: 1166
--Creating new operations for variant [Variant id: 1166, #gens: 356, #ops: 0, parent:1165]
---analyzing modificationPoint position: 49
Templates availables294
Attempts Base Ingredients  1 total 294
Name Conflict [solvedCols, permutation, work1, work2, jacobian]
---modifPoint 0 not mutation generated in  sum += jacobian[i][pj] * qy[i]
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 149
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 2 not mutation generated in  if (dk == 0) { 	dk = 1.0; }
---analyzing modificationPoint position: 348
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [this.relativeThreshold, org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RELATIVE_THRESHOLD]
--> var from patch: this.relativeThreshold spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RELATIVE_THRESHOLD spoon.support.reflect.code.CtFieldReadImpl
location: SimpleVectorialValueChecker.java51
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...] ` -topatch--> `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.SimpleVectorialValueChecker line: 51, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...] ` -topatch--> `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1166, #gens: 356, #ops: 1, parent:1165] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1166
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1166/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(583): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...] ` -topatch--> `this.relativeThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_RE[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1165(f=2.0), 1166(f=2.0), )
Selected to next generation: IDs2--> (1165(f=2.0), )
----------Running generation: 584, population size: 1

***** Generation 584 : 0
**Parent Variant: [Variant id: 1167, #gens: 356, #ops: 0, parent:-]

--Child created id: 1168
--Creating new operations for variant [Variant id: 1168, #gens: 356, #ops: 0, parent:1167]
---analyzing modificationPoint position: 25
---modifPoint 0 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 120
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java399
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 399, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1168, #gens: 357, #ops: 1, parent:1167] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1168
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1168/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(584): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp =  (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5 ` -topatch--> `// compute the new point and the norm of the evolution direction double lmNorm = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1167(f=2.0), 1168(f=2.0), )
Selected to next generation: IDs2--> (1167(f=2.0), )
----------Running generation: 585, population size: 1

***** Generation 585 : 0
**Parent Variant: [Variant id: 1169, #gens: 356, #ops: 0, parent:-]

--Child created id: 1170
--Creating new operations for variant [Variant id: 1170, #gens: 356, #ops: 0, parent:1169]
---analyzing modificationPoint position: 330
Templates availables4
Attempts Base Ingredients  1 total 4
---modifPoint 0 not mutation generated in  cost += (residualsWeights[i] * residual) * residual
---analyzing modificationPoint position: 28
---modifPoint 1 not mutation generated in  double s = (work1[pj] - sum) / diagR[pj]
---analyzing modificationPoint position: 132
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  lmPar = 0
---analyzing modificationPoint position: 134
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  double gamma = 0
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, rank, lmDir, permutation, qy]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: rank spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: qy spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java537
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 537, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 1170, #gens: 357, #ops: 1, parent:1169] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 1170, errors: [LevenbergMarquardtOptimizer.java:539: error: variable j is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
				for (int j = 0; j < rank; ++j) { 					lmDir[permutation[j]] = qy[j];} 				for (int i = 0; i < j; ++i) {
				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(585): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `// compute and store in x the gauss-newton direction, if the // jacobian is rank-deficient, obtain a[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1169(f=2.0), 1170(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1169(f=2.0), )
----------Running generation: 586, population size: 1

***** Generation 586 : 0
**Parent Variant: [Variant id: 1171, #gens: 356, #ops: 0, parent:-]

--Child created id: 1172
--Creating new operations for variant [Variant id: 1172, #gens: 356, #ops: 0, parent:1171]
---analyzing modificationPoint position: 72
location: LevenbergMarquardtOptimizer.java595
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `fp = dxNorm - delta ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1172, #gens: 355, #ops: 1, parent:1171] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1172
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1172/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(586): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `fp = dxNorm - delta ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1171(f=2.0), 1172(f=15.0), )
Selected to next generation: IDs2--> (1171(f=2.0), )
----------Running generation: 587, population size: 1

***** Generation 587 : 0
**Parent Variant: [Variant id: 1173, #gens: 356, #ops: 0, parent:-]

--Child created id: 1174
--Creating new operations for variant [Variant id: 1174, #gens: 356, #ops: 0, parent:1173]
---analyzing modificationPoint position: 103
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i])
---analyzing modificationPoint position: 260
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  double[] work2 = new double[cols]
---analyzing modificationPoint position: 280
---modifPoint 2 not mutation generated in  double norm2 = 0
---analyzing modificationPoint position: 156
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 3 not mutation generated in  if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...]
---analyzing modificationPoint position: 139
location: LevenbergMarquardtOptimizer.java843
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1174, #gens: 355, #ops: 1, parent:1173] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 1174
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1174/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(587): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1173(f=2.0), 1174(f=18.0), )
Selected to next generation: IDs2--> (1173(f=2.0), )
----------Running generation: 588, population size: 1

***** Generation 588 : 0
**Parent Variant: [Variant id: 1175, #gens: 356, #ops: 0, parent:-]

--Child created id: 1176
--Creating new operations for variant [Variant id: 1176, #gens: 356, #ops: 0, parent:1175]
---analyzing modificationPoint position: 71
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double previousFP = fp
---analyzing modificationPoint position: 80
location: LevenbergMarquardtOptimizer.java668
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1176, #gens: 355, #ops: 1, parent:1175] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1176
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1176/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(588): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = qy[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1175(f=2.0), 1176(f=15.0), )
Selected to next generation: IDs2--> (1175(f=2.0), )
----------Running generation: 589, population size: 1

***** Generation 589 : 0
**Parent Variant: [Variant id: 1177, #gens: 356, #ops: 0, parent:-]

--Child created id: 1178
--Creating new operations for variant [Variant id: 1178, #gens: 356, #ops: 0, parent:1177]
---analyzing modificationPoint position: 265
---modifPoint 0 not mutation generated in  org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.o[...]
---analyzing modificationPoint position: 85
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java679
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 679, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1178, #gens: 357, #ops: 1, parent:1177] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1178
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1178/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(589): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `// default values for the tuning parameters setConvergenceChecker(null)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1177(f=2.0), 1178(f=2.0), )
Selected to next generation: IDs2--> (1177(f=2.0), )
----------Running generation: 590, population size: 1

***** Generation 590 : 0
**Parent Variant: [Variant id: 1179, #gens: 356, #ops: 0, parent:-]

--Child created id: 1180
--Creating new operations for variant [Variant id: 1180, #gens: 356, #ops: 0, parent:1179]
---analyzing modificationPoint position: 73
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // if the function is small enough, accept the current value // of lmPar, also test for the exceptio[...]
---analyzing modificationPoint position: 52
---modifPoint 1 not mutation generated in  double gNorm = java.lang.Math.sqrt(sum2)
---analyzing modificationPoint position: 128
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [point]
--> var from patch: point spoon.support.reflect.code.CtVariableReadImpl
location: VectorialPointValuePair.java81
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return point ` -topatch--> `return point == null ? null : point.clone()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.VectorialPointValuePair line: 81, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return point ` -topatch--> `return point == null ? null : point.clone()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1180, #gens: 357, #ops: 1, parent:1179] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1180, errors: [VectorialPointValuePair.java:82: error: unreachable statement
	 */ 	public double[] getPointRef() { 		return point == null ? null : point.clone(); 		return point;
	    	                                		                                             		^]
Ingredient counter is Zero
---Undoing: gnrtn(590): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return point ` -topatch--> `return point == null ? null : point.clone()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1179(f=2.0), 1180(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1179(f=2.0), )
----------Running generation: 591, population size: 1

***** Generation 591 : 0
**Parent Variant: [Variant id: 1181, #gens: 356, #ops: 0, parent:-]

--Child created id: 1182
--Creating new operations for variant [Variant id: 1182, #gens: 356, #ops: 0, parent:1181]
---analyzing modificationPoint position: 125
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  return current
---analyzing modificationPoint position: 52
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double gNorm = java.lang.Math.sqrt(sum2)
---analyzing modificationPoint position: 132
location: LevenbergMarquardtOptimizer.java520
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1182, #gens: 355, #ops: 1, parent:1181] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1182
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1182/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(591): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1181(f=2.0), 1182(f=3.0), )
Selected to next generation: IDs2--> (1181(f=2.0), )
----------Running generation: 592, population size: 1

***** Generation 592 : 0
**Parent Variant: [Variant id: 1183, #gens: 356, #ops: 0, parent:-]

--Child created id: 1184
--Creating new operations for variant [Variant id: 1184, #gens: 356, #ops: 0, parent:1183]
---analyzing modificationPoint position: 140
location: LevenbergMarquardtOptimizer.java275
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `qrDecomposition() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1184, #gens: 355, #ops: 1, parent:1183] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1184
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1184/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(592): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `qrDecomposition() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1183(f=2.0), 1184(f=18.0), )
Selected to next generation: IDs2--> (1183(f=2.0), )
----------Running generation: 593, population size: 1

***** Generation 593 : 0
**Parent Variant: [Variant id: 1185, #gens: 356, #ops: 0, parent:-]

--Child created id: 1186
--Creating new operations for variant [Variant id: 1186, #gens: 356, #ops: 0, parent:1185]
---analyzing modificationPoint position: 117
location: LevenbergMarquardtOptimizer.java750
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = (work[j] - sum) / lmDiag[j] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1186, #gens: 355, #ops: 1, parent:1185] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1186
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1186/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(593): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work[j] = (work[j] - sum) / lmDiag[j] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1185(f=2.0), 1186(f=15.0), )
Selected to next generation: IDs2--> (1185(f=2.0), )
----------Running generation: 594, population size: 1

***** Generation 594 : 0
**Parent Variant: [Variant id: 1187, #gens: 356, #ops: 0, parent:-]

--Child created id: 1188
--Creating new operations for variant [Variant id: 1188, #gens: 356, #ops: 0, parent:1187]
---analyzing modificationPoint position: 13
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	double s = work1[permutation[j]]; 	sum2 += s * s; }
---analyzing modificationPoint position: 191
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double r = cost / previousCost
---analyzing modificationPoint position: 12
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 5
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [sum2]
--> var from patch: sum2 spoon.support.reflect.code.CtVariableWriteImpl
location: LevenbergMarquardtOptimizer.java607
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `// calculate an upper bound, paru, for the zero of the function sum2 = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 607, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `// calculate an upper bound, paru, for the zero of the function sum2 = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1188, #gens: 356, #ops: 1, parent:1187] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1188
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1188/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(594): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = (work3[pj] * diag[pj]) / dxNorm ` -topatch--> `// calculate an upper bound, paru, for the zero of the function sum2 = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1187(f=2.0), 1188(f=9.0), )
Selected to next generation: IDs2--> (1187(f=2.0), )
----------Running generation: 595, population size: 1

***** Generation 595 : 0
**Parent Variant: [Variant id: 1189, #gens: 356, #ops: 0, parent:-]

--Child created id: 1190
--Creating new operations for variant [Variant id: 1190, #gens: 356, #ops: 0, parent:1189]
---analyzing modificationPoint position: 257
---modifPoint 0 not mutation generated in  double[] oldX = new double[cols]
---analyzing modificationPoint position: 207
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // ratio of the actual to the predicted reduction ratio = (preRed == 0) ? 0 : actRed / preRed
---analyzing modificationPoint position: 18
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  // compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction)
---analyzing modificationPoint position: 43
location: LevenbergMarquardtOptimizer.java529
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1190, #gens: 355, #ops: 1, parent:1189] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1190
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1190/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(595): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1189(f=2.0), 1190(f=7.0), )
Selected to next generation: IDs2--> (1189(f=2.0), )
----------Running generation: 596, population size: 1

***** Generation 596 : 0
**Parent Variant: [Variant id: 1191, #gens: 356, #ops: 0, parent:-]

--Child created id: 1192
--Creating new operations for variant [Variant id: 1192, #gens: 356, #ops: 0, parent:1191]
---analyzing modificationPoint position: 251
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  beta = new double[cols]
---analyzing modificationPoint position: 85
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch []
location: LevenbergMarquardtOptimizer.java679
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 679, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1192, #gens: 356, #ops: 1, parent:1191] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1192
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1192/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(596): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0) ` -topatch--> `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1191(f=2.0), 1192(f=13.0), )
Selected to next generation: IDs2--> (1191(f=2.0), )
----------Running generation: 597, population size: 1

***** Generation 597 : 0
**Parent Variant: [Variant id: 1193, #gens: 356, #ops: 0, parent:-]

--Child created id: 1194
--Creating new operations for variant [Variant id: 1194, #gens: 356, #ops: 0, parent:1193]
---analyzing modificationPoint position: 133
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 118
location: LevenbergMarquardtOptimizer.java755
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// permute the components of z back to components of lmDir for (int j = 0; j < lmDir.length; ++j) { [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1194, #gens: 355, #ops: 1, parent:1193] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1194
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1194/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(597): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// permute the components of z back to components of lmDir for (int j = 0; j < lmDir.length; ++j) { [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1193(f=2.0), 1194(f=15.0), )
Selected to next generation: IDs2--> (1193(f=2.0), )
----------Running generation: 598, population size: 1

***** Generation 598 : 0
**Parent Variant: [Variant id: 1195, #gens: 356, #ops: 0, parent:-]

--Child created id: 1196
--Creating new operations for variant [Variant id: 1196, #gens: 356, #ops: 0, parent:1195]
---analyzing modificationPoint position: 60
Templates availables50
Attempts Base Ingredients  1 total 50
vars from patch [j, solvedCols, permutation, work1, pj, sPar, diag]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sPar spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java580
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; } ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; }` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 580, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; } ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; }` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 1196, #gens: 356, #ops: 1, parent:1195] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1196
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1196/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(598): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; } ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] = sPar * diag[pj]; }` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1195(f=2.0), 1196(f=2.0), )
Selected to next generation: IDs2--> (1195(f=2.0), )
----------Running generation: 599, population size: 1

***** Generation 599 : 0
**Parent Variant: [Variant id: 1197, #gens: 356, #ops: 0, parent:-]

--Child created id: 1198
--Creating new operations for variant [Variant id: 1198, #gens: 356, #ops: 0, parent:1197]
---analyzing modificationPoint position: 320
Templates availables74
Attempts Base Ingredients  1 total 74
Name Conflict [rows, jacobian, residualsWeights, cols]
---modifPoint 0 not mutation generated in  for (int j = 0; j < cols; ++j) { 	ji[j] *= factor; }
---analyzing modificationPoint position: 69
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  dxNorm += s * s
---analyzing modificationPoint position: 81
location: LevenbergMarquardtOptimizer.java672
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1198, #gens: 355, #ops: 1, parent:1197] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1198
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1198/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(599): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1197(f=2.0), 1198(f=15.0), )
Selected to next generation: IDs2--> (1197(f=2.0), )
----------Running generation: 600, population size: 1

***** Generation 600 : 0
**Parent Variant: [Variant id: 1199, #gens: 356, #ops: 0, parent:-]

--Child created id: 1200
--Creating new operations for variant [Variant id: 1200, #gens: 356, #ops: 0, parent:1199]
---analyzing modificationPoint position: 250
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java247
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm = new double[cols] ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 247, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm = new double[cols] ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1200, #gens: 357, #ops: 1, parent:1199] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1200, errors: [LevenbergMarquardtOptimizer.java:494: error: class, interface, or enum expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                ^, LevenbergMarquardtOptimizer.java:495: error: class, interface, or enum expected
		for (int j = 0; j < rank; ++j) { 			lmDir[permutation[j]] = qy[j];
		                          ^, LevenbergMarquardtOptimizer.java:496: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                   ^, LevenbergMarquardtOptimizer.java:497: error: class, interface, or enum expected
		for (int j = rank; j < cols; ++j) {
		                             ^, LevenbergMarquardtOptimizer.java:499: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                       ^, LevenbergMarquardtOptimizer.java:500: error: class, interface, or enum expected
		for (int k = rank - 1; k >= 0; --k) {
		                               ^, LevenbergMarquardtOptimizer.java:502: error: class, interface, or enum expected
			double ypk = lmDir[pk] / diagR[pk];
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:503: error: class, interface, or enum expected
			for (int i = 0; i < k; ++i) {
			                       ^, LevenbergMarquardtOptimizer.java:505: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:507: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:512: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:514: error: class, interface, or enum expected
			double s = diag[pj] * lmDir[pj];
			^, LevenbergMarquardtOptimizer.java:515: error: class, interface, or enum expected
			work1[pj] = s;
			^, LevenbergMarquardtOptimizer.java:516: error: class, interface, or enum expected
			dxNorm += s * s;
			^, LevenbergMarquardtOptimizer.java:517: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:519: error: class, interface, or enum expected
		double fp = dxNorm - delta;
		^, LevenbergMarquardtOptimizer.java:520: error: class, interface, or enum expected
		if (fp <= (0.1 * delta)) {
		^, LevenbergMarquardtOptimizer.java:522: error: class, interface, or enum expected
			return;
			^, LevenbergMarquardtOptimizer.java:523: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:529: error: class, interface, or enum expected
		double parl = 0;
		^, LevenbergMarquardtOptimizer.java:530: error: class, interface, or enum expected
		if (rank == solvedCols) {
		^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:531: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:533: error: class, interface, or enum expected
				work1[pj] *= diag[pj] / dxNorm;
				^, LevenbergMarquardtOptimizer.java:534: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:536: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:538: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                ^, LevenbergMarquardtOptimizer.java:539: error: class, interface, or enum expected
				for (int i = 0; i < j; ++i) {
				                       ^, LevenbergMarquardtOptimizer.java:541: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:543: error: class, interface, or enum expected
				work1[pj] = s;
				^, LevenbergMarquardtOptimizer.java:544: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:545: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:547: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^]
Ingredient counter is Zero
---Undoing: gnrtn(600): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm = new double[cols] ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1199(f=2.0), 1200(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1199(f=2.0), )
----------Running generation: 601, population size: 1

***** Generation 601 : 0
**Parent Variant: [Variant id: 1201, #gens: 356, #ops: 0, parent:-]

--Child created id: 1202
--Creating new operations for variant [Variant id: 1202, #gens: 356, #ops: 0, parent:1201]
---analyzing modificationPoint position: 222
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, solvedCols, permutation, jacNorm, pj, s, i, sum, jacobian, residuals, maxCosine, cost]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: s spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: maxCosine spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java455
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 455, pointed element: CtForImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 1202, #gens: 357, #ops: 1, parent:1201] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1202
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1202/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(601): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (maxCosine <= 2.2204E-16) { 	throw new org.apache.commons.math.optimization.OptimizationException[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1201(f=2.0), 1202(f=2.0), )
Selected to next generation: IDs2--> (1201(f=2.0), )
----------Running generation: 602, population size: 1

***** Generation 602 : 0
**Parent Variant: [Variant id: 1203, #gens: 356, #ops: 0, parent:-]

--Child created id: 1204
--Creating new operations for variant [Variant id: 1204, #gens: 356, #ops: 0, parent:1203]
---analyzing modificationPoint position: 119
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  lmDir[permutation[j]] = work[j]
---analyzing modificationPoint position: 23
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]
---analyzing modificationPoint position: 212
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java412
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// test for successful iteration. if (ratio >= 1.0E-4) { 	// successful iteration, update the norm 	[...] ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 412, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// test for successful iteration. if (ratio >= 1.0E-4) { 	// successful iteration, update the norm 	[...] ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1204, #gens: 357, #ops: 1, parent:1203] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1204, errors: [LevenbergMarquardtOptimizer.java:435: error: variable work3 is already defined in method doOptimize()
				} 				double[] work3 = new double[cols];
				  				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(602): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// test for successful iteration. if (ratio >= 1.0E-4) { 	// successful iteration, update the norm 	[...] ` -topatch--> `double[] work3 = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1203(f=2.0), 1204(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1203(f=2.0), )
----------Running generation: 603, population size: 1

***** Generation 603 : 0
**Parent Variant: [Variant id: 1205, #gens: 356, #ops: 0, parent:-]

--Child created id: 1206
--Creating new operations for variant [Variant id: 1206, #gens: 356, #ops: 0, parent:1205]
---analyzing modificationPoint position: 15
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [sum2, s]
--> var from patch: sum2 spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: s spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java620
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `sum2 += s * s` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 620, pointed element: CtOperatorAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `sum2 += s * s` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1206, #gens: 356, #ops: 1, parent:1205] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1206
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1206/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(603): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `sum2 += s * s ` -topatch--> `sum2 += s * s` (spoon.support.reflect.code.CtOperatorAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1205(f=2.0), 1206(f=2.0), )
Selected to next generation: IDs2--> (1205(f=2.0), )
----------Running generation: 604, population size: 1

***** Generation 604 : 0
**Parent Variant: [Variant id: 1207, #gens: 356, #ops: 0, parent:-]

--Child created id: 1208
--Creating new operations for variant [Variant id: 1208, #gens: 356, #ops: 0, parent:1207]
---analyzing modificationPoint position: 72
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  fp = dxNorm - delta
---analyzing modificationPoint position: 208
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // update the step bound if (ratio <= 0.25) { 	double tmp =  	(actRed < 0) ? (0.5 * dirDer) / (dirDe[...]
---analyzing modificationPoint position: 297
location: LevenbergMarquardtOptimizer.java833
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[k][pk] -= alpha ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1208, #gens: 355, #ops: 1, parent:1207] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1208
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1208/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(604): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `jacobian[k][pk] -= alpha ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1207(f=2.0), 1208(f=18.0), )
Selected to next generation: IDs2--> (1207(f=2.0), )
----------Running generation: 605, population size: 1

***** Generation 605 : 0
**Parent Variant: [Variant id: 1209, #gens: 356, #ops: 0, parent:-]

--Child created id: 1210
--Creating new operations for variant [Variant id: 1210, #gens: 356, #ops: 0, parent:1209]
---analyzing modificationPoint position: 174
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  residuals = oldRes
---analyzing modificationPoint position: 302
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  setCostRelativeTolerance(1.0E-10)
---analyzing modificationPoint position: 228
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java501
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double ypk = lmDir[pk] / diagR[pk] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 501, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double ypk = lmDir[pk] / diagR[pk] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1210, #gens: 357, #ops: 1, parent:1209] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1210, errors: [LevenbergMarquardtOptimizer.java:794: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:794: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:794: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:795: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:795: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:796: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:796: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:797: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:798: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:799: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:799: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:800: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:799: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:801: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:801: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:801: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:801: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:801: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:802: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:802: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:801: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:802: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:802: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:803: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:803: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:803: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:804: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:804: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:804: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:805: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:805: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:805: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:806: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:806: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:808: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:809: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:809: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:809: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:810: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:811: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:812: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:813: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:814: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:815: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:815: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:816: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:816: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:816: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:816: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:816: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:816: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:844: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:844: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:844: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(605): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double ypk = lmDir[pk] / diagR[pk] ` -topatch--> `double norm2 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1209(f=2.0), 1210(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1209(f=2.0), )
----------Running generation: 606, population size: 1

***** Generation 606 : 0
**Parent Variant: [Variant id: 1211, #gens: 356, #ops: 0, parent:-]

--Child created id: 1212
--Creating new operations for variant [Variant id: 1212, #gens: 356, #ops: 0, parent:1211]
---analyzing modificationPoint position: 298
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // transform the remaining columns for (int dk = (cols - 1) - k; dk > 0; --dk) { 	double gamma = 0; [...]
---analyzing modificationPoint position: 2
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 1 not mutation generated in  paru = java.lang.Math.min(paru, lmPar)
---analyzing modificationPoint position: 107
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 2 not mutation generated in  // solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]
---analyzing modificationPoint position: 138
location: LevenbergMarquardtOptimizer.java842
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = k; j < jacobian.length; ++j) { 	jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1212, #gens: 355, #ops: 1, parent:1211] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1212
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1212/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(606): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = k; j < jacobian.length; ++j) { 	jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1211(f=2.0), 1212(f=18.0), )
Selected to next generation: IDs2--> (1211(f=2.0), )
----------Running generation: 607, population size: 1

***** Generation 607 : 0
**Parent Variant: [Variant id: 1213, #gens: 356, #ops: 0, parent:-]

--Child created id: 1214
--Creating new operations for variant [Variant id: 1214, #gens: 356, #ops: 0, parent:1213]
---analyzing modificationPoint position: 49
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  sum += jacobian[i][pj] * qy[i]
---analyzing modificationPoint position: 6
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]
---analyzing modificationPoint position: 178
location: LevenbergMarquardtOptimizer.java350
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	lmDir[pj] = -lmDir[pj]; 	point[pj][...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1214, #gens: 355, #ops: 1, parent:1213] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1214
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1214/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(607): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	lmDir[pj] = -lmDir[pj]; 	point[pj][...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1213(f=2.0), 1214(f=18.0), )
Selected to next generation: IDs2--> (1213(f=2.0), )
----------Running generation: 608, population size: 1

***** Generation 608 : 0
**Parent Variant: [Variant id: 1215, #gens: 356, #ops: 0, parent:-]

--Child created id: 1216
--Creating new operations for variant [Variant id: 1216, #gens: 356, #ops: 0, parent:1215]
---analyzing modificationPoint position: 41
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  oldRes = tmpVec
---analyzing modificationPoint position: 338
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java333
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store least squares problem characteristics function = f ` -topatch--> `// reset counters iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 333, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store least squares problem characteristics function = f ` -topatch--> `// reset counters iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1216, #gens: 356, #ops: 1, parent:1215] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1216
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1216/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(608): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store least squares problem characteristics function = f ` -topatch--> `// reset counters iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1215(f=2.0), 1216(f=18.0), )
Selected to next generation: IDs2--> (1215(f=2.0), )
----------Running generation: 609, population size: 1

***** Generation 609 : 0
**Parent Variant: [Variant id: 1217, #gens: 356, #ops: 0, parent:-]

--Child created id: 1218
--Creating new operations for variant [Variant id: 1218, #gens: 356, #ops: 0, parent:1217]
---analyzing modificationPoint position: 55
location: LevenbergMarquardtOptimizer.java568
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1218, #gens: 355, #ops: 1, parent:1217] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1218
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1218/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(609): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// if the input par lies outside of the interval (parl,paru), // set par to the closer endpoint lmPa[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1217(f=2.0), 1218(f=3.0), )
Selected to next generation: IDs2--> (1217(f=2.0), )
----------Running generation: 610, population size: 1

***** Generation 610 : 0
**Parent Variant: [Variant id: 1219, #gens: 356, #ops: 0, parent:-]

--Child created id: 1220
--Creating new operations for variant [Variant id: 1220, #gens: 356, #ops: 0, parent:1219]
---analyzing modificationPoint position: 84
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (dpj != 0) { 	java.util.Arrays.fill(lmDiag, j + 1, lmDiag.length, 0); }
---analyzing modificationPoint position: 259
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  double[] work1 = new double[cols]
---analyzing modificationPoint position: 6
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]
---analyzing modificationPoint position: 336
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [jacobianEvaluations]
--> var from patch: jacobianEvaluations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java329
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `objectiveEvaluations = 0 ` -topatch--> `return jacobianEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 329, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `objectiveEvaluations = 0 ` -topatch--> `return jacobianEvaluations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1220, #gens: 357, #ops: 1, parent:1219] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 1220, errors: [AbstractLeastSquaresOptimizer.java:330: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.VectorialPointValuePair
		objectiveEvaluations = 0; 		return jacobianEvaluations;
		                          		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(610): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `objectiveEvaluations = 0 ` -topatch--> `return jacobianEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1219(f=2.0), 1220(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1219(f=2.0), )
----------Running generation: 611, population size: 1

***** Generation 611 : 0
**Parent Variant: [Variant id: 1221, #gens: 356, #ops: 0, parent:-]

--Child created id: 1222
--Creating new operations for variant [Variant id: 1222, #gens: 356, #ops: 0, parent:1221]
---analyzing modificationPoint position: 20
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 274
location: LevenbergMarquardtOptimizer.java791
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `norm2 += akk * akk ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1222, #gens: 355, #ops: 1, parent:1221] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1222, errors: [LevenbergMarquardtOptimizer.java:791: error: variable declaration not allowed here
				double akk = jacobian[i][k];
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(611): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `norm2 += akk * akk ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1221(f=2.0), 1222(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1221(f=2.0), )
----------Running generation: 612, population size: 1

***** Generation 612 : 0
**Parent Variant: [Variant id: 1223, #gens: 356, #ops: 0, parent:-]

--Child created id: 1224
--Creating new operations for variant [Variant id: 1224, #gens: 356, #ops: 0, parent:1223]
---analyzing modificationPoint position: 91
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [diag, pj, lmDir]
--> var from patch: diag spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java696
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `double s = diag[pj] * lmDir[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 696, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `double s = diag[pj] * lmDir[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1224, #gens: 356, #ops: 1, parent:1223] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1224, errors: [LevenbergMarquardtOptimizer.java:698: error: cannot find symbol
					if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) {
					                       ^
  symbol:   variable rkk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:699: error: cannot find symbol
						final double cotan = rkk / lmDiag[k];
						                     ^
  symbol:   variable rkk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:703: error: cannot find symbol
						final double tan = lmDiag[k] / rkk;
						                               ^
  symbol:   variable rkk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:710: error: cannot find symbol
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                         ^
  symbol:   variable rkk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(612): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `double s = diag[pj] * lmDir[pj]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1223(f=2.0), 1224(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1223(f=2.0), )
----------Running generation: 613, population size: 1

***** Generation 613 : 0
**Parent Variant: [Variant id: 1225, #gens: 356, #ops: 0, parent:-]

--Child created id: 1226
--Creating new operations for variant [Variant id: 1226, #gens: 356, #ops: 0, parent:1225]
---analyzing modificationPoint position: 268
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  updateJacobian()
---analyzing modificationPoint position: 89
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java688
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pk = permutation[k] ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 688, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pk = permutation[k] ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1226, #gens: 357, #ops: 1, parent:1225] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1226
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1226/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(613): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pk = permutation[k] ` -topatch--> `double[] oldX = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1225(f=2.0), 1226(f=2.0), )
Selected to next generation: IDs2--> (1225(f=2.0), )
----------Running generation: 614, population size: 1

***** Generation 614 : 0
**Parent Variant: [Variant id: 1227, #gens: 356, #ops: 0, parent:-]

--Child created id: 1228
--Creating new operations for variant [Variant id: 1228, #gens: 356, #ops: 0, parent:1227]
---analyzing modificationPoint position: 125
Templates availables3
Attempts Base Ingredients  1 total 3
Attempts Base Ingredients  2 total 3
vars from patch [current]
--> var from patch: current spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java440
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `// convergence has been reached return current` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 440, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `// convergence has been reached return current` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1228, #gens: 356, #ops: 1, parent:1227] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1228
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1228/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(614): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return current ` -topatch--> `// convergence has been reached return current` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1227(f=2.0), 1228(f=2.0), )
Selected to next generation: IDs2--> (1227(f=2.0), )
----------Running generation: 615, population size: 1

***** Generation 615 : 0
**Parent Variant: [Variant id: 1229, #gens: 356, #ops: 0, parent:-]

--Child created id: 1230
--Creating new operations for variant [Variant id: 1230, #gens: 356, #ops: 0, parent:1229]
---analyzing modificationPoint position: 23
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [j, solvedCols, permutation, work1, pj, work2, i, jacobian, tmp]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: work1 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: work2 spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: tmp spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java535
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 535, pointed element: CtForImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 1230, #gens: 357, #ops: 1, parent:1229] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1230, errors: [LevenbergMarquardtOptimizer.java:661: error: class, interface, or enum expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s
	    	        ^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                    ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                                    ^, LevenbergMarquardtOptimizer.java:667: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:669: error: class, interface, or enum expected
			work[j] = qy[j];
			^, LevenbergMarquardtOptimizer.java:670: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:678: error: class, interface, or enum expected
			double dpj = diag[pj];
			^, LevenbergMarquardtOptimizer.java:679: error: class, interface, or enum expected
			if (dpj != 0) {
			^, LevenbergMarquardtOptimizer.java:681: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:687: error: class, interface, or enum expected
			double qtbpj = 0;
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                ^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                                ^, LevenbergMarquardtOptimizer.java:693: error: class, interface, or enum expected
				if (lmDiag[k] != 0) {
				^, LevenbergMarquardtOptimizer.java:695: error: class, interface, or enum expected
					final double sin;
					      ^, LevenbergMarquardtOptimizer.java:696: error: class, interface, or enum expected
					final double cos;
					      ^, LevenbergMarquardtOptimizer.java:697: error: class, interface, or enum expected
					double rkk = jacobian[k][pk];
					^, LevenbergMarquardtOptimizer.java:698: error: class, interface, or enum expected
					if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) {
					^, LevenbergMarquardtOptimizer.java:699: error: class, interface, or enum expected
						final double cotan = rkk / lmDiag[k];
						      ^, LevenbergMarquardtOptimizer.java:700: error: class, interface, or enum expected
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						^, LevenbergMarquardtOptimizer.java:701: error: class, interface, or enum expected
						cos = sin * cotan;
						^, LevenbergMarquardtOptimizer.java:702: error: class, interface, or enum expected
					} else {
					^, LevenbergMarquardtOptimizer.java:703: error: class, interface, or enum expected
						final double tan = lmDiag[k] / rkk;
						      ^, LevenbergMarquardtOptimizer.java:704: error: class, interface, or enum expected
						cos = 1.0 / java.lang.Math.sqrt(1.0 + (tan * tan));
						^, LevenbergMarquardtOptimizer.java:705: error: class, interface, or enum expected
						sin = cos * tan;
						^, LevenbergMarquardtOptimizer.java:706: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:711: error: class, interface, or enum expected
					final double temp = (cos * work[k]) + (sin * qtbpj);
					      ^, LevenbergMarquardtOptimizer.java:712: error: class, interface, or enum expected
					qtbpj = ((-sin) * work[k]) + (cos * qtbpj);
					^, LevenbergMarquardtOptimizer.java:713: error: class, interface, or enum expected
					work[k] = temp;
					^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					                    ^, LevenbergMarquardtOptimizer.java:716: error: class, interface, or enum expected
					for (int i = k + 1; i < solvedCols; ++i) {
					                                    ^, LevenbergMarquardtOptimizer.java:718: error: class, interface, or enum expected
						final double temp2 = (cos * rik) + (sin * lmDiag[i]);
						      ^, LevenbergMarquardtOptimizer.java:719: error: class, interface, or enum expected
						lmDiag[i] = ((-sin) * rik) + (cos * lmDiag[i]);
						^, LevenbergMarquardtOptimizer.java:720: error: class, interface, or enum expected
						jacobian[i][pk] = temp2;
						^, LevenbergMarquardtOptimizer.java:721: error: class, interface, or enum expected
					}
					^, LevenbergMarquardtOptimizer.java:729: error: class, interface, or enum expected
			jacobian[j][permutation[j]] = lmDir[j];
			^, LevenbergMarquardtOptimizer.java:731: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:736: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:739: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:742: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                        ^, LevenbergMarquardtOptimizer.java:745: error: class, interface, or enum expected
			for (int j = nSing - 1; j >= 0; --j) {
			                                ^, LevenbergMarquardtOptimizer.java:747: error: class, interface, or enum expected
				double sum = 0;
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:748: error: class, interface, or enum expected
				for (int i = j + 1; i < nSing; ++i) {
				                               ^, LevenbergMarquardtOptimizer.java:750: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:752: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:756: error: class, interface, or enum expected
		for (int j = 0; j < lmDir.length; ++j) {
		                                  ^, LevenbergMarquardtOptimizer.java:758: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:787: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:789: error: class, interface, or enum expected
			double norm2 = 0;
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:790: error: class, interface, or enum expected
			for (int i = 0; i < jacobian.length; ++i) {
			                                     ^, LevenbergMarquardtOptimizer.java:792: error: class, interface, or enum expected
				norm2 += akk * akk;
				^, LevenbergMarquardtOptimizer.java:793: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:795: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                ^, LevenbergMarquardtOptimizer.java:798: error: class, interface, or enum expected
		for (int k = 0; k < cols; ++k) {
		                          ^, LevenbergMarquardtOptimizer.java:802: error: class, interface, or enum expected
			double ak2 = java.lang.Double.NEGATIVE_INFINITY;
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:803: error: class, interface, or enum expected
			for (int i = k; i < cols; ++i) {
			                          ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:805: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:807: error: class, interface, or enum expected
					norm2 += aki * aki;
					^, LevenbergMarquardtOptimizer.java:808: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:812: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:815: error: class, interface, or enum expected
					ak2 = norm2;
					^, LevenbergMarquardtOptimizer.java:816: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:820: error: class, interface, or enum expected
				return;
				^, LevenbergMarquardtOptimizer.java:821: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:823: error: class, interface, or enum expected
			permutation[nextColumn] = permutation[k];
			^, LevenbergMarquardtOptimizer.java:824: error: class, interface, or enum expected
			permutation[k] = pk;
			^, LevenbergMarquardtOptimizer.java:827: error: class, interface, or enum expected
			double akk = jacobian[k][pk];
			^, LevenbergMarquardtOptimizer.java:828: error: class, interface, or enum expected
			double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2);
			^, LevenbergMarquardtOptimizer.java:829: error: class, interface, or enum expected
			double betak = 1.0 / (ak2 - (akk * alpha));
			^, LevenbergMarquardtOptimizer.java:830: error: class, interface, or enum expected
			beta[pk] = betak;
			^, LevenbergMarquardtOptimizer.java:833: error: class, interface, or enum expected
			diagR[pk] = alpha;
			^, LevenbergMarquardtOptimizer.java:834: error: class, interface, or enum expected
			jacobian[k][pk] -= alpha;
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                              ^, LevenbergMarquardtOptimizer.java:837: error: class, interface, or enum expected
			for (int dk = (cols - 1) - k; dk > 0; --dk) {
			                                      ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                ^, LevenbergMarquardtOptimizer.java:839: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				                                     ^, LevenbergMarquardtOptimizer.java:841: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:843: error: class, interface, or enum expected
				for (int j = k; j < jacobian.length; ++j) {
				^]
Ingredient counter is Zero
---Undoing: gnrtn(615): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1229(f=2.0), 1230(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1229(f=2.0), )
----------Running generation: 616, population size: 1

***** Generation 616 : 0
**Parent Variant: [Variant id: 1231, #gens: 356, #ops: 0, parent:-]

--Child created id: 1232
--Creating new operations for variant [Variant id: 1232, #gens: 356, #ops: 0, parent:1231]
---analyzing modificationPoint position: 175
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  oldRes = tmpVec
---analyzing modificationPoint position: 43
location: LevenbergMarquardtOptimizer.java529
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1232, #gens: 355, #ops: 1, parent:1231] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1232
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1232/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 18] ,[]
-Valid?: |false|7|18|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(616): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1231(f=2.0), 1232(f=7.0), )
Selected to next generation: IDs2--> (1231(f=2.0), )
----------Running generation: 617, population size: 1

***** Generation 617 : 0
**Parent Variant: [Variant id: 1233, #gens: 356, #ops: 0, parent:-]

--Child created id: 1234
--Creating new operations for variant [Variant id: 1234, #gens: 356, #ops: 0, parent:1233]
---analyzing modificationPoint position: 284
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (java.lang.Double.isInfinite(norm2) || java.lang.Double.isNaN(norm2)) { 	throw new org.apache.com[...]
---analyzing modificationPoint position: 112
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...]
---analyzing modificationPoint position: 56
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  if (lmPar == 0) { 	lmPar = gNorm / dxNorm; }
---analyzing modificationPoint position: 179
---modifPoint 3 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 13
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	double s = work1[permutation[j]]; 	sum2 += s * s; }
---analyzing modificationPoint position: 25
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java537
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 537, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1234, #gens: 357, #ops: 1, parent:1233] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 1234
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1234/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(617): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = 0 ` -topatch--> `double coeff1 = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1233(f=2.0), 1234(f=2.0), )
Selected to next generation: IDs2--> (1233(f=2.0), )
----------Running generation: 618, population size: 1

***** Generation 618 : 0
**Parent Variant: [Variant id: 1235, #gens: 356, #ops: 0, parent:-]

--Child created id: 1236
--Creating new operations for variant [Variant id: 1236, #gens: 356, #ops: 0, parent:1235]
---analyzing modificationPoint position: 0
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  tmp = 0.1
---analyzing modificationPoint position: 183
location: LevenbergMarquardtOptimizer.java355
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmNorm += s * s ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1236, #gens: 355, #ops: 1, parent:1235] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1236
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1236/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(618): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `lmNorm += s * s ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1235(f=2.0), 1236(f=15.0), )
Selected to next generation: IDs2--> (1235(f=2.0), )
----------Running generation: 619, population size: 1

***** Generation 619 : 0
**Parent Variant: [Variant id: 1237, #gens: 356, #ops: 0, parent:-]

--Child created id: 1238
--Creating new operations for variant [Variant id: 1238, #gens: 356, #ops: 0, parent:1237]
---analyzing modificationPoint position: 6
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	work1[pj] /= work2[j]; 	double tmp[...]
---analyzing modificationPoint position: 164
location: LevenbergMarquardtOptimizer.java318
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1238, #gens: 355, #ops: 1, parent:1237] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1238
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1238/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(619): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1237(f=2.0), 1238(f=18.0), )
Selected to next generation: IDs2--> (1237(f=2.0), )
----------Running generation: 620, population size: 1

***** Generation 620 : 0
**Parent Variant: [Variant id: 1239, #gens: 356, #ops: 0, parent:-]

--Child created id: 1240
--Creating new operations for variant [Variant id: 1240, #gens: 356, #ops: 0, parent:1239]
---analyzing modificationPoint position: 46
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 71
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  double previousFP = fp
---analyzing modificationPoint position: 204
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2
---analyzing modificationPoint position: 80
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  work[j] = qy[j]
---analyzing modificationPoint position: 215
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java416
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int k = 0; k < cols; ++k) { 	double xK = diag[k] * point[k]; 	xNorm += xK * xK; } ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 416, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int k = 0; k < cols; ++k) { 	double xK = diag[k] * point[k]; 	xNorm += xK * xK; } ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1240, #gens: 357, #ops: 1, parent:1239] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 1240, errors: [LevenbergMarquardtOptimizer.java:539: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	^, LevenbergMarquardtOptimizer.java:539: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	        ^, LevenbergMarquardtOptimizer.java:539: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                 ^, LevenbergMarquardtOptimizer.java:539: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                              ^, LevenbergMarquardtOptimizer.java:539: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                      ^, LevenbergMarquardtOptimizer.java:539: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                           ^, LevenbergMarquardtOptimizer.java:539: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                           ^, LevenbergMarquardtOptimizer.java:539: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                  ^, LevenbergMarquardtOptimizer.java:539: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                   ^, LevenbergMarquardtOptimizer.java:539: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:539: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                          ^, LevenbergMarquardtOptimizer.java:539: error: <identifier> expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                           ^, LevenbergMarquardtOptimizer.java:539: error: illegal start of expression
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                  ^, LevenbergMarquardtOptimizer.java:539: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                   ^, LevenbergMarquardtOptimizer.java:539: error: not a statement
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                     ^, LevenbergMarquardtOptimizer.java:539: error: ';' expected
	 */ 	private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) { 		// compute and store in x the gauss-newton direction, if the 		// jacobian is rank-deficient, obtain a least squares solution
	    	                                                                                                                          ^, LevenbergMarquardtOptimizer.java:546: error: <identifier> expected
			parl = fp / (delta * sum2);
			    ^, LevenbergMarquardtOptimizer.java:550: error: class, interface, or enum expected
		sum2 = 0;
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:551: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:553: error: class, interface, or enum expected
			double sum = 0;
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                ^, LevenbergMarquardtOptimizer.java:554: error: class, interface, or enum expected
			for (int i = 0; i <= j; ++i) {
			                        ^, LevenbergMarquardtOptimizer.java:556: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:558: error: class, interface, or enum expected
			sum2 += sum * sum;
			^, LevenbergMarquardtOptimizer.java:559: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:561: error: class, interface, or enum expected
		double paru = gNorm / delta;
		^, LevenbergMarquardtOptimizer.java:562: error: class, interface, or enum expected
		if (paru == 0) {
		^, LevenbergMarquardtOptimizer.java:565: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:570: error: class, interface, or enum expected
		if (lmPar == 0) {
		^, LevenbergMarquardtOptimizer.java:572: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                         ^, LevenbergMarquardtOptimizer.java:574: error: class, interface, or enum expected
		for (int countdown = 10; countdown >= 0; --countdown) {
		                                         ^, LevenbergMarquardtOptimizer.java:579: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:581: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:583: error: class, interface, or enum expected
				work1[pj] = sPar * diag[pj];
				^, LevenbergMarquardtOptimizer.java:584: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:587: error: class, interface, or enum expected
			dxNorm = 0;
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:588: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:590: error: class, interface, or enum expected
				double s = diag[pj] * lmDir[pj];
				^, LevenbergMarquardtOptimizer.java:591: error: class, interface, or enum expected
				work3[pj] = s;
				^, LevenbergMarquardtOptimizer.java:592: error: class, interface, or enum expected
				dxNorm += s * s;
				^, LevenbergMarquardtOptimizer.java:593: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:595: error: class, interface, or enum expected
			double previousFP = fp;
			^, LevenbergMarquardtOptimizer.java:596: error: class, interface, or enum expected
			fp = dxNorm - delta;
			^, LevenbergMarquardtOptimizer.java:600: error: class, interface, or enum expected
			if ((java.lang.Math.abs(fp) <= (0.1 * delta)) || 
			^, LevenbergMarquardtOptimizer.java:603: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:606: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:608: error: class, interface, or enum expected
				work1[pj] = (work3[pj] * diag[pj]) / dxNorm;
				^, LevenbergMarquardtOptimizer.java:609: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:610: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:612: error: class, interface, or enum expected
				work1[pj] /= work2[j];
				^, LevenbergMarquardtOptimizer.java:613: error: class, interface, or enum expected
				double tmp = work1[pj];
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                    ^, LevenbergMarquardtOptimizer.java:614: error: class, interface, or enum expected
				for (int i = j + 1; i < solvedCols; ++i) {
				                                    ^, LevenbergMarquardtOptimizer.java:616: error: class, interface, or enum expected
				}
				^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                ^, LevenbergMarquardtOptimizer.java:619: error: class, interface, or enum expected
			for (int j = 0; j < solvedCols; ++j) {
			                                ^, LevenbergMarquardtOptimizer.java:621: error: class, interface, or enum expected
				sum2 += s * s;
				^, LevenbergMarquardtOptimizer.java:622: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:626: error: class, interface, or enum expected
			if (fp > 0) {
			^, LevenbergMarquardtOptimizer.java:628: error: class, interface, or enum expected
			} else if (fp < 0) {
			^, LevenbergMarquardtOptimizer.java:630: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:635: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:663: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                    ^, LevenbergMarquardtOptimizer.java:665: error: class, interface, or enum expected
			for (int i = j + 1; i < solvedCols; ++i) {
			                                    ^, LevenbergMarquardtOptimizer.java:667: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:669: error: class, interface, or enum expected
			work[j] = qy[j];
			^, LevenbergMarquardtOptimizer.java:670: error: class, interface, or enum expected
		}
		^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                ^, LevenbergMarquardtOptimizer.java:673: error: class, interface, or enum expected
		for (int j = 0; j < solvedCols; ++j) {
		                                ^, LevenbergMarquardtOptimizer.java:678: error: class, interface, or enum expected
			double dpj = diag[pj];
			^, LevenbergMarquardtOptimizer.java:679: error: class, interface, or enum expected
			if (dpj != 0) {
			^, LevenbergMarquardtOptimizer.java:681: error: class, interface, or enum expected
			}
			^, LevenbergMarquardtOptimizer.java:687: error: class, interface, or enum expected
			double qtbpj = 0;
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                ^, LevenbergMarquardtOptimizer.java:688: error: class, interface, or enum expected
			for (int k = j; k < solvedCols; ++k) {
			                                ^, LevenbergMarquardtOptimizer.java:693: error: class, interface, or enum expected
				if (lmDiag[k] != 0) {
				^, LevenbergMarquardtOptimizer.java:695: error: class, interface, or enum expected
					final double sin;
					      ^, LevenbergMarquardtOptimizer.java:696: error: class, interface, or enum expected
					final double cos;
					      ^, LevenbergMarquardtOptimizer.java:697: error: class, interface, or enum expected
					double rkk = jacobian[k][pk];
					^, LevenbergMarquardtOptimizer.java:698: error: class, interface, or enum expected
					if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) {
					^, LevenbergMarquardtOptimizer.java:699: error: class, interface, or enum expected
						final double cotan = rkk / lmDiag[k];
						      ^, LevenbergMarquardtOptimizer.java:700: error: class, interface, or enum expected
						sin = 1.0 / java.lang.Math.sqrt(1.0 + (cotan * cotan));
						^, LevenbergMarquardtOptimizer.java:701: error: class, interface, or enum expected
						cos = sin * cotan;
						^, LevenbergMarquardtOptimizer.java:702: error: class, interface, or enum expected
					} else {
					^]
Ingredient counter is Zero
---Undoing: gnrtn(620): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int k = 0; k < cols; ++k) { 	double xK = diag[k] * point[k]; 	xNorm += xK * xK; } ` -topatch--> `// evaluate the function at the origin, and test // for acceptance of the Gauss-Newton direction dou[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1239(f=2.0), 1240(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1239(f=2.0), )
----------Running generation: 621, population size: 1

***** Generation 621 : 0
**Parent Variant: [Variant id: 1241, #gens: 356, #ops: 0, parent:-]

--Child created id: 1242
--Creating new operations for variant [Variant id: 1242, #gens: 356, #ops: 0, parent:1241]
---analyzing modificationPoint position: 344
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java341
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 341, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1242, #gens: 356, #ops: 1, parent:1241] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1242
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1242/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(621): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// arrays shared with the other private methods rows = target.length ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1241(f=2.0), 1242(f=18.0), )
Selected to next generation: IDs2--> (1241(f=2.0), )
----------Running generation: 622, population size: 1

***** Generation 622 : 0
**Parent Variant: [Variant id: 1243, #gens: 356, #ops: 0, parent:-]

--Child created id: 1244
--Creating new operations for variant [Variant id: 1244, #gens: 356, #ops: 0, parent:1243]
---analyzing modificationPoint position: 286
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java813
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 813, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1244, #gens: 357, #ops: 1, parent:1243] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1244, errors: [LevenbergMarquardtOptimizer.java:814: error: unreachable statement
					nextColumn = i;
					^]
Ingredient counter is Zero
---Undoing: gnrtn(622): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `nextColumn = i ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1243(f=2.0), 1244(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1243(f=2.0), )
----------Running generation: 623, population size: 1

***** Generation 623 : 0
**Parent Variant: [Variant id: 1245, #gens: 356, #ops: 0, parent:-]

--Child created id: 1246
--Creating new operations for variant [Variant id: 1246, #gens: 356, #ops: 0, parent:1245]
---analyzing modificationPoint position: 101
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [diagR, cols]
--> var from patch: diagR spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java716
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rik = jacobian[i][pk] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 716, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rik = jacobian[i][pk] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1246, #gens: 357, #ops: 1, parent:1245] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1246
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1246/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 18] ,[]
-Valid?: |false|13|18|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(623): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rik = jacobian[i][pk] ` -topatch--> `diagR = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1245(f=2.0), 1246(f=13.0), )
Selected to next generation: IDs2--> (1245(f=2.0), )
----------Running generation: 624, population size: 1

***** Generation 624 : 0
**Parent Variant: [Variant id: 1247, #gens: 356, #ops: 0, parent:-]

--Child created id: 1248
--Creating new operations for variant [Variant id: 1248, #gens: 356, #ops: 0, parent:1247]
---analyzing modificationPoint position: 132
location: LevenbergMarquardtOptimizer.java520
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1248, #gens: 355, #ops: 1, parent:1247] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1248
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1248/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 18] ,[]
-Valid?: |false|3|18|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(624): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmPar = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1247(f=2.0), 1248(f=3.0), )
Selected to next generation: IDs2--> (1247(f=2.0), )
----------Running generation: 625, population size: 1

***** Generation 625 : 0
**Parent Variant: [Variant id: 1249, #gens: 356, #ops: 0, parent:-]

--Child created id: 1250
--Creating new operations for variant [Variant id: 1250, #gens: 356, #ops: 0, parent:1249]
---analyzing modificationPoint position: 38
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [point, pj, oldX, lmDir]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pj spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: oldX spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lmDir spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java429
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `point[pj] = oldX[pj] ` -topatch--> `point[pj] = oldX[pj] + lmDir[pj]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 429, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `point[pj] = oldX[pj] ` -topatch--> `point[pj] = oldX[pj] + lmDir[pj]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1250, #gens: 356, #ops: 1, parent:1249] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1250
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1250/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 18] ,[]
-Valid?: |false|12|18|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(625): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `point[pj] = oldX[pj] ` -topatch--> `point[pj] = oldX[pj] + lmDir[pj]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1249(f=2.0), 1250(f=12.0), )
Selected to next generation: IDs2--> (1249(f=2.0), )
----------Running generation: 626, population size: 1

***** Generation 626 : 0
**Parent Variant: [Variant id: 1251, #gens: 356, #ops: 0, parent:-]

--Child created id: 1252
--Creating new operations for variant [Variant id: 1252, #gens: 356, #ops: 0, parent:1251]
---analyzing modificationPoint position: 295
location: LevenbergMarquardtOptimizer.java829
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1252, #gens: 355, #ops: 1, parent:1251] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1252
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1252/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(626): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1251(f=2.0), 1252(f=18.0), )
Selected to next generation: IDs2--> (1251(f=2.0), )
----------Running generation: 627, population size: 1

***** Generation 627 : 0
**Parent Variant: [Variant id: 1253, #gens: 356, #ops: 0, parent:-]

--Child created id: 1254
--Creating new operations for variant [Variant id: 1254, #gens: 356, #ops: 0, parent:1253]
---analyzing modificationPoint position: 62
location: LevenbergMarquardtOptimizer.java582
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = sPar * diag[pj] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1254, #gens: 355, #ops: 1, parent:1253] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1254, errors: [LevenbergMarquardtOptimizer.java:582: error: variable declaration not allowed here
				int pj = permutation[j];
				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(627): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `work1[pj] = sPar * diag[pj] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1253(f=2.0), 1254(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1253(f=2.0), )
----------Running generation: 628, population size: 1

***** Generation 628 : 0
**Parent Variant: [Variant id: 1255, #gens: 356, #ops: 0, parent:-]

--Child created id: 1256
--Creating new operations for variant [Variant id: 1256, #gens: 356, #ops: 0, parent:1255]
---analyzing modificationPoint position: 36
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; }
---analyzing modificationPoint position: 293
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  double alpha = (akk > 0) ? -java.lang.Math.sqrt(ak2) : java.lang.Math.sqrt(ak2)
---analyzing modificationPoint position: 298
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  // transform the remaining columns for (int dk = (cols - 1) - k; dk > 0; --dk) { 	double gamma = 0; [...]
---analyzing modificationPoint position: 154
location: LevenbergMarquardtOptimizer.java303
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1256, #gens: 355, #ops: 1, parent:1255] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1256
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1256/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(628): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// initialize the step bound delta delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundF[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1255(f=2.0), 1256(f=18.0), )
Selected to next generation: IDs2--> (1255(f=2.0), )
----------Running generation: 629, population size: 1

***** Generation 629 : 0
**Parent Variant: [Variant id: 1257, #gens: 356, #ops: 0, parent:-]

--Child created id: 1258
--Creating new operations for variant [Variant id: 1258, #gens: 356, #ops: 0, parent:1257]
---analyzing modificationPoint position: 251
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [solvedCols]
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java248
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta = new double[cols] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 248, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta = new double[cols] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1258, #gens: 357, #ops: 1, parent:1257] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1258, errors: [LevenbergMarquardtOptimizer.java:778: error: illegal start of expression
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	 ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	        ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                      ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                            ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                   ^, LevenbergMarquardtOptimizer.java:778: error: ';' expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                 ^, LevenbergMarquardtOptimizer.java:778: error: <identifier> expected
	 * Solve a*x = b and d*x = 0 in the least squares sense.
	                                                        ^, LevenbergMarquardtOptimizer.java:779: error: illegal start of expression
	 * <p>This implementation is a translation in Java of the MINPACK
	      ^, LevenbergMarquardtOptimizer.java:779: error: not a statement
	 * <p>This implementation is a translation in Java of the MINPACK
	 ^, LevenbergMarquardtOptimizer.java:779: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                            ^, LevenbergMarquardtOptimizer.java:779: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                          ^, LevenbergMarquardtOptimizer.java:779: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                  ^, LevenbergMarquardtOptimizer.java:779: error: ';' expected
	 * <p>This implementation is a translation in Java of the MINPACK
	                                                         ^, LevenbergMarquardtOptimizer.java:780: error: > expected
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	      ^, LevenbergMarquardtOptimizer.java:780: error: illegal start of expression
	 * <a href="http://www.netlib.org/minpack/qrsolv.f">qrsolv</a>
	                                                           ^, LevenbergMarquardtOptimizer.java:781: error: illegal start of expression
	 * routine.</p>
	 ^, LevenbergMarquardtOptimizer.java:781: error: illegal start of type
	 * routine.</p>
	            ^, LevenbergMarquardtOptimizer.java:781: error: illegal start of expression
	 * routine.</p>
	              ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	      ^, LevenbergMarquardtOptimizer.java:782: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                      ^, LevenbergMarquardtOptimizer.java:782: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                ^, LevenbergMarquardtOptimizer.java:782: error: ';' expected
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                           ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of type
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:782: error: illegal start of expression
	 * <p>This method sets the lmDir and lmDiag attributes.</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:783: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	      ^, LevenbergMarquardtOptimizer.java:783: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	 ^, LevenbergMarquardtOptimizer.java:783: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                    ^, LevenbergMarquardtOptimizer.java:783: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                 ^, LevenbergMarquardtOptimizer.java:783: error: ';' expected
	 * <p>The authors of the original fortran function are:</p>
	                                                  ^, LevenbergMarquardtOptimizer.java:783: error: illegal start of type
	 * <p>The authors of the original fortran function are:</p>
	                                                        ^, LevenbergMarquardtOptimizer.java:783: error: illegal start of expression
	 * <p>The authors of the original fortran function are:</p>
	                                                         ^, LevenbergMarquardtOptimizer.java:784: error: illegal start of expression
	 * <ul>
	 ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	 ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	         ^, LevenbergMarquardtOptimizer.java:783: error: not a statement
	 * <p>The authors of the original fortran function are:</p>
	                                                          ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                    ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                     ^, LevenbergMarquardtOptimizer.java:785: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                       ^, LevenbergMarquardtOptimizer.java:785: error: ';' expected
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                            ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of type
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                  ^, LevenbergMarquardtOptimizer.java:785: error: illegal start of expression
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                   ^, LevenbergMarquardtOptimizer.java:786: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	 ^, LevenbergMarquardtOptimizer.java:786: error: illegal start of expression
	 *   <li>Burton  S. Garbow</li>
	         ^, LevenbergMarquardtOptimizer.java:785: error: not a statement
	 *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
	                                                                     ^, LevenbergMarquardtOptimizer.java:786: error: illegal start of type
	 *   <li>Burton  S. Garbow</li>
	                           ^, LevenbergMarquardtOptimizer.java:786: error: ';' expected
	 *   <li>Burton  S. Garbow</li>
	                              ^, LevenbergMarquardtOptimizer.java:787: error: illegal start of expression
	 *   <li>Kenneth E. Hillstrom</li>
	         ^, LevenbergMarquardtOptimizer.java:787: error: illegal start of type
	 *   <li>Kenneth E. Hillstrom</li>
	                              ^, LevenbergMarquardtOptimizer.java:787: error: ';' expected
	 *   <li>Kenneth E. Hillstrom</li>
	                                 ^, LevenbergMarquardtOptimizer.java:788: error: illegal start of expression
	 *   <li>Jorge   J. More</li>
	         ^, LevenbergMarquardtOptimizer.java:788: error: illegal start of type
	 *   <li>Jorge   J. More</li>
	                         ^, LevenbergMarquardtOptimizer.java:788: error: ';' expected
	 *   <li>Jorge   J. More</li>
	                            ^, LevenbergMarquardtOptimizer.java:789: error: illegal start of type
	 * </ul>
	    ^, LevenbergMarquardtOptimizer.java:789: error: illegal start of expression
	 * </ul>
	     ^, LevenbergMarquardtOptimizer.java:790: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	 ^, LevenbergMarquardtOptimizer.java:790: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	      ^, LevenbergMarquardtOptimizer.java:789: error: not a statement
	 * </ul>
	       ^, LevenbergMarquardtOptimizer.java:790: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                       ^, LevenbergMarquardtOptimizer.java:790: error: ';' expected
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                ^, LevenbergMarquardtOptimizer.java:790: error: illegal start of type
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                              ^, LevenbergMarquardtOptimizer.java:790: error: illegal start of expression
	 * <p>Luc Maisonobe did the Java translation.</p>
	                                                ^, LevenbergMarquardtOptimizer.java:792: error: illegal start of expression
	 * @param qy
	 ^, LevenbergMarquardtOptimizer.java:792: error: illegal start of expression
	 * @param qy
	   ^, LevenbergMarquardtOptimizer.java:793: error: not a statement
	 * 		array containing qTy
	 ^, LevenbergMarquardtOptimizer.java:793: error: ';' expected
	 * 		array containing qTy
	   		     ^, LevenbergMarquardtOptimizer.java:793: error: ';' expected
	 * 		array containing qTy
	   		                    ^, LevenbergMarquardtOptimizer.java:794: error: <identifier> expected
	 * @param diag
	              ^, LevenbergMarquardtOptimizer.java:795: error: ';' expected
	 * 		diagonal matrix
	   		               ^, LevenbergMarquardtOptimizer.java:796: error: <identifier> expected
	 * @param lmDiag
	                ^, LevenbergMarquardtOptimizer.java:797: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                 ^, LevenbergMarquardtOptimizer.java:797: error: ';' expected
	 * 		diagonal elements associated with lmDir
	   		                                 ^, LevenbergMarquardtOptimizer.java:798: error: illegal start of expression
	 * @param work
	   ^, LevenbergMarquardtOptimizer.java:799: error: not a statement
	 * 		work array
	 ^, LevenbergMarquardtOptimizer.java:799: error: ';' expected
	 * 		work array
	   		    ^, LevenbergMarquardtOptimizer.java:800: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	  ^, LevenbergMarquardtOptimizer.java:800: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	^, LevenbergMarquardtOptimizer.java:800: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	        ^, LevenbergMarquardtOptimizer.java:800: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                 ^, LevenbergMarquardtOptimizer.java:800: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                              ^, LevenbergMarquardtOptimizer.java:800: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                     ^, LevenbergMarquardtOptimizer.java:800: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                      ^, LevenbergMarquardtOptimizer.java:800: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                        ^, LevenbergMarquardtOptimizer.java:800: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                            ^, LevenbergMarquardtOptimizer.java:800: error: <identifier> expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                              ^, LevenbergMarquardtOptimizer.java:800: error: illegal start of expression
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                     ^, LevenbergMarquardtOptimizer.java:800: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                      ^, LevenbergMarquardtOptimizer.java:800: error: not a statement
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                        ^, LevenbergMarquardtOptimizer.java:800: error: ';' expected
	 */ 	private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) { 		// copy R and Qty to preserve input and initialize s 		// in particular, save the diagonal elements of R in lmDir
	    	                                                                                            ^, LevenbergMarquardtOptimizer.java:828: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	^, LevenbergMarquardtOptimizer.java:828: error: illegal start of expression
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	        ^, LevenbergMarquardtOptimizer.java:828: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                            ^, LevenbergMarquardtOptimizer.java:828: error: not a statement
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                          ^, LevenbergMarquardtOptimizer.java:828: error: ';' expected
	 */ 	private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException { 		// initializations
	    	                                                                                                ^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	^, LevenbergMarquardtOptimizer.java:859: error: illegal start of expression
	 */ 	private void qTy(double[] y) {
	    	        ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                ^, LevenbergMarquardtOptimizer.java:859: error: ';' expected
	 */ 	private void qTy(double[] y) {
	    	                           ^, LevenbergMarquardtOptimizer.java:873: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(629): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta = new double[cols] ` -topatch--> `// solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1257(f=2.0), 1258(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1257(f=2.0), )
----------Running generation: 630, population size: 1

***** Generation 630 : 0
**Parent Variant: [Variant id: 1259, #gens: 356, #ops: 0, parent:-]

--Child created id: 1260
--Creating new operations for variant [Variant id: 1260, #gens: 356, #ops: 0, parent:1259]
---analyzing modificationPoint position: 65
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]
---analyzing modificationPoint position: 187
Templates availables15
Attempts Base Ingredients  1 total 15
Attempts Base Ingredients  2 total 15
vars from patch [residuals]
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java364
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at x + p and calculate its norm updateResidualsAndCost() ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 364, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at x + p and calculate its norm updateResidualsAndCost() ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1260, #gens: 356, #ops: 1, parent:1259] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1260
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1260/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(630): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at x + p and calculate its norm updateResidualsAndCost() ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1259(f=2.0), 1260(f=18.0), )
Selected to next generation: IDs2--> (1259(f=2.0), )
----------Running generation: 631, population size: 1

***** Generation 631 : 0
**Parent Variant: [Variant id: 1261, #gens: 356, #ops: 0, parent:-]

--Child created id: 1262
--Creating new operations for variant [Variant id: 1262, #gens: 356, #ops: 0, parent:1261]
---analyzing modificationPoint position: 20
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 88
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int k = j; k < solvedCols; ++k) { 	int pk = permutation[k];  	// determine a Givens rotation wh[...]
---analyzing modificationPoint position: 184
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  lmNorm = java.lang.Math.sqrt(lmNorm)
---analyzing modificationPoint position: 68
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  work3[pj] = s
---analyzing modificationPoint position: 141
location: LevenbergMarquardtOptimizer.java278
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// compute Qt.res qTy(residuals) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1262, #gens: 355, #ops: 1, parent:1261] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 1262
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1262/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(631): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// compute Qt.res qTy(residuals) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1261(f=2.0), 1262(f=18.0), )
Selected to next generation: IDs2--> (1261(f=2.0), )
----------Running generation: 632, population size: 1

***** Generation 632 : 0
**Parent Variant: [Variant id: 1263, #gens: 356, #ops: 0, parent:-]

--Child created id: 1264
--Creating new operations for variant [Variant id: 1264, #gens: 356, #ops: 0, parent:1263]
---analyzing modificationPoint position: 113
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 69
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  dxNorm += s * s
---analyzing modificationPoint position: 87
---modifPoint 2 not mutation generated in  // the transformations to eliminate the row of d // modify only a single element of Qty // beyond th[...]
---analyzing modificationPoint position: 270
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 3 not mutation generated in  permutation[k] = k
---analyzing modificationPoint position: 3
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [lmPar, paru]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: paru spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java605
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `lmPar = java.lang.Math.max(2.2251E-308, 0.001 * paru)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 605, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `lmPar = java.lang.Math.max(2.2251E-308, 0.001 * paru)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1264, #gens: 357, #ops: 1, parent:1263] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 1264
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1264/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 18] ,[]
-Valid?: |false|6|18|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(632): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// compute the Newton correction for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	w[...] ` -topatch--> `lmPar = java.lang.Math.max(2.2251E-308, 0.001 * paru)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1263(f=2.0), 1264(f=6.0), )
Selected to next generation: IDs2--> (1263(f=2.0), )
----------Running generation: 633, population size: 1

***** Generation 633 : 0
**Parent Variant: [Variant id: 1265, #gens: 356, #ops: 0, parent:-]

--Child created id: 1266
--Creating new operations for variant [Variant id: 1266, #gens: 356, #ops: 0, parent:1265]
---analyzing modificationPoint position: 75
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // copy R and Qty to preserve input and initialize s // in particular, save the diagonal elements of[...]
---analyzing modificationPoint position: 166
location: LevenbergMarquardtOptimizer.java328
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1266, #gens: 355, #ops: 1, parent:1265] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1266
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1266/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(633): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `// rescale if necessary for (int j = 0; j < cols; ++j) { 	diag[j] = java.lang.Math.max(diag[j], jacN[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1265(f=2.0), 1266(f=5.0), )
Selected to next generation: IDs2--> (1265(f=2.0), )
----------Running generation: 634, population size: 1

***** Generation 634 : 0
**Parent Variant: [Variant id: 1267, #gens: 356, #ops: 0, parent:-]

--Child created id: 1268
--Creating new operations for variant [Variant id: 1268, #gens: 356, #ops: 0, parent:1267]
---analyzing modificationPoint position: 125
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  return current
---analyzing modificationPoint position: 68
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  work3[pj] = s
---analyzing modificationPoint position: 102
---modifPoint 2 not mutation generated in  final double temp2 = (cos * rik) + (sin * lmDiag[i])
---analyzing modificationPoint position: 91
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch []
location: LevenbergMarquardtOptimizer.java696
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 696, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1268, #gens: 356, #ops: 1, parent:1267] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 1268, errors: [LevenbergMarquardtOptimizer.java:698: error: cannot find symbol
					if (java.lang.Math.abs(rkk) < java.lang.Math.abs(lmDiag[k])) {
					                       ^
  symbol:   variable rkk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:699: error: cannot find symbol
						final double cotan = rkk / lmDiag[k];
						                     ^
  symbol:   variable rkk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:703: error: cannot find symbol
						final double tan = lmDiag[k] / rkk;
						                               ^
  symbol:   variable rkk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:710: error: cannot find symbol
					jacobian[k][pk] = (cos * rkk) + (sin * lmDiag[k]);
					                         ^
  symbol:   variable rkk
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(634): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double rkk = jacobian[k][pk] ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1267(f=2.0), 1268(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1267(f=2.0), )
----------Running generation: 635, population size: 1

***** Generation 635 : 0
**Parent Variant: [Variant id: 1269, #gens: 356, #ops: 0, parent:-]

--Child created id: 1270
--Creating new operations for variant [Variant id: 1270, #gens: 356, #ops: 0, parent:1269]
---analyzing modificationPoint position: 311
Templates availables11
Attempts Base Ingredients  1 total 11
vars from patch [checker]
--> var from patch: checker spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java347
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return doOptimize() ` -topatch--> `return checker` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 347, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return doOptimize() ` -topatch--> `return checker` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1270, #gens: 356, #ops: 1, parent:1269] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1270, errors: [AbstractLeastSquaresOptimizer.java:346: error: incompatible types: org.apache.commons.math.optimization.VectorialConvergenceChecker cannot be converted to org.apache.commons.math.optimization.VectorialPointValuePair
		cost = java.lang.Double.POSITIVE_INFINITY; 		return checker;
		                                           		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(635): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return doOptimize() ` -topatch--> `return checker` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1269(f=2.0), 1270(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1269(f=2.0), )
----------Running generation: 636, population size: 1

***** Generation 636 : 0
**Parent Variant: [Variant id: 1271, #gens: 356, #ops: 0, parent:-]

--Child created id: 1272
--Creating new operations for variant [Variant id: 1272, #gens: 356, #ops: 0, parent:1271]
---analyzing modificationPoint position: 12
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 0 not mutation generated in  sum2 = 0
---analyzing modificationPoint position: 36
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	point[pj] = oldX[pj]; }
---analyzing modificationPoint position: 248
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  // arrays shared with the other private methods solvedCols = java.lang.Math.min(rows, cols)
---analyzing modificationPoint position: 119
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [lmDir, cols]
--> var from patch: lmDir spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java756
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 756, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1272, #gens: 356, #ops: 1, parent:1271] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1272
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1272/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(636): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `lmDir[permutation[j]] = work[j] ` -topatch--> `lmDir = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1271(f=2.0), 1272(f=15.0), )
Selected to next generation: IDs2--> (1271(f=2.0), )
----------Running generation: 637, population size: 1

***** Generation 637 : 0
**Parent Variant: [Variant id: 1273, #gens: 356, #ops: 0, parent:-]

--Child created id: 1274
--Creating new operations for variant [Variant id: 1274, #gens: 356, #ops: 0, parent:1273]
---analyzing modificationPoint position: 220
location: LevenbergMarquardtOptimizer.java449
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1274, #gens: 355, #ops: 1, parent:1273] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1274
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1274/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(637): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1273(f=2.0), 1274(f=2.0), )
Selected to next generation: IDs2--> (1273(f=2.0), )
----------Running generation: 638, population size: 1

***** Generation 638 : 0
**Parent Variant: [Variant id: 1275, #gens: 356, #ops: 0, parent:-]

--Child created id: 1276
--Creating new operations for variant [Variant id: 1276, #gens: 356, #ops: 0, parent:1275]
---analyzing modificationPoint position: 135
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int j = k; j < jacobian.length; ++j) { 	gamma += jacobian[j][pk] * jacobian[j][permutation[k + [...]
---analyzing modificationPoint position: 156
location: LevenbergMarquardtOptimizer.java309
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1276, #gens: 355, #ops: 1, parent:1275] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1276
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1276/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(638): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cost != 0) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		double s = jac[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1275(f=2.0), 1276(f=18.0), )
Selected to next generation: IDs2--> (1275(f=2.0), )
----------Running generation: 639, population size: 1

***** Generation 639 : 0
**Parent Variant: [Variant id: 1277, #gens: 356, #ops: 0, parent:-]

--Child created id: 1278
--Creating new operations for variant [Variant id: 1278, #gens: 356, #ops: 0, parent:1277]
---analyzing modificationPoint position: 197
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  for (int i = 0; i <= j; ++i) { 	work1[i] += jacobian[i][pj] * dirJ; }
---analyzing modificationPoint position: 157
location: LevenbergMarquardtOptimizer.java310
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1278, #gens: 355, #ops: 1, parent:1277] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1278
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1278/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(639): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = jacNorm[pj]; 	if (s != [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1277(f=2.0), 1278(f=18.0), )
Selected to next generation: IDs2--> (1277(f=2.0), )
----------Running generation: 640, population size: 1

***** Generation 640 : 0
**Parent Variant: [Variant id: 1279, #gens: 356, #ops: 0, parent:-]

--Child created id: 1280
--Creating new operations for variant [Variant id: 1280, #gens: 356, #ops: 0, parent:1279]
---analyzing modificationPoint position: 332
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 0 not mutation generated in  cost = java.lang.Math.sqrt(cost)
---analyzing modificationPoint position: 171
location: LevenbergMarquardtOptimizer.java338
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldX[pj] = point[pj] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1280, #gens: 355, #ops: 1, parent:1279] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1280, errors: [LevenbergMarquardtOptimizer.java:338: error: variable declaration not allowed here
					int pj = permutation[j];
					    ^]
Ingredient counter is Zero
---Undoing: gnrtn(640): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `oldX[pj] = point[pj] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1279(f=2.0), 1280(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1279(f=2.0), )
----------Running generation: 641, population size: 1

***** Generation 641 : 0
**Parent Variant: [Variant id: 1281, #gens: 356, #ops: 0, parent:-]

--Child created id: 1282
--Creating new operations for variant [Variant id: 1282, #gens: 356, #ops: 0, parent:1281]
---analyzing modificationPoint position: 16
---modifPoint 0 not mutation generated in  double correction = fp / (delta * sum2)
---analyzing modificationPoint position: 230
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  lmDir[pk] = ypk
---analyzing modificationPoint position: 24
Templates availables67
Attempts Base Ingredients  1 total 67
vars from patch [cols]
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java536
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double[] diag = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 536, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double[] diag = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1282, #gens: 356, #ops: 1, parent:1281] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1282, errors: [LevenbergMarquardtOptimizer.java:536: error: variable diag is already defined in method determineLMParameter(double[],double,double[],double[],double[],double[])
			for (int j = 0; j < solvedCols; ++j) { 				double[] diag = new double[cols];
			                                       				         ^, LevenbergMarquardtOptimizer.java:540: error: cannot find symbol
					sum += jacobian[i][pj] * work1[permutation[i]];
					                   ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:542: error: cannot find symbol
				double s = (work1[pj] - sum) / diagR[pj];
				                  ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:542: error: cannot find symbol
				double s = (work1[pj] - sum) / diagR[pj];
				                                     ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer, LevenbergMarquardtOptimizer.java:543: error: cannot find symbol
				work1[pj] = s;
				      ^
  symbol:   variable pj
  location: class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer]
Ingredient counter is Zero
---Undoing: gnrtn(641): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int pj = permutation[j] ` -topatch--> `double[] diag = new double[cols]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1281(f=2.0), 1282(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1281(f=2.0), )
----------Running generation: 642, population size: 1

***** Generation 642 : 0
**Parent Variant: [Variant id: 1283, #gens: 356, #ops: 0, parent:-]

--Child created id: 1284
--Creating new operations for variant [Variant id: 1284, #gens: 356, #ops: 0, parent:1283]
---analyzing modificationPoint position: 96
location: LevenbergMarquardtOptimizer.java709
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute the modified diagonal element of R and // the modified element of (Qty,0) jacobian[k][pk][...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1284, #gens: 355, #ops: 1, parent:1283] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1284
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1284/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(642): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute the modified diagonal element of R and // the modified element of (Qty,0) jacobian[k][pk][...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1283(f=2.0), 1284(f=15.0), )
Selected to next generation: IDs2--> (1283(f=2.0), )
----------Running generation: 643, population size: 1

***** Generation 643 : 0
**Parent Variant: [Variant id: 1285, #gens: 356, #ops: 0, parent:-]

--Child created id: 1286
--Creating new operations for variant [Variant id: 1286, #gens: 356, #ops: 0, parent:1285]
---analyzing modificationPoint position: 254
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // local point double delta = 0
---analyzing modificationPoint position: 158
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 112
Templates availables50
Attempts Base Ingredients  1 total 50
Attempts Base Ingredients  2 total 50
---modifPoint 2 not mutation generated in  for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...]
---analyzing modificationPoint position: 127
Templates availables11
Attempts Base Ingredients  1 total 11
vars from patch [rows]
--> var from patch: rows spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java250
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return cost * cost ` -topatch--> `return java.lang.Math.sqrt(getChiSquare() / rows)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 250, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return cost * cost ` -topatch--> `return java.lang.Math.sqrt(getChiSquare() / rows)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1286, #gens: 356, #ops: 1, parent:1285] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1286
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1286/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(643): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return cost * cost ` -topatch--> `return java.lang.Math.sqrt(getChiSquare() / rows)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1285(f=2.0), 1286(f=18.0), )
Selected to next generation: IDs2--> (1285(f=2.0), )
----------Running generation: 644, population size: 1

***** Generation 644 : 0
**Parent Variant: [Variant id: 1287, #gens: 356, #ops: 0, parent:-]

--Child created id: 1288
--Creating new operations for variant [Variant id: 1288, #gens: 356, #ops: 0, parent:1287]
---analyzing modificationPoint position: 25
---modifPoint 0 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 124
location: LevenbergMarquardtOptimizer.java626
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `parl = java.lang.Math.max(parl, lmPar) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1288, #gens: 355, #ops: 1, parent:1287] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1288
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1288/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(644): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `parl = java.lang.Math.max(parl, lmPar) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1287(f=2.0), 1288(f=2.0), )
Selected to next generation: IDs2--> (1287(f=2.0), )
----------Running generation: 645, population size: 1

***** Generation 645 : 0
**Parent Variant: [Variant id: 1289, #gens: 356, #ops: 0, parent:-]

--Child created id: 1290
--Creating new operations for variant [Variant id: 1290, #gens: 356, #ops: 0, parent:1289]
---analyzing modificationPoint position: 89
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pk = permutation[k]
---analyzing modificationPoint position: 217
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  xNorm += xK * xK
---analyzing modificationPoint position: 165
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 2 not mutation generated in  if (maxCosine <= orthoTolerance) { 	// convergence has been reached 	return current; }
---analyzing modificationPoint position: 46
---modifPoint 3 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 96
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  // compute the modified diagonal element of R and // the modified element of (Qty,0) jacobian[k][pk][...]
---analyzing modificationPoint position: 322
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [cost]
--> var from patch: cost spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java208
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++objectiveEvaluations) > maxEvaluations) { 	throw new org.apache.commons.math.FunctionEvaluati[...] ` -topatch--> `return cost * cost` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 208, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++objectiveEvaluations) > maxEvaluations) { 	throw new org.apache.commons.math.FunctionEvaluati[...] ` -topatch--> `return cost * cost` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1290, #gens: 357, #ops: 1, parent:1289] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 1290, errors: [AbstractLeastSquaresOptimizer.java:281: error: class, interface, or enum expected
		try {
		^, AbstractLeastSquaresOptimizer.java:285: error: class, interface, or enum expected
			return inverse.getData();
			^, AbstractLeastSquaresOptimizer.java:286: error: class, interface, or enum expected
		} catch (org.apache.commons.math.linear.InvalidMatrixException ime) {
		^, AbstractLeastSquaresOptimizer.java:288: error: class, interface, or enum expected
		}
		^, AbstractLeastSquaresOptimizer.java:303: error: class, interface, or enum expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) {
	    	       ^, AbstractLeastSquaresOptimizer.java:307: error: class, interface, or enum expected
		}
		^, AbstractLeastSquaresOptimizer.java:309: error: class, interface, or enum expected
		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols));
		      ^, AbstractLeastSquaresOptimizer.java:310: error: class, interface, or enum expected
		double[][] covar = getCovariances();
		^, AbstractLeastSquaresOptimizer.java:311: error: class, interface, or enum expected
		for (int i = 0; i < errors.length; ++i) {
		^, AbstractLeastSquaresOptimizer.java:311: error: class, interface, or enum expected
		for (int i = 0; i < errors.length; ++i) {
		                ^, AbstractLeastSquaresOptimizer.java:311: error: class, interface, or enum expected
		for (int i = 0; i < errors.length; ++i) {
		                                   ^, AbstractLeastSquaresOptimizer.java:313: error: class, interface, or enum expected
		}
		^, AbstractLeastSquaresOptimizer.java:315: error: class, interface, or enum expected
	}
	^, AbstractLeastSquaresOptimizer.java:319: error: class, interface, or enum expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	       ^, AbstractLeastSquaresOptimizer.java:319: error: class, interface, or enum expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                   ^, AbstractLeastSquaresOptimizer.java:319: error: class, interface, or enum expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                         ^, AbstractLeastSquaresOptimizer.java:319: error: class, interface, or enum expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final 
	    	                                                                                                                                                                                                ^, AbstractLeastSquaresOptimizer.java:320: error: class, interface, or enum expected
	double[] startPoint) throws 
	^, AbstractLeastSquaresOptimizer.java:326: error: class, interface, or enum expected
		}
		^, AbstractLeastSquaresOptimizer.java:330: error: class, interface, or enum expected
		objectiveEvaluations = 0;
		^, AbstractLeastSquaresOptimizer.java:331: error: class, interface, or enum expected
		jacobianEvaluations = 0;
		^, AbstractLeastSquaresOptimizer.java:334: error: class, interface, or enum expected
		function = f;
		^, AbstractLeastSquaresOptimizer.java:335: error: class, interface, or enum expected
		jF = f.jacobian();
		^, AbstractLeastSquaresOptimizer.java:336: error: class, interface, or enum expected
		targetValues = target.clone();
		^, AbstractLeastSquaresOptimizer.java:337: error: class, interface, or enum expected
		residualsWeights = weights.clone();
		^, AbstractLeastSquaresOptimizer.java:338: error: class, interface, or enum expected
		this.point = startPoint.clone();
		^, AbstractLeastSquaresOptimizer.java:339: error: class, interface, or enum expected
		this.residuals = new double[target.length];
		^, AbstractLeastSquaresOptimizer.java:342: error: class, interface, or enum expected
		rows = target.length;
		^, AbstractLeastSquaresOptimizer.java:343: error: class, interface, or enum expected
		cols = point.length;
		^, AbstractLeastSquaresOptimizer.java:344: error: class, interface, or enum expected
		jacobian = new double[rows][cols];
		^, AbstractLeastSquaresOptimizer.java:346: error: class, interface, or enum expected
		cost = java.lang.Double.POSITIVE_INFINITY;
		^, AbstractLeastSquaresOptimizer.java:348: error: class, interface, or enum expected
		return doOptimize();
		^, AbstractLeastSquaresOptimizer.java:350: error: class, interface, or enum expected
	}
	^, AbstractLeastSquaresOptimizer.java:363: error: class, interface, or enum expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                   ^, AbstractLeastSquaresOptimizer.java:363: error: class, interface, or enum expected
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	    	                                                                                                                                                                                                                                                        ^]
Ingredient counter is Zero
---Undoing: gnrtn(645): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++objectiveEvaluations) > maxEvaluations) { 	throw new org.apache.commons.math.FunctionEvaluati[...] ` -topatch--> `return cost * cost` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1289(f=2.0), 1290(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1289(f=2.0), )
----------Running generation: 646, population size: 1

***** Generation 646 : 0
**Parent Variant: [Variant id: 1291, #gens: 356, #ops: 0, parent:-]

--Child created id: 1292
--Creating new operations for variant [Variant id: 1292, #gens: 356, #ops: 0, parent:1291]
---analyzing modificationPoint position: 295
location: LevenbergMarquardtOptimizer.java829
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1292, #gens: 355, #ops: 1, parent:1291] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1292
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1292/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(646): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `beta[pk] = betak ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1291(f=2.0), 1292(f=18.0), )
Selected to next generation: IDs2--> (1291(f=2.0), )
----------Running generation: 647, population size: 1

***** Generation 647 : 0
**Parent Variant: [Variant id: 1293, #gens: 356, #ops: 0, parent:-]

--Child created id: 1294
--Creating new operations for variant [Variant id: 1294, #gens: 356, #ops: 0, parent:1293]
---analyzing modificationPoint position: 281
location: LevenbergMarquardtOptimizer.java804
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = k; j < jacobian.length; ++j) { 	double aki = jacobian[j][permutation[i]]; 	norm2 += aki[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1294, #gens: 355, #ops: 1, parent:1293] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1294
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1294/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(647): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = k; j < jacobian.length; ++j) { 	double aki = jacobian[j][permutation[i]]; 	norm2 += aki[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1293(f=2.0), 1294(f=18.0), )
Selected to next generation: IDs2--> (1293(f=2.0), )
----------Running generation: 648, population size: 1

***** Generation 648 : 0
**Parent Variant: [Variant id: 1295, #gens: 356, #ops: 0, parent:-]

--Child created id: 1296
--Creating new operations for variant [Variant id: 1296, #gens: 356, #ops: 0, parent:1295]
---analyzing modificationPoint position: 303
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  setParRelativeTolerance(1.0E-10)
---analyzing modificationPoint position: 328
Templates availables74
Attempts Base Ingredients  1 total 74
---modifPoint 1 not mutation generated in  final double residual = targetValues[i] - objective[i]
---analyzing modificationPoint position: 25
---modifPoint 2 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 112
location: LevenbergMarquardtOptimizer.java744
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1296, #gens: 355, #ops: 1, parent:1295] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1296
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1296/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 18] ,[]
-Valid?: |false|15|18|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(648): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1295(f=2.0), 1296(f=15.0), )
Selected to next generation: IDs2--> (1295(f=2.0), )
----------Running generation: 649, population size: 1

***** Generation 649 : 0
**Parent Variant: [Variant id: 1297, #gens: 356, #ops: 0, parent:-]

--Child created id: 1298
--Creating new operations for variant [Variant id: 1298, #gens: 356, #ops: 0, parent:1297]
---analyzing modificationPoint position: 341
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [jacobianEvaluations]
--> var from patch: jacobianEvaluations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java336
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `return jacobianEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 336, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `return jacobianEvaluations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1298, #gens: 357, #ops: 1, parent:1297] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1298, errors: [AbstractLeastSquaresOptimizer.java:337: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.VectorialPointValuePair
		residualsWeights = weights.clone(); 		return jacobianEvaluations;
		                                    		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(649): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `residualsWeights = weights.clone() ` -topatch--> `return jacobianEvaluations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1297(f=2.0), 1298(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1297(f=2.0), )
----------Running generation: 650, population size: 1

***** Generation 650 : 0
**Parent Variant: [Variant id: 1299, #gens: 356, #ops: 0, parent:-]

--Child created id: 1300
--Creating new operations for variant [Variant id: 1300, #gens: 356, #ops: 0, parent:1299]
---analyzing modificationPoint position: 299
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // set up the superclass with a default  max cost evaluations setting setMaxIterations(1000)
---analyzing modificationPoint position: 52
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  double gNorm = java.lang.Math.sqrt(sum2)
---analyzing modificationPoint position: 114
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 2 not mutation generated in  double sum = 0
---analyzing modificationPoint position: 345
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLeastSquaresOptimizer.java342
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `cols = point.length ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 342, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `cols = point.length ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1300, #gens: 356, #ops: 1, parent:1299] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1300
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1300/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(650): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `cols = point.length ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1299(f=2.0), 1300(f=18.0), )
Selected to next generation: IDs2--> (1299(f=2.0), )
----------Running generation: 651, population size: 1

***** Generation 651 : 0
**Parent Variant: [Variant id: 1301, #gens: 356, #ops: 0, parent:-]

--Child created id: 1302
--Creating new operations for variant [Variant id: 1302, #gens: 356, #ops: 0, parent:1301]
---analyzing modificationPoint position: 16
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  double correction = fp / (delta * sum2)
---analyzing modificationPoint position: 275
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [beta, cols]
--> var from patch: beta spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java793
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm[k] = java.lang.Math.sqrt(norm2) ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 793, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm[k] = java.lang.Math.sqrt(norm2) ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1302, #gens: 357, #ops: 1, parent:1301] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1302
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1302/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(651): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacNorm[k] = java.lang.Math.sqrt(norm2) ` -topatch--> `beta = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1301(f=2.0), 1302(f=2.0), )
Selected to next generation: IDs2--> (1301(f=2.0), )
----------Running generation: 652, population size: 1

***** Generation 652 : 0
**Parent Variant: [Variant id: 1303, #gens: 356, #ops: 0, parent:-]

--Child created id: 1304
--Creating new operations for variant [Variant id: 1304, #gens: 356, #ops: 0, parent:1303]
---analyzing modificationPoint position: 18
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [fp, dxNorm, delta]
--> var from patch: fp spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: dxNorm spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: delta spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java632
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `fp = dxNorm - delta` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 632, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `fp = dxNorm - delta` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1304, #gens: 356, #ops: 1, parent:1303] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1304
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1304/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 18] ,[]
-Valid?: |false|9|18|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(652): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `fp = dxNorm - delta` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1303(f=2.0), 1304(f=9.0), )
Selected to next generation: IDs2--> (1303(f=2.0), )
----------Running generation: 653, population size: 1

***** Generation 653 : 0
**Parent Variant: [Variant id: 1305, #gens: 356, #ops: 0, parent:-]

--Child created id: 1306
--Creating new operations for variant [Variant id: 1306, #gens: 356, #ops: 0, parent:1305]
---analyzing modificationPoint position: 321
Templates availables74
Attempts Base Ingredients  1 total 74
vars from patch [jacobian, rows, cols]
--> var from patch: jacobian spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: rows spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLeastSquaresOptimizer.java194
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `ji[j] *= factor ` -topatch--> `jacobian = new double[rows][cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer line: 194, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `ji[j] *= factor ` -topatch--> `jacobian = new double[rows][cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1306, #gens: 357, #ops: 1, parent:1305] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1306, errors: [AbstractLeastSquaresOptimizer.java:377: error: illegal start of expression
	 * Guess the errors in optimized parameters.
	 ^, AbstractLeastSquaresOptimizer.java:377: error: ';' expected
	 * Guess the errors in optimized parameters.
	        ^, AbstractLeastSquaresOptimizer.java:377: error: ';' expected
	 * Guess the errors in optimized parameters.
	                   ^, AbstractLeastSquaresOptimizer.java:377: error: ';' expected
	 * Guess the errors in optimized parameters.
	                                ^, AbstractLeastSquaresOptimizer.java:377: error: <identifier> expected
	 * Guess the errors in optimized parameters.
	                                            ^, AbstractLeastSquaresOptimizer.java:378: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	      ^, AbstractLeastSquaresOptimizer.java:378: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	 ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                            ^, AbstractLeastSquaresOptimizer.java:378: error: not a statement
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                             ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                  ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                           ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                       ^, AbstractLeastSquaresOptimizer.java:378: error: ';' expected
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                ^, AbstractLeastSquaresOptimizer.java:378: error: illegal start of type
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                            ^, AbstractLeastSquaresOptimizer.java:378: error: illegal start of expression
	 * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>
	                                                                              ^, AbstractLeastSquaresOptimizer.java:380: error: illegal start of expression
	 * @return errors in optimized parameters
	 ^, AbstractLeastSquaresOptimizer.java:380: error: <identifier> expected
	 * @return errors in optimized parameters
	    ^, AbstractLeastSquaresOptimizer.java:380: error: ';' expected
	 * @return errors in optimized parameters
	                 ^, AbstractLeastSquaresOptimizer.java:380: error: ';' expected
	 * @return errors in optimized parameters
	                                         ^, AbstractLeastSquaresOptimizer.java:381: error: <identifier> expected
	 * @exception FunctionEvaluationException
	                                         ^, AbstractLeastSquaresOptimizer.java:382: error: '(' expected
	 * 		if the function jacobian cannot b evaluated
	   		  ^, AbstractLeastSquaresOptimizer.java:382: error: ')' expected
	 * 		if the function jacobian cannot b evaluated
	   		      ^, AbstractLeastSquaresOptimizer.java:382: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                        ^, AbstractLeastSquaresOptimizer.java:382: error: variable declaration not allowed here
	 * 		if the function jacobian cannot b evaluated
	   		                ^, AbstractLeastSquaresOptimizer.java:382: error: ';' expected
	 * 		if the function jacobian cannot b evaluated
	   		                                 ^, AbstractLeastSquaresOptimizer.java:383: error: illegal start of expression
	 * @exception OptimizationException
	   ^, AbstractLeastSquaresOptimizer.java:384: error: illegal start of expression
	 * 		if the covariances matrix cannot be computed
	   		^, AbstractLeastSquaresOptimizer.java:384: error: not a statement
	 * 		if the covariances matrix cannot be computed
	 ^, AbstractLeastSquaresOptimizer.java:384: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                  ^, AbstractLeastSquaresOptimizer.java:384: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                ^, AbstractLeastSquaresOptimizer.java:384: error: ';' expected
	 * 		if the covariances matrix cannot be computed
	   		                                            ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		      ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                           ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                      ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                   ^, AbstractLeastSquaresOptimizer.java:385: error: ';' expected
	 * 		or the number of degrees of freedom is not positive (number of measurements
	   		                                                              ^, AbstractLeastSquaresOptimizer.java:386: error: not a statement
	 * 		lesser or equal to number of parameters)
	 ^, AbstractLeastSquaresOptimizer.java:386: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		      ^, AbstractLeastSquaresOptimizer.java:386: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		               ^, AbstractLeastSquaresOptimizer.java:386: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                         ^, AbstractLeastSquaresOptimizer.java:386: error: ';' expected
	 * 		lesser or equal to number of parameters)
	   		                                       ^, AbstractLeastSquaresOptimizer.java:387: error: illegal start of expression
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	^, AbstractLeastSquaresOptimizer.java:387: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                     ^, AbstractLeastSquaresOptimizer.java:387: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                      ^, AbstractLeastSquaresOptimizer.java:387: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                                                  ^, AbstractLeastSquaresOptimizer.java:387: error: not a statement
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                                                                                        ^, AbstractLeastSquaresOptimizer.java:387: error: ';' expected
	 */ 	public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException { 		if (rows <= cols) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols);} 		double[] errors = new double[cols]; 		final double c = java.lang.Math.sqrt(getChiSquare() / (rows - cols)); 		double[][] covar = getCovariances(); 		for (int i = 0; i < errors.length; ++i) { 			errors[i] = java.lang.Math.sqrt(covar[i][i]) * c;} 		return errors;} 	/**
	    	                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:389: error: illegal start of expression
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	^, AbstractLeastSquaresOptimizer.java:389: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                            ^, AbstractLeastSquaresOptimizer.java:389: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                  ^, AbstractLeastSquaresOptimizer.java:389: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                         ^, AbstractLeastSquaresOptimizer.java:389: error: <identifier> expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                 ^, AbstractLeastSquaresOptimizer.java:389: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                           ^, AbstractLeastSquaresOptimizer.java:389: error: not a statement
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                           ^, AbstractLeastSquaresOptimizer.java:389: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                       ^, AbstractLeastSquaresOptimizer.java:389: error: not a statement
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                             ^, AbstractLeastSquaresOptimizer.java:389: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                                                   ^, AbstractLeastSquaresOptimizer.java:389: error: not a statement
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                                                              ^, AbstractLeastSquaresOptimizer.java:389: error: ';' expected
	 */ 	public org.apache.commons.math.optimization.VectorialPointValuePair optimize(final org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException { 		if (target.length != weights.length) { 			throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);} 		// reset counters 		iterations = 0; 		objectiveEvaluations = 0; 		jacobianEvaluations = 0; 		// store least squares problem characteristics 		function = f; 		jF = f.jacobian(); 		targetValues = target.clone(); 		residualsWeights = weights.clone(); 		this.point = startPoint.clone(); 		this.residuals = new double[target.length]; 		// arrays shared with the other private methods 		rows = target.length; 		cols = point.length; 		jacobian = new double[rows][cols]; 		cost = java.lang.Double.POSITIVE_INFINITY; 		return doOptimize();} 	/**
	    	                                                                                                                                                                                                                                                                                                                                                                                                       ^, AbstractLeastSquaresOptimizer.java:390: error: illegal start of expression
	 * Perform the bulk of optimization algorithm.
	 ^, AbstractLeastSquaresOptimizer.java:390: error: ';' expected
	 * Perform the bulk of optimization algorithm.
	          ^, AbstractLeastSquaresOptimizer.java:390: error: ';' expected
	 * Perform the bulk of optimization algorithm.
	                   ^, AbstractLeastSquaresOptimizer.java:390: error: ';' expected
	 * Perform the bulk of optimization algorithm.
	                                   ^, AbstractLeastSquaresOptimizer.java:390: error: <identifier> expected
	 * Perform the bulk of optimization algorithm.
	                                              ^, AbstractLeastSquaresOptimizer.java:392: error: illegal start of expression
	 * @return the point/value pair giving the optimal value for objective function
	 ^, AbstractLeastSquaresOptimizer.java:392: error: <identifier> expected
	 * @return the point/value pair giving the optimal value for objective function
	    ^, AbstractLeastSquaresOptimizer.java:392: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	              ^, AbstractLeastSquaresOptimizer.java:392: error: illegal start of expression
	 * @return the point/value pair giving the optimal value for objective function
	                    ^, AbstractLeastSquaresOptimizer.java:392: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                          ^, AbstractLeastSquaresOptimizer.java:392: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                      ^, AbstractLeastSquaresOptimizer.java:392: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                  ^, AbstractLeastSquaresOptimizer.java:392: error: not a statement
	 * @return the point/value pair giving the optimal value for objective function
	                                                   ^, AbstractLeastSquaresOptimizer.java:392: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                        ^, AbstractLeastSquaresOptimizer.java:392: error: '(' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                            ^, AbstractLeastSquaresOptimizer.java:392: error: ';' expected
	 * @return the point/value pair giving the optimal value for objective function
	                                                                               ^, AbstractLeastSquaresOptimizer.java:393: error: illegal start of expression
	 * @exception FunctionEvaluationException
	 ^, AbstractLeastSquaresOptimizer.java:393: error: ';' expected
	 * @exception FunctionEvaluationException
	  ^, AbstractLeastSquaresOptimizer.java:393: error: not a statement
	 * @exception FunctionEvaluationException
	    ^, AbstractLeastSquaresOptimizer.java:393: error: ')' expected
	 * @exception FunctionEvaluationException
	             ^, AbstractLeastSquaresOptimizer.java:394: error: illegal start of expression
	 * 		if the objective function throws one during
	   		^, AbstractLeastSquaresOptimizer.java:394: error: not a statement
	 * 		if the objective function throws one during
	 ^, AbstractLeastSquaresOptimizer.java:394: error: ';' expected
	 * 		if the objective function throws one during
	   		                ^, AbstractLeastSquaresOptimizer.java:394: error: not a statement
	 * 		if the objective function throws one during
	   		                 ^, AbstractLeastSquaresOptimizer.java:394: error: ';' expected
	 * 		if the objective function throws one during
	   		                         ^, AbstractLeastSquaresOptimizer.java:394: error: ';' expected
	 * 		if the objective function throws one during
	   		                                           ^, AbstractLeastSquaresOptimizer.java:395: error: ';' expected
	 * 		the search
	   		          ^, AbstractLeastSquaresOptimizer.java:396: error: <identifier> expected
	 * @exception OptimizationException
	                                   ^, AbstractLeastSquaresOptimizer.java:397: error: '(' expected
	 * 		if the algorithm failed to converge
	   		  ^, AbstractLeastSquaresOptimizer.java:397: error: ')' expected
	 * 		if the algorithm failed to converge
	   		      ^, AbstractLeastSquaresOptimizer.java:397: error: ';' expected
	 * 		if the algorithm failed to converge
	   		                       ^, AbstractLeastSquaresOptimizer.java:397: error: variable declaration not allowed here
	 * 		if the algorithm failed to converge
	   		                 ^, AbstractLeastSquaresOptimizer.java:397: error: ';' expected
	 * 		if the algorithm failed to converge
	   		                                   ^, AbstractLeastSquaresOptimizer.java:398: error: <identifier> expected
	 * @exception IllegalArgumentException
	                                      ^, AbstractLeastSquaresOptimizer.java:399: error: '(' expected
	 * 		if the start point dimension is wrong
	   		  ^, AbstractLeastSquaresOptimizer.java:399: error: ')' expected
	 * 		if the start point dimension is wrong
	   		      ^, AbstractLeastSquaresOptimizer.java:399: error: ';' expected
	 * 		if the start point dimension is wrong
	   		                  ^, AbstractLeastSquaresOptimizer.java:399: error: variable declaration not allowed here
	 * 		if the start point dimension is wrong
	   		             ^, AbstractLeastSquaresOptimizer.java:399: error: ';' expected
	 * 		if the start point dimension is wrong
	   		                               ^, AbstractLeastSquaresOptimizer.java:400: error: illegal start of expression
	 */ 	protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;}
	  ^]
Ingredient counter is Zero
---Undoing: gnrtn(653): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `ji[j] *= factor ` -topatch--> `jacobian = new double[rows][cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1305(f=2.0), 1306(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1305(f=2.0), )
----------Running generation: 654, population size: 1

***** Generation 654 : 0
**Parent Variant: [Variant id: 1307, #gens: 356, #ops: 0, parent:-]

--Child created id: 1308
--Creating new operations for variant [Variant id: 1308, #gens: 356, #ops: 0, parent:1307]
---analyzing modificationPoint position: 69
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  dxNorm += s * s
---analyzing modificationPoint position: 65
Templates availables50
Attempts Base Ingredients  1 total 50
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]
---analyzing modificationPoint position: 239
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 2 not mutation generated in  if (fp <= (0.1 * delta)) { 	lmPar = 0; 	return; }
---analyzing modificationPoint position: 133
---modifPoint 3 not mutation generated in  return
---analyzing modificationPoint position: 64
location: LevenbergMarquardtOptimizer.java586
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1308, #gens: 355, #ops: 1, parent:1307] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 1308
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1308/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 18] ,[]
-Valid?: |false|10|18|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(654): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1307(f=2.0), 1308(f=10.0), )
Selected to next generation: IDs2--> (1307(f=2.0), )
----------Running generation: 655, population size: 1

***** Generation 655 : 0
**Parent Variant: [Variant id: 1309, #gens: 356, #ops: 0, parent:-]

--Child created id: 1310
--Creating new operations for variant [Variant id: 1310, #gens: 356, #ops: 0, parent:1309]
---analyzing modificationPoint position: 233
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 24
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 48
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  for (int i = 0; i <= j; ++i) { 	sum += jacobian[i][pj] * qy[i]; }
---analyzing modificationPoint position: 337
location: AbstractLeastSquaresOptimizer.java330
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobianEvaluations = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1310, #gens: 355, #ops: 1, parent:1309] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1310
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1310/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(655): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `jacobianEvaluations = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1309(f=2.0), 1310(f=2.0), )
Selected to next generation: IDs2--> (1309(f=2.0), )
----------Running generation: 656, population size: 1

***** Generation 656 : 0
**Parent Variant: [Variant id: 1311, #gens: 356, #ops: 0, parent:-]

--Child created id: 1312
--Creating new operations for variant [Variant id: 1312, #gens: 356, #ops: 0, parent:1311]
---analyzing modificationPoint position: 275
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  jacNorm[k] = java.lang.Math.sqrt(norm2)
---analyzing modificationPoint position: 24
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 1 not mutation generated in  int pj = permutation[j]
---analyzing modificationPoint position: 308
Templates availables90
Attempts Base Ingredients  1 total 90
---modifPoint 2 not mutation generated in  this.parRelativeTolerance = parRelativeTolerance
---analyzing modificationPoint position: 183
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 3 not mutation generated in  lmNorm += s * s
---analyzing modificationPoint position: 65
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 4 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double s = diag[pj] * lmDir[pj]; 	[...]
---analyzing modificationPoint position: 196
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 5 not mutation generated in  work1[j] = 0
---analyzing modificationPoint position: 112
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 6 not mutation generated in  for (int j = nSing - 1; j >= 0; --j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = j + [...]
---analyzing modificationPoint position: 81
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 7 not mutation generated in  // eliminate the diagonal matrix d using a Givens rotation for (int j = 0; j < solvedCols; ++j) {  	[...]
---analyzing modificationPoint position: 349
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [this.relativeThreshold]
--> var from patch: this.relativeThreshold spoon.support.reflect.code.CtFieldWriteImpl
location: SimpleVectorialValueChecker.java52
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_AB[...] ` -topatch--> `this.relativeThreshold = relativeThreshold` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.SimpleVectorialValueChecker line: 52, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_AB[...] ` -topatch--> `this.relativeThreshold = relativeThreshold` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1312, #gens: 356, #ops: 1, parent:1311] gen mutated: 1 , gen not mut: 8, gen not applied  0
-The child does NOT compile: 1312, errors: [SimpleVectorialValueChecker.java:67: error: variable relativeThreshold might already have been assigned
		this.relativeThreshold = relativeThreshold;} 	/**
		    ^, SimpleVectorialValueChecker.java:67: error: variable absoluteThreshold might not have been initialized
		this.relativeThreshold = relativeThreshold;} 	/**
		                                           ^]
Ingredient counter is Zero
---Undoing: gnrtn(656): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.absoluteThreshold = org.apache.commons.math.optimization.SimpleVectorialValueChecker.DEFAULT_AB[...] ` -topatch--> `this.relativeThreshold = relativeThreshold` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1311(f=2.0), 1312(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1311(f=2.0), )
----------Running generation: 657, population size: 1

***** Generation 657 : 0
**Parent Variant: [Variant id: 1313, #gens: 356, #ops: 0, parent:-]

--Child created id: 1314
--Creating new operations for variant [Variant id: 1314, #gens: 356, #ops: 0, parent:1313]
---analyzing modificationPoint position: 247
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  y[i] -= gamma * jacobian[i][pk]
---analyzing modificationPoint position: 43
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  if (rank == solvedCols) { 	for (int j = 0; j < solvedCols; ++j) { 		int pj = permutation[j]; 		work1[...]
---analyzing modificationPoint position: 299
location: LevenbergMarquardtOptimizer.java169
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1314, #gens: 355, #ops: 1, parent:1313] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1314
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1314/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(657): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// set up the superclass with a default  max cost evaluations setting setMaxIterations(1000) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1313(f=2.0), 1314(f=2.0), )
Selected to next generation: IDs2--> (1313(f=2.0), )
----------Running generation: 658, population size: 1

***** Generation 658 : 0
**Parent Variant: [Variant id: 1315, #gens: 356, #ops: 0, parent:-]

--Child created id: 1316
--Creating new operations for variant [Variant id: 1316, #gens: 356, #ops: 0, parent:1315]
---analyzing modificationPoint position: 214
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  xNorm = 0
---analyzing modificationPoint position: 217
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  xNorm += xK * xK
---analyzing modificationPoint position: 23
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [k, solvedCols, permutation, jacobian, pk, diagR]
--> var from patch: k spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: solvedCols spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: permutation spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: jacobian spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: pk spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: diagR spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java535
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `// now we don't need Q anymore, // so let jacobian contain the R matrix with its diagonal elements f[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 535, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `// now we don't need Q anymore, // so let jacobian contain the R matrix with its diagonal elements f[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 1316, #gens: 357, #ops: 1, parent:1315] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1316
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1316/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(658): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...] ` -topatch--> `// now we don't need Q anymore, // so let jacobian contain the R matrix with its diagonal elements f[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1315(f=2.0), 1316(f=2.0), )
Selected to next generation: IDs2--> (1315(f=2.0), )
----------Running generation: 659, population size: 1

***** Generation 659 : 0
**Parent Variant: [Variant id: 1317, #gens: 356, #ops: 0, parent:-]

--Child created id: 1318
--Creating new operations for variant [Variant id: 1318, #gens: 356, #ops: 0, parent:1317]
---analyzing modificationPoint position: 262
location: LevenbergMarquardtOptimizer.java263
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1318, #gens: 355, #ops: 1, parent:1317] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1318
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1318/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 18, was successful: false, cases executed: 18] ,[]
-Valid?: |false|18|18|[]|, fitness 18.0
Ingredient counter is Zero
---Undoing: gnrtn(659): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// evaluate the function at the starting point and calculate its norm updateResidualsAndCost() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1317(f=2.0), 1318(f=18.0), )
Selected to next generation: IDs2--> (1317(f=2.0), )
----------Running generation: 660, population size: 1

***** Generation 660 : 0
**Parent Variant: [Variant id: 1319, #gens: 356, #ops: 0, parent:-]

--Child created id: 1320
--Creating new operations for variant [Variant id: 1320, #gens: 356, #ops: 0, parent:1319]
---analyzing modificationPoint position: 153
location: LevenbergMarquardtOptimizer.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1320, #gens: 355, #ops: 1, parent:1319] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1320
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1320/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 18] ,[]
-Valid?: |false|5|18|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(660): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `xNorm = java.lang.Math.sqrt(xNorm) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1319(f=2.0), 1320(f=5.0), )
Selected to next generation: IDs2--> (1319(f=2.0), )
----------Running generation: 661, population size: 1

***** Generation 661 : 0
**Parent Variant: [Variant id: 1321, #gens: 356, #ops: 0, parent:-]

--Child created id: 1322
--Creating new operations for variant [Variant id: 1322, #gens: 356, #ops: 0, parent:1321]
---analyzing modificationPoint position: 119
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  lmDir[permutation[j]] = work[j]
---analyzing modificationPoint position: 217
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [jacNorm, cols]
--> var from patch: jacNorm spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: cols spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java418
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 418, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1322, #gens: 357, #ops: 1, parent:1321] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1322
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1322/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(661): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `xNorm += xK * xK ` -topatch--> `jacNorm = new double[cols]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1321(f=2.0), 1322(f=2.0), )
Selected to next generation: IDs2--> (1321(f=2.0), )
----------Running generation: 662, population size: 1

***** Generation 662 : 0
**Parent Variant: [Variant id: 1323, #gens: 356, #ops: 0, parent:-]

--Child created id: 1324
--Creating new operations for variant [Variant id: 1324, #gens: 356, #ops: 0, parent:1323]
---analyzing modificationPoint position: 107
---modifPoint 0 not mutation generated in  // solve the triangular system for z, if the system is // singular, then obtain a least squares solu[...]
---analyzing modificationPoint position: 67
---modifPoint 1 not mutation generated in  double s = diag[pj] * lmDir[pj]
---analyzing modificationPoint position: 35
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch []
location: LevenbergMarquardtOptimizer.java426
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 426, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1324, #gens: 357, #ops: 1, parent:1323] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1324
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1324/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(662): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// failed iteration, reset the previous values cost = previousCost ` -topatch--> `// check orthogonality between function vector and jacobian columns double maxCosine = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1323(f=2.0), 1324(f=2.0), )
Selected to next generation: IDs2--> (1323(f=2.0), )
----------Running generation: 663, population size: 1

***** Generation 663 : 0
**Parent Variant: [Variant id: 1325, #gens: 356, #ops: 0, parent:-]

--Child created id: 1326
--Creating new operations for variant [Variant id: 1326, #gens: 356, #ops: 0, parent:1325]
---analyzing modificationPoint position: 165
Templates availables34
Attempts Base Ingredients  1 total 34
---modifPoint 0 not mutation generated in  if (maxCosine <= orthoTolerance) { 	// convergence has been reached 	return current; }
---analyzing modificationPoint position: 23
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  for (int j = 0; j < solvedCols; ++j) { 	int pj = permutation[j]; 	double sum = 0; 	for (int i = 0; i[...]
---analyzing modificationPoint position: 58
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  // evaluate the function at the current value of lmPar if (lmPar == 0) { 	lmPar = java.lang.Math.max[...]
---analyzing modificationPoint position: 18
Templates availables90
Attempts Base Ingredients  1 total 90
vars from patch [lmPar, parl, correction]
--> var from patch: lmPar spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: parl spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: correction spoon.support.reflect.code.CtVariableReadImpl
location: LevenbergMarquardtOptimizer.java632
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 632, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1326, #gens: 356, #ops: 1, parent:1325] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1326
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1326/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(663): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction) ` -topatch--> `// compute an improved estimate for lmPar lmPar = java.lang.Math.max(parl, lmPar + correction)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1325(f=2.0), 1326(f=2.0), )
Selected to next generation: IDs2--> (1325(f=2.0), )
----------Running generation: 664, population size: 1

***** Generation 664 : 0
**Parent Variant: [Variant id: 1327, #gens: 356, #ops: 0, parent:-]

--Child created id: 1328
--Creating new operations for variant [Variant id: 1328, #gens: 356, #ops: 0, parent:1327]
---analyzing modificationPoint position: 90
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 0 not mutation generated in  // determine a Givens rotation which eliminates the // appropriate element in the current row of d i[...]
---analyzing modificationPoint position: 168
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 1 not mutation generated in  // inner loop for (double ratio = 0; ratio < 1.0E-4;) {  	// save the state 	for (int j = 0; j < sol[...]
---analyzing modificationPoint position: 102
Templates availables294
Attempts Base Ingredients  1 total 294
---modifPoint 2 not mutation generated in  final double temp2 = (cos * rik) + (sin * lmDiag[i])
---analyzing modificationPoint position: 59
Templates availables67
Attempts Base Ingredients  1 total 67
---modifPoint 3 not mutation generated in  double sPar = java.lang.Math.sqrt(lmPar)
---analyzing modificationPoint position: 141
Templates availables15
Attempts Base Ingredients  1 total 15
vars from patch [residuals]
--> var from patch: residuals spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java278
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// compute Qt.res qTy(residuals) ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 278, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// compute Qt.res qTy(residuals) ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1328, #gens: 356, #ops: 1, parent:1327] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 1328
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1328/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 18] ,[]
-Valid?: |false|2|18|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(664): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `// compute Qt.res qTy(residuals) ` -topatch--> `// compute Qt.res qTy(residuals)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1327(f=2.0), 1328(f=2.0), )
Selected to next generation: IDs2--> (1327(f=2.0), )
----------Running generation: 665, population size: 1

***** Generation 665 : 0
**Parent Variant: [Variant id: 1329, #gens: 356, #ops: 0, parent:-]

--Child created id: 1330
--Creating new operations for variant [Variant id: 1330, #gens: 356, #ops: 0, parent:1329]
---analyzing modificationPoint position: 64
location: LevenbergMarquardtOptimizer.java586
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1330, #gens: 355, #ops: 1, parent:1329] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1330
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1330/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 18] ,[]
-Valid?: |false|10|18|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(665): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `dxNorm = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1329(f=2.0), 1330(f=10.0), )
Selected to next generation: IDs2--> (1329(f=2.0), )
----------Running generation: 666, population size: 1

***** Generation 666 : 0
**Parent Variant: [Variant id: 1331, #gens: 356, #ops: 0, parent:-]

--Child created id: 1332
--Creating new operations for variant [Variant id: 1332, #gens: 356, #ops: 0, parent:1331]
---analyzing modificationPoint position: 40
Templates availables294
Attempts Base Ingredients  1 total 294
vars from patch [current, point, objective]
--> var from patch: current spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: objective spoon.support.reflect.code.CtFieldReadImpl
location: LevenbergMarquardtOptimizer.java432
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer line: 432, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1332, #gens: 357, #ops: 1, parent:1331] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1332
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1332/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.general.MinpackTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 18] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout818secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/variant-1332/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-64/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.stat.data.LotteryTest  org.apache.commons.math.linear.FieldMatrixImplTest  org.apache.commons.math.ode.sampling.StepNormalizerTest  org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math.geometry.RotationOrderTest  org.apache.commons.math.analysis.solvers.NewtonSolverTest  org.apache.commons.math.estimation.EstimatedParameterTest  org.apache.commons.math.linear.CholeskyDecompositionImplTest  org.apache.commons.math.linear.Array2DRowRealMatrixTest  org.apache.commons.math.linear.SparseRealMatrixTest  org.apache.commons.math.util.OpenIntToFieldTest  org.apache.commons.math.analysis.BinaryFunctionTest  org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math.util.MultidimensionalCounterTest  org.apache.commons.math.optimization.fitting.PolynomialFitterTest  org.apache.commons.math.linear.ArrayRealVectorTest  org.apache.commons.math.distribution.HypergeometricDistributionTest  org.apache.commons.math.random.RandomAdaptorTest  org.apache.commons.math.ode.FirstOrderConverterTest  org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math.exception.OutOfRangeExceptionTest  org.apache.commons.math.stat.inference.TestUtilsTest  org.apache.commons.math.stat.data.LewTest  org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest  org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest  org.apache.commons.math.distribution.GammaDistributionTest  org.apache.commons.math.stat.descriptive.rank.MedianTest  org.apache.commons.math.distribution.ZipfDistributionTest  org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math.stat.CertifiedDataTest  org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math.complex.FrenchComplexFormatTest  org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math.DuplicateSampleAbscissaExceptionTest  org.apache.commons.math.estimation.MinpackTest  org.apache.commons.math.genetics.FixedGenerationCountTest  org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math.fraction.BigFractionFormatTest  org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math.random.RandomDataTest  org.apache.commons.math.distribution.FDistributionTest  org.apache.commons.math.FunctionEvaluationExceptionTest  org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math.stat.inference.TTestFactoryTest  org.apache.commons.math.stat.descriptive.moment.SkewnessTest  org.apache.commons.math.special.GammaTest  org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math.analysis.integration.RombergIntegratorTest  org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math.complex.ComplexTest  org.apache.commons.math.distribution.BetaDistributionTest  org.apache.commons.math.special.ErfTest  org.apache.commons.math.special.BetaTest  org.apache.commons.math.ode.nonstiff.GillIntegratorTest  org.apache.commons.math.random.EmpiricalDistributionTest  org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest  org.apache.commons.math.random.AbstractRandomGeneratorTest  org.apache.commons.math.fraction.BigFractionFieldTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math.linear.BiDiagonalTransformerTest  org.apache.commons.math.util.DefaultTransformerTest  org.apache.commons.math.linear.LUDecompositionImplTest  org.apache.commons.math.random.ValueServerTest  org.apache.commons.math.stat.descriptive.moment.MeanTest  org.apache.commons.math.util.BigRealFieldTest  org.apache.commons.math.linear.QRDecompositionImplTest  org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math.stat.descriptive.moment.VarianceTest  org.apache.commons.math.genetics.OnePointCrossoverTest  org.apache.commons.math.stat.ranking.NaturalRankingTest  org.apache.commons.math.optimization.linear.SimplexSolverTest  org.apache.commons.math.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math.linear.BlockRealMatrixTest  org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math.random.MersenneTwisterTest  org.apache.commons.math.genetics.RandomKeyTest  org.apache.commons.math.stat.descriptive.summary.ProductTest  org.apache.commons.math.fraction.FractionTest  org.apache.commons.math.analysis.ComposableFunctionTest  org.apache.commons.math.util.OpenIntToDoubleHashMapTest  org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest  org.apache.commons.math.optimization.univariate.BracketFinderTest  org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math.genetics.ChromosomeTest  org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest  org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math.geometry.Vector3DTest  org.apache.commons.math.stat.descriptive.rank.MinTest  org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest  org.apache.commons.math.linear.FieldLUDecompositionImplTest  org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math.transform.FastHadamardTransformerTest  org.apache.commons.math.optimization.fitting.HarmonicFitterTest  org.apache.commons.math.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math.random.GaussianRandomGeneratorTest  org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math.linear.FrenchRealVectorFormatTest  org.apache.commons.math.fraction.BigFractionTest  org.apache.commons.math.optimization.fitting.CurveFitterTest  org.apache.commons.math.util.ContinuedFractionTest  org.apache.commons.math.util.TransformerMapTest  org.apache.commons.math.analysis.solvers.BisectionSolverTest  org.apache.commons.math.genetics.BinaryChromosomeTest  org.apache.commons.math.linear.BlockFieldMatrixTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math.linear.SingularValueDecompositionImplTest  org.apache.commons.math.distribution.TDistributionTest  org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math.linear.InvalidMatrixExceptionTest  org.apache.commons.math.distribution.BinomialDistributionTest  org.apache.commons.math.linear.EigenSolverTest  org.apache.commons.math.stat.inference.TTestTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math.random.UniformRandomGeneratorTest  org.apache.commons.math.stat.descriptive.rank.PercentileTest  org.apache.commons.math.ode.events.EventStateTest  org.apache.commons.math.analysis.solvers.RiddersSolverTest  org.apache.commons.math.linear.ArrayFieldVectorTest  org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest  org.apache.commons.math.ode.ContinuousOutputModelTest  org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math.optimization.linear.SimplexTableauTest  org.apache.commons.math.ConvergenceExceptionTest  org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest  org.apache.commons.math.util.ResizableDoubleArrayTest  org.apache.commons.math.complex.ComplexFormatTest  org.apache.commons.math.linear.RealMatrixImplTest  org.apache.commons.math.stat.descriptive.summary.SumTest  org.apache.commons.math.linear.SparseFieldVectorTest  org.apache.commons.math.genetics.ElitisticListPopulationTest  org.apache.commons.math.stat.descriptive.summary.SumSqTest  org.apache.commons.math.linear.SparseRealVectorTest  org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math.linear.EigenDecompositionImplTest  org.apache.commons.math.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math.stat.descriptive.moment.KurtosisTest  org.apache.commons.math.transform.FastFourierTransformerTest  org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math.distribution.NormalDistributionTest  org.apache.commons.math.distribution.PoissonDistributionTest  org.apache.commons.math.geometry.Vector3DFormatTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math.genetics.TournamentSelectionTest  org.apache.commons.math.optimization.general.MinpackTest  org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest  org.apache.commons.math.linear.AbstractRealVectorTest  org.apache.commons.math.analysis.solvers.BrentSolverTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math.exception.NotPositiveExceptionTest  org.apache.commons.math.estimation.WeightedMeasurementTest  org.apache.commons.math.stat.inference.ChiSquareTestTest  org.apache.commons.math.optimization.general.PowellOptimizerTest  org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest  org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math.linear.MatrixIndexExceptionTest  org.apache.commons.math.genetics.BinaryMutationTest  org.apache.commons.math.fraction.FractionFormatTest  org.apache.commons.math.distribution.PascalDistributionTest  org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math.exception.NumberIsTooSmallExceptionTest  org.apache.commons.math.util.MathUtilsTest  org.apache.commons.math.complex.ComplexUtilsTest  org.apache.commons.math.exception.DimensionMismatchExceptionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest  org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest  org.apache.commons.math.optimization.direct.MultiDirectionalTest  org.apache.commons.math.genetics.FitnessCachingTest  org.apache.commons.math.linear.BigMatrixImplTest  org.apache.commons.math.stat.inference.ChiSquareFactoryTest  org.apache.commons.math.fraction.FractionFieldTest  org.apache.commons.math.stat.descriptive.InteractionTest  org.apache.commons.math.stat.correlation.CovarianceTest  org.apache.commons.math.exception.NumberIsTooLargeExceptionTest  org.apache.commons.math.linear.QRSolverTest  org.apache.commons.math.linear.RealVectorFormatTest  org.apache.commons.math.analysis.solvers.LaguerreSolverTest  org.apache.commons.math.linear.CholeskySolverTest  org.apache.commons.math.distribution.WeibullDistributionTest  org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest  org.apache.commons.math.stat.StatUtilsTest  org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math.analysis.solvers.MullerSolverTest  org.apache.commons.math.linear.TriDiagonalTransformerTest  org.apache.commons.math.distribution.ChiSquareDistributionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest  org.apache.commons.math.transform.FastSineTransformerTest  org.apache.commons.math.stat.inference.OneWayAnovaTest  org.apache.commons.math.optimization.univariate.BrentOptimizerTest  org.apache.commons.math.transform.FastCosineTransformerTest  org.apache.commons.math.ArgumentOutsideDomainExceptionTest  org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math.stat.descriptive.rank.MaxTest  org.apache.commons.math.complex.ComplexFieldTest  org.apache.commons.math.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math.MaxIterationsExceededExceptionTest  org.apache.commons.math.linear.MatrixUtilsTest  org.apache.commons.math.optimization.direct.NelderMeadTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest  org.apache.commons.math.geometry.RotationTest  org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math.linear.SingularValueSolverTest  org.apache.commons.math.genetics.RandomKeyMutationTest  org.apache.commons.math.util.BigRealTest  org.apache.commons.math.distribution.ExponentialDistributionTest  org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest  org.apache.commons.math.geometry.FrenchVector3DFormatTest  org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math.stat.regression.SimpleRegressionTest  org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest  org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest  org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest  org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math.linear.LUSolverTest  org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest  org.apache.commons.math.MathConfigurationExceptionTest  org.apache.commons.math.estimation.GaussNewtonEstimatorTest  org.apache.commons.math.genetics.ListPopulationTest  org.apache.commons.math.MathExceptionTest  org.apache.commons.math.distribution.CauchyDistributionTest  org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math.linear.SparseFieldMatrixTest  org.apache.commons.math.stat.descriptive.summary.SumLogTest  org.apache.commons.math.exception.util.ArgUtilsTest  org.apache.commons.math.optimization.fitting.GaussianFitterTest  org.apache.commons.math.stat.FrequencyTest  org.apache.commons.math.stat.descriptive.moment.SecondMomentTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 2274] ,[]
-Valid?: |true|0|2274|[]|, fitness 0.0
-Found Solution, child variant #1332
Ingredient counter is Zero

Attempts to find patch Id 1332: 0, successful 0, failing 0

-Saving child on disk variant #1332 at /Users/marekmazur/astor/./output_astor/AstorMain-math-64//src//variant-1332

-Saving child on disk variant #1332 at /Users/marekmazur/astor/./output_astor/AstorMain-math-64//src//variant-1332_f
---Undoing: gnrtn(666): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `residuals = oldRes ` -topatch--> `current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)` (spoon.support.reflect.code.CtAssignmentImpl) 
/Users/marekmazur/astor/./output_astor/AstorMain-math-64/src/default_f/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-64/src/variant-1332_f/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
diff command : diff -w -b  --label=/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java --label=/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java /Users/marekmazur/astor/./output_astor/AstorMain-math-64/src/default_f/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java /Users/marekmazur/astor/./output_astor/AstorMain-math-64/src/variant-1332_f/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java --unified=0
/Users/marekmazur/astor/./output_astor/AstorMain-math-64/src/default/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-64/src/variant-1332/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
diff command : diff -w -b  --label=/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java --label=/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java /Users/marekmazur/astor/./output_astor/AstorMain-math-64/src/default/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java /Users/marekmazur/astor/./output_astor/AstorMain-math-64/src/variant-1332/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java --unified=0
Generation 1
Generation 2
Generation 3
Generation 4
Generation 5
Generation 6
Generation 7
Generation 8
Generation 9
Generation 10
Generation 11
Generation 12
Generation 13
Generation 14
Generation 15
Generation 16
Generation 17
Generation 18
Generation 19
Generation 20
Generation 21
Generation 22
Generation 23
Generation 24
Generation 25
Generation 26
Generation 27
Generation 28
Generation 29
Generation 30
Generation 31
Generation 32
Generation 33
Generation 34
Generation 35
Generation 36
Generation 37
Generation 38
Generation 39
Generation 40
Generation 41
Generation 42
Generation 43
Generation 44
Generation 45
Generation 46
Generation 47
Generation 48
Generation 49
Generation 50
Generation 51
Generation 52
Generation 53
Generation 54
Generation 55
Generation 56
Generation 57
Generation 58
Generation 59
Generation 60
Generation 61
Generation 62
Generation 63
Generation 64
Generation 65
Generation 66
Generation 67
Generation 68
Generation 69
Generation 70
Generation 71
Generation 72
Generation 73
Generation 74
Generation 75
Generation 76
Generation 77
Generation 78
Generation 79
Generation 80
Generation 81
Generation 82
Generation 83
Generation 84
Generation 85
Generation 86
Generation 87
Generation 88
Generation 89
Generation 90
Generation 91
Generation 92
Generation 93
Generation 94
Generation 95
Generation 96
Generation 97
Generation 98
Generation 99
Generation 100
Generation 101
Generation 102
Generation 103
Generation 104
Generation 105
Generation 106
Generation 107
Generation 108
Generation 109
Generation 110
Generation 111
Generation 112
Generation 113
Generation 114
Generation 115
Generation 116
Generation 117
Generation 118
Generation 119
Generation 120
Generation 121
Generation 122
Generation 123
Generation 124
Generation 125
Generation 126
Generation 127
Generation 128
Generation 129
Generation 130
Generation 131
Generation 132
Generation 133
Generation 134
Generation 135
Generation 136
Generation 137
Generation 138
Generation 139
Generation 140
Generation 141
Generation 142
Generation 143
Generation 144
Generation 145
Generation 146
Generation 147
Generation 148
Generation 149
Generation 150
Generation 151
Generation 152
Generation 153
Generation 154
Generation 155
Generation 156
Generation 157
Generation 158
Generation 159
Generation 160
Generation 161
Generation 162
Generation 163
Generation 164
Generation 165
Generation 166
Generation 167
Generation 168
Generation 169
Generation 170
Generation 171
Generation 172
Generation 173
Generation 174
Generation 175
Generation 176
Generation 177
Generation 178
Generation 179
Generation 180
Generation 181
Generation 182
Generation 183
Generation 184
Generation 185
Generation 186
Generation 187
Generation 188
Generation 189
Generation 190
Generation 191
Generation 192
Generation 193
Generation 194
Generation 195
Generation 196
Generation 197
Generation 198
Generation 199
Generation 200
Generation 201
Generation 202
Generation 203
Generation 204
Generation 205
Generation 206
Generation 207
Generation 208
Generation 209
Generation 210
Generation 211
Generation 212
Generation 213
Generation 214
Generation 215
Generation 216
Generation 217
Generation 218
Generation 219
Generation 220
Generation 221
Generation 222
Generation 223
Generation 224
Generation 225
Generation 226
Generation 227
Generation 228
Generation 229
Generation 230
Generation 231
Generation 232
Generation 233
Generation 234
Generation 235
Generation 236
Generation 237
Generation 238
Generation 239
Generation 240
Generation 241
Generation 242
Generation 243
Generation 244
Generation 245
Generation 246
Generation 247
Generation 248
Generation 249
Generation 250
Generation 251
Generation 252
Generation 253
Generation 254
Generation 255
Generation 256
Generation 257
Generation 258
Generation 259
Generation 260
Generation 261
Generation 262
Generation 263
Generation 264
Generation 265
Generation 266
Generation 267
Generation 268
Generation 269
Generation 270
Generation 271
Generation 272
Generation 273
Generation 274
Generation 275
Generation 276
Generation 277
Generation 278
Generation 279
Generation 280
Generation 281
Generation 282
Generation 283
Generation 284
Generation 285
Generation 286
Generation 287
Generation 288
Generation 289
Generation 290
Generation 291
Generation 292
Generation 293
Generation 294
Generation 295
Generation 296
Generation 297
Generation 298
Generation 299
Generation 300
Generation 301
Generation 302
Generation 303
Generation 304
Generation 305
Generation 306
Generation 307
Generation 308
Generation 309
Generation 310
Generation 311
Generation 312
Generation 313
Generation 314
Generation 315
Generation 316
Generation 317
Generation 318
Generation 319
Generation 320
Generation 321
Generation 322
Generation 323
Generation 324
Generation 325
Generation 326
Generation 327
Generation 328
Generation 329
Generation 330
Generation 331
Generation 332
Generation 333
Generation 334
Generation 335
Generation 336
Generation 337
Generation 338
Generation 339
Generation 340
Generation 341
Generation 342
Generation 343
Generation 344
Generation 345
Generation 346
Generation 347
Generation 348
Generation 349
Generation 350
Generation 351
Generation 352
Generation 353
Generation 354
Generation 355
Generation 356
Generation 357
Generation 358
Generation 359
Generation 360
Generation 361
Generation 362
Generation 363
Generation 364
Generation 365
Generation 366
Generation 367
Generation 368
Generation 369
Generation 370
Generation 371
Generation 372
Generation 373
Generation 374
Generation 375
Generation 376
Generation 377
Generation 378
Generation 379
Generation 380
Generation 381
Generation 382
Generation 383
Generation 384
Generation 385
Generation 386
Generation 387
Generation 388
Generation 389
Generation 390
Generation 391
Generation 392
Generation 393
Generation 394
Generation 395
Generation 396
Generation 397
Generation 398
Generation 399
Generation 400
Generation 401
Generation 402
Generation 403
Generation 404
Generation 405
Generation 406
Generation 407
Generation 408
Generation 409
Generation 410
Generation 411
Generation 412
Generation 413
Generation 414
Generation 415
Generation 416
Generation 417
Generation 418
Generation 419
Generation 420
Generation 421
Generation 422
Generation 423
Generation 424
Generation 425
Generation 426
Generation 427
Generation 428
Generation 429
Generation 430
Generation 431
Generation 432
Generation 433
Generation 434
Generation 435
Generation 436
Generation 437
Generation 438
Generation 439
Generation 440
Generation 441
Generation 442
Generation 443
Generation 444
Generation 445
Generation 446
Generation 447
Generation 448
Generation 449
Generation 450
Generation 451
Generation 452
Generation 453
Generation 454
Generation 455
Generation 456
Generation 457
Generation 458
Generation 459
Generation 460
Generation 461
Generation 462
Generation 463
Generation 464
Generation 465
Generation 466
Generation 467
Generation 468
Generation 469
Generation 470
Generation 471
Generation 472
Generation 473
Generation 474
Generation 475
Generation 476
Generation 477
Generation 478
Generation 479
Generation 480
Generation 481
Generation 482
Generation 483
Generation 484
Generation 485
Generation 486
Generation 487
Generation 488
Generation 489
Generation 490
Generation 491
Generation 492
Generation 493
Generation 494
Generation 495
Generation 496
Generation 497
Generation 498
Generation 499
Generation 500
Generation 501
Generation 502
Generation 503
Generation 504
Generation 505
Generation 506
Generation 507
Generation 508
Generation 509
Generation 510
Generation 511
Generation 512
Generation 513
Generation 514
Generation 515
Generation 516
Generation 517
Generation 518
Generation 519
Generation 520
Generation 521
Generation 522
Generation 523
Generation 524
Generation 525
Generation 526
Generation 527
Generation 528
Generation 529
Generation 530
Generation 531
Generation 532
Generation 533
Generation 534
Generation 535
Generation 536
Generation 537
Generation 538
Generation 539
Generation 540
Generation 541
Generation 542
Generation 543
Generation 544
Generation 545
Generation 546
Generation 547
Generation 548
Generation 549
Generation 550
Generation 551
Generation 552
Generation 553
Generation 554
Generation 555
Generation 556
Generation 557
Generation 558
Generation 559
Generation 560
Generation 561
Generation 562
Generation 563
Generation 564
Generation 565
Generation 566
Generation 567
Generation 568
Generation 569
Generation 570
Generation 571
Generation 572
Generation 573
Generation 574
Generation 575
Generation 576
Generation 577
Generation 578
Generation 579
Generation 580
Generation 581
Generation 582
Generation 583
Generation 584
Generation 585
Generation 586
Generation 587
Generation 588
Generation 589
Generation 590
Generation 591
Generation 592
Generation 593
Generation 594
Generation 595
Generation 596
Generation 597
Generation 598
Generation 599
Generation 600
Generation 601
Generation 602
Generation 603
Generation 604
Generation 605
Generation 606
Generation 607
Generation 608
Generation 609
Generation 610
Generation 611
Generation 612
Generation 613
Generation 614
Generation 615
Generation 616
Generation 617
Generation 618
Generation 619
Generation 620
Generation 621
Generation 622
Generation 623
Generation 624
Generation 625
Generation 626
Generation 627
Generation 628
Generation 629
Generation 630
Generation 631
Generation 632
Generation 633
Generation 634
Generation 635
Generation 636
Generation 637
Generation 638
Generation 639
Generation 640
Generation 641
Generation 642
Generation 643
Generation 644
Generation 645
Generation 646
Generation 647
Generation 648
Generation 649
Generation 650
Generation 651
Generation 652
Generation 653
Generation 654
Generation 655
Generation 656
Generation 657
Generation 658
Generation 659
Generation 660
Generation 661
Generation 662
Generation 663
Generation 664
Generation 665
Generation 666
Storing ing JSON at ./diffSolutions/patchinfo_1332.json
./diffSolutions/patchinfo_1332.json:
{"VARIANT_ID":"1332","VALIDATION":"|true|0|2274|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-64\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0,083","INGREDIENT_PARENT":"current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)","PATCH_HUNK_TYPE":"CtAssignmentImpl|CtBlockImpl","ORIGINAL_CODE":"residuals = oldRes","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"InsertBeforeOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-64\\\/\\\/src\\\/\\\/variant-1332\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java","LINE":"432","MP_RANKING":"40","PATCH_HUNK_CODE":"current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)"}],"TIME":"348","GENERATION":"666","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-64\\\/\\\/src\\\/\\\/variant-1332","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java\\n@@ -431 +431 @@\\n-\\t\\t\\t\\t\\ttmpVec = residuals;\\n+\\t\\t\\t\\t\\ttmpVec = residuals; \\t\\t\\t\\t\\tcurrent = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\\n\\n"}
Saving patch info at ./diffSolutions/patchinfo_1332.json
Storing ing JSON at /Users/marekmazur/astor/./diffSolutions/patch_348758_1332.diff
/Users/marekmazur/astor/./diffSolutions/patch_348758_1332.diff:
{"VARIANT_ID":"1332","VALIDATION":"|true|0|2274|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-64\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0,083","INGREDIENT_PARENT":"current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)","PATCH_HUNK_TYPE":"CtAssignmentImpl|CtBlockImpl","ORIGINAL_CODE":"residuals = oldRes","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"InsertBeforeOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-64\\\/\\\/src\\\/\\\/variant-1332\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java","LINE":"432","MP_RANKING":"40","PATCH_HUNK_CODE":"current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)"}],"TIME":"348","GENERATION":"666","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-64\\\/\\\/src\\\/\\\/variant-1332","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java\\n@@ -431 +431 @@\\n-\\t\\t\\t\\t\\ttmpVec = residuals;\\n+\\t\\t\\t\\t\\ttmpVec = residuals; \\t\\t\\t\\t\\tcurrent = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\\n\\n"}
Saving patch diff at /Users/marekmazur/astor/./diffSolutions/patch_348758_1332.diff
End analysis generation - Solutions found:--> (1332(SOLUTION)(f=0.0), )
Variants to next generation from: 2-->IDs: (1332(f=0.0)[SOL], 1331(f=2.0), )
Selected to next generation: IDs2--> (1331(f=2.0), )
Max Solution found 1
Time Repair Loop (s): 348.767
generationsexecuted: 666
----SUMMARY_EXECUTION---
End Repair Search: Found solution
Solution stored at: /Users/marekmazur/astor/./output_astor/AstorMain-math-64//src/
Number solutions:1
f (sol): 0.0, [Variant id: 1332 (SOL) , #gens: 357, #ops: 1, parent:1331]
All variants:
f 2.0, [Variant id: 1333, #gens: 356, #ops: 0, parent:-]
Number suspicious:1

 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 1332
 
time(sec)= 348
operation: InsertBeforeOp
location= org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer
line= 432
lineSuspiciousness= 0,083
lineSuspiciousness= 40
original statement= residuals = oldRes
buggy kind= CtAssignmentImpl|CtBlockImpl
fixed statement= current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)
Patch kind= CtAssignmentImpl|CtBlockImpl
generation= 666
ingredientScope= LOCAL
validation=|true|0|2274|[]|
diffpatch=--- /src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
+++ /src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
@@ -412,0 +413 @@
+					current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);


diffpatchoriginal=--- /src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
+++ /src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
@@ -431 +431 @@
-					tmpVec = residuals;
+					tmpVec = residuals; 					current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);



Astor Output:

General stats:
EXECUTION_IDENTIFIER=
TOTAL_TIME=348.767
NR_GENERATIONS=666
NR_RIGHT_COMPILATIONS=459
NR_FAILLING_COMPILATIONS=207
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND
FAULT_LOCALIZATION=flacoco

Patch stats:

Patch 1
VARIANT_ID=1332
TIME=348
VALIDATION=|true|0|2274|[]|
GENERATION=666
FOLDER_SOLUTION_CODE=/Users/marekmazur/astor/./output_astor/AstorMain-math-64//src//variant-1332
--Patch Hunk #1
OPERATOR=InsertBeforeOp

LOCATION=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer

PATH=/Users/marekmazur/astor/defects4j/math-64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java

MODIFIED_FILE_PATH=/Users/marekmazur/astor/./output_astor/AstorMain-math-64//src//variant-1332/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java

LINE=432

SUSPICIOUNESS=0,083

MP_RANKING=40

ORIGINAL_CODE=residuals = oldRes

BUGGY_CODE_TYPE=CtAssignmentImpl|CtBlockImpl

PATCH_HUNK_CODE=current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)

PATCH_HUNK_TYPE=CtAssignmentImpl|CtBlockImpl

INGREDIENT_SCOPE=LOCAL

INGREDIENT_PARENT=current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)

PATCH_DIFF_ORIG=--- /src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
+++ /src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
@@ -431 +431 @@
-					tmpVec = residuals;
+					tmpVec = residuals; 					current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);



Storing ing JSON at /Users/marekmazur/astor/./output_astor/AstorMain-math-64//astor_output.json
astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":459,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"","FAULT_LOCALIZATION":"flacoco","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":207,"NR_GENERATIONS":666,"TOTAL_TIME":348.767,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"1332","VALIDATION":"|true|0|2274|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-64\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0,083","INGREDIENT_PARENT":"current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)","PATCH_HUNK_TYPE":"CtAssignmentImpl|CtBlockImpl","ORIGINAL_CODE":"residuals = oldRes","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"InsertBeforeOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-64\\\/\\\/src\\\/\\\/variant-1332\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java","LINE":"432","MP_RANKING":"40","PATCH_HUNK_CODE":"current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)"}],"TIME":"348","GENERATION":"666","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-64\\\/\\\/src\\\/\\\/variant-1332","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java\\n@@ -431 +431 @@\\n-\\t\\t\\t\\t\\ttmpVec = residuals;\\n+\\t\\t\\t\\t\\ttmpVec = residuals; \\t\\t\\t\\t\\tcurrent = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\\n\\n"}]}
Time Total(s): 491.624
