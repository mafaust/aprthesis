[0] INFO ProjectConfiguration - Version of the JVM used: 1.8.0_202
[1] INFO main - Java version of the JDK used to run tests: 1.8.0_202
[1] INFO main - The compliance of the JVM is:  8
[2] INFO main - command line arguments: [-location  /Users/marekmazur/astor/defects4j/math-5  -mode  jgenprog  -package  org.apache.commons  -jvm4testexecution  /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin  -failing  org.apache.commons.math3.complex.ComplexTest  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -stopfirst  true  -dependencies  /Users/marekmazur/astor/examples/libs/junit-4.4.jar  -maxgen  1000000  -seed  10  -maxtime  60  -scope  local  -stopfirst  true  -flthreshold  0  -population  1  -faultlocalization  flacoco]
[6] INFO AstorMain - Running Astor on a JDK at /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre
Source folders: [/Users/marekmazur/astor/defects4j/math-5/src/main/java]
Source Test folders: [/Users/marekmazur/astor/defects4j/math-5/src/test]
---- Creating spoon model
Creating model,  Code location from working folder: /Users/marekmazur/astor/defects4j/math-5/src/main/java
building model: /Users/marekmazur/astor/defects4j/math-5/src/main/java, compliance level: 8
Classpath (Dependencies) for building SpoonModel: [/Users/marekmazur/astor/examples/libs/junit-4.4.jar]
Spoon Model built from location: /Users/marekmazur/astor/defects4j/math-5/src/main/java
Number of CtTypes created: 714
Running chosen test detection strategy: CLASSLOADER
Test retrieved from classes: 393
Running Flacoco...
Running spectrum-based fault localization...
FlacocoConfig{workspace='/Users/marekmazur/astor/.', projectPath='/Users/marekmazur/astor/defects4j/math-5', srcJavaDir=[/Users/marekmazur/astor/defects4j/math-5/src/main/java], srcTestDir=[/Users/marekmazur/astor/defects4j/math-5/src/test], binJavaDir=[/Users/marekmazur/astor/defects4j/math-5/target/classes], binTestDir=[/Users/marekmazur/astor/defects4j/math-5/target/test-classes], classpath='/Users/marekmazur/astor/examples/libs/junit-4.4.jar', customJUnitClasspath='null', customJacocoClasspath='null', mavenHome='/Users/marekmazur/.m2/repository/', coverTests=false, testRunnerVerbose=false, testRunnerTimeoutInMs=3600000, testRunnerJVMArgs='null', threshold=0.0, includeZeros=false, complianceLevel=8, testDetectionStrategy=CLASSLOADER, ignoredTests=[], jUnit4Tests=[org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLong2, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testWeightedVariance, org.apache.commons.math3.distribution.ZipfDistributionTest#testPreconditions1, org.apache.commons.math3.random.ISAACTest#testNextUniformIAE, org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformComplex, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIllegalArguments, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorTwoPairs, org.apache.commons.math3.distribution.ZipfDistributionTest#testPreconditions2, org.apache.commons.math3.stat.inference.TestUtilsTest#testGTestGoodnesOfFit, org.apache.commons.math3.linear.DiagonalMatrixTest#testAddToEntry, org.apache.commons.math3.distribution.BinomialDistributionTest#testDegenerate1, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextGamma, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.distribution.BinomialDistributionTest#testDegenerate0, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testIllegalArguments, org.apache.commons.math3.distribution.PascalDistributionTest#testDensities, org.apache.commons.math3.complex.ComplexTest#testPowInf, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testMomentSmallSamples, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongNegativeRange, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInitOutofbounds2, org.apache.commons.math3.optimization.SimpleValueCheckerTest#testIterationCheckPrecondition, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testXSampleDataNull, org.apache.commons.math3.util.Decimal64Test#testCeil, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetChiSquare, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInitOutofbounds1, org.apache.commons.math3.random.StableRandomGeneratorTest#testAlphaRangeBelowZero, org.apache.commons.math3.linear.BlockRealMatrixTest#testSeveralBlocks, org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiply1, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetNumericalMean, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testConcurrentModification, org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiply2, org.apache.commons.math3.complex.QuaternionTest#testNorm, org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testCircleFitting, org.apache.commons.math3.random.Well1024aTest#testConfig, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntNegativeRange, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testDuplicatedAbscissa, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, org.apache.commons.math3.linear.ArrayRealVectorTest#testMinMax, org.apache.commons.math3.linear.RealVectorTest#testCosineDimensionMismatch, org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testQuadratic, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testDoubleDirect, org.apache.commons.math3.distribution.PoissonDistributionTest#testNegativeMean, org.apache.commons.math3.optim.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, org.apache.commons.math3.stat.inference.GTestTest#testGTestSetsComparisonBadCounts, org.apache.commons.math3.linear.ArrayRealVectorTest#testMapAdd, org.apache.commons.math3.stat.StatUtilsTest#testMean, org.apache.commons.math3.linear.ConjugateGradientTest#testNonPositiveDefinitePreconditioner, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNaN, org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSinZero, org.apache.commons.math3.distribution.GammaDistributionTest#testDensity, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testBoundaries, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testHighPercentile, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPreconditions, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongIAE, org.apache.commons.math3.complex.ComplexTest#testSqrtRealNegative, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math3.util.MathUtilsTest#testArrayHash, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testNonInvertible, org.apache.commons.math3.random.Well44497bTest#testNextPoisson, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testSerial, org.apache.commons.math3.random.BitsStreamGeneratorTest#testConfig, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testEmptySampleDerivative, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemove2, org.apache.commons.math3.util.Decimal64Test#testRootN, org.apache.commons.math3.random.Well19937aTest#testFloatDirect, org.apache.commons.math3.distribution.UniformRealDistributionTest#testSampling, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave, org.apache.commons.math3.complex.ComplexTest#testReciprocalReal, org.apache.commons.math3.util.MathUtilsTest#testCheckFinite, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testApplyInverseTo, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSample, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testLargeValues, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDotProduct, org.apache.commons.math3.fraction.FractionFormatTest#testParse, org.apache.commons.math3.distribution.LogNormalDistributionTest#testDensityIntegrals, org.apache.commons.math3.geometry.euclidean.twod.LineTest#testPointAt, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest#testConcurrentCreation, org.apache.commons.math3.util.FastMathTest#testIndicatorFloat, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testMath864, org.apache.commons.math3.linear.CholeskyDecompositionTest#testNotPositiveDefinite, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest#testAccessors, org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineDimensionMismatch, org.apache.commons.math3.linear.ArrayRealVectorTest#testMapSubtractToSelf, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testDerivative, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testTranspose, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAccurateDotProduct, org.apache.commons.math3.linear.RealVectorTest#testAddDimensionMismatch, org.apache.commons.math3.complex.ComplexTest#testDivideReal, org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsAndInfs, org.apache.commons.math3.fraction.FractionFormatTest#testDoubleFormat, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint, org.apache.commons.math3.util.Decimal64Test#testIsNaN, org.apache.commons.math3.complex.QuaternionTest#testScalarMultiplyDouble, org.apache.commons.math3.geometry.euclidean.threed.LineTest#testClosest, org.apache.commons.math3.distribution.TDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.analysis.function.LogitTest#testDerivativeLargeArguments, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testZero, org.apache.commons.math3.linear.SparseFieldMatrixTest#testPlusMinus, org.apache.commons.math3.fraction.FractionTest#testPercentage, org.apache.commons.math3.stat.correlation.CovarianceTest#testLongly, org.apache.commons.math3.linear.RealVectorTest#testCombineDimensionMismatchMixedTypes, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testForgottenSeparator, org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplyDimensionMismatch, org.apache.commons.math3.fraction.FractionTest#testDigitLimitConstructor, org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionRightSide, org.apache.commons.math3.util.MathArraysTest#testL2DistanceInt, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongWideRange, org.apache.commons.math3.analysis.FunctionUtilsTest#testAdd, org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFaFa, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testBoundaries, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, org.apache.commons.math3.linear.RealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math3.complex.ComplexTest#testCoshInf, org.apache.commons.math3.distribution.ExponentialDistributionTest#testDensities, org.apache.commons.math3.random.Well44497bTest#testNextUniformExtremeValues, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiplyNonDiagonalZero, org.apache.commons.math3.random.Well512aTest#testNextUniformExtremeValues, org.apache.commons.math3.linear.SparseRealVectorTest#testConstructors, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testConstructors, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testOneOrderConstructor, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination2DSDS, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testClear, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testComposeInverse, org.apache.commons.math3.complex.ComplexTest#testSinInf, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveMultiple, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testNorm, org.apache.commons.math3.fraction.FractionFormatTest#testParseNegative, org.apache.commons.math3.linear.SparseRealVectorTest#testAddMixedTypes, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testOptimumOutsideRange, org.apache.commons.math3.fraction.FractionTest#testConstructor, org.apache.commons.math3.random.Well44497bTest#testNextBooleanDirect, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAngular, org.apache.commons.math3.random.ISAACTest#testNextHypergeometric, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testCopy, org.apache.commons.math3.random.Well19937aTest#testNextLongPositiveRange, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testBigStep, org.apache.commons.math3.distribution.UniformRealDistributionTest#testConsistency, org.apache.commons.math3.random.Well44497aTest#testNextExponential, org.apache.commons.math3.linear.CholeskyDecompositionTest#testLLowerTriangular, org.apache.commons.math3.distribution.LogNormalDistributionTest#testDensity, org.apache.commons.math3.transform.FastFourierTransformerTest#testStandardTransformReal, org.apache.commons.math3.special.BetaTest#testSumDeltaMinusDeltaSum, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEvaluateArraySegment, org.apache.commons.math3.random.RandomAdaptorTest#testAdaptor, org.apache.commons.math3.util.MathArraysTest#testArrayEqualsIncludingNaN, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseZeroReal, org.apache.commons.math3.random.Well512aTest#testNextIntNeg, org.apache.commons.math3.linear.FieldLUDecompositionTest#testNonSquare, org.apache.commons.math3.util.FastMathTestPerformance#testAcos, org.apache.commons.math3.util.TransformerMapTest#testRemoveTransformer, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math3.distribution.TDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.linear.RealMatrixFormatTest#testNegativeComponent2, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, org.apache.commons.math3.random.Well1024aTest#testNextLong2, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testMath798WithToleranceTooLowButNoException, org.apache.commons.math3.fraction.FractionTest#testMultiply, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear, org.apache.commons.math3.distribution.ExponentialDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testRandomPolynomialsValuesOnly, org.apache.commons.math3.util.FastMathTestPerformance#testSimpleBenchmark, org.apache.commons.math3.linear.SchurTransformerTest#testSchurForm, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testHahn1, org.apache.commons.math3.linear.ArrayRealVectorTest#testEquals, org.apache.commons.math3.analysis.function.LogisticTest#testCompareDerivativeSigmoid, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testNegativeMinPts, org.apache.commons.math3.genetics.ListPopulationTest#testChromosomes, org.apache.commons.math3.fraction.FractionTest#testEpsilonLimitConstructor, org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductDimensionMismatchSameType, org.apache.commons.math3.random.Well19937aTest#testReseed, org.apache.commons.math3.stat.descriptive.summary.SumTest#testWeightedConsistency, org.apache.commons.math3.distribution.WeibullDistributionTest#testBeta, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testRedundantEquations, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, org.apache.commons.math3.linear.RealVectorFormatTest#testForgottenPrefix, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNorm, org.apache.commons.math3.random.Well44497aTest#testNextPoissonConsistency, org.apache.commons.math3.util.FastMathTestPerformance#testSin, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testOverrideGeoMeanWithMathClass, org.apache.commons.math3.util.OpenIntToFieldTest#testConcurrentModification, org.apache.commons.math3.complex.ComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistanceInf, org.apache.commons.math3.random.Well19937cTest#testNextLongNegativeRange, org.apache.commons.math3.stat.descriptive.rank.MedianTest#testEvaluation, org.apache.commons.math3.stat.descriptive.rank.MinTest#testEvaluation, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEvaluation, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testInitOutOfBounds, org.apache.commons.math3.analysis.solvers.SecantSolverTest#testRootEndpoints, org.apache.commons.math3.complex.ComplexTest#testScalarAddNaN, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testScalb, org.apache.commons.math3.fraction.BigFractionFormatTest#testParseNegative, org.apache.commons.math3.util.FastMathTest#testAsinSpecialCases, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testScalarProduct, org.apache.commons.math3.complex.ComplexTest#testSin, org.apache.commons.math3.random.Well512aTest#testNextInversionDeviate, org.apache.commons.math3.random.Well512aTest#testNextHypergeometric, org.apache.commons.math3.complex.ComplexTest#testSubtractNaN, org.apache.commons.math3.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistance, org.apache.commons.math3.util.PrecisionTest#testEqualsWithRelativeTolerance, org.apache.commons.math3.stat.StatUtilsTest#testStats, org.apache.commons.math3.linear.BlockRealMatrixTest#testAddFail, org.apache.commons.math3.linear.RealVectorTest#testGetL1DistanceSameType, org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetNumberOfElements, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextInversionDeviate, org.apache.commons.math3.random.MersenneTwisterTest#testNextPascal, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNan, org.apache.commons.math3.distribution.UniformRealDistributionTest#testDensities, org.apache.commons.math3.geometry.euclidean.twod.SegmentTest#testDistance, org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionMixedTypes, org.apache.commons.math3.distribution.PascalDistributionTest#testSampling, org.apache.commons.math3.linear.RealVectorTest#testSubtractDimensionMismatch, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testScalarAdd, org.apache.commons.math3.stat.correlation.CovarianceTest#testConsistency, org.apache.commons.math3.random.StableRandomGeneratorTest#testGaussianCase, org.apache.commons.math3.complex.ComplexTest#testEqualsRealDifference, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNan, org.apache.commons.math3.random.Well512aTest#testNextZipf, org.apache.commons.math3.random.MersenneTwisterTest#testNextIntIAE, org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductMixedTypes, org.apache.commons.math3.special.ErfTest#testErfcMaple, org.apache.commons.math3.util.FastMathTest#testAcosSpecialCases, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveSin, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog1p, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEvaluateArraySegment, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest#testSinMin, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveBadEndpoints, org.apache.commons.math3.random.MersenneTwisterTest#testReseed, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testKepler, org.apache.commons.math3.util.Decimal64Test#testPowInt, org.apache.commons.math3.util.DefaultTransformerTest#testTransformObject, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testConsistency, org.apache.commons.math3.random.MersenneTwisterTest#testNextWeibull, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAdd, org.apache.commons.math3.fraction.FractionTest#testGoldenRatio, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testYSampleDataNull, org.apache.commons.math3.linear.ConjugateGradientTest#testNonPositiveDefiniteLinearOperator, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math3.complex.ComplexTest#testSqrt1zNaN, org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testRosenbrock, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testAngles, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testIterator, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, org.apache.commons.math3.random.Well512aTest#testNextPoisson, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, org.apache.commons.math3.distribution.PoissonDistributionTest#testNormalApproximateProbability, org.apache.commons.math3.util.MathArraysTest#testLInfDistanceInt, org.apache.commons.math3.complex.ComplexTest#testAcos, org.apache.commons.math3.special.ErfTest#testErfInvNaN, org.apache.commons.math3.util.PrecisionTest#testEqualsWithAllowedUlps, org.apache.commons.math3.util.Decimal64Test#testGetField, org.apache.commons.math3.linear.RealVectorTest#testProjectionSameType, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testCumulativeProbability, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeAll, org.apache.commons.math3.linear.SchurTransformerTest#testRandomData, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testSampling, org.apache.commons.math3.analysis.solvers.BisectionSolverTest#testMath369, org.apache.commons.math3.util.TransformerMapTest#testSerial, org.apache.commons.math3.linear.HessenbergTransformerTest#testNonSquare, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, org.apache.commons.math3.fraction.FractionTest#testToString, org.apache.commons.math3.complex.ComplexTest#testEqualsSame, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, org.apache.commons.math3.geometry.euclidean.twod.LineTest#testDistance, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testLinearFunction, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testCopy, org.apache.commons.math3.random.ISAACTest#testNextInversionDeviate, org.apache.commons.math3.stat.correlation.CovarianceTest#testConstant, org.apache.commons.math3.dfp.DfpTest#testSin, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testPositiveInfinity, org.apache.commons.math3.random.Well19937cTest#testNextIntPositiveRange, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.random.Well44497aTest#testNextPascal, org.apache.commons.math3.linear.CholeskyDecompositionTest#testMatricesValues, org.apache.commons.math3.analysis.function.GaussianTest#testDerivativeLargeArguments, org.apache.commons.math3.util.MultidimensionalCounterTest#testIteratorPreconditions, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPow, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testQuadratic, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDaFa, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseZeroImaginary, org.apache.commons.math3.linear.SparseFieldVectorTest#testOuterProduct, org.apache.commons.math3.stat.FrequencyTest#testIncrement, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testConstrainedRosen, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testSerial, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testSerialization, org.apache.commons.math3.linear.MatrixUtilsTest#testCreateIdentityMatrix, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math3.random.ISAACTest#testNextWeibull, org.apache.commons.math3.random.Well44497aTest#testNextLongWideRange, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetRowLarge, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testRedundantEquations, org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSinZero, org.apache.commons.math3.complex.ComplexTest#testAsinInf, org.apache.commons.math3.random.MersenneTwisterTest#testNextSample, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleDataXNull, org.apache.commons.math3.optim.linear.SimplexSolverTest#testUnboundedSolution, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testOppositeHyperplanes, org.apache.commons.math3.util.MathArraysTest#testL1DistanceInt, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testTooFewSamples, org.apache.commons.math3.random.Well44497aTest#testNextZipf, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testOneSet, org.apache.commons.math3.util.Decimal64Test#testAtan2, org.apache.commons.math3.distribution.PoissonDistributionTest#testMoments, org.apache.commons.math3.util.MathUtilsTest#testCopySignByte, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIssue942, org.apache.commons.math3.linear.HessenbergTransformerTest#testRandomData, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextGaussian, org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange, org.apache.commons.math3.geometry.euclidean.threed.LineTest#testSimilar, org.apache.commons.math3.util.FastMathTest#testAcosAccuracy, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDF2, org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDF3, org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDF4, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest#testParameters, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInputSigmaOutOfRange, org.apache.commons.math3.distribution.TDistributionTest#testCumulativeProbabilityAgainstStackOverflow, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testCopyConsistency, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testCopy, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSubtractDouble, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNorris, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434UnfeasibleSolution, org.apache.commons.math3.random.Well44497aTest#testNextIntIAE, org.apache.commons.math3.util.MathUtilsTest#testNormalizeAngle, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMaxIterations, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetColumnVector, org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeY, org.apache.commons.math3.complex.ComplexTest#testGetArgumentInf, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeX, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeZ, org.apache.commons.math3.random.Well1024aTest#testNextWeibull, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testCrossProductCancellation, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testIntersection, org.apache.commons.math3.random.ValueServerTest#testProperties, org.apache.commons.math3.linear.FieldMatrixImplTest#testTrace, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testSumSinc, org.apache.commons.math3.analysis.integration.RombergIntegratorTest#testQuinticFunction, org.apache.commons.math3.util.FastMathTest#testSignumFloat, org.apache.commons.math3.dfp.DfpTest#testCopySignDouble, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testQRColumnsPermutation, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinhDefinition, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanhAtanh, org.apache.commons.math3.linear.ArrayRealVectorTest#testAppendScalar, org.apache.commons.math3.random.Well1024aTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2LargeK, org.apache.commons.math3.random.Well44497aTest#testNextLongPositiveRange, org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2Complex, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, org.apache.commons.math3.analysis.solvers.SecantSolverTest#testBadEndpoints, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, org.apache.commons.math3.linear.FieldLUDecompositionTest#testMatricesValues2, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, org.apache.commons.math3.linear.FieldLUDecompositionTest#testMatricesValues1, org.apache.commons.math3.distribution.NormalDistributionTest#testSampling, org.apache.commons.math3.linear.SparseRealMatrixTest#testSetSubMatrix, org.apache.commons.math3.random.Well44497aTest#testNextCauchy, org.apache.commons.math3.distribution.WeibullDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testWeightedConsistency, org.apache.commons.math3.complex.ComplexTest#testConstructor, org.apache.commons.math3.linear.EigenDecompositionTest#testNormalDistributionUnsymmetricMatrix, org.apache.commons.math3.util.FastMathTest#testLog1pSpecialCases, org.apache.commons.math3.linear.RealMatrixFormatTest#testForgottenSeparator, org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testMath798, org.apache.commons.math3.special.ErfTest#testTwoArgumentErf, org.apache.commons.math3.linear.ArrayRealVectorTest#testPredicates, org.apache.commons.math3.linear.SymmLQTest#testPreconditionedSolution, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testGetIterations, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testBigStep, org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSinZero, org.apache.commons.math3.complex.ComplexTest#testPowNaNBase, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testComputeSigma, org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfMixedTypes, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testNoDependency, org.apache.commons.math3.util.PrecisionTest#testRepresentableDelta, org.apache.commons.math3.linear.LUDecompositionTest#testPAEqualLU, org.apache.commons.math3.linear.BlockRealMatrixTest#testAdd, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testSine, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testCopyConsistency, org.apache.commons.math3.distribution.TDistributionTest#testIllegalArguments, org.apache.commons.math3.util.ArithmeticUtilsTest#testAddAndCheckLong, org.apache.commons.math3.util.MathUtilsTest#testIndicatorShort, org.apache.commons.math3.linear.FieldMatrixImplTest#testTranspose, org.apache.commons.math3.fraction.BigFractionTest#testPow, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testEmptySampleValue, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2ComplexInf, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAndGet, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testExactIntegration, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, org.apache.commons.math3.util.Decimal64Test#testDivide, org.apache.commons.math3.random.MersenneTwisterTest#testNextPermutation, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, org.apache.commons.math3.linear.RealVectorTest#testGetL1DistanceMixedTypes, org.apache.commons.math3.linear.HessenbergTransformerTest#testRandomDataNormalDistribution, org.apache.commons.math3.linear.RealVectorTest#testCopy, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCompositionOneVariableY, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAccurateCrossProduct, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCompositionOneVariableX, org.apache.commons.math3.linear.FieldMatrixImplTest#testGetRowVector, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math3.analysis.function.GaussianTest#testParametricGradient, org.apache.commons.math3.linear.FieldLUSolverTest#testSolveDimensionErrors, org.apache.commons.math3.random.Well1024aTest#testNexBoolean2, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricGradient, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testContains, org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfDimensionMismatchMixedTypes, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testToString, org.apache.commons.math3.linear.SingularValueSolverTest#testConditionNumber, org.apache.commons.math3.linear.BlockFieldMatrixTest#testTrace, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSampleInvalidData, org.apache.commons.math3.linear.SparseRealVectorTest#testGetDimension, org.apache.commons.math3.genetics.BinaryChromosomeTest#testInvalidConstructor, org.apache.commons.math3.util.ArithmeticUtilsTest#testPow, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAsinh, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testWalk, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testSampling, org.apache.commons.math3.distribution.UniformRealDistributionTest#testIllegalArguments, org.apache.commons.math3.util.BigRealTest#testSerial, org.apache.commons.math3.linear.QRDecompositionTest#testHTrapezoidal, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testStartSimplexInsideRange, org.apache.commons.math3.random.Well512aTest#testNextHex, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSqrtPow2, org.apache.commons.math3.random.Well1024aTest#testNextIntDirect, org.apache.commons.math3.random.MersenneTwisterTest#testDoubleDirect, org.apache.commons.math3.distribution.TDistributionTest#testDfAccessors, org.apache.commons.math3.linear.SparseRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math3.genetics.RandomKeyTest#testInducedPermutation, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, org.apache.commons.math3.random.MersenneTwisterTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.analysis.FunctionUtilsTest#testAddDifferentiable, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, org.apache.commons.math3.random.EmpiricalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedNormOfResidual, org.apache.commons.math3.random.ISAACTest#testNextUniformExtremeValues, org.apache.commons.math3.genetics.RandomKeyTest#testInvalidRepresentation, org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorInvalidIndex1, org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorInvalidIndex2, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanAtan, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNorm1, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testCompose, org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorInvalidIndex3, org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testExpm1Function, org.apache.commons.math3.linear.SymmLQTest#testDimensionMismatchSolution, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNoIntercept_noint1, org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductDimensionMismatchMixedTypes, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntIAE, org.apache.commons.math3.complex.ComplexTest#testScalarDivideZero, org.apache.commons.math3.random.ISAACTest#testDoubleDirect, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNan, org.apache.commons.math3.util.FastMathTestPerformance#testSqrt, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackRosenbrok, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, org.apache.commons.math3.distribution.LevyDistributionTest#testDensities, org.apache.commons.math3.stat.descriptive.rank.MinTest#testNaNs, org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testParameters, org.apache.commons.math3.transform.FastFourierTransformerTest#test2DData, org.apache.commons.math3.util.ArithmeticUtilsTest#test0Choose0, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNormSq, org.apache.commons.math3.random.Well19937aTest#testNextLongDirect, org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatZero, org.apache.commons.math3.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDF3, org.apache.commons.math3.random.Well19937aTest#testNextInversionDeviate, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDF4, org.apache.commons.math3.stat.inference.TestUtilsTest#testOneSampleT, org.apache.commons.math3.random.MersenneTwisterTest#testNextZipf, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDF2, org.apache.commons.math3.util.MathArraysTest#testScale, org.apache.commons.math3.random.Well44497aTest#testNextLongExtremeValues, org.apache.commons.math3.ode.ContinuousOutputModelTest#testModelsMerging, org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testNegativeEps, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1DistanceSameType, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, org.apache.commons.math3.random.Well512aTest#testNextLongIAE, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testCopyFunctions, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionBelowSide, org.apache.commons.math3.util.ArithmeticUtilsTest#testAddAndCheck, org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunction, org.apache.commons.math3.linear.SparseFieldMatrixTest#testSubMatrix, org.apache.commons.math3.special.ErfTest#testErf0, org.apache.commons.math3.random.Well44497aTest#testNextBinomial, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetNumericalMean, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfDistanceSameType, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextHypergeometric, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testPCorr, org.apache.commons.math3.linear.DiagonalMatrixTest#testCreate, org.apache.commons.math3.fraction.FractionFormatTest#testFormatImproperNegative, org.apache.commons.math3.exception.MaxCountExceededExceptionTest#testAccessors, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testMath644, org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionRightSide, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testSpecialValues, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testWeightedConsistency, org.apache.commons.math3.util.ResizableDoubleArrayTest#testGetArrayRef, org.apache.commons.math3.complex.ComplexTest#testNegate, org.apache.commons.math3.distribution.TDistributionTest#testConsistency, org.apache.commons.math3.util.ArithmeticUtilsTest#testBinomialCoefficient, org.apache.commons.math3.util.MathArraysTest#testLinearCombination1, org.apache.commons.math3.util.MathArraysTest#testLinearCombination2, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testWikipedia, org.apache.commons.math3.linear.FieldMatrixImplTest#testOperate, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testInitialGuess, org.apache.commons.math3.linear.SparseRealVectorTest#testCombineSameType, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math3.ode.events.EventFilterTest#testTwoOppositeFilters, org.apache.commons.math3.analysis.FunctionUtilsTest#testComposeDifferentiable, org.apache.commons.math3.linear.FieldLUDecompositionTest#testDimensions, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, org.apache.commons.math3.linear.SparseRealVectorTest#testCopy, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextInt2, org.apache.commons.math3.util.MathArraysTest#testEbeSubtractPrecondition, org.apache.commons.math3.optim.univariate.BracketFinderTest#testCubicMin, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, org.apache.commons.math3.linear.SparseRealVectorTest#testOuterProductSameType, org.apache.commons.math3.random.ISAACTest#testNextFloatDirect, org.apache.commons.math3.util.Decimal64Test#testDivideField, org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPlane, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testConsistency, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNormSq, org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest#testIterationCheck, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testSpecialValues, org.apache.commons.math3.util.Decimal64Test#testAtanh, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testVectorOnePair, org.apache.commons.math3.optim.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest#serialization, org.apache.commons.math3.linear.RealVectorTest#testProjectionNullVector, org.apache.commons.math3.linear.SparseRealVectorTest#testIsInfinite, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.util.BigRealTest#testSubtract, org.apache.commons.math3.random.Well19937aTest#testNexBoolean2, org.apache.commons.math3.random.Well1024aTest#testNextLongDirect, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testWrongDimension, org.apache.commons.math3.distribution.ExponentialDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.linear.ConjugateGradientTest#testNonSquarePreconditioner, org.apache.commons.math3.util.PrecisionTest#testEqualsIncludingNaN, org.apache.commons.math3.linear.SparseRealVectorTest#testCombineDimensionMismatchMixedTypes, org.apache.commons.math3.optim.linear.SimplexSolverTest#testModelWithNoArtificialVars, org.apache.commons.math3.random.Well1024aTest#testNextInt2, org.apache.commons.math3.complex.FrenchComplexFormatTest#testNan, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.complex.ComplexTest#testAtan, org.apache.commons.math3.analysis.solvers.BrentSolverTest#testInitialGuess, org.apache.commons.math3.random.Well19937cTest#testNextInt2, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin, org.apache.commons.math3.linear.MatrixUtilsTest#testCreateColumnRealMatrix, org.apache.commons.math3.linear.RealVectorTest#testAddToEntry, org.apache.commons.math3.linear.MatrixUtilsTest#testCreateRowFieldMatrix, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, org.apache.commons.math3.linear.QRDecompositionTest#testAEqualQR, org.apache.commons.math3.util.BigRealTest#testConstructor, org.apache.commons.math3.fitting.PolynomialFitterTest#testFit, org.apache.commons.math3.stat.StatUtilsTest#testSumSq, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testEllipse, org.apache.commons.math3.util.FastMathTestPerformance#testTan, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testEllipse, org.apache.commons.math3.analysis.function.LogitTest#testPreconditions2, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextT, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncFirst, org.apache.commons.math3.genetics.ElitisticListPopulationTest#testChromosomeListConstructorTooLow, org.apache.commons.math3.analysis.function.LogitTest#testPreconditions1, org.apache.commons.math3.dfp.DfpTest#testCosh, org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroReal, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, org.apache.commons.math3.random.Well1024aTest#testNextChiSquare, org.apache.commons.math3.util.FastMathTestPerformance#testLog1p, org.apache.commons.math3.linear.RealVectorTest#testAddMixedTypes, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testMismatch, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testHalfInfinitePos, org.apache.commons.math3.util.MultidimensionalCounterTest#testPreconditions, org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testIllegalArguments, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextF, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testBadEndpoints, org.apache.commons.math3.random.Well44497aTest#testNextLongNegativeRange, org.apache.commons.math3.linear.LUDecompositionTest#testMatricesValues1, org.apache.commons.math3.linear.LUDecompositionTest#testMatricesValues2, org.apache.commons.math3.genetics.UniformCrossoverTest#testRatioTooLow, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testIssue631, org.apache.commons.math3.fitting.PolynomialFitterTest#testNoError, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testPreconditions1, org.apache.commons.math3.linear.SparseRealVectorTest#testOuterProductMixedTypes, org.apache.commons.math3.dfp.DfpTest#testMultiplyDouble, org.apache.commons.math3.util.Decimal64Test#testMultiplyField, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testSwiss, org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions1, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testConsistency, org.apache.commons.math3.linear.FieldMatrixImplTest#testSetSubMatrix, org.apache.commons.math3.random.Well44497bTest#testNextBeta, org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetColumnVector, org.apache.commons.math3.complex.ComplexTest#testMultiplyNaNInf, org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions4, org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange, org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions3, org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions2, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNorm1, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetEntry, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest#testLinearFunction2D, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen, org.apache.commons.math3.linear.SparseRealMatrixTest#testMultiply2, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetVectors, org.apache.commons.math3.linear.RealVectorTest#testUnitVector, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testSsDiffPow, org.apache.commons.math3.util.FastMathTestPerformance#testLog10, org.apache.commons.math3.linear.SparseRealMatrixTest#testTrace, org.apache.commons.math3.fraction.FractionTest#testAdd, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testRelativeToleranceOnScaledValues, org.apache.commons.math3.linear.RealVectorTest#testGetLInfDistanceDimensionMismatch, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest#testCumulativeDensityFunction, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testCrossProduct, org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositiveZeroPositive, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testSeeding, org.apache.commons.math3.random.ISAACTest#testNextIntNeg, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#backward, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testExamples, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, org.apache.commons.math3.linear.BlockRealMatrixTest#testSetRowMatrix, org.apache.commons.math3.util.MathArraysTest#testCheckOrder, org.apache.commons.math3.linear.HessenbergTransformerTest#testAEqualPHPt, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, org.apache.commons.math3.distribution.WeibullDistributionTest#testIllegalArguments, org.apache.commons.math3.random.Well512aTest#testNextIntWideRange, org.apache.commons.math3.linear.BlockRealMatrixTest#testSetRow, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, org.apache.commons.math3.random.MersenneTwisterTest#testNextChiSquare, org.apache.commons.math3.util.MathArraysTest#testCheckNonNegative, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCosh, org.apache.commons.math3.util.Decimal64Test#testSubtractField, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testDivideDouble, org.apache.commons.math3.fraction.FractionTest#testAbs, org.apache.commons.math3.util.MathArraysTest#testLInfDistanceDouble, org.apache.commons.math3.random.Well1024aTest#testNextBinomial, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextBinomial, org.apache.commons.math3.fraction.FractionFormatTest#testFormatImproper, org.apache.commons.math3.linear.ArrayRealVectorTest#testMap, org.apache.commons.math3.filter.KalmanFilterTest#testTransitionMeasurementMatrixMismatch, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath713NegativeVariable, org.apache.commons.math3.linear.TriDiagonalTransformerTest#testMatricesValues3, org.apache.commons.math3.distribution.TriangularDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.genetics.FixedGenerationCountTest#testIsSatisfied, org.apache.commons.math3.util.OpenIntToFieldTest#testPutAbsentOnExisting, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntNegativeRange, org.apache.commons.math3.random.Well44497aTest#testFloatDirect, org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfDimensionMismatchSameType, org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testIndices, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath781, org.apache.commons.math3.linear.TriDiagonalTransformerTest#testMatricesValues5, org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testGetEps, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testInfinite, org.apache.commons.math3.fraction.BigFractionFormatTest#testParse, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.random.Well19937cTest#testNextZipf, org.apache.commons.math3.random.Well1024aTest#testNextT, org.apache.commons.math3.fraction.BigFractionTest#testDoubleConstructor, org.apache.commons.math3.stat.FrequencyTest#testGetUniqueCount, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testIllConditioned, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntExtremeValues, org.apache.commons.math3.linear.RealVectorTest#testSubtractSameType, org.apache.commons.math3.linear.EigenDecompositionTest#testRepeatedEigenvalue, org.apache.commons.math3.distribution.FDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.stat.descriptive.rank.MinTest#testConsistency, org.apache.commons.math3.fitting.HarmonicFitterTest#testTinyVariationsData, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testForgottenPrefix, org.apache.commons.math3.distribution.TDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, org.apache.commons.math3.linear.SparseRealVectorTest#testIterator, org.apache.commons.math3.random.Well1024aTest#testNextLongWideRange, org.apache.commons.math3.util.FastMathTestPerformance#testAbs, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testGetOptimaBeforeOptimize, org.apache.commons.math3.util.Decimal64Test#testHypot, org.apache.commons.math3.distribution.FDistributionTest#testDensityIntegrals, org.apache.commons.math3.complex.ComplexTest#testScalarDivideInf, org.apache.commons.math3.complex.ComplexTest#testCosInf, org.apache.commons.math3.complex.ComplexTest#testScalarPow, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, org.apache.commons.math3.random.Well1024aTest#testNextF, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackWatson, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math3.linear.BlockFieldMatrixTest#testPremultiply, org.apache.commons.math3.random.Well512aTest#testSeeding, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testSetterInjection, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, org.apache.commons.math3.complex.ComplexTest#testTanInf, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSample2, org.apache.commons.math3.random.EmpiricalDistributionTest#testKernelOverrideUniform, org.apache.commons.math3.util.Decimal64Test#testSignum, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistance1, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testConstants, org.apache.commons.math3.dfp.DfpTest#testRound, org.apache.commons.math3.stat.inference.TTestTest#testOneSampleT, org.apache.commons.math3.linear.MatrixUtilsTest#testBlockInverse, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testPositiveInfinity, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testDoubleVectors, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformIAE, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextCauchy, org.apache.commons.math3.linear.SparseRealMatrixTest#testGetRowVector, org.apache.commons.math3.linear.SparseFieldMatrixTest#testExamples, org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape1000, org.apache.commons.math3.optimization.univariate.BracketFinderTest#testCubicMin, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testLongly, org.apache.commons.math3.distribution.FDistributionTest#testConsistency, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testHash, org.apache.commons.math3.util.MathUtilsTest#testCopySignByte2, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall, org.apache.commons.math3.optim.linear.SimplexSolverTest#testInfeasibleSolution, org.apache.commons.math3.random.ISAACTest#testNextChiSquare, org.apache.commons.math3.complex.ComplexTest#testAdd, org.apache.commons.math3.complex.ComplexTest#testTanCritical, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, org.apache.commons.math3.linear.RealVectorTest#testUnitVectorNullVector, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testNaN, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testJacobiOrthogonality, org.apache.commons.math3.linear.OpenMapRealMatrixTest#testMath679, org.apache.commons.math3.random.Well44497aTest#testNextIntIAE2, org.apache.commons.math3.util.MathArraysTest#testSortInPlaceFailures, org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionDimensionMismatch, org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatImproperNegative, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testGetEntry, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math3.util.Decimal64Test#testNegate, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveMultiply, org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest#testIterationCheckPrecondition, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testNISTExample, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionRightSide, org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest#testIterationCheck, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testIncrementation, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testThreePoints, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextF, org.apache.commons.math3.distribution.FDistributionTest#testMoments, org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testParameters, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testInterval, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, org.apache.commons.math3.complex.ComplexTest#testAbsInfinite, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulFirstRev, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextT, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#dimension2, org.apache.commons.math3.random.Well44497aTest#testNextIntNegativeRange, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testMath832, org.apache.commons.math3.stat.descriptive.rank.MedianTest#testEvaluateArraySegment, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackHelicalValley, org.apache.commons.math3.random.Well44497aTest#testSeeding, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, org.apache.commons.math3.random.Well44497bTest#testDoubleDirect, org.apache.commons.math3.fitting.GaussianFitterTest#testFit03, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, org.apache.commons.math3.fitting.GaussianFitterTest#testFit04, org.apache.commons.math3.fitting.GaussianFitterTest#testFit01, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex4, org.apache.commons.math3.fitting.GaussianFitterTest#testFit02, org.apache.commons.math3.fitting.GaussianFitterTest#testFit07, org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex2, org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex3, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math3.fitting.GaussianFitterTest#testFit05, org.apache.commons.math3.fitting.GaussianFitterTest#testFit06, org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex1, org.apache.commons.math3.random.Well44497aTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.fraction.BigFractionTest#testEpsilonLimitConstructor, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, org.apache.commons.math3.linear.SparseRealMatrixTest#testGetVectors, org.apache.commons.math3.linear.SparseRealMatrixTest#testExamples, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSummaryConsistency, org.apache.commons.math3.special.BetaTest#testLogGammaSum, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testUnbounded, org.apache.commons.math3.dfp.DfpTest#testAddField, org.apache.commons.math3.random.ISAACTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.stat.CertifiedDataTest#testDescriptiveStatistics, org.apache.commons.math3.random.Well1024aTest#testNextUniformIAE, org.apache.commons.math3.fraction.FractionTest#testNegate, org.apache.commons.math3.ode.ContinuousOutputModelTest#testErrorConditions, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math3.linear.MatrixUtilsTest#testFractionConverter, org.apache.commons.math3.linear.RealVectorTest#testAppendScalar, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionAboveSide, org.apache.commons.math3.dfp.DfpTest#testAbs, org.apache.commons.math3.linear.SparseFieldMatrixTest#testTranspose, org.apache.commons.math3.linear.SparseRealVectorTest#testMapSubtract, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncNeither, org.apache.commons.math3.random.ValueServerTest#testNextDigestFail, org.apache.commons.math3.linear.FieldMatrixImplTest#testDimensions, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testThresholdPositive, org.apache.commons.math3.distribution.ZipfDistributionTest#testIllegalArguments, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testIssue464, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testNoError, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testQuinticZero, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest#testRosenbrock, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testMath855, org.apache.commons.math3.random.ISAACTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, org.apache.commons.math3.linear.SingularValueSolverTest#testLeastSquareSolve, org.apache.commons.math3.random.Well19937aTest#testNextLongExtremeValues, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEvaluateArraySegment, org.apache.commons.math3.exception.util.ArgUtilsTest#testFlatten, org.apache.commons.math3.complex.FrenchComplexFormatTest#testDefaultFormatComplex, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, org.apache.commons.math3.distribution.AbstractRealDistributionTest#testContinuous, org.apache.commons.math3.analysis.integration.RombergIntegratorTest#testSinFunction, org.apache.commons.math3.complex.QuaternionTest#testQuaternionEquals, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testPowell, org.apache.commons.math3.dfp.DfpTest#testAdd, org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testRootEndpoints, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testIssue801, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testOverrideMeanWithMathClass, org.apache.commons.math3.analysis.integration.gauss.LegendreTest#testInverse, org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitize, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testWeightedProduct, org.apache.commons.math3.random.ISAACTest#testNextLongExtremeValues, org.apache.commons.math3.analysis.function.SigmoidTest#testSomeValues, org.apache.commons.math3.linear.BlockFieldMatrixTest#testWalk, org.apache.commons.math3.random.Well19937aTest#testSeeding, org.apache.commons.math3.distribution.CauchyDistributionTest#testDensityIntegrals, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulLastRev, org.apache.commons.math3.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testLonglySimpleCov, org.apache.commons.math3.distribution.BinomialDistributionTest#testConsistencyAtSupportBounds, org.apache.commons.math3.util.MathArraysTest#testEbeAdd, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testDiagonalRosen, org.apache.commons.math3.distribution.NormalDistributionTest#testDensity, org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2Overflow, org.apache.commons.math3.linear.SchurTransformerTest#testRandomDataNormalDistribution, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRegressIfaceMethod, org.apache.commons.math3.complex.ComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math3.random.Well44497bTest#testNextLongIAE, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, org.apache.commons.math3.linear.ArrayRealVectorTest#testMapDivideToSelf, org.apache.commons.math3.stat.descriptive.rank.MedianTest#testWeightedConsistency, org.apache.commons.math3.complex.ComplexFormatTest#testNegativeReal, org.apache.commons.math3.complex.ComplexTest#testAbs, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testMatrix, org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testIdentity, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.random.Well512aTest#testNextFloatDirect, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testArray, org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckPrecondition, org.apache.commons.math3.util.FastMathTest#testMinMaxFloat, org.apache.commons.math3.complex.ComplexTest#testScalarSubtractInf, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSine, org.apache.commons.math3.linear.RealVectorTest#testGetEntry, org.apache.commons.math3.stat.descriptive.summary.SumTest#testCopyConsistency, org.apache.commons.math3.transform.FastCosineTransformerTest#testSinFunction, org.apache.commons.math3.util.BigRealFieldTest#testZero, org.apache.commons.math3.genetics.OnePointCrossoverTest#testCrossover, org.apache.commons.math3.optimization.univariate.BracketFinderTest#testCubicMax, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testZero, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testConvergenceOnFunctionAccuracy, org.apache.commons.math3.distribution.TriangularDistributionTest#testMeanVariance, org.apache.commons.math3.util.FastMathTest#testAtan2, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNan, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math3.analysis.FunctionUtilsTest#testToDifferentiableMultivariateFunction, org.apache.commons.math3.analysis.solvers.MullerSolverTest#testParameters, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, org.apache.commons.math3.random.Well512aTest#testNextSample, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, org.apache.commons.math3.dfp.DfpTest#testToString, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, org.apache.commons.math3.analysis.solvers.BrentSolverTest#testQuinticZero, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testNonInvertible, org.apache.commons.math3.linear.SparseRealVectorTest#testAddSameType, org.apache.commons.math3.linear.SparseRealVectorTest#testMapAddToSelf, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongPositiveRange, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testCircleFitting, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testRastrigin, org.apache.commons.math3.random.MersenneTwisterTest#testNextLongWideRange, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFitting, org.apache.commons.math3.random.Well44497bTest#testNextIntIAE2, org.apache.commons.math3.ode.sampling.StepNormalizerTest#testBoundaries, org.apache.commons.math3.random.Well19937aTest#testNextUniformIAE, org.apache.commons.math3.random.Well19937aTest#testNextInt2, org.apache.commons.math3.fraction.FractionTest#testEqualsAndHashCode, org.apache.commons.math3.analysis.function.SincTest#testCrossings, org.apache.commons.math3.analysis.function.LogisticTest#testGradientComponent5, org.apache.commons.math3.ode.sampling.StepNormalizerTest#testBeforeEnd, org.apache.commons.math3.linear.SparseRealMatrixTest#testPremultiplyVector, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorOnePair, org.apache.commons.math3.linear.TriDiagonalTransformerTest#testQOrthogonal, org.apache.commons.math3.distribution.TDistributionTest#testMoments, org.apache.commons.math3.linear.RealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math3.distribution.CauchyDistributionTest#testIllegalArguments, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongPositiveRange, org.apache.commons.math3.random.Well1024aTest#testNextInversionDeviate, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntWideRange, org.apache.commons.math3.random.Well19937cTest#testNextLongWideRange, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testDistance, org.apache.commons.math3.random.Well512aTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMaximize2, org.apache.commons.math3.stat.descriptive.rank.MinTest#testIncrementation, org.apache.commons.math3.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, org.apache.commons.math3.genetics.ListPopulationTest#testSetPopulationLimitTooSmall, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMaximize1, org.apache.commons.math3.linear.RealVectorTest#testMapMultiplyToSelf, org.apache.commons.math3.random.Well44497aTest#testNextGamma, org.apache.commons.math3.linear.CholeskySolverTest#testDeterminant, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testIssue639, org.apache.commons.math3.linear.DiagonalMatrixTest#testCreateError, org.apache.commons.math3.genetics.ElitisticListPopulationTest#testSetElitismRate, org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformExtremeValues, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1DistanceMixedTypes, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, org.apache.commons.math3.linear.CholeskyDecompositionTest#testDimensions, org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetRow, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testConsistency, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testIncrementation, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNaNs, org.apache.commons.math3.dfp.DfpMathTest#testSin, org.apache.commons.math3.util.FastMathTestPerformance#testAtan, org.apache.commons.math3.distribution.BinomialDistributionTest#testSampling, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, org.apache.commons.math3.complex.ComplexTest#testTanhNaN, org.apache.commons.math3.stat.CertifiedDataTest#testSummaryStatistics, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDataRef, org.apache.commons.math3.linear.SingularValueDecompositionTest#testConditionNumber, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, org.apache.commons.math3.linear.SparseRealMatrixTest#testGetColumnMatrix, org.apache.commons.math3.complex.ComplexTest#testScalarMultiply, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, org.apache.commons.math3.random.ISAACTest#testNextLongDirect, org.apache.commons.math3.complex.ComplexTest#testTanh, org.apache.commons.math3.linear.RealVectorFormatTest#testForgottenSeparator, org.apache.commons.math3.complex.ComplexTest#testAsin, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testDelete1, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest#testParameters, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math3.analysis.function.LogisticTest#testCompareSigmoid, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testMultiply, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPoissonConsistency, org.apache.commons.math3.linear.EigenDecompositionTest#testBigMatrix, org.apache.commons.math3.analysis.function.SqrtTest#testDerivativeComparison, org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testBadEndpoints, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testStats, org.apache.commons.math3.special.ErfTest#testLargeValues, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testStats, org.apache.commons.math3.fraction.BigFractionFormatTest#testParseInteger, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.random.Well44497aTest#testNextInversionDeviate, org.apache.commons.math3.fraction.FractionTest#testLongValue, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testTablet, org.apache.commons.math3.complex.ComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeX, org.apache.commons.math3.random.EmpiricalDistributionTest#testDensityIntegrals, org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeY, org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeZ, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, org.apache.commons.math3.RetryRunnerTest#testRetryFailSometimes, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderPreservingVisitor3, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderPreservingVisitor1, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncNeitherRev, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderPreservingVisitor2, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongOrderMatrix, org.apache.commons.math3.analysis.FunctionUtilsTest#testMultiplyDifferentiable, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testIssue880Complete, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testEndPoints, org.apache.commons.math3.random.MersenneTwisterTest#testNextCauchy, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testNonInversible, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntWideRange, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testIdentity, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testRootEndpoints, org.apache.commons.math3.geometry.euclidean.twod.LineTest#testContains, org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples, org.apache.commons.math3.random.MersenneTwisterTest#testNextLong2, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testCopy, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testAddition, org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testCompositionRules, org.apache.commons.math3.random.Well44497aTest#testReseed, org.apache.commons.math3.exception.util.ExceptionContextTest#testMessageChain, org.apache.commons.math3.linear.SparseRealVectorTest#testEquals, org.apache.commons.math3.util.BigRealTest#testDivide, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testSampling, org.apache.commons.math3.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testConsistency, org.apache.commons.math3.random.ISAACTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.complex.ComplexTest#testDivide, org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorSameType, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math3.linear.LUDecompositionTest#testUUpperTriangular, org.apache.commons.math3.distribution.WeibullDistributionTest#testConsistency, org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex1, org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineMixedTypes, org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex3, org.apache.commons.math3.linear.ArrayRealVectorTest#testMapMultiply, org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex2, org.apache.commons.math3.distribution.CauchyDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.distribution.NormalDistributionTest#testDensityIntegrals, org.apache.commons.math3.genetics.RandomKeyTest#testRandomPermutation, org.apache.commons.math3.linear.ConjugateGradientTest#testMismatchedOperatorDimensions, org.apache.commons.math3.linear.TriDiagonalTransformerTest#testAEqualQTQt, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testProblemDimensionTooSmall, org.apache.commons.math3.linear.SymmLQTest#testEventManagement, org.apache.commons.math3.linear.SparseRealVectorTest#testSetEntryInvalidIndex1, org.apache.commons.math3.linear.SparseRealVectorTest#testSetEntryInvalidIndex2, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math3.random.Well44497aTest#testNextChiSquare, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEvaluation, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testDensity, org.apache.commons.math3.random.MersenneTwisterTest#testNexBoolean2, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testBoundedSqrt, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, org.apache.commons.math3.distribution.BetaDistributionTest#testCumulative, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAddDouble, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testTranslate, org.apache.commons.math3.distribution.UniformRealDistributionTest#testDensityIntegrals, org.apache.commons.math3.special.GammaTest#testLogGammaPositive, org.apache.commons.math3.linear.RealVectorTest#testGetLInfNorm, org.apache.commons.math3.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.optim.linear.SimplexSolverTest#testTrivialModel, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath290LEQ, org.apache.commons.math3.util.FastMathTest#testNextAfter, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testMatrix, org.apache.commons.math3.random.ISAACTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testIssue639, org.apache.commons.math3.random.Well44497bTest#testNexBytes, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, org.apache.commons.math3.linear.BiDiagonalTransformerTest#testBBiDiagonal, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testSerial, org.apache.commons.math3.linear.SparseFieldMatrixTest#testMultiply, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testSerialization, org.apache.commons.math3.stat.descriptive.rank.MinTest#testEvaluateArraySegment, org.apache.commons.math3.analysis.FunctionUtilsTest#testCombine, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBracketSin, org.apache.commons.math3.linear.BlockRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math3.linear.EigenDecompositionTest#testDimensions, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testSimplexSolver, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncLast, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetRowMatrix, org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testQuinticFunction, org.apache.commons.math3.stat.FrequencyTest#testMergeCollection, org.apache.commons.math3.ode.events.ReappearingEventTest#testDormandPrince, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testQuinticFunction, org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage6, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage4, org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage5, org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage2, org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage3, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEvaluation, org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage1, org.apache.commons.math3.linear.ConjugateGradientTest#testDimensionMismatchRightHandSide, org.apache.commons.math3.linear.SparseRealVectorTest#testMapToSelf, org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfDimensionMismatchSameType, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testElliRotated, org.apache.commons.math3.util.MultidimensionalCounterTest#testMulti2UniConversion, org.apache.commons.math3.genetics.ChromosomeTest#testFindSameChromosome, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testSmallError, org.apache.commons.math3.util.ArithmeticUtilsTest#testGcd, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab, org.apache.commons.math3.util.Decimal64Test#testAddDouble, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, org.apache.commons.math3.linear.EigenDecompositionTest#testDimension1, org.apache.commons.math3.random.ValueServerTest#testEmptyDigestFile, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math3.exception.util.ExceptionContextTest#testNoArgAddMessage, org.apache.commons.math3.special.BetaTest#testLogBetaPositiveNan, org.apache.commons.math3.distribution.UniformRealDistributionTest#testDistributionClone, org.apache.commons.math3.transform.FastCosineTransformerTest#testAdHocData, org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.linear.EigenDecompositionTest#testDimension3, org.apache.commons.math3.complex.ComplexTest#testSqrtRealPositive, org.apache.commons.math3.linear.EigenDecompositionTest#testDimension2, org.apache.commons.math3.random.Well19937cTest#testNextExponential, org.apache.commons.math3.util.MathArraysTest#testCheckNonNegative2D, org.apache.commons.math3.stat.inference.GTestTest#testZeroExpectedCounts, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, org.apache.commons.math3.linear.ArrayRealVectorTest#testMapDivide, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testCigar, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineDimensionMismatchMixedTypes, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testDuplicatedAbscissa, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveAccuracySin, org.apache.commons.math3.distribution.WeibullDistributionTest#testDensityIntegrals, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.random.Well44497bTest#testReseed, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, org.apache.commons.math3.fitting.HarmonicFitterTest#test1PercentError, org.apache.commons.math3.random.Well512aTest#testNextLongPositiveRange, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testTwoSets, org.apache.commons.math3.linear.ArrayRealVectorTest#testToArray, org.apache.commons.math3.linear.FieldMatrixImplTest#testScalarAdd, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNan, org.apache.commons.math3.linear.RealVectorTest#testCosineLeftNullVector, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testComposeInverse, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math3.linear.RealMatrixFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math3.distribution.TDistributionTest#testDensityIntegrals, org.apache.commons.math3.random.Well19937cTest#testNextLong2, org.apache.commons.math3.transform.FastFourierTransformerTest#testAdHocData, org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, org.apache.commons.math3.random.Well512aTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.fraction.FractionFormatTest#testParseInvalidDenominator, org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaFValue, org.apache.commons.math3.complex.ComplexTest#testPowZero, org.apache.commons.math3.random.Well19937aTest#testNextIntExtremeValues, org.apache.commons.math3.distribution.TriangularDistributionTest#testDensityIntegrals, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testMissedEndEvent, org.apache.commons.math3.random.Well19937cTest#testNextFloatDirect, org.apache.commons.math3.random.Well44497bTest#testNextIntNeg, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testTinyVariationsData, org.apache.commons.math3.stat.FrequencyTest#testCounts, org.apache.commons.math3.linear.ArrayRealVectorTest#testSetEntry, org.apache.commons.math3.linear.SingularValueDecompositionTest#testMoreColumns, org.apache.commons.math3.complex.ComplexTest#testNthRoot_normal_fourthRoot, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncFirst, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulBothRev, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testAngles, org.apache.commons.math3.genetics.NPointCrossoverTest#testNumberIsTooLargeException, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testNavigation, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testNonInvertible, org.apache.commons.math3.linear.SparseFieldMatrixTest#testAddFail, org.apache.commons.math3.optim.SimplePointCheckerTest#testIterationCheckDisabled, org.apache.commons.math3.util.ArithmeticUtilsTest#testBinomialCoefficientFail, org.apache.commons.math3.random.Well512aTest#testDoubleDirect, org.apache.commons.math3.util.FastMathTestPerformance#testExpm1, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testCopy, org.apache.commons.math3.random.Well19937cTest#testNextChiSquare, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testSerialization, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPremultiply, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testRosen, org.apache.commons.math3.linear.ArrayFieldVectorTest#testBasicFunctions, org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionSameType, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testSSENonNegative, org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, org.apache.commons.math3.fraction.FractionTest#testGetReducedFraction, org.apache.commons.math3.complex.ComplexTest#testSqrt1z, org.apache.commons.math3.linear.DiagonalMatrixTest#testSetNonDiagonalEntry, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testTwoSets, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testForgottenSuffix, org.apache.commons.math3.linear.RRQRDecompositionTest#testQOrthogonal, org.apache.commons.math3.linear.ArrayRealVectorTest#testAddToEntryInvalidIndex1, org.apache.commons.math3.linear.ArrayRealVectorTest#testAddToEntryInvalidIndex2, org.apache.commons.math3.linear.RealVectorTest#testAddToEntryInvalidIndex2, org.apache.commons.math3.distribution.LogNormalDistributionTest#testDensities, org.apache.commons.math3.linear.RealVectorTest#testAddToEntryInvalidIndex1, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testCopy, org.apache.commons.math3.genetics.RandomKeyTest#testDecode, org.apache.commons.math3.fraction.FractionFormatTest#testParseInteger, org.apache.commons.math3.transform.FastFourierTransformerTest#test2DDataUnitary, org.apache.commons.math3.random.MersenneTwisterTest#testNextIntNeg, org.apache.commons.math3.random.Well19937aTest#testNextF, org.apache.commons.math3.complex.ComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfDistanceDimensionMismatch, org.apache.commons.math3.special.ErfTest#testErfGnu, org.apache.commons.math3.optim.SimplePointCheckerTest#testIterationCheck, org.apache.commons.math3.ode.events.OverlappingEventsTest#testOverlappingEvents0, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testIncrementation, org.apache.commons.math3.ode.events.OverlappingEventsTest#testOverlappingEvents1, org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, org.apache.commons.math3.distribution.TDistributionTest#testDensities, org.apache.commons.math3.complex.ComplexFieldTest#testSerial, org.apache.commons.math3.dfp.DfpTest#testRemainderField, org.apache.commons.math3.util.FastMathTest#testHyperbolicInverses, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, org.apache.commons.math3.exception.util.ExceptionContextTest#testSerialize, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testSsDiffPow, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveRemainder, org.apache.commons.math3.genetics.FixedElapsedTimeTest#testIsSatisfied, org.apache.commons.math3.random.Well19937cTest#testNextPoissonConsistency, org.apache.commons.math3.random.Well19937aTest#testNextT, org.apache.commons.math3.linear.SparseRealVectorTest#testAddDimensionMismatch, org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionNullVector, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypot, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testSinglePoint, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, org.apache.commons.math3.linear.RealVectorTest#testProjectionMixedTypes, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testPowell, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testWave, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testSpecialValues, org.apache.commons.math3.linear.SparseRealMatrixTest#testOperate, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch, org.apache.commons.math3.fraction.BigFractionTest#testMath340, org.apache.commons.math3.complex.QuaternionTest#testWrongDimension, org.apache.commons.math3.linear.FieldLUDecompositionTest#testLLowerTriangular, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.util.ArithmeticUtilsTest#testSubAndCheckLong, org.apache.commons.math3.analysis.solvers.NewtonSolverTest#testSinZero, org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testExpm1Function, org.apache.commons.math3.util.FastMathTest#testMinMaxDouble, org.apache.commons.math3.optim.linear.SimplexTableauTest#testInitialization, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testWeightedConsistency, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSerialization, org.apache.commons.math3.dfp.DfpTest#testLog10K, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSignum, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, org.apache.commons.math3.util.Decimal64Test#testDivideDouble, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEvaluateArraySegment, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testCumulativeProbability, org.apache.commons.math3.linear.SparseRealVectorTest#testUnitVector, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testElliRotated, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testStartSimplexInsideRange, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testLeastSquares2, org.apache.commons.math3.complex.ComplexTest#testLog, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testLeastSquares1, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testLeastSquares3, org.apache.commons.math3.fraction.FractionTest#testIntValue, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testAddToEntry, org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedResidual, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest#test2DDistance, org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1Norm, org.apache.commons.math3.optim.univariate.BracketFinderTest#testIntervalBoundsOrdering, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncLastRev, org.apache.commons.math3.distribution.LevyDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAngularSeparation, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testBounds, org.apache.commons.math3.linear.CholeskyDecompositionTest#testNonSquare, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testSummaryConsistency, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSubMatrix, org.apache.commons.math3.util.BigRealTest#testAdd, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testStartSimplexInsideRange, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest#testCumulativeProbabilitiesRangeArguments, org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.linear.TriDiagonalTransformerTest#testQTOrthogonal, org.apache.commons.math3.special.ErfTest#testErf2576, org.apache.commons.math3.random.Well19937aTest#testNextBinomial, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testMoreLargeValues, org.apache.commons.math3.distribution.FDistributionTest#testDfAccessors, org.apache.commons.math3.linear.ArrayRealVectorTest#testZeroVectors, org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformRealInvalidDataSize, org.apache.commons.math3.transform.FastSineTransformerTest#testTransformReal, org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434NegativeVariable, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongStepSize, org.apache.commons.math3.fraction.FractionFormatTest#testLongFormat, org.apache.commons.math3.util.PrecisionTest#testCompareToMaxUlps, org.apache.commons.math3.random.Well512aTest#testNextInt2, org.apache.commons.math3.linear.HessenbergTransformerTest#testHessenbergForm, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulLast, org.apache.commons.math3.distribution.BinomialDistributionTest#testMath718, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeZ, org.apache.commons.math3.linear.BlockFieldMatrixTest#testExamples, org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossover, org.apache.commons.math3.util.FastMathTest#testMath905LargeNegative, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeX, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeY, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextBeta, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowDouble, org.apache.commons.math3.linear.RRQRDecompositionTest#testRank, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeZ, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeY, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testMultipleColumnsRequired, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeX, org.apache.commons.math3.linear.MatrixUtilsTest#testcreateFieldMatrix, org.apache.commons.math3.linear.EigenDecompositionTest#testTridiagonal, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInputSigmaDimensionMismatch, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testConsistency, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, org.apache.commons.math3.analysis.FunctionUtilsTest#testSampleWrongBounds, org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionSameType, org.apache.commons.math3.distribution.PoissonDistributionTest#testConsistencyAtSupportBounds, org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossover, org.apache.commons.math3.complex.ComplexTest#testSubtract, org.apache.commons.math3.random.SynchronizedRandomGeneratorTest#testMath899Sync, org.apache.commons.math3.dfp.DfpMathTest#testPow, org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductSameType, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testConstant, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math3.linear.BlockFieldMatrixTest#testPlusMinus, org.apache.commons.math3.fitting.HarmonicFitterTest#testPreconditions1, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testField, org.apache.commons.math3.complex.ComplexTest#testScalarPowNaNBase, org.apache.commons.math3.fraction.FractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testBevington, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testSerial, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testBoundariesDimensionMismatch, org.apache.commons.math3.linear.DiagonalMatrixTest#testSetSubMatrixError, org.apache.commons.math3.random.Well44497bTest#testNextPoissonConsistency, org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math3.linear.BlockRealMatrixTest#testSetSubMatrix, org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfDistanceMixedTypes, org.apache.commons.math3.linear.HessenbergTransformerTest#testPTOrthogonal, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEvaluateArraySegment, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testToString, org.apache.commons.math3.stat.inference.TestUtilsTest#testRootLogLikelihood, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testNaN, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math3.optimization.linear.SimplexTableauTest#testSerial, org.apache.commons.math3.random.Well512aTest#testNextIntExtremeValues, org.apache.commons.math3.random.Well44497aTest#testDoubleDirect, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNexBoolean2, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testMaxIterationsPositive, org.apache.commons.math3.linear.SparseRealVectorTest#testToArray, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testSerial, org.apache.commons.math3.linear.ArrayRealVectorTest#testOuterProductMixedTypes, org.apache.commons.math3.random.Well1024aTest#testDoubleDirect, org.apache.commons.math3.linear.RealMatrixFormatTest#testForgottenPrefix, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testCigarWithBoundaries, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntPositiveRange, org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositivePositive, org.apache.commons.math3.random.Well19937aTest#testNextIntIAE2, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotSpecial, org.apache.commons.math3.linear.SparseFieldMatrixTest#testPremultiplyVector, org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.distribution.GammaDistributionTest#testPreconditions, org.apache.commons.math3.random.Well44497aTest#testNextPoisson, org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testQuinticZero, org.apache.commons.math3.linear.SparseFieldMatrixTest#testPremultiply, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testNoDependency, org.apache.commons.math3.random.Well1024aTest#testNextLongNegativeRange, org.apache.commons.math3.linear.QRSolverTest#testSolve, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSingleton, org.apache.commons.math3.linear.RealVectorTest#testEbeDivideDimensionMismatch, org.apache.commons.math3.util.PairTest#testEquals, org.apache.commons.math3.random.ISAACTest#testNextIntExtremeValues, org.apache.commons.math3.random.Well44497aTest#testNextIntPositiveRange, org.apache.commons.math3.distribution.CauchyDistributionTest#testScale, org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape1, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaOutOfRange, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testMaxEvaluations, org.apache.commons.math3.random.Well19937aTest#testNextZipf, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testSwissFertility, org.apache.commons.math3.random.ISAACTest#testNextBinomial, org.apache.commons.math3.distribution.FDistributionTest#testDensities, org.apache.commons.math3.random.Well512aTest#testNextF, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackRosenbrok, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testIllConditioned, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEvaluation, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistance, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest#testSphere, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath713NegativeVariable, org.apache.commons.math3.random.Well512aTest#testNextT, org.apache.commons.math3.fitting.PolynomialFitterTest#testMath798WithToleranceTooLowButNoException, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowInt, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testBackward, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testForgottenPrefix, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextWeibull, org.apache.commons.math3.random.Well19937cTest#testNextIntNegativeRange, org.apache.commons.math3.linear.RealVectorTest#testMapAdd, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testIssue880Simplified, org.apache.commons.math3.random.Well44497bTest#testNextExponential, org.apache.commons.math3.linear.SparseRealVectorTest#testMapMultiplyToSelf, org.apache.commons.math3.linear.RealVectorTest#testMinMax, org.apache.commons.math3.complex.ComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testTolerance, org.apache.commons.math3.distribution.FDistributionTest#testMath785, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testRosenbrock, org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape8, org.apache.commons.math3.linear.TriDiagonalTransformerTest#testTTriDiagonal, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLegendreOrthogonality, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, org.apache.commons.math3.complex.ComplexTest#testSinhInf, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testInitialMixture, org.apache.commons.math3.analysis.solvers.SecantSolverTest#testQuinticZero, org.apache.commons.math3.distribution.ZipfDistributionTest#testDensities, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextT, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextF, org.apache.commons.math3.distribution.FDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.linear.FieldLUDecompositionTest#testPAEqualLU, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testRemoval, org.apache.commons.math3.linear.ArrayRealVectorTest#testMapAddToSelf, org.apache.commons.math3.stat.descriptive.rank.MinTest#testMomentSmallSamples, org.apache.commons.math3.util.PrecisionTest#testMath475, org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformComplexSizeNotAPowerOfTwo, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSample, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testUnsorted, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting2, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath288, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath286, org.apache.commons.math3.random.Well19937cTest#testNextWeibull, org.apache.commons.math3.util.MathArraysTest#testSortInPlaceExample, org.apache.commons.math3.complex.ComplexTest#testPowNaNExponent, org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductSameType, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRint, org.apache.commons.math3.fraction.FractionFormatTest#testParseProper, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog10Power, org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductDimensionMismatchMixedTypes, org.apache.commons.math3.RetryRunnerTest#testRetryFailAlways, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math3.util.Decimal64Test#testHash, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testWampler3, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, org.apache.commons.math3.random.Well44497aTest#testNextUniformExtremeValues, org.apache.commons.math3.distribution.UniformRealDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.fraction.BigFractionFieldTest#testOne, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, org.apache.commons.math3.random.Well1024aTest#testNextBooleanDirect, org.apache.commons.math3.distribution.PoissonDistributionTest#testIllegalArguments, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testMath519, org.apache.commons.math3.linear.EigenDecompositionTest#testEigenvectors, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testLineIntersection, org.apache.commons.math3.distribution.NormalDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath272, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testWampler1, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDensityIntegrals, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testWampler2, org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositiveZero, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testCircleFittingGoodInit, org.apache.commons.math3.distribution.WeibullDistributionTest#testSampling, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testEmptyData, org.apache.commons.math3.optimization.SimplePointCheckerTest#testIterationCheckDisabled, org.apache.commons.math3.fraction.FractionFormatTest#testWholeFormat, org.apache.commons.math3.complex.ComplexFormatTest#testNegativeBoth, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testUnivariateDistribution, org.apache.commons.math3.linear.MatrixUtilsTest#testSolveLowerTriangularSystem, org.apache.commons.math3.linear.BlockRealMatrixTest#testSetColumn, org.apache.commons.math3.linear.FieldMatrixImplTest#testGetEntry, org.apache.commons.math3.linear.RRQRSolverTest#testSolveDimensionErrors, org.apache.commons.math3.util.ResizableDoubleArrayTest#testSubstitute, org.apache.commons.math3.distribution.LevyDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.analysis.function.StepFunctionTest#testSomeValues, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testSerialization, org.apache.commons.math3.distribution.BinomialDistributionTest#testDensities, org.apache.commons.math3.util.Decimal64Test#testSubtractDouble, org.apache.commons.math3.random.Well512aTest#testNextLongNegativeRange, org.apache.commons.math3.linear.SparseRealVectorTest#testSerial, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testKirby2, org.apache.commons.math3.distribution.PascalDistributionTest#testIllegalArguments, org.apache.commons.math3.ode.FirstOrderConverterTest#testSmallStep, org.apache.commons.math3.linear.RealVectorFormatTest#testParseNan, org.apache.commons.math3.linear.BlockRealMatrixTest#testTrace, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncLastRev, org.apache.commons.math3.analysis.function.GaussianTest#testLargeArguments, org.apache.commons.math3.random.ISAACTest#testNexBytes, org.apache.commons.math3.util.TransformerMapTest#testContainsClass, org.apache.commons.math3.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math3.linear.QRSolverTest#testRank, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNormalize, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testInitOutOfBounds, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testBoundsUnsupported, org.apache.commons.math3.linear.SparseRealVectorTest#testGetDistanceMixedTypes, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary#test, org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderChangingVisitor1, org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderChangingVisitor3, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testFilippelli, org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderChangingVisitor2, org.apache.commons.math3.util.Decimal64Test#testCbrt, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCoshDefinition, org.apache.commons.math3.random.Well44497aTest#testNextIntExtremeValues, org.apache.commons.math3.linear.FieldMatrixImplTest#testCopyFunctions, org.apache.commons.math3.distribution.NormalDistributionTest#testIllegalArguments, org.apache.commons.math3.random.EmpiricalDistributionTest#testDensities, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotNeglectible, org.apache.commons.math3.linear.SparseRealVectorTest#testMapMultiply, org.apache.commons.math3.random.MersenneTwisterTest#testNextPoisson, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackMeyer, org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductDimensionMismatchSameType, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleInsufficientData, org.apache.commons.math3.stat.descriptive.rank.MinTest#testSerial, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testSerialization, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncFirstRev, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLogExp, org.apache.commons.math3.linear.DiagonalMatrixTest#testSetEntryOutOfRange, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulBoth, org.apache.commons.math3.linear.RealVectorFormatTest#tesNegativeInfinity, org.apache.commons.math3.genetics.RandomKeyTest#testIsSame, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBard, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testJacobiEvaluationAt1, org.apache.commons.math3.transform.FastSineTransformerTest#testSinFunction, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetSupportLowerBound, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testUnbounded, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, org.apache.commons.math3.dfp.DfpTest#testIssue567, org.apache.commons.math3.fraction.BigFractionTest#testSubtract, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, org.apache.commons.math3.util.MathArraysTest#testArrayEquals, org.apache.commons.math3.random.MersenneTwisterTest#testNextIntPositiveRange, org.apache.commons.math3.linear.RealMatrixFormatTest#testForgottenSuffix, org.apache.commons.math3.linear.RealVectorTest#testDotProductDimensionMismatchMixedTypes, org.apache.commons.math3.linear.RealVectorTest#testIterator, org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testCluster, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongNegativeToPositiveRange, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBard, org.apache.commons.math3.util.IncrementorTest#testAccessor, org.apache.commons.math3.linear.EigenDecompositionTest#testMath308, org.apache.commons.math3.stat.StatUtilsTest#testMax, org.apache.commons.math3.genetics.UniformCrossoverTest#testRatioTooHigh, org.apache.commons.math3.analysis.function.SigmoidTest#testParametricValue, org.apache.commons.math3.distribution.TDistributionTest#testSmallDf, org.apache.commons.math3.linear.ArrayRealVectorTest#testSerial, org.apache.commons.math3.linear.RRQRSolverTest#testRank, org.apache.commons.math3.complex.QuaternionTest#testQuaternionEquals2, org.apache.commons.math3.random.ISAACTest#testNextGamma, org.apache.commons.math3.random.Well19937cTest#testNextLongPositiveRange, org.apache.commons.math3.util.MathArraysTest#testEbeSubtract, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testContainsKey, org.apache.commons.math3.stat.descriptive.rank.MinTest#testSerialization, org.apache.commons.math3.genetics.RandomKeyMutationTest#testMutate, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.special.BetaTest#testLogBetaPositiveNegative, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetRow, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testTooLargeFirstStep, org.apache.commons.math3.util.MathUtilsTest#testIndicatorLong, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math3.linear.RealVectorTest#testEquals, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseZeroComponent, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testRevert, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, org.apache.commons.math3.analysis.FunctionUtilsTest#testSinc, org.apache.commons.math3.fraction.BigFractionTest#testReciprocal, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, org.apache.commons.math3.random.Well44497bTest#testNextLongDirect, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextExponential, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testSingularPoint, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFF2, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testYVariance, org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFF3, org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFF4, org.apache.commons.math3.complex.ComplexTest#testScalarPowInf, org.apache.commons.math3.random.StableRandomGeneratorTest#testBetaRangeBelowMinusOne, org.apache.commons.math3.random.MersenneTwisterTest#testNextInt2, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionOutsideOutside, org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositiveZero, org.apache.commons.math3.random.Well19937aTest#testNextBooleanDirect, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMinimization, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackOsborne2, org.apache.commons.math3.random.Well1024aTest#testNextHex, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackOsborne1, org.apache.commons.math3.special.BetaTest#testLogGammaMinusLogGammaSumPrecondition1, org.apache.commons.math3.analysis.solvers.BrentSolverTest#testRootEndpoints, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFF2, org.apache.commons.math3.util.OpenIntToFieldTest#testGetAbsent, org.apache.commons.math3.fitting.PolynomialFitterTest#testRedundantSolvable, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFF3, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFF4, org.apache.commons.math3.random.Well19937cTest#testDoubleDirect, org.apache.commons.math3.fraction.BigFractionFieldTest#testZero, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testDifference, org.apache.commons.math3.linear.FieldMatrixImplTest#testPremultiply, org.apache.commons.math3.optim.linear.SimplexTableauTest#testSerial, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntPositiveRange, org.apache.commons.math3.linear.SparseRealVectorTest#testCosineLeftNullVector, org.apache.commons.math3.complex.ComplexTest#testScalarPowNaNExponent, org.apache.commons.math3.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.random.Well1024aTest#testNextGamma, org.apache.commons.math3.linear.SparseRealVectorTest#testCosineRightNullVector, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testPopulation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math3.linear.RRQRSolverTest#testUnderdetermined, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, org.apache.commons.math3.stat.descriptive.summary.SumTest#testConsistency, org.apache.commons.math3.distribution.BetaDistributionTest#testMoments, org.apache.commons.math3.linear.RealVectorTest#testToArray, org.apache.commons.math3.random.Well19937cTest#testConfig, org.apache.commons.math3.complex.ComplexTest#testReciprocalImaginary, org.apache.commons.math3.complex.ComplexTest#testConjugateInfiinite, org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntExtremeValues, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testWeightedConsistency, org.apache.commons.math3.stat.descriptive.summary.SumTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.util.ArithmeticUtilsTest#testFactorial, org.apache.commons.math3.random.Well19937cTest#testNextInversionDeviate, org.apache.commons.math3.special.BetaTest#testLogGammaMinusLogGammaSumPrecondition2, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulNeither, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testGLSEfficiency, org.apache.commons.math3.util.PrecisionTest#testEqualsIncludingNaNWithAllowedUlps, org.apache.commons.math3.distribution.LogNormalDistributionTest#testConsistency, org.apache.commons.math3.random.Well1024aTest#testNextZipf, org.apache.commons.math3.util.BigRealTest#testReciprocal, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testCopy, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, org.apache.commons.math3.distribution.LogNormalDistributionTest#testIllegalArguments, org.apache.commons.math3.analysis.function.GaussianTest#testPreconditions, org.apache.commons.math3.linear.EigenDecompositionTest#testDiagonal, org.apache.commons.math3.distribution.TDistributionTest#testDistributionClone, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testGetAbsent, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testBoundariesDimensionMismatch, org.apache.commons.math3.analysis.function.SincTest#testShortcut, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath293, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleInvalidData, org.apache.commons.math3.analysis.function.SincTest#testDerivatives1Dot2Normalized, org.apache.commons.math3.linear.RealMatrixFormatTest#testPositiveInfinity, org.apache.commons.math3.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, org.apache.commons.math3.random.Well44497aTest#testNextLongIAE, org.apache.commons.math3.distribution.NormalDistributionTest#testGetMean, org.apache.commons.math3.complex.ComplexFormatTest#testGetRealFormat, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testNoReset, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math3.analysis.function.SincTest#testDerivatives1Dot2Unnormalized, org.apache.commons.math3.stat.descriptive.rank.MedianTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.random.Well44497aTest#testNextInt2, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInitOutofbounds1, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInitOutofbounds2, org.apache.commons.math3.util.ResizableDoubleArrayTest#testConstructors, org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformIAE, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetSubMatrix, org.apache.commons.math3.distribution.NormalDistributionTest#testDensities, org.apache.commons.math3.random.Well19937cTest#testNextIntDirect, org.apache.commons.math3.fraction.FractionFieldTest#testZero, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testBasicStats, org.apache.commons.math3.random.Well1024aTest#testNextGaussian, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextGamma, org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testConsistencyAtSupportBounds, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testPreconditionPositiveWeights, org.apache.commons.math3.exception.util.LocalizedFormatsTest#testAllPropertiesCorrespondToKeys, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCeil, org.apache.commons.math3.fraction.BigFractionFormatTest#testParseProper, org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex4, org.apache.commons.math3.util.Decimal64Test#testFloor, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetColumn, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextGamma, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testRosenbrock, org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex1, org.apache.commons.math3.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.geometry.euclidean.twod.LineTest#testTransform, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex2, org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex3, org.apache.commons.math3.stat.StatUtilsTest#testMin, org.apache.commons.math3.util.ResizableDoubleArrayTest#testGetValues, org.apache.commons.math3.fitting.CurveFitterTest#testMath304, org.apache.commons.math3.linear.SingularValueDecompositionTest#testStability2, org.apache.commons.math3.fitting.CurveFitterTest#testMath303, org.apache.commons.math3.linear.SingularValueDecompositionTest#testStability1, org.apache.commons.math3.linear.SparseRealVectorTest#testCombineMixedTypes, org.apache.commons.math3.stat.descriptive.summary.SumTest#testSerial, org.apache.commons.math3.analysis.FunctionUtilsTest#testSampleNullNumberOfPoints, org.apache.commons.math3.complex.ComplexTest#testSqrtPolar, org.apache.commons.math3.linear.SchurTransformerTest#testPTOrthogonal, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextBooleanDirect, org.apache.commons.math3.linear.BiDiagonalTransformerTest#testMatricesValues, org.apache.commons.math3.util.MathArraysTest#testCopyOfInt2, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testBackward, org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, org.apache.commons.math3.random.Well19937aTest#testNextLongIAE, org.apache.commons.math3.util.MathArraysTest#testCopyOfInt3, org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedSolution, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulNeitherRev, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testQuadratic, org.apache.commons.math3.util.FastMathTestPerformance#testTanh, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testOneRedundantColumn, org.apache.commons.math3.random.Well19937cTest#testNextPoisson, org.apache.commons.math3.random.Well19937aTest#testReferenceCode, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testInconsistentEquations, org.apache.commons.math3.linear.BlockRealMatrixTest#testMultiply, org.apache.commons.math3.util.Decimal64Test#testSinh, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleDataYNull, org.apache.commons.math3.random.Well19937aTest#testNexBytes, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testBadEndpoints, org.apache.commons.math3.util.Decimal64Test#testExpm1, org.apache.commons.math3.util.FastMathTest#testSinhAccuracy, org.apache.commons.math3.complex.ComplexTest#testCosh, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination2DoubleDS, org.apache.commons.math3.ode.events.EventFilterTest#testHistoryIncreasingForward, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler1, org.apache.commons.math3.fraction.BigFractionTest#testDoubleValueForLargeNumeratorAndDenominator, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler2, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testAddFail, org.apache.commons.math3.distribution.PoissonDistributionTest#testSampling, org.apache.commons.math3.optim.SimpleValueCheckerTest#testIterationCheckDisabled, org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedSolutionWithInitialGuess, org.apache.commons.math3.complex.ComplexTest#testExpNaN, org.apache.commons.math3.random.ValueServerTest#testNextDigest, org.apache.commons.math3.linear.SchurTransformerTest#testPOrthogonal, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSinZero, org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorSameType, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testBoundariesDimensionMismatch, org.apache.commons.math3.linear.EigenDecompositionTest#testSquareRootNonSymmetric, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler3, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler4, org.apache.commons.math3.complex.ComplexTest#testReciprocalInf, org.apache.commons.math3.stat.descriptive.rank.MinTest#testCopy, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testMoments, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testNonJaggedData, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testSerialization, org.apache.commons.math3.util.FastMathTestPerformance#testAsin, org.apache.commons.math3.complex.ComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math3.optim.linear.SimplexSolverTest#testLargeModel, org.apache.commons.math3.util.FastMathTest#testMath904, org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverExample, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntNegativeRange, org.apache.commons.math3.linear.SparseFieldVectorTest#testBasicFunctions, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testSample, org.apache.commons.math3.linear.SymmLQTest#testMismatchedOperatorDimensions, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, org.apache.commons.math3.complex.ComplexFormatTest#testDefaultFormatComplex, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testToString, org.apache.commons.math3.random.Well1024aTest#testNextIntExtremeValues, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, org.apache.commons.math3.linear.FieldMatrixImplTest#testSerial, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testCopySubMatrix, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testSmallDf, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testWeightedConsistency, org.apache.commons.math3.util.BigRealTest#testCompareTo, org.apache.commons.math3.util.FastMathTest#testLog1pAccuracy, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testChebyshevOrthogonality, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath272, org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideDimensionMismatch, org.apache.commons.math3.random.Well44497aTest#testNextF, org.apache.commons.math3.linear.FieldMatrixImplTest#testGetRowMatrix, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testYVariance, org.apache.commons.math3.analysis.solvers.MullerSolverTest#testQuinticFunction, org.apache.commons.math3.util.FastMathTest#testPowAccuracy, org.apache.commons.math3.distribution.WeibullDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testConvergenceOnFunctionAccuracy, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextWeibull, org.apache.commons.math3.complex.ComplexFormatTest#testNegativeImaginary, org.apache.commons.math3.random.Well44497aTest#testNextT, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionBoundaryOutside, org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math3.random.Well19937cTest#testNextLongExtremeValues, org.apache.commons.math3.linear.HessenbergTransformerTest#testPOrthogonal, org.apache.commons.math3.special.BetaTest#testLogGammaMinusLogGammaSum, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters, org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.util.TransformerMapTest#testTransformers, org.apache.commons.math3.linear.BlockFieldMatrixTest#testSeveralBlocks, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testNonEmptyData, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath286, org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorMixedType, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testSerialization, org.apache.commons.math3.random.Well19937cTest#testReseed, org.apache.commons.math3.complex.ComplexTest#testScalarDivideNaN, org.apache.commons.math3.random.ISAACTest#testNextExponential, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath288, org.apache.commons.math3.util.MathUtilsTest#testIndicatorInt, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testSingleUp, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testWikipedia, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math3.linear.RealVectorTest#testCombineMixedTypes, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDistanceMixedTypes, org.apache.commons.math3.distribution.ExponentialDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.fraction.BigFractionTest#testNegate, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, org.apache.commons.math3.optimization.fitting.CurveFitterTest#testMath372, org.apache.commons.math3.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math3.random.Well44497bTest#testNextWeibull, org.apache.commons.math3.random.Well1024aTest#testNextIntPositiveRange, org.apache.commons.math3.util.Decimal64Test#testSqrt, org.apache.commons.math3.util.FastMathTest#testIndicatorDouble, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNegativeBoth, org.apache.commons.math3.distribution.LogNormalDistributionTest#testSampling, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest#testInverse, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testMath296withoutWeights, org.apache.commons.math3.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testCentroid, org.apache.commons.math3.complex.ComplexTest#testTan, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformExtremeValues, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntIAE, org.apache.commons.math3.complex.ComplexTest#testScalarSubtract, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetCovarianceMatrix, org.apache.commons.math3.random.Well44497bTest#testNextUniformIAE, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseZeroX, org.apache.commons.math3.linear.SparseRealVectorTest#testSubtractDimensionMismatch, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testDoubleRotations, org.apache.commons.math3.util.ResizableDoubleArrayTest#testAddElements, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testMisc, org.apache.commons.math3.dfp.DfpTest#testSpecialConstructors, org.apache.commons.math3.linear.CholeskyDecompositionTest#testLTTransposed, org.apache.commons.math3.linear.SparseRealVectorTest#testMapAdd, org.apache.commons.math3.util.FastMathTest#testFloatScalbSpecialCases, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testInsufficientData, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongNegativeRange, org.apache.commons.math3.complex.ComplexFormatTest#testFormatNumber, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testFloor, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMinimization, org.apache.commons.math3.linear.HessenbergTransformerTest#testMatricesValues3, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testQRColumnsPermutation, org.apache.commons.math3.linear.HessenbergTransformerTest#testMatricesValues5, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testSubtract, org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1DistanceDimensionMismatch, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest#testMannWhitneyUSimple, org.apache.commons.math3.fraction.FractionFormatTest#testDenominatorFormat, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testIncrementation, org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplyMixedTypes, org.apache.commons.math3.random.Well512aTest#testNextGaussian, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextInt2, org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedSolution2, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math3.linear.SparseRealVectorTest#testMinMax, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotNoOverflow, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPoisson, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testNoEndPoints, org.apache.commons.math3.linear.SparseRealVectorTest#testMapSubtractToSelf, org.apache.commons.math3.fraction.BigFractionTest#testEqualsAndHashCode, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionBelowSide, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEvaluateArraySegment, org.apache.commons.math3.complex.ComplexTest#testEqualsNaN, org.apache.commons.math3.util.PairTest#testAccessor, org.apache.commons.math3.analysis.function.SincTest#testEuler, org.apache.commons.math3.linear.SingularValueDecompositionTest#testAEqualUSVt, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math3.random.ISAACTest#testNextBooleanDirect, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackLinearRank1, org.apache.commons.math3.linear.MatrixUtilsTest#testCreateRealMatrix, org.apache.commons.math3.util.Decimal64Test#testAsinh, org.apache.commons.math3.linear.SparseRealMatrixTest#testPremultiply, org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEvaluation, org.apache.commons.math3.linear.SchurTransformerTest#testAEqualPTPt, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testSinMinWithValueChecker, org.apache.commons.math3.util.FastMathTest#testLogSpecialCases, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testGetEntry, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest#testAllMonomials, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetColumnVector, org.apache.commons.math3.util.MathArraysTest#testEbeDivide, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testAxisAngle, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest#testBigDataSet, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath290LEQ, org.apache.commons.math3.random.Well512aTest#testReseed, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testIncrementation, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCopySignField, org.apache.commons.math3.linear.SchurTransformerTest#testNonSquare, org.apache.commons.math3.geometry.euclidean.threed.LineTest#testRevert, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math3.linear.FieldLUDecompositionTest#testSingular, org.apache.commons.math3.analysis.function.GaussianTest#testDerivatives, org.apache.commons.math3.distribution.NormalDistributionTest#testConsistency, org.apache.commons.math3.util.ArithmeticUtilsTest#testIsPowerOfTwo, org.apache.commons.math3.distribution.LevyDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulFirstRev, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative, org.apache.commons.math3.util.BigRealFieldTest#testOne, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testPerfect, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testIncrementation, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math3.dfp.DfpTest#testMultiply, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition1, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition2, org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition3, org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition4, org.apache.commons.math3.stat.inference.GTestTest#testUnmatchedArrays, org.apache.commons.math3.linear.MatrixUtilsTest#testSolveUpperTriangularSystem, org.apache.commons.math3.linear.SparseRealMatrixTest#testMultiply, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testConvergenceException, org.apache.commons.math3.random.ISAACTest#testNextIntPositiveRange, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEvaluation, org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfDistanceDimensionMismatch, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testIncrementation, org.apache.commons.math3.util.BigRealFieldTest#testSerial, org.apache.commons.math3.distribution.ZipfDistributionTest#testSampling, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, org.apache.commons.math3.linear.BlockRealMatrixTest#testPremultiply, org.apache.commons.math3.stat.inference.TestUtilsTest#testSmallSamples, org.apache.commons.math3.util.FastMathTest#testSinAccuracy, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testKirby2, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionInsideOutside, org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineSameType, org.apache.commons.math3.fitting.PolynomialFitterTest#testSmallError, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, org.apache.commons.math3.fitting.HarmonicFitterTest#testUnsorted, org.apache.commons.math3.linear.RealVectorFormatTest#testParseZeroX, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testIncompatibleIntialMixture, org.apache.commons.math3.linear.SparseFieldMatrixTest#testOperate, org.apache.commons.math3.geometry.euclidean.threed.LineTest#testLineDistance, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExpm1, org.apache.commons.math3.linear.LUSolverTest#testSingular, org.apache.commons.math3.distribution.UniformRealDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testSerialization, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testUnion, org.apache.commons.math3.random.Well512aTest#testNextLongWideRange, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionBelowSide, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testExceptions, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testRegressAirlineConstantExternal, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testGetSubVector, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncBoth, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testQuinticMax, org.apache.commons.math3.complex.ComplexTest#testSerial, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testSinFunction, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testInsufficientOrder3, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCompose, org.apache.commons.math3.complex.ComplexTest#testAcosNaN, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1DistanceDimensionMismatch, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testInsufficientOrder2, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testInsufficientOrder1, org.apache.commons.math3.linear.RealVectorTest#testSubtractMixedTypes, org.apache.commons.math3.random.Well19937aTest#testNextIntDirect, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testOneSet, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, org.apache.commons.math3.random.Well19937cTest#testReferenceCode, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest#testCumulativeProbabilitiesSingleArguments, org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositiveNegative, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionLeftSide, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackOsborne1, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackOsborne2, org.apache.commons.math3.random.Well19937cTest#testNextIntIAE2, org.apache.commons.math3.linear.RealVectorFormatTest#testDefaultFormatRealVectorImpl, org.apache.commons.math3.geometry.euclidean.twod.LineTest#testIntersection, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testConsistency, org.apache.commons.math3.stat.descriptive.summary.SumTest#testSerialization, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEvaluateArraySegment, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testNegativeTestAddMultipleObs, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, org.apache.commons.math3.random.Well1024aTest#testNextFloatDirect, org.apache.commons.math3.transform.FastHadamardTransformerTest#test3Points, org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplyMixedTypes, org.apache.commons.math3.random.Well44497aTest#testNextWeibull, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testHahn1, org.apache.commons.math3.linear.RealVectorTest#testMapSubtractToSelf, org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplyMixedTypes, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderChangingVisitor3, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderChangingVisitor1, org.apache.commons.math3.random.EmpiricalDistributionTest#testReSeed, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderChangingVisitor2, org.apache.commons.math3.analysis.solvers.BisectionSolverTest#testSinZero, org.apache.commons.math3.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math3.complex.ComplexFormatTest#testParseZeroImaginary, org.apache.commons.math3.random.Well44497aTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.complex.ComplexTest#testEqualsClass, org.apache.commons.math3.distribution.WeibullDistributionTest#testMoments, org.apache.commons.math3.dfp.DfpTest#testPower10K, org.apache.commons.math3.random.Well512aTest#testNextPermutation, org.apache.commons.math3.util.BigRealTest#testBigDecimalValue, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testFloatDirect, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testParaboloid, org.apache.commons.math3.random.Well512aTest#testFloatDirect, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math3.special.ErfTest#testErf1960, org.apache.commons.math3.primes.PrimesTest#testPrimeFactors, org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedSolutionWithInitialGuess, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testIssue464, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testOnePointParabola, org.apache.commons.math3.linear.RealVectorTest#testGetDistanceMixedTypes, org.apache.commons.math3.analysis.integration.gauss.LegendreTest#testCos, org.apache.commons.math3.optim.SimpleVectorValueCheckerTest#testIterationCheckDisabled, org.apache.commons.math3.linear.BiDiagonalTransformerTest#testAEqualUSVt, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetColumn, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testHalfBounded, org.apache.commons.math3.fraction.BigFractionFormatTest#testParseInvalidDenominator, org.apache.commons.math3.complex.ComplexFormatTest#testParseZeroReal, org.apache.commons.math3.random.Well1024aTest#testNextHypergeometric, org.apache.commons.math3.complex.ComplexTest#testScalarAdd, org.apache.commons.math3.distribution.GammaDistributionTest#testDensities, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetEntry, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testSeveralSegments, org.apache.commons.math3.stat.StatUtilsTest#testN0andN1Conditions, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testSomeValues, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest#testMannWhitneyUInputValidation, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testIncrementation, org.apache.commons.math3.linear.SparseRealVectorTest#testAddToEntryInvalidIndex2, org.apache.commons.math3.linear.SparseRealVectorTest#testAddToEntryInvalidIndex1, org.apache.commons.math3.complex.ComplexTest#testReciprocalZero, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testProbability, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEvaluateArraySegment, org.apache.commons.math3.geometry.euclidean.threed.LineTest#testContains, org.apache.commons.math3.random.Well19937aTest#testNextHex, org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformFunctionInvalidBounds, org.apache.commons.math3.optimization.SimpleValueCheckerTest#testIterationCheckDisabled, org.apache.commons.math3.util.MathArraysTest#testEbeMultiplyPrecondition, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPlusMinus, org.apache.commons.math3.util.MathArraysTest#testCopyOfDouble, org.apache.commons.math3.linear.ArrayRealVectorTest#testSet, org.apache.commons.math3.linear.SparseRealVectorTest#testSet, org.apache.commons.math3.genetics.ElitisticListPopulationTest#testConstructorTooLow, org.apache.commons.math3.distribution.WeibullDistributionTest#testDensities, org.apache.commons.math3.distribution.PascalDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.fraction.BigFractionTest#testSerial, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.complex.QuaternionTest#testToString, org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineRightNullVector, org.apache.commons.math3.linear.ArrayRealVectorTest#testConstructors, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAccurateCrossProduct, org.apache.commons.math3.transform.FastSineTransformerTest#testTransformRealInvalidDataSize, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math3.stat.inference.TTestTest#testSmallSamples, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetSupportUpperBound, org.apache.commons.math3.linear.RealVectorTest#testAddSameType, org.apache.commons.math3.optim.SimpleVectorValueCheckerTest#testIterationCheckPrecondition, org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedSolution, org.apache.commons.math3.distribution.UniformRealDistributionTest#testGetLowerBound, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testSeveralSegments, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMinimize2, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMinimize1, org.apache.commons.math3.random.EmpiricalDistributionTest#testDistributionClone, org.apache.commons.math3.complex.ComplexTest#testAddInf, org.apache.commons.math3.optim.PointVectorValuePairTest#testSerial, org.apache.commons.math3.dfp.DfpTest#testCeil, org.apache.commons.math3.linear.RealVectorTest#testIsNaN, org.apache.commons.math3.linear.ArrayRealVectorTest#testMapMultiplyToSelf, org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckDisabled, org.apache.commons.math3.fraction.BigFractionFormatTest#testFormat, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testWeightedConsistency, org.apache.commons.math3.dfp.DfpTest#testCopySignField, org.apache.commons.math3.linear.SingularValueDecompositionTest#testInverseConditionNumber, org.apache.commons.math3.distribution.LevyDistributionTest#testParameters, org.apache.commons.math3.random.Well1024aTest#testFloatDirect, org.apache.commons.math3.complex.ComplexTest#testMultiplyInfInf, org.apache.commons.math3.util.FastMathTestPerformance#testCos, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testDiffPow, org.apache.commons.math3.random.StableRandomGeneratorTest#testAlphaRangeAboveTwo, org.apache.commons.math3.fraction.BigFractionFormatTest#testParseBig, org.apache.commons.math3.util.BigRealTest#testDoubleValue, org.apache.commons.math3.dfp.DfpTest#testByteConstructor, org.apache.commons.math3.analysis.FunctionUtilsTest#testMultiply, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEvaluation, org.apache.commons.math3.linear.RealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math3.genetics.ElitisticListPopulationTest#testChromosomeListConstructorTooHigh, org.apache.commons.math3.optimization.fitting.CurveFitterTest#testMath304, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testQuinticMin, org.apache.commons.math3.optimization.fitting.CurveFitterTest#testMath303, org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfSameType, org.apache.commons.math3.random.MersenneTwisterTest#testNextIntDirect, org.apache.commons.math3.random.Well19937cTest#testNextPermutation, org.apache.commons.math3.linear.BlockRealMatrixTest#testOperate, org.apache.commons.math3.complex.ComplexTest#testConstructorNaN, org.apache.commons.math3.genetics.ElitisticListPopulationTest#testSetElitismRateTooLow, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanhDefinition, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testSerial, org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplySameType, org.apache.commons.math3.linear.ArrayRealVectorTest#testAppendVector, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testGetValues, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testCopy, org.apache.commons.math3.util.ArithmeticUtilsTest#testMulAndCheckLong, org.apache.commons.math3.random.Well1024aTest#testNexBytes, org.apache.commons.math3.random.Well44497aTest#testNextPermutation, org.apache.commons.math3.util.Decimal64Test#testPowDouble, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testSerial, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testOneSet, org.apache.commons.math3.genetics.RandomKeyTest#testEqualRepr, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNegativeReal, org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVector, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, org.apache.commons.math3.distribution.ExponentialDistributionTest#testMeanAccessors, org.apache.commons.math3.linear.BiDiagonalTransformerTest#testUOrthogonal, org.apache.commons.math3.linear.FieldMatrixImplTest#testGetColumnMatrix, org.apache.commons.math3.genetics.BinaryChromosomeTest#testIsSame, org.apache.commons.math3.stat.inference.TTestTest#testOneSampleTTest, org.apache.commons.math3.complex.ComplexFormatTest#testZeroImaginary, org.apache.commons.math3.linear.FieldMatrixImplTest#testPlusMinus, org.apache.commons.math3.complex.ComplexTest#testDivideNaN, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testKirby2, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExp, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotDefinition, org.apache.commons.math3.random.ISAACTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.util.FastMathTest#testExpm1Accuracy, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testIssue801, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testDoubleRotations, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testConstrainedRosen, org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.util.Decimal64Test#testScalb, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, org.apache.commons.math3.linear.RealVectorTest#testCosineRightNullVector, org.apache.commons.math3.linear.FieldMatrixImplTest#testAdd, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulBothRev, org.apache.commons.math3.linear.RealVectorTest#testGetLInfDistanceMixedTypes, org.apache.commons.math3.util.Decimal64Test#testSubtract, org.apache.commons.math3.linear.BlockFieldMatrixTest#testOperate, org.apache.commons.math3.dfp.DfpTest#testCompare, org.apache.commons.math3.distribution.ExponentialDistributionTest#testDensity, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntIAE2, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testMinEndpoints, org.apache.commons.math3.exception.util.ExceptionContextTest#testSerializeUnserializable, org.apache.commons.math3.random.Well19937cTest#testNextHex, org.apache.commons.math3.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math3.linear.LUSolverTest#testSolveDimensionErrors, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#test20090720, org.apache.commons.math3.distribution.BinomialDistributionTest#testMoments, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNaN, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest#testParameters, org.apache.commons.math3.linear.EigenDecompositionTest#testMathpbx02, org.apache.commons.math3.linear.ArrayFieldVectorTest#testConstructors, org.apache.commons.math3.linear.EigenDecompositionTest#testMathpbx03, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNoInterceot_noint2, org.apache.commons.math3.util.ResizableDoubleArrayTest#testMinMax, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testLongly, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, org.apache.commons.math3.distribution.GammaDistributionTest#testDensityIntegrals, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian, org.apache.commons.math3.linear.CholeskySolverTest#testSolve, org.apache.commons.math3.fraction.FractionFormatTest#testParseOne1, org.apache.commons.math3.fitting.PolynomialFitterTest#testLargeSample, org.apache.commons.math3.fraction.FractionFormatTest#testParseOne2, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntPositiveRange, org.apache.commons.math3.linear.SparseRealVectorTest#testGetEntryInvalidIndex2, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testRootEndpoints, org.apache.commons.math3.linear.SparseRealVectorTest#testGetEntryInvalidIndex1, org.apache.commons.math3.linear.RealVectorTest#testMapSubtract, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, org.apache.commons.math3.random.Well44497aTest#testNextHex, org.apache.commons.math3.random.MersenneTwisterTest#testNextT, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testLonglyByRow, org.apache.commons.math3.linear.EigenDecompositionTest#testVOrthogonal, org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1DistanceSameType, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testSerial, org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideMixedTypes, org.apache.commons.math3.linear.EigenDecompositionTest#testDimension4WithSplit, org.apache.commons.math3.random.Well19937aTest#testNextIntPositiveRange, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testOverrideMeanWithMathClass, org.apache.commons.math3.random.MersenneTwisterTest#testNextF, org.apache.commons.math3.dfp.DfpTest#testRint, org.apache.commons.math3.optim.SimpleVectorValueCheckerTest#testIterationCheck, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetEntry, org.apache.commons.math3.random.Well512aTest#testNextLongExtremeValues, org.apache.commons.math3.linear.LUSolverTest#testSolve, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetRow, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, org.apache.commons.math3.random.ValueServerTest#testFill, org.apache.commons.math3.linear.BlockRealMatrixTest#testDimensions, org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformReal, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNegativeInfinity, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testDegeneracy, org.apache.commons.math3.linear.BlockFieldMatrixTest#testCopySubMatrix, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testVectorialProducts, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, org.apache.commons.math3.random.MersenneTwisterTest#testNextGamma, org.apache.commons.math3.distribution.CauchyDistributionTest#testDistributionClone, org.apache.commons.math3.distribution.FDistributionTest#testLargeDegreesOfFreedom, org.apache.commons.math3.stat.descriptive.summary.SumTest#testEvaluation, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testOrthogonal, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testConstraintsUnsupported, org.apache.commons.math3.linear.SparseRealMatrixTest#testPlusMinus, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math3.util.FastMathTestPerformance#testCosh, org.apache.commons.math3.linear.BlockRealMatrixTest#testOperateLarge, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigarWithBoundaries, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testSubtract, org.apache.commons.math3.random.MersenneTwisterTest#testNextFloatDirect, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testOptimumOutsideRange, org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquareIndependence, org.apache.commons.math3.fraction.BigFractionFormatTest#testDoubleFormat, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testTrivialModel, org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions5, org.apache.commons.math3.util.IncrementorTest#testCanIncrement2, org.apache.commons.math3.random.Well512aTest#testNextIntNegativeRange, org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions6, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination1DoubleDS, org.apache.commons.math3.util.IncrementorTest#testCanIncrement1, org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions3, org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions4, org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions1, org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions2, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math3.complex.ComplexTest#testAtanInf, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen, org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaPValueSummaryStatistics, org.apache.commons.math3.util.Decimal64Test#testExp, org.apache.commons.math3.util.ContinuedFractionTest#testGoldenRatio, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackMeyer, org.apache.commons.math3.special.ErfTest#testErfcInvInfinite, org.apache.commons.math3.linear.EigenSolverTest#testSolve, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMaxIterations, org.apache.commons.math3.complex.ComplexTest#testCos, org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquareZeroCount, org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testStepSize, org.apache.commons.math3.distribution.GammaDistributionTest#testProbabilities, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSquareRoot, org.apache.commons.math3.complex.ComplexTest#testNegateNaN, org.apache.commons.math3.random.EmpiricalDistributionTest#testGetBinUpperBounds, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testMixedDerivatives, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionLeftSide, org.apache.commons.math3.complex.ComplexTest#testEqualsNull, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testIntersection, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLaguerreOrthogonality, org.apache.commons.math3.random.Well512aTest#testNextPascal, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDistanceDimensionMismatch, org.apache.commons.math3.distribution.UniformRealDistributionTest#testGetUpperBound, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionAboveSide, org.apache.commons.math3.special.BetaTest#testLogBetaZeroPositive, org.apache.commons.math3.util.MathUtilsTest#testIndicatorByte, org.apache.commons.math3.util.MultidimensionalCounterTest#testAccessors, org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeAll, org.apache.commons.math3.util.MathUtilsTest#testHash, org.apache.commons.math3.distribution.GammaDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testMaximize, org.apache.commons.math3.ode.events.EventFilterTest#testHistoryDecreasingForward, org.apache.commons.math3.random.Well19937cTest#testNextLongIAE, org.apache.commons.math3.linear.QRSolverTest#testSolveDimensionErrors, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testCrossProductCancellation, org.apache.commons.math3.random.Well44497aTest#testNextLong2, org.apache.commons.math3.random.Well19937cTest#testNextIntExtremeValues, org.apache.commons.math3.dfp.DfpTest#testAcosh, org.apache.commons.math3.random.EmpiricalDistributionTest#testNext, org.apache.commons.math3.special.ErfTest#testErfcInv, org.apache.commons.math3.random.Well19937aTest#testNextPoisson, org.apache.commons.math3.random.EmpiricalDistributionTest#testGeneratorConfig, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCosAcos, org.apache.commons.math3.util.IncrementorTest#testAboveMaxCount, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testMissingMaxEval, org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatImproper, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testSetEntry, org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testIllegalArguments, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCbrtDefinition, org.apache.commons.math3.analysis.function.GaussianTest#testSomeValues, org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, org.apache.commons.math3.util.FastMathTestPerformance#testHypot, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testSerial, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testPoint, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testAngles, org.apache.commons.math3.stat.FrequencyTest#testSerial, org.apache.commons.math3.util.ResizableDoubleArrayTest#testEqualsAndHashCode, org.apache.commons.math3.optimization.PointVectorValuePairTest#testSerial, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley, org.apache.commons.math3.linear.EigenDecompositionTest#testZeroDivide, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testGLSOLSConsistency, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testRootEndpoints, org.apache.commons.math3.linear.FieldMatrixImplTest#testWalk, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testTwoSets, org.apache.commons.math3.random.ISAACTest#testNextPoisson, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testRandomPolynomialsFirstDerivative, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testIncrementation, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testQuadratic, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testControlParameters, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionInsideBoundary, org.apache.commons.math3.random.ISAACTest#testNextBeta, org.apache.commons.math3.complex.ComplexTest#testScalarMultiplyNaN, org.apache.commons.math3.random.Well19937cTest#testNextHypergeometric, org.apache.commons.math3.distribution.FDistributionTest#testDistributionClone, org.apache.commons.math3.random.Well44497bTest#testNextLongExtremeValues, org.apache.commons.math3.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetSupportLowerBound, org.apache.commons.math3.random.EmpiricalDistributionTest#testLoadNullFile, org.apache.commons.math3.stat.descriptive.summary.SumTest#testIncrementation, org.apache.commons.math3.util.Decimal64Test#testLog1p, org.apache.commons.math3.complex.ComplexTest#testLogInf, org.apache.commons.math3.complex.ComplexFormatTest#testNegativeInfinity, org.apache.commons.math3.linear.RealVectorFormatTest#testParseNoComponents, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testDerivative, org.apache.commons.math3.ode.JacobianMatricesTest#testLowAccuracyExternalDifferentiation, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testSerial, org.apache.commons.math3.stat.inference.GTestTest#testNegativeObservedCounts, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformExtremeValues, org.apache.commons.math3.stat.FrequencyTest#testPcts, org.apache.commons.math3.util.FastMathTestPerformance#testLog, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistanceInf, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testSample, org.apache.commons.math3.random.Well512aTest#testNextLong2, org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange, org.apache.commons.math3.random.Well19937aTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath930, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testConsistency, org.apache.commons.math3.random.Well512aTest#testConfig, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testSetSubVector, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextFloatDirect, org.apache.commons.math3.random.Well512aTest#testNextPoissonConsistency, org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetSubMatrix, org.apache.commons.math3.linear.RRQRDecompositionTest#testAPEqualQR, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRank, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testWeightedConsistency, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest#testFullRank, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testSmallSamples, org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquare, org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testGradient, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testArray, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextHex, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testForgottenSeparator, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math3.linear.BlockRealMatrixTest#testToString, org.apache.commons.math3.linear.RealVectorTest#testCombineSameType, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetSubMatrix, org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNoNaNsFailed, org.apache.commons.math3.linear.RealMatrixFormatTest#testDefaultFormat, org.apache.commons.math3.linear.RealVectorFormatTest#testNan, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeAll, org.apache.commons.math3.random.MersenneTwisterTest#testMakotoNishimura, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIssue780, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBrownDennis, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testTablet, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#tesNegativeInfinity, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testCircleFittingBadInit, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest#test3DDistance, org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math3.linear.RealVectorTest#testCosineSameType, org.apache.commons.math3.distribution.LogNormalDistributionTest#testGetScale, org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testIncompatibleParams, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434PivotRowSelection2, org.apache.commons.math3.distribution.TriangularDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testWrongDimension, org.apache.commons.math3.util.FastMathTest#testToRadians, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testMath844, org.apache.commons.math3.complex.QuaternionTest#testObjectEquals, org.apache.commons.math3.util.ArithmeticUtilsTest#testLcmLong, org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfSameType, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseZeroX, org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.random.Well19937aTest#testNextIntIAE, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testDensities, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, org.apache.commons.math3.linear.FieldLUSolverTest#testSolveSingularityErrors, org.apache.commons.math3.linear.DiagonalMatrixTest#testOperate, org.apache.commons.math3.linear.BlockRealMatrixTest#testFrobeniusNorm, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformIAE, org.apache.commons.math3.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, org.apache.commons.math3.linear.SparseRealVectorTest#testAppendVector, org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetVectors, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPremultiplyVector, org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedNormOfResidual, org.apache.commons.math3.random.Well19937cTest#testNextBinomial, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiply, org.apache.commons.math3.linear.FieldMatrixImplTest#testGetColumnVector, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testWeightedConsistency, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testRegressAirlineConstantInternal, org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineSameType, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testEvents, org.apache.commons.math3.linear.EigenDecompositionTest#testDimension4WithoutSplit, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, org.apache.commons.math3.linear.RealMatrixFormatTest#testParsePositiveInfinity, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRandom, org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testNullDataset, org.apache.commons.math3.dfp.DfpTest#testEquals, org.apache.commons.math3.util.OpenIntToFieldTest#testPutAndGet, org.apache.commons.math3.distribution.LogNormalDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.util.PrecisionTest#testIssue721, org.apache.commons.math3.distribution.ExponentialDistributionTest#testCumulativeProbability2, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testVectorTwoPairs, org.apache.commons.math3.dfp.DfpTest#testAtanh, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistanceSq, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testOneParameterConstructor, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testCircleFitting, org.apache.commons.math3.linear.SingularValueDecompositionTest#testMoreRows, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, org.apache.commons.math3.stat.inference.TestUtilsTest#testOneSampleTTest, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNexBytes, org.apache.commons.math3.random.ISAACTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testCopyConsistency, org.apache.commons.math3.linear.RealVectorTest#testMapMultiply, org.apache.commons.math3.special.GammaTest#testGammaNegativeInteger, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testMomentSmallSamples, org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossoverDimensionMismatchException, org.apache.commons.math3.random.MersenneTwisterTest#testNextIntIAE2, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testSerialization, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testNonUnitWeightSum, org.apache.commons.math3.random.Well1024aTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.linear.SparseRealVectorTest#testCosineSameType, org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeImaginary, org.apache.commons.math3.complex.ComplexTest#testSqrtInf, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPascal, org.apache.commons.math3.distribution.GammaDistributionTest#testConsistency, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#backward, org.apache.commons.math3.linear.ArrayRealVectorTest#testMapSubtract, org.apache.commons.math3.linear.SingularValueDecompositionTest#testHadamard, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testApplyInverseTo, org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFaFa, org.apache.commons.math3.complex.ComplexTest#testSqrtImaginaryZero, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testSerial, org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testSize, org.apache.commons.math3.special.BetaTest#testLogBeta, org.apache.commons.math3.linear.BlockRealMatrixTest#testSerial, org.apache.commons.math3.util.MathArraysTest#testCheckPositive, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextCauchy, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testNoError, org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedSolution, org.apache.commons.math3.stat.StatUtilsTest#testDifferenceStats, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, org.apache.commons.math3.dfp.DfpTest#testSubtractDouble, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#tesNegativeInfinity, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testKirby2, org.apache.commons.math3.optimization.univariate.BracketFinderTest#testMinimumIsOnIntervalBoundary, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testHash, org.apache.commons.math3.util.FastMathTest#testDoubleNextAfterSpecialCases, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextZipf, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testYSampleDataNull, org.apache.commons.math3.linear.FieldMatrixImplTest#testMultiply2, org.apache.commons.math3.random.Well44497aTest#testConfig, org.apache.commons.math3.complex.ComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorSameType, org.apache.commons.math3.random.Well44497bTest#testNextHypergeometric, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testStartSimplexOutsideRange, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongIAE, org.apache.commons.math3.random.Well44497bTest#testNexBoolean2, org.apache.commons.math3.complex.QuaternionTest#testNormalizeFail, org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorInvalidIndex3, org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorInvalidIndex2, org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorInvalidIndex1, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testNoDependency, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testForgottenSeparator, org.apache.commons.math3.complex.ComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math3.distribution.GammaDistributionTest#testSampling, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntIAE, org.apache.commons.math3.util.Decimal64Test#testPowField, org.apache.commons.math3.ode.events.EventFilterTest#testDecreasingOnly, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetRowMatrix, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testNeta, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongWideRange, org.apache.commons.math3.util.Decimal64Test#testReciprocal, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeAll, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextBinomial, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, org.apache.commons.math3.ode.events.EventFilterTest#testHistoryDecreasingBackward, org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage5, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage6, org.apache.commons.math3.ode.JacobianMatricesTest#testHighAccuracyExternalDifferentiation, org.apache.commons.math3.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testInconsistentSizes2, org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage1, org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage2, org.apache.commons.math3.random.MersenneTwisterTest#testNextHex, org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage3, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage4, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testHdiagConstant, org.apache.commons.math3.random.ISAACTest#testNextLongIAE, org.apache.commons.math3.analysis.FunctionUtilsTest#testFixingArguments, org.apache.commons.math3.complex.ComplexTest#testLogNaN, org.apache.commons.math3.dfp.DfpDecTest#testRoundDecimal10, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntDirect, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testInconsistentSizes1, org.apache.commons.math3.linear.SingularValueSolverTest#testMath320B, org.apache.commons.math3.stat.descriptive.rank.MinTest#testCopyConsistency, org.apache.commons.math3.random.ISAACTest#testNextIntWideRange, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainder, org.apache.commons.math3.util.FastMathTestPerformance#testAtan2, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemove, org.apache.commons.math3.random.EmpiricalDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.analysis.function.StepFunctionTest#testEndpointBehavior, org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit02, org.apache.commons.math3.linear.ArrayRealVectorTest#testIsInfinite, org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit03, org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit04, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testBackward, org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit05, org.apache.commons.math3.linear.FieldLUSolverTest#testDeterminant, org.apache.commons.math3.stat.descriptive.rank.MinTest#testSpecialValues, org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit01, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testMaxEvaluations, org.apache.commons.math3.distribution.TriangularDistributionTest#testDistributionClone, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testConstrainedRosen, org.apache.commons.math3.distribution.WeibullDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.complex.ComplexTest#testDivideNaNInf, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongWideRange, org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit06, org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit07, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingGoodInit, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828Cycle, org.apache.commons.math3.random.Well19937aTest#testNextLong2, org.apache.commons.math3.dfp.DfpTest#testAtan2, org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossover, org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.linear.LUDecompositionTest#testSingular, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testComposeInverse, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testWeightedConsistency, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testLessThanOnePeriodCoverage, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testQuinticMin, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testTrace, org.apache.commons.math3.random.Well19937cTest#testNexBytes, org.apache.commons.math3.linear.SparseFieldMatrixTest#testAdd, org.apache.commons.math3.random.Well512aTest#testNexBoolean2, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testPositiveInfinity, org.apache.commons.math3.linear.MatrixUtilsTest#testCreateRowRealMatrix, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testLongly, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextGaussian, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize, org.apache.commons.math3.random.StableRandomGeneratorTest#testCauchyCase, org.apache.commons.math3.random.Well512aTest#testReferenceCode, org.apache.commons.math3.linear.SymmLQTest#testNonSelfAdjointOperator, org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaTest, org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckPrecondition, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetSupportUpperBound, org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineDimensionMismatchSameType, org.apache.commons.math3.analysis.function.SincTest#testDerivativeZero, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinAsin, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testSerial, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, org.apache.commons.math3.distribution.ExponentialDistributionTest#testDensityIntegrals, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackPowellSingular, org.apache.commons.math3.linear.SparseRealMatrixTest#testToString, org.apache.commons.math3.linear.SparseRealVectorTest#testMapDivideToSelf, org.apache.commons.math3.linear.RealVectorTest#testDotProductSameType, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, org.apache.commons.math3.geometry.euclidean.twod.LineTest#testAbscissa, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntIAE, org.apache.commons.math3.special.GammaTest#testInvGamma1pm1, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIsSupportConnected, org.apache.commons.math3.fraction.FractionFormatTest#testFormatZero, org.apache.commons.math3.util.FastMathTest#testCbrtAccuracy, org.apache.commons.math3.stat.FrequencyTest#testEmptyTable, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#test1PercentError, org.apache.commons.math3.random.BitsStreamGeneratorTest#testReseed, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testHdiag, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage4, org.apache.commons.math3.util.FastMathTest#testMath905LargePositive, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage2, org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfNorm, org.apache.commons.math3.stat.StatUtilsTest#testArrayIndexConditions, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage3, org.apache.commons.math3.distribution.NormalDistributionTest#testMath280, org.apache.commons.math3.random.Well1024aTest#testReseed, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage1, org.apache.commons.math3.util.Decimal64Test#testCos, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testGetSummary, org.apache.commons.math3.analysis.function.GaussianTest#testParametricValue, org.apache.commons.math3.util.MathArraysTest#testIsMonotonicComparable, org.apache.commons.math3.linear.BlockFieldMatrixTest#testOperateLarge, org.apache.commons.math3.util.ArithmeticUtilsTest#testLcm, org.apache.commons.math3.linear.EigenSolverTest#testNonInvertible, org.apache.commons.math3.random.ISAACTest#testNextF, org.apache.commons.math3.util.PrecisionTest#testRoundFloat, org.apache.commons.math3.util.OpenIntToFieldTest#testRemove, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquare, org.apache.commons.math3.dfp.DfpTest#testDivide, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricValue, org.apache.commons.math3.random.EmpiricalDistributionTest#testLoadNullURL, org.apache.commons.math3.distribution.WeibullDistributionTest#testAlpha, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, org.apache.commons.math3.random.ISAACTest#testNextIntIAE2, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testCoordinates, org.apache.commons.math3.dfp.DfpTest#testNextAfter, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testDiffPow, org.apache.commons.math3.random.ISAACTest#testNextLongWideRange, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest#testGetChiSquare, org.apache.commons.math3.distribution.NormalDistributionTest#testQuantiles, org.apache.commons.math3.random.Well512aTest#testNextLongDirect, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, org.apache.commons.math3.analysis.solvers.BrentSolverTest#testBadEndpoints, org.apache.commons.math3.analysis.solvers.BisectionSolverTest#testQuinticZero, org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfMixedTypes, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderPreservingVisitor3, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderPreservingVisitor2, org.apache.commons.math3.random.EmpiricalDistributionTest#testKernelOverrideConstant, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testSetEntry, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testTrivial, org.apache.commons.math3.util.ArithmeticUtilsTest#testSubAndCheck, org.apache.commons.math3.distribution.TriangularDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testShift, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetRow, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackChebyquad, org.apache.commons.math3.random.MersenneTwisterTest#testNextIntNegativeRange, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testPopulation, org.apache.commons.math3.util.Decimal64Test#testAcos, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest#testIterationCheckDisabled, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPascal, org.apache.commons.math3.fraction.BigFractionTest#testMultiply, org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testSinFunction, org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositiveNegative, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionAboveSide, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testIsSupportConnected, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, org.apache.commons.math3.util.BigRealTest#testEqualsAndHashCode, org.apache.commons.math3.util.Decimal64Test#testRemainderField, org.apache.commons.math3.linear.BlockRealMatrixTest#testCopyFunctions, org.apache.commons.math3.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAdd, org.apache.commons.math3.random.ISAACTest#testNextT, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testSpecialValues, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderPreservingVisitor1, org.apache.commons.math3.fitting.PolynomialFitterTest#testRedundantUnsolvable, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testInfeasibleSolution, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetColumnVector, org.apache.commons.math3.linear.RealMatrixFormatTest#testConstructorSingleFormat, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMissingOrders, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testSmallStep, org.apache.commons.math3.complex.ComplexTest#testMultiply, org.apache.commons.math3.linear.RealMatrixFormatTest#testSimpleNoDecimals, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testXSampleDataNull, org.apache.commons.math3.random.Well44497bTest#testNextLongNegativeRange, org.apache.commons.math3.special.GammaTest#testDigammaLargeArgs, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math3.stat.inference.TTestTest#testTwoSampleTHomoscedastic, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetColumnVector, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulBoth, org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math3.special.ErfTest#testErfInv, org.apache.commons.math3.linear.RealVectorTest#testGetEntryInvalidIndex2, org.apache.commons.math3.linear.RealVectorTest#testGetEntryInvalidIndex1, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAddField, org.apache.commons.math3.linear.SparseFieldVectorTest#testMisc, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextChiSquare, org.apache.commons.math3.distribution.LevyDistributionTest#testIllegalArguments, org.apache.commons.math3.random.Well19937aTest#testNextSample, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testEvaluateArraySegment, org.apache.commons.math3.random.Well19937cTest#testNextSample, org.apache.commons.math3.special.ErfTest#testErfInvInfinite, org.apache.commons.math3.random.Well1024aTest#testNextIntIAE, org.apache.commons.math3.dfp.DfpTest#testSqrt, org.apache.commons.math3.distribution.FDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.linear.ArrayFieldVectorTest#testMapFunctions, org.apache.commons.math3.linear.RealVectorTest#testSet, org.apache.commons.math3.linear.SparseRealVectorTest#testSetEntry, org.apache.commons.math3.util.FastMathTest#checkMissingFastMathClasses, org.apache.commons.math3.complex.RootsOfUnityTest#testGetNumberOfRoots, org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, org.apache.commons.math3.dfp.DfpTest#testIntConstructor, org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositiveNan, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#serialization, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testNoOptimum, org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEvaluateArraySegment, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testSmallStep, org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.complex.ComplexFormatTest#testTrimOneImaginary, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434PivotRowSelection2, org.apache.commons.math3.dfp.DfpTest#testRootN, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testNoVariance, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testDimensionCheck, org.apache.commons.math3.special.BetaTest#testRegularizedBetaNegativePositivePositive, org.apache.commons.math3.linear.SparseRealMatrixTest#testNorm, org.apache.commons.math3.random.StableRandomGeneratorTest#testNextDouble, org.apache.commons.math3.linear.EigenDecompositionTest#testAEqualVDVt, org.apache.commons.math3.stat.StatUtilsTest#testGeometricMean, org.apache.commons.math3.linear.RealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testWeightedConsistency, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testSerial, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, org.apache.commons.math3.complex.ComplexTest#testSinNaN, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest#testQuinticMin, org.apache.commons.math3.linear.SchurTransformerTest#testMath848, org.apache.commons.math3.special.GammaTest#testLogGamma1pPrecondition1, org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFailed, org.apache.commons.math3.distribution.PoissonDistributionTest#testDensities, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testMultiply2, org.apache.commons.math3.special.GammaTest#testLogGamma1pPrecondition2, org.apache.commons.math3.random.Well1024aTest#testNextPermutation, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testConsistencyAtSupportBounds, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testSimilar, org.apache.commons.math3.complex.ComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math3.linear.RealVectorTest#testGetDistanceSameType, org.apache.commons.math3.special.ErfTest#testErfcInvNaN, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCopySign, org.apache.commons.math3.random.Well512aTest#testNextBinomial, org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverDimensionMismatchException, org.apache.commons.math3.util.MathArraysTest#testScaleInPlace, org.apache.commons.math3.linear.RRQRDecompositionTest#testHTrapezoidal, org.apache.commons.math3.random.ISAACTest#testNextPascal, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.exception.DimensionMismatchExceptionTest#testAccessors, org.apache.commons.math3.exception.util.LocalizedFormatsTest#testNoMissingFrenchTranslation, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath828Cycle, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, org.apache.commons.math3.linear.SparseRealMatrixTest#testMath209, org.apache.commons.math3.linear.LUSolverTest#testDeterminant, org.apache.commons.math3.distribution.GammaDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.fraction.BigFractionTest#testFloatValue, org.apache.commons.math3.complex.RootsOfUnityTest#testComputeRoots, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testFitAccuracyDependsOnBoundary, org.apache.commons.math3.dfp.DfpTest#testMultiplyField, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, org.apache.commons.math3.random.Well1024aTest#testNextCauchy, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEvaluateArraySegment, org.apache.commons.math3.stat.StatUtilsTest#testPercentile, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testSinMin, org.apache.commons.math3.linear.SparseRealVectorTest#testGetDistanceSameType, org.apache.commons.math3.complex.FrenchComplexFormatTest#testPositiveInfinity, org.apache.commons.math3.random.Well1024aTest#testNextLongIAE, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testUnlimitedSubHyperplane, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testBigStep, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest#testAllMonomials, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.linear.RealVectorTest#testDotProductDimensionMismatchSameType, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, org.apache.commons.math3.complex.ComplexTest#testSubtractInf, org.apache.commons.math3.optim.linear.SimplexTableauTest#testDropPhase1Objective, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNorm, org.apache.commons.math3.distribution.TriangularDistributionTest#testGetUpperBound, org.apache.commons.math3.complex.ComplexTest#testConjugate, org.apache.commons.math3.linear.BlockFieldMatrixTest#testPremultiplyVector, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testTrivial, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath290GEQ, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPermutation, org.apache.commons.math3.complex.FrenchComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math3.distribution.GammaDistributionTest#testValues, org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfSameType, org.apache.commons.math3.distribution.TriangularDistributionTest#testIllegalArguments, org.apache.commons.math3.dfp.DfpTest#testDivideInt, org.apache.commons.math3.complex.ComplexTest#testAtanI, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLong2, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testSampleWithZeroCovariance, org.apache.commons.math3.linear.SparseRealVectorTest#testCosineMixedTypes, org.apache.commons.math3.linear.QRSolverTest#testSolveRankErrors, org.apache.commons.math3.fraction.FractionTest#testConstructorDouble, org.apache.commons.math3.linear.DiagonalMatrixTest#testGetData, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testPreconditions, org.apache.commons.math3.fitting.HarmonicFitterTest#testNoError, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, org.apache.commons.math3.util.OpenIntToFieldTest#testPutOnExisting, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testSubsetRegression, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, org.apache.commons.math3.stat.inference.TestUtilsTest#testGTestIndependance, org.apache.commons.math3.stat.correlation.CovarianceTest#testOneColumn, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAngular, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAngle, org.apache.commons.math3.linear.FieldMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testOverrideGeoMeanWithMathClass, org.apache.commons.math3.random.Well1024aTest#testNextLongPositiveRange, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#tesNegativeInfinity, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testVariableWithoutDerivative1, org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testMaximizeQuadratic, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testVariableWithoutDerivative0, org.apache.commons.math3.random.MersenneTwisterTest#testConfig, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testIssue914, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math3.random.Well19937cTest#testNextPascal, org.apache.commons.math3.distribution.LevyDistributionTest#testSupport, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest#testName, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, org.apache.commons.math3.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math3.special.BetaTest#testSumDeltaMinusDeltaSumPrecondition2, org.apache.commons.math3.special.BetaTest#testSumDeltaMinusDeltaSumPrecondition1, org.apache.commons.math3.util.ArithmeticUtilsTest#testGcdLong, org.apache.commons.math3.util.DefaultTransformerTest#testSerial, org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2, org.apache.commons.math3.linear.ConjugateGradientTest#testNonSquareOperator, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHash, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testUnbounded, org.apache.commons.math3.analysis.integration.RombergIntegratorTest#testParameters, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testStartSimplexInsideRange, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testEndPoints, org.apache.commons.math3.dfp.DfpTest#testRemainder, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testMaxEvaluations, org.apache.commons.math3.distribution.CauchyDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBadEndpoints, org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositivePositive, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongNumberOfPoints, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBadMaximumIterations, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, org.apache.commons.math3.util.OpenIntToFieldTest#testRemoveFromEmpty, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMinimize2, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMinimize1, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testHalfBounded, org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion1, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest#serialization, org.apache.commons.math3.fraction.BigFractionTest#testDivide, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testBoundsUnsupported, org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion2, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testTrivial, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testOperate, org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, org.apache.commons.math3.linear.RRQRSolverTest#testSolve, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testSearch, org.apache.commons.math3.random.Well44497bTest#testReferenceCode, org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1DistanceMixedTypes, org.apache.commons.math3.util.FastMathTest#testCoshAccuracy, org.apache.commons.math3.special.GammaTest#testDigammaSmallArgs, org.apache.commons.math3.linear.LUSolverTest#testSolveSingularityErrors, org.apache.commons.math3.linear.BlockRealMatrixTest#testSetColumnMatrix, org.apache.commons.math3.analysis.function.SqrtTest#testDerivativesHighOrder, org.apache.commons.math3.linear.SparseRealVectorTest#testGetDistanceDimensionMismatch, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, org.apache.commons.math3.util.FastMathTest#testPowSpecialCases, org.apache.commons.math3.random.Well512aTest#testNextWeibull, org.apache.commons.math3.random.Well512aTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCbrtPow3, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testLongly, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderChangingVisitor3, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderChangingVisitor2, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderChangingVisitor1, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBracketEndpointRoot, org.apache.commons.math3.random.Well19937cTest#testNextBeta, org.apache.commons.math3.random.MersenneTwisterTest#testNextGaussian, org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetRowVector, org.apache.commons.math3.dfp.DfpTest#testCbrt, org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, org.apache.commons.math3.ode.events.EventStateTest#closeEvents, org.apache.commons.math3.random.EmpiricalDistributionTest#testSampling, org.apache.commons.math3.random.Well19937aTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testMoments, org.apache.commons.math3.random.UnitSphereRandomVectorGeneratorTest#test2DDistribution, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseManyComponents, org.apache.commons.math3.ode.events.EventStateTest#testIssue695, org.apache.commons.math3.random.Well44497bTest#testNextBinomial, org.apache.commons.math3.random.EmpiricalDistributionTest#testIllegalArguments, org.apache.commons.math3.linear.BlockFieldMatrixTest#testMultiply, org.apache.commons.math3.util.MathArraysTest#testNormalizeArray, org.apache.commons.math3.fraction.FractionTest#testDoubleConstructor, org.apache.commons.math3.util.BigRealTest#testNegate, org.apache.commons.math3.random.MersenneTwisterTest#testNextBooleanDirect, org.apache.commons.math3.exception.util.ExceptionContextTest#testContext, org.apache.commons.math3.linear.SingularValueDecompositionTest#testVOrthogonal, org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideMixedTypes, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testNoSegments, org.apache.commons.math3.stat.FrequencyTest#testToString, org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber, org.apache.commons.math3.util.MathUtilsTest#testSignByte, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSubMatrix, org.apache.commons.math3.random.Well19937aTest#testNextPermutation, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExpm1Definition, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1Norm, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testSqueezedHexa, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#test5, org.apache.commons.math3.linear.SparseRealMatrixTest#testAddFail, org.apache.commons.math3.random.Well44497bTest#testNextCauchy, org.apache.commons.math3.util.Decimal64Test#testTan, org.apache.commons.math3.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncFirstRev, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math3.linear.DiagonalMatrixTest#testConstructor2, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEvaluation, org.apache.commons.math3.random.Well19937cTest#testNextGaussian, org.apache.commons.math3.linear.DiagonalMatrixTest#testConstructor1, org.apache.commons.math3.optimization.linear.SimplexTableauTest#testDropPhase1Objective, org.apache.commons.math3.linear.DiagonalMatrixTest#testConstructor3, org.apache.commons.math3.stat.data.LotteryTest#testCertifiedValues, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testDerivatives, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulLast, org.apache.commons.math3.dfp.DfpTest#testSinh, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testIdentity, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testToRadiansDefinition, org.apache.commons.math3.util.Decimal64Test#testAtan, org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplyDimensionMismatch, org.apache.commons.math3.optim.SimpleValueCheckerTest#testIterationCheckPrecondition, org.apache.commons.math3.stat.descriptive.rank.MinTest#testEqualsAndHashCode, org.apache.commons.math3.random.Well44497bTest#testNextGaussian, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest#testToString, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testConstructorsOK, org.apache.commons.math3.linear.RealVectorTest#testProjectionDimensionMismatch, org.apache.commons.math3.linear.RealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math3.random.Well19937cTest#testFloatDirect, org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2ComplexNaN, org.apache.commons.math3.distribution.GammaDistributionTest#testIllegalArguments, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testCoordinates, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testSetSubVector, org.apache.commons.math3.stat.descriptive.summary.SumTest#testMomentSmallSamples, org.apache.commons.math3.distribution.CauchyDistributionTest#testSampling, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testConsistency, org.apache.commons.math3.complex.ComplexTest#testCoshNaN, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.complex.ComplexTest#testMultiplyNaN, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testQuinticMinStatistics, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextBeta, org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionLeftSide, org.apache.commons.math3.linear.BlockFieldMatrixTest#testDimensions, org.apache.commons.math3.random.StableRandomGeneratorTest#testBetaRangeAboveOne, org.apache.commons.math3.util.FastMathTest#testHyperbolic, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testLowPercentile, org.apache.commons.math3.random.Well1024aTest#testNextBeta, org.apache.commons.math3.complex.ComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math3.complex.ComplexTest#testpowNull, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testCopy, org.apache.commons.math3.fraction.BigFractionFormatTest#testParseProperNegative, org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage1, org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage2, org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage3, org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage4, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders4, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders5, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntNegativeToPositiveRange, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders2, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders3, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders8, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders9, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders6, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testVariable, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders7, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testCompose, org.apache.commons.math3.random.Well19937aTest#testConfig, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplySameType, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders1, org.apache.commons.math3.fraction.FractionTest#testReciprocal, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, org.apache.commons.math3.util.ResizableDoubleArrayTest#testDiscard, org.apache.commons.math3.util.ResizableDoubleArrayTest#testAdd1000, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPermutation, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveAdd, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testSwissFertilityByRow, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiplyDouble, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDotProduct, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetEntryInvalidIndex1, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedInPlaceSolutionWithInitialGuess, org.apache.commons.math3.util.PrecisionTest#testCompareToEpsilon, org.apache.commons.math3.util.MathArraysTest#testL2DistanceDouble, org.apache.commons.math3.complex.ComplexTest#testAsinNaN, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompNonMeanCutoff, org.apache.commons.math3.random.Well19937cTest#testNextIntIAE, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testCopy, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetEntryInvalidIndex2, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testTwoAxes, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAcosh, org.apache.commons.math3.linear.RRQRDecompositionTest#testRUpperTriangular, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated, org.apache.commons.math3.distribution.ExponentialDistributionTest#testSampling, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math3.random.Well1024aTest#testNextLongExtremeValues, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testBadEndpoints, org.apache.commons.math3.complex.ComplexTest#testScalarDivide, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testFitAccuracyDependsOnBoundary, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntDirect, org.apache.commons.math3.util.FastMathTest#testTanAccuracy, org.apache.commons.math3.random.EmpiricalDistributionTest#testNexFail, org.apache.commons.math3.distribution.GammaDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.random.MersenneTwisterTest#testNextInversionDeviate, org.apache.commons.math3.linear.RRQRDecompositionTest#testDimensions, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNormInf, org.apache.commons.math3.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMaximize1, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMaximize2, org.apache.commons.math3.linear.DiagonalMatrixTest#testPreMultiply, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVector, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest#testTrivial, org.apache.commons.math3.random.Well19937aTest#testNextExponential, org.apache.commons.math3.exception.OutOfRangeExceptionTest#testAccessors, org.apache.commons.math3.util.OpenIntToFieldTest#testPutKeysWithCollisions, org.apache.commons.math3.distribution.TDistributionTest#nistData, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulNeither, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testPValueNearZero, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testRandomPolynomialsValuesOnly, org.apache.commons.math3.linear.RealVectorTest#testSparseIterator, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testPerformClusterAnalysisToManyClusters, org.apache.commons.math3.random.MersenneTwisterTest#testNextIntExtremeValues, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testReciprocal, org.apache.commons.math3.complex.ComplexFieldTest#testZero, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionBoundaryBoundary, org.apache.commons.math3.util.Decimal64Test#testAsin, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testSpace, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testConsistency, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testWeightedMean, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextSample, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDimension, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetMean, org.apache.commons.math3.linear.ArrayRealVectorTest#testIterator, org.apache.commons.math3.linear.SparseRealMatrixTest#testAdd, org.apache.commons.math3.stat.inference.GTestTest#testBadAlpha, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorMixedType, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testAckley, org.apache.commons.math3.linear.BlockFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math3.random.MersenneTwisterTest#testNextBinomial, org.apache.commons.math3.genetics.ListPopulationTest#testGetFittestChromosome, org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.linear.FieldMatrixImplTest#testPremultiplyVector, org.apache.commons.math3.fitting.CurveFitterTest#testMath372, org.apache.commons.math3.random.Well44497bTest#testNextInt2, org.apache.commons.math3.util.OpenIntToFieldTest#testPutKeysWithCollision2, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math3.linear.QRDecompositionTest#testQOrthogonal, org.apache.commons.math3.complex.ComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math3.util.OpenIntToFieldTest#testGetFromEmpty, org.apache.commons.math3.linear.FieldMatrixImplTest#testGetColumn, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testSmallDistances, org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossoverDimensionMismatchException, org.apache.commons.math3.linear.BiDiagonalTransformerTest#testVOrthogonal, org.apache.commons.math3.fraction.BigFractionFormatTest#testWholeFormat, org.apache.commons.math3.distribution.ZipfDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testGetMinPts, org.apache.commons.math3.util.Decimal64Test#testMultiply, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testStepSize, org.apache.commons.math3.distribution.TDistributionTest#testSampling, org.apache.commons.math3.util.MathUtilsTest#testReduceComparedWithNormalizeAngle, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPreconditions, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompMeanCutoff, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionInsideBoundary, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAngle, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testFit, org.apache.commons.math3.ode.JacobianMatricesTest#testInternalDifferentiation, org.apache.commons.math3.linear.SparseRealVectorTest#testUnitVectorNullVector, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, org.apache.commons.math3.linear.RealVectorTest#testSerial, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing2, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing1, org.apache.commons.math3.stat.inference.GTestTest#testScaling, org.apache.commons.math3.genetics.BinaryChromosomeTest#testRandomConstructor, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncBothRev, org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testCoordinatesCtoS, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testSinMinWithValueChecker, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionRightSide, org.apache.commons.math3.genetics.ListPopulationTest#testIterator, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiplyInt, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testConsistency, org.apache.commons.math3.special.GammaTest#testRegularizedGammaNegativePositive, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testWeightedConsistency, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testOneSet, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTan, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testVectorTwoPairs, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.random.Well44497bTest#testFloatDirect, org.apache.commons.math3.ode.ContinuousOutputModelTest#testRandomAccess, org.apache.commons.math3.analysis.function.SincTest#testZero, org.apache.commons.math3.random.Well19937aTest#testNextIntNeg, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeX, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeY, org.apache.commons.math3.distribution.LogNormalDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinhAsinh, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeZ, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.random.Well44497bTest#testNextIntWideRange, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, org.apache.commons.math3.random.ISAACTest#testNextPoissonConsistency, org.apache.commons.math3.complex.RootsOfUnityTest#testZeroNumberOfRoots, org.apache.commons.math3.linear.RRQRSolverTest#testOverdetermined, org.apache.commons.math3.distribution.ExponentialDistributionTest#testDistributionClone, org.apache.commons.math3.random.Well44497bTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.stat.StatUtilsTest#testNormalize2, org.apache.commons.math3.stat.StatUtilsTest#testNormalize1, org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testTrivial, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testOptimumOutsideRange, org.apache.commons.math3.random.MersenneTwisterTest#testNextIntWideRange, org.apache.commons.math3.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testLargeSample, org.apache.commons.math3.stat.descriptive.summary.SumTest#testSpecialValues, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest#testSinFunction, org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault, org.apache.commons.math3.analysis.FunctionUtilsTest#testCollector, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEvaluateArraySegment, org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetColumnVector, org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionMixedTypes, org.apache.commons.math3.distribution.LogNormalDistributionTest#testExtremeValues, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowField, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest#testWilcoxonSignedRankInputValidation, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testEquals, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRootN, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testEvaluation, org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideSameType, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testConsistency, org.apache.commons.math3.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBadInitial, org.apache.commons.math3.distribution.ZipfDistributionTest#testMoments, org.apache.commons.math3.util.PairTest#testHashCode, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest#testComputeSigma, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testConstructorOK, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2, org.apache.commons.math3.random.Well44497bTest#testConfig, org.apache.commons.math3.linear.SparseRealVectorTest#testGetEntry, org.apache.commons.math3.util.IncrementorTest#testBelowMaxCount, org.apache.commons.math3.analysis.function.SigmoidTest#testDerivativesHighOrder, org.apache.commons.math3.dfp.DfpTest#testPower10, org.apache.commons.math3.stat.inference.GTestTest#testGTestIndependance1, org.apache.commons.math3.random.Well19937aTest#testNextCauchy, org.apache.commons.math3.stat.inference.GTestTest#testGTestIndependance2, org.apache.commons.math3.stat.inference.GTestTest#testGTestIndependance3, org.apache.commons.math3.linear.SparseRealMatrixTest#testDimensions, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testAxisAngle, org.apache.commons.math3.stat.descriptive.moment.InteractionTest#testInteraction, org.apache.commons.math3.random.Well512aTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.linear.ConjugateGradientTest#testEventManagement, org.apache.commons.math3.linear.QRSolverTest#testOverdetermined, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionOutsideOutside, org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.distribution.BetaDistributionTest#testDensity, org.apache.commons.math3.complex.ComplexFormatTest#testPositiveInfinity, org.apache.commons.math3.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math3.util.TransformerMapTest#testPutTransformer, org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCbrt, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetRowMatrix, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.util.ResizableDoubleArrayTest#testWithInitialCapacity, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithClosingRowSeparator, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testCertainSpace, org.apache.commons.math3.special.GammaTest#testLogGammaNegative, org.apache.commons.math3.linear.RealVectorTest#testCombineDimensionMismatchSameType, org.apache.commons.math3.linear.ArrayRealVectorTest#testSubtractSameType, org.apache.commons.math3.complex.ComplexTest#testGetArgumentNaN, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtanh, org.apache.commons.math3.complex.ComplexTest#testScalarSubtractNaN, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, org.apache.commons.math3.exception.util.LocalizedFormatsTest#testNoOpEnglishTranslation, org.apache.commons.math3.linear.RealVectorTest#testCosineMixedTypes, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testWeightedConsistency, org.apache.commons.math3.linear.CholeskyDecompositionTest#testMath274, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testIncrementation, org.apache.commons.math3.random.Well44497bTest#testNextLongPositiveRange, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveNoRoot, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest#testQuinticZero, org.apache.commons.math3.distribution.GammaDistributionTest#testParameterAccessors, org.apache.commons.math3.fitting.GaussianFitterTest#testMath798, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testNoDependency, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane, org.apache.commons.math3.util.FastMathTest#testAsinAccuracy, org.apache.commons.math3.complex.FrenchComplexFormatTest#testFormatNumber, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testNullFunction, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinh, org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionInvalidDataSize, org.apache.commons.math3.linear.MatrixUtilsTest#testCheckSymmetric1, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434PivotRowSelection, org.apache.commons.math3.linear.MatrixUtilsTest#testCheckSymmetric2, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testApplyInverseTo, org.apache.commons.math3.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testHahn1, org.apache.commons.math3.linear.QRDecompositionTest#testMatricesValues, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testHat, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testRevert, org.apache.commons.math3.random.EmpiricalDistributionTest#testGridTooFat, org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositiveNanPositive, org.apache.commons.math3.linear.DiagonalMatrixTest#testNull, org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2NegativeN, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextHex, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testParaboloid, org.apache.commons.math3.random.ISAACTest#testReference, org.apache.commons.math3.linear.FieldMatrixImplTest#testSetColumnVector, org.apache.commons.math3.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNegate, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDensities, org.apache.commons.math3.linear.RealVectorTest#testGetL1Norm, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testForgottenSuffix, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog1pDefinition, org.apache.commons.math3.fraction.BigFractionFormatTest#testLongFormat, org.apache.commons.math3.util.OpenIntToFieldTest#testCopy, org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorMixedType, org.apache.commons.math3.analysis.function.LogisticTest#testPreconditions1, org.apache.commons.math3.analysis.function.LogisticTest#testPreconditions2, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetRowLarge, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextZipf, org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderChangingVisitor3, org.apache.commons.math3.complex.ComplexTest#testSqrtImaginaryNegative, org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderChangingVisitor2, org.apache.commons.math3.special.GammaTest#testRegularizedGammaNanPositive, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, org.apache.commons.math3.util.PrecisionTest#testEqualsWithAllowedDelta, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog1pExpm1, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testSerial, org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderChangingVisitor1, org.apache.commons.math3.random.Well44497bTest#testNextIntPositiveRange, org.apache.commons.math3.linear.SingularValueDecompositionTest#testIssue947, org.apache.commons.math3.linear.DiagonalMatrixTest#testAddNonDiagonalZero, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testConsistency, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextFloatDirect, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testFit, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMath283, org.apache.commons.math3.random.Well19937aTest#testNextFloatDirect, org.apache.commons.math3.linear.SparseRealVectorTest#testCosineDimensionMismatch, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextInversionDeviate, org.apache.commons.math3.linear.ArrayFieldVectorTest#testOuterProduct, org.apache.commons.math3.util.MathUtilsTest#testCheckNotNull1, org.apache.commons.math3.util.MathUtilsTest#testCheckNotNull2, org.apache.commons.math3.util.MathArraysTest#testSortInPlace, org.apache.commons.math3.distribution.FDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math3.distribution.LogNormalDistributionTest#testGetShape, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleNullData, org.apache.commons.math3.genetics.RandomKeyTest#testIdentityPermutation, org.apache.commons.math3.linear.BlockRealMatrixTest#testTranspose, org.apache.commons.math3.complex.QuaternionTest#testPolarForm, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testDistance, org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testCopy, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNonDefaultSetting, org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, org.apache.commons.math3.genetics.BinaryMutationTest#testMutate, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testCopyConsistency, org.apache.commons.math3.util.DefaultTransformerTest#testTransformString, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testAddToEntry, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackPowellSingular, org.apache.commons.math3.linear.FieldMatrixImplTest#testMath209, org.apache.commons.math3.filter.KalmanFilterTest#testConstantAcceleration, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAccurateDotProduct, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath828, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulFirst, org.apache.commons.math3.random.MersenneTwisterTest#testNexBytes, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testIllConditioned, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testSquareRoot, org.apache.commons.math3.util.Decimal64Test#testTanh, org.apache.commons.math3.linear.SparseFieldMatrixTest#testMultiply2, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPermutation, org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplyDimensionMismatch, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEvaluateArraySegment, org.apache.commons.math3.linear.RealVectorTest#testIsInfinite, org.apache.commons.math3.genetics.ElitisticListPopulationTest#testConstructorTooHigh, org.apache.commons.math3.random.Well44497bTest#testNextFloatDirect, org.apache.commons.math3.analysis.function.LogisticTest#testGradientComponent1Component2Component3, org.apache.commons.math3.complex.QuaternionTest#testAddQuaternionQuaternion, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextExponential, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCopySignDouble, org.apache.commons.math3.random.EmpiricalDistributionTest#testLoad, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextGaussian, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math3.optim.univariate.BracketFinderTest#testMinimumIsOnIntervalBoundary, org.apache.commons.math3.linear.LUDecompositionTest#testPPermutation, org.apache.commons.math3.dfp.DfpTest#testHash, org.apache.commons.math3.random.Well44497aTest#testNextIntNeg, org.apache.commons.math3.fraction.FractionTest#testSerial, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testTooLargeStep, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testSphere, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistance1, org.apache.commons.math3.random.Well1024aTest#testNextUniformExtremeValues, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testSampling, org.apache.commons.math3.linear.SingularValueSolverTest#testSolve, org.apache.commons.math3.distribution.GammaDistributionTest#testDistributionClone, org.apache.commons.math3.util.DefaultTransformerTest#testTransformInteger, org.apache.commons.math3.linear.RealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, org.apache.commons.math3.random.MersenneTwisterTest#testSeeding, org.apache.commons.math3.linear.RealVectorTest#testOuterProductSameType, org.apache.commons.math3.linear.EigenDecompositionTest#testEigenvalues, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeZ, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeY, org.apache.commons.math3.util.ArithmeticUtilsTest#testSubAndCheckErrorMessage, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeX, org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testMultiplicationRules, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIssue596, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath293, org.apache.commons.math3.special.GammaTest#testLogGammaZero, org.apache.commons.math3.random.Well1024aTest#testNextPascal, org.apache.commons.math3.complex.ComplexTest#testCosNaN, org.apache.commons.math3.linear.EigenDecompositionTest#testDimension3MultipleRoot, org.apache.commons.math3.stat.inference.TTestTest#testTwoSampleTHeterscedastic, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMath226, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderChangingVisitor3, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderChangingVisitor2, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderChangingVisitor1, org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfDistanceSameType, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetNorm, org.apache.commons.math3.random.BitsStreamGeneratorTest#testDoubleDirect, org.apache.commons.math3.dfp.DfpTest#testSignum, org.apache.commons.math3.linear.SparseRealVectorTest#testSubtractMixedTypes, org.apache.commons.math3.random.Well44497bTest#testNextIntNegativeRange, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineMixedTypes, org.apache.commons.math3.linear.CholeskyDecompositionTest#testNotSymmetricMatrixException, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testSampling, org.apache.commons.math3.random.Well19937aTest#testDoubleDirect, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEvaluateArraySegment, org.apache.commons.math3.random.Well19937aTest#testNextBeta, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testWeightedConsistency, org.apache.commons.math3.util.FastMathTestPerformance#testExp, org.apache.commons.math3.linear.RRQRDecompositionTest#testNonInvertible, org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDF3, org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDF4, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNoComponents, org.apache.commons.math3.util.Decimal64Test#testRound, org.apache.commons.math3.distribution.NormalDistributionTest#testDistributionClone, org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDF2, org.apache.commons.math3.random.MersenneTwisterTest#testNextHypergeometric, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math3.util.FastMathTest#testFloatNextAfterSpecialCases, org.apache.commons.math3.random.ISAACTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, org.apache.commons.math3.linear.SparseRealVectorTest#testMap, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFittingGoodInit, org.apache.commons.math3.distribution.FDistributionTest#testSmallDegreesOfFreedom, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMaximize2, org.apache.commons.math3.linear.DiagonalMatrixTest#testAdd, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testInsufficientOrder3, org.apache.commons.math3.dfp.DfpDecTest#testNextAfter, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMaximize1, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetNumericalVariance, org.apache.commons.math3.dfp.DfpTest#testHypot, org.apache.commons.math3.dfp.DfpTest#testPowField, org.apache.commons.math3.random.Well19937cTest#testNextCauchy, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testQuinticFunction, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNonDefaultSetting, org.apache.commons.math3.fraction.FractionFormatTest#testFormat, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testToDegreesDefinition, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testQuaternion, org.apache.commons.math3.complex.QuaternionTest#testIsPureQuaternion, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetColumn, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated, org.apache.commons.math3.distribution.WeibullDistributionTest#testDistributionClone, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, org.apache.commons.math3.geometry.euclidean.threed.LineTest#testIntersection, org.apache.commons.math3.special.GammaTest#testLogGammaPrecondition1, org.apache.commons.math3.special.GammaTest#testLogGammaPrecondition2, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetRowVector, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testDensities, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, org.apache.commons.math3.util.FastMathStrictComparisonTest#test1, org.apache.commons.math3.linear.ArrayRealVectorTest#testAddMixedTypes, org.apache.commons.math3.distribution.CauchyDistributionTest#testPreconditions, org.apache.commons.math3.special.BetaTest#testLogBetaPositivePositive, org.apache.commons.math3.optim.linear.SimplexTableauTest#testTableauWithNoArtificialVars, org.apache.commons.math3.random.Well512aTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath781, org.apache.commons.math3.linear.RealVectorTest#testGetDimension, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderPreservingVisitor3, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderPreservingVisitor2, org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderPreservingVisitor1, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncBothRev, org.apache.commons.math3.stat.descriptive.rank.MedianTest#testCopy, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testArrayIsReference, org.apache.commons.math3.random.Well19937aTest#testNextPascal, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest#testValues, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSqrt, org.apache.commons.math3.random.MersenneTwisterTest#testNextLongIAE, org.apache.commons.math3.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, org.apache.commons.math3.random.Well44497bTest#testNextGamma, org.apache.commons.math3.random.Well44497aTest#testNextBooleanDirect, org.apache.commons.math3.random.MersenneTwisterTest#testNextLongDirect, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testKepler, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, org.apache.commons.math3.distribution.FDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEvaluation, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, org.apache.commons.math3.random.Well1024aTest#testNextPoissonConsistency, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testArray, org.apache.commons.math3.random.Well44497aTest#testNextFloatDirect, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testBoundsUnsupported, org.apache.commons.math3.ode.events.ReappearingEventTest#testGragg, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.linear.EigenSolverTest#testSolveDimensionErrors, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCos, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testJacobiLegendre, org.apache.commons.math3.util.MathUtilsTest#testSignLong, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testConsistency, org.apache.commons.math3.linear.BlockRealMatrixTest#testExamples, org.apache.commons.math3.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.linear.SymmLQTest#testNonSelfAdjointPreconditioner, org.apache.commons.math3.complex.ComplexTest#testReciprocal, org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionInvalidDataSize, org.apache.commons.math3.transform.FastFourierTransformerTest#testSinFunction, org.apache.commons.math3.fitting.HarmonicFitterTest#testInitialGuess, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncNeitherRev, org.apache.commons.math3.optimization.univariate.BracketFinderTest#testIntervalBoundsOrdering, org.apache.commons.math3.exception.util.LocalizedFormatsTest#testVariablePartsConsistency, org.apache.commons.math3.linear.LUDecompositionTest#testDimensions, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextHex, org.apache.commons.math3.random.ISAACTest#testNextZipf, org.apache.commons.math3.analysis.function.StepFunctionTest#testHeaviside, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434UnfeasibleSolution, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest#testAccessors, org.apache.commons.math3.dfp.DfpTest#testSubtractField, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextSample, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testPerfectNegative, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math3.util.FastMathTest#testSignumDouble, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest#testCos, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testMissedEndEvent, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testDefaultFormatVector3D, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, org.apache.commons.math3.linear.RealVectorTest#testOuterProductMixedTypes, org.apache.commons.math3.util.DefaultTransformerTest#testTransformDouble, org.apache.commons.math3.linear.SparseFieldMatrixTest#testCopyFunctions, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTaylorPolynomial, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEvaluation, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest#testParaboloid2D, org.apache.commons.math3.random.Well512aTest#testNextIntDirect, org.apache.commons.math3.linear.FieldMatrixImplTest#testSetRowMatrix, org.apache.commons.math3.dfp.DfpTest#testExp, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMaximize2, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, org.apache.commons.math3.transform.FastSineTransformerTest#testAdHocData, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMaximize1, org.apache.commons.math3.linear.FieldLUSolverTest#testSolve, org.apache.commons.math3.linear.EigenDecompositionTest#testMath848, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionBoundaryOutside, org.apache.commons.math3.dfp.DfpTest#testPowDouble, org.apache.commons.math3.transform.FastFourierTransformerTest#testStandardTransformFunction, org.apache.commons.math3.complex.ComplexTest#testDivideImaginary, org.apache.commons.math3.linear.SparseRealMatrixTest#testGetEntry, org.apache.commons.math3.genetics.RandomKeyTest#testComparatorPermutation, org.apache.commons.math3.random.Well19937aTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.analysis.solvers.BrentSolverTest#testMath832, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testNegativeTestAddObs, org.apache.commons.math3.util.FastMathTest#checkExtraFastMathClasses, org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, org.apache.commons.math3.genetics.ListPopulationTest#testSetPopulationLimit, org.apache.commons.math3.linear.SparseFieldMatrixTest#testSetSubMatrix, org.apache.commons.math3.ode.events.EventFilterTest#testIncreasingOnly, org.apache.commons.math3.geometry.euclidean.twod.LineTest#testParallel, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInfinite, org.apache.commons.math3.linear.SymmLQTest#testNonSquareOperator, org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetRowVector, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testHalfInfinitePos, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testGetSubVector, org.apache.commons.math3.linear.BlockFieldMatrixTest#testAddFail, org.apache.commons.math3.linear.ArrayRealVectorTest#testSubtractMixedTypes, org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositiveNegativePositive, org.apache.commons.math3.fraction.BigFractionFormatTest#testParseInvalid, org.apache.commons.math3.genetics.FitnessCachingTest#testFitnessCaching, org.apache.commons.math3.exception.util.LocalizedFormatsTest#testAllKeysPresentInPropertiesFiles, org.apache.commons.math3.filter.KalmanFilterTest#testTransitionControlMatrixMismatch, org.apache.commons.math3.dfp.DfpTest#testIntValue, org.apache.commons.math3.dfp.DfpTest#testDivideField, org.apache.commons.math3.fraction.FractionTest#testCompareTo, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncBoth, org.apache.commons.math3.linear.TriDiagonalTransformerTest#testNonSquare, org.apache.commons.math3.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, org.apache.commons.math3.complex.ComplexTest#testTanhInf, org.apache.commons.math3.distribution.PoissonDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, org.apache.commons.math3.random.Well19937cTest#testSeeding, org.apache.commons.math3.complex.RootsOfUnityTest#testMathIllegalState3, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math3.complex.RootsOfUnityTest#testMathIllegalState2, org.apache.commons.math3.complex.RootsOfUnityTest#testMathIllegalState1, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testConsistency, org.apache.commons.math3.linear.ArrayFieldVectorTest#testZeroVectors, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testBadFunction, org.apache.commons.math3.random.ISAACTest#testNextCauchy, org.apache.commons.math3.random.Well512aTest#testNextUniformIAE, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testInconsistentSizes2, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testInconsistentSizes1, org.apache.commons.math3.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math3.linear.DiagonalMatrixTest#testAddNonDiagonalEntry, org.apache.commons.math3.random.Well44497bTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math3.util.Decimal64Test#testLog, org.apache.commons.math3.random.EmpiricalDistributionTest#testLoadNullDoubleArray, org.apache.commons.math3.complex.ComplexTest#testExp, org.apache.commons.math3.random.Well44497bTest#testNextLongWideRange, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testSimplyConnected, org.apache.commons.math3.random.Well1024aTest#testNextIntWideRange, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testEquals, org.apache.commons.math3.util.FastMathTest#testLogWithBase, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAngularSeparation, org.apache.commons.math3.random.Well512aTest#testNextExponential, org.apache.commons.math3.util.Decimal64Test#testIsInfinite, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest#testSinFunction, org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductMixedTypes, org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testExceptions, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseManyComponents, org.apache.commons.math3.random.Well512aTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.special.ErfTest#testErfcGnu, org.apache.commons.math3.stat.descriptive.summary.SumTest#testEqualsAndHashCode, org.apache.commons.math3.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, org.apache.commons.math3.random.Well44497bTest#testSeeding, org.apache.commons.math3.distribution.LogNormalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckDisabled, org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderPreservingVisitor3, org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderPreservingVisitor2, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderPreservingVisitor1, org.apache.commons.math3.random.Well19937cTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.linear.BlockFieldMatrixTest#testToString, org.apache.commons.math3.distribution.ExponentialDistributionTest#testConsistency, org.apache.commons.math3.stat.inference.GTestTest#testGTestGoodnesOfFit3, org.apache.commons.math3.random.EmpiricalDistributionTest#testConsistency, org.apache.commons.math3.stat.inference.GTestTest#testGTestGoodnesOfFit2, org.apache.commons.math3.random.Well44497bTest#testNextT, org.apache.commons.math3.linear.ArrayRealVectorTest#testCopy, org.apache.commons.math3.linear.RealMatrixFormatTest#testNan, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongNegativeRange, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest#testCircleFitting, org.apache.commons.math3.ode.JacobianMatricesTest#testAnalyticalDifferentiation, org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest#testIterationCheck, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testHasIntercept, org.apache.commons.math3.genetics.ListPopulationTest#testChromosomeListConstructorPopulationLimitNotPositive, org.apache.commons.math3.util.Decimal64Test#testAddField, org.apache.commons.math3.stat.inference.GTestTest#testGTestGoodnesOfFit1, org.apache.commons.math3.random.Well512aTest#testNextBooleanDirect, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testSingleDown, org.apache.commons.math3.analysis.function.LogisticTest#testGradientComponent0Component4, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize, org.apache.commons.math3.genetics.ElitisticListPopulationTest#testSetElitismRateTooHigh, org.apache.commons.math3.complex.ComplexTest#testTanNaN, org.apache.commons.math3.genetics.TournamentSelectionTest#testSelect, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest#testBadFunction, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testGetIterations, org.apache.commons.math3.random.Well44497bTest#testNextPascal, org.apache.commons.math3.transform.FastSineTransformerTest#testParameters, org.apache.commons.math3.random.ISAACTest#testNextHex, org.apache.commons.math3.random.Well44497bTest#testNextF, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434NegativeVariable, org.apache.commons.math3.stat.descriptive.rank.MinTest#testWeightedConsistency, org.apache.commons.math3.distribution.NormalDistributionTest#testGetStandardDeviation, org.apache.commons.math3.optim.SimplePointCheckerTest#testIterationCheckPrecondition, org.apache.commons.math3.linear.SparseRealMatrixTest#testScalarAdd, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextCauchy, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextWeibull, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testCigTab, org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfDimensionMismatchSameType, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, org.apache.commons.math3.linear.FieldMatrixImplTest#testToString, org.apache.commons.math3.random.Well44497aTest#testNextIntDirect, org.apache.commons.math3.linear.FieldMatrixImplTest#testGetSubMatrix, org.apache.commons.math3.distribution.ExponentialDistributionTest#testIllegalArguments, org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples, org.apache.commons.math3.linear.SparseRealMatrixTest#testCopyFunctions, org.apache.commons.math3.dfp.DfpTest#testLog, org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.util.MathArraysTest#testEbeDividePrecondition, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testLinear, org.apache.commons.math3.distribution.ExponentialDistributionTest#testPreconditions, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetVectors, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testVectorOnePair, org.apache.commons.math3.random.Well512aTest#testNextBeta, org.apache.commons.math3.linear.SymmLQTest#testNonSquarePreconditioner, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntNegativeRange, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNonDefaultSetting, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testAccessors, org.apache.commons.math3.ode.FirstOrderConverterTest#testDoubleDimension, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEvaluateArraySegment, org.apache.commons.math3.util.ResizableDoubleArrayTest#testCompute, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testIntersection3, org.apache.commons.math3.distribution.LevyDistributionTest#testDensityIntegrals, org.apache.commons.math3.random.Well44497aTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testIntersection2, org.apache.commons.math3.fraction.BigFractionFormatTest#testDenominatorFormat, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetColumnMatrix, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTooLargeOrder, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet, org.apache.commons.math3.linear.SparseRealMatrixTest#testGetColumnVector, org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, org.apache.commons.math3.fraction.FractionTest#testSubtract, org.apache.commons.math3.linear.RealVectorTest#testEbeDivideSameType, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testSerialization, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPower, org.apache.commons.math3.analysis.function.LogisticTest#testSomeValues, org.apache.commons.math3.linear.SymmLQTest#testNonPositiveDefinitePreconditioner, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExpression, org.apache.commons.math3.fraction.FractionFormatTest#testParseInvalid, org.apache.commons.math3.util.MathUtilsTest#testReduce, org.apache.commons.math3.random.ISAACTest#testFloatDirect, org.apache.commons.math3.fraction.BigFractionTest#testFloatValueForLargeNumeratorAndDenominator, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinear, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testNonMeanCutoffs, org.apache.commons.math3.util.Decimal64Test#testAdd, org.apache.commons.math3.stat.descriptive.rank.MinTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testIncrementation, org.apache.commons.math3.dfp.DfpTest#testMultiplyInt, org.apache.commons.math3.genetics.RandomKeyTest#testConstructor2, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDensities, org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositiveNan, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongExtremeValues, org.apache.commons.math3.genetics.RandomKeyTest#testConstructor1, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTaylorAtan2, org.apache.commons.math3.linear.ArrayRealVectorTest#testSubtractDimensionMismatch, org.apache.commons.math3.linear.SparseRealVectorTest#testIsNaN, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testConstructors, org.apache.commons.math3.optimization.PointValuePairTest#testSerial, org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderPreservingVisitor1, org.apache.commons.math3.distribution.NormalDistributionTest#testExtremeValues, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testHermiteOrthogonality, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionRightSide, org.apache.commons.math3.random.Well19937cTest#testNextF, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testPercentile, org.apache.commons.math3.distribution.AbstractRealDistributionTest#testDiscontinuous, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations#test, org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareIndependence, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testBoundsUnsupported, org.apache.commons.math3.util.ArithmeticUtilsTest#testMulAndCheck, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testOptimumOutsideRange, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testBevington, org.apache.commons.math3.dfp.DfpTest#testGetField, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testRosenbrock, org.apache.commons.math3.linear.DiagonalMatrixTest#testCopy, org.apache.commons.math3.util.ArithmeticUtilsTest#testBinomialCoefficientLarge, org.apache.commons.math3.distribution.TriangularDistributionTest#testDensities, org.apache.commons.math3.fraction.FractionTest#testMath835, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testNaNContracts, org.apache.commons.math3.random.Well44497aTest#testNexBoolean2, org.apache.commons.math3.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math3.distribution.PascalDistributionTest#testDegenerate1, org.apache.commons.math3.distribution.PascalDistributionTest#testDegenerate0, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetNumericalVariance, org.apache.commons.math3.complex.ComplexTest#testExpInf, org.apache.commons.math3.random.Well19937cTest#testNextT, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math3.random.Well1024aTest#testNextIntNeg, org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape10, org.apache.commons.math3.util.TransformerMapTest#testClear, org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderPreservingVisitor2, org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeZ, org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformRealSizeNotAPowerOfTwo, org.apache.commons.math3.complex.ComplexTest#testReciprocalNaN, org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderPreservingVisitor3, org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeX, org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeY, org.apache.commons.math3.distribution.PoissonDistributionTest#testCumulativeProbabilitySpecial, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPreconditions, org.apache.commons.math3.util.Decimal64Test#testAbs, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionInsideInside, org.apache.commons.math3.fraction.FractionFormatTest#testParseProperNegative, org.apache.commons.math3.linear.FieldLUSolverTest#testSingular, org.apache.commons.math3.fitting.HarmonicFitterTest#testMath844, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testStepSize, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math3.util.PairTest#testAccessor2, org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testHessian, org.apache.commons.math3.analysis.function.LogitTest#testDerivativesWithInverseFunction, org.apache.commons.math3.complex.ComplexTest#testSinhNaN, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCoshAcosh, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testSingularities, org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionInvalidBounds, org.apache.commons.math3.linear.CholeskySolverTest#testSolveDimensionErrors, org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testRelativeToleranceOnScaledValues, org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatNegative, org.apache.commons.math3.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, org.apache.commons.math3.linear.BiDiagonalTransformerTest#testUpperOrLower, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSerialization, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, org.apache.commons.math3.optim.linear.SimplexSolverTest#testDegeneracy, org.apache.commons.math3.random.ValueServerTest#testModes, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCeilFloorRintLong, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testLeastSquares2, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testLeastSquares1, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testBoundariesDimensionMismatch, org.apache.commons.math3.dfp.DfpTest#testAddDouble, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testLeastSquares3, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testUnbounded, org.apache.commons.math3.dfp.DfpTest#testExpm1, org.apache.commons.math3.linear.RealVectorTest#testMap, org.apache.commons.math3.fraction.BigFractionTest#testLongValue, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testToString, org.apache.commons.math3.analysis.function.LogitTest#testValueWithInverseFunction, org.apache.commons.math3.util.MathUtilsTest#testPermutedArrayHash, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRound, org.apache.commons.math3.complex.ComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testComposeMismatchedDimensions, org.apache.commons.math3.random.Well19937cTest#testNextLongDirect, org.apache.commons.math3.linear.RealVectorTest#testGetSubVector, org.apache.commons.math3.transform.FastSineTransformerTest#testTransformRealFirstElementNotZero, org.apache.commons.math3.complex.ComplexTest#testSqrtRealZero, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testConstrainedRosen, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainderField, org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testSymmetry, org.apache.commons.math3.complex.ComplexFormatTest#testParseNegativeBoth, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math3.linear.SparseFieldVectorTest#testPredicates, org.apache.commons.math3.complex.ComplexTest#testAbsNaN, org.apache.commons.math3.util.FastMathTest#testLog10Accuracy, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testMoments, org.apache.commons.math3.dfp.DfpTest#testTanh, org.apache.commons.math3.complex.ComplexTest#testDivideZeroZero, org.apache.commons.math3.linear.RRQRSolverTest#testSolveRankErrors, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.random.Well44497aTest#testNexBytes, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPreconditions, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testCopy, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFaFa, org.apache.commons.math3.linear.CholeskyDecompositionTest#testAEqualLLT, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testDiffPow, org.apache.commons.math3.random.Well44497aTest#testNextUniformIAE, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveAccuracyNull, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testNaNs, org.apache.commons.math3.distribution.PascalDistributionTest#testMoments, org.apache.commons.math3.util.Decimal64Test#testCopySignField, org.apache.commons.math3.random.Well44497bTest#testNextIntDirect, org.apache.commons.math3.random.Well1024aTest#testReferenceCode, org.apache.commons.math3.dfp.DfpTest#testAsin, org.apache.commons.math3.util.FastMathTest#testExpAccuracy, org.apache.commons.math3.random.Well44497bTest#testNextInversionDeviate, org.apache.commons.math3.linear.EigenDecompositionTest#testDistinctEigenvalues, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetVectors, org.apache.commons.math3.stat.StatUtilsTest#testSumLog, org.apache.commons.math3.linear.RealVectorTest#testGetNorm, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testQuaternion, org.apache.commons.math3.util.MathUtilsTest#testSignInt, org.apache.commons.math3.optimization.SimpleValueCheckerTest#testIterationCheck, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongDirect, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformExtremeValues, org.apache.commons.math3.fraction.BigFractionTest#testAdd, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulFirst, org.apache.commons.math3.linear.RealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTrigo, org.apache.commons.math3.linear.BlockRealMatrixTest#testPlusMinus, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math3.complex.ComplexFormatTest#testParseNan, org.apache.commons.math3.random.Well19937aTest#testNextPoissonConsistency, org.apache.commons.math3.linear.MatrixUtilsTest#testIsSymmetric, org.apache.commons.math3.ode.JacobianMatricesTest#testParameterizable, org.apache.commons.math3.special.GammaTest#testLogGammaNan, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testWeightedConsistency, org.apache.commons.math3.optimization.linear.SimplexTableauTest#testInitialization, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRootNSingularity, org.apache.commons.math3.linear.EigenDecompositionTest#testSquareRootNonPositiveDefinite, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testStair, org.apache.commons.math3.analysis.solvers.BrentSolverTest#testSinZero, org.apache.commons.math3.distribution.UniformRealDistributionTest#testPreconditions1, org.apache.commons.math3.distribution.UniformRealDistributionTest#testPreconditions2, org.apache.commons.math3.random.BitsStreamGeneratorTest#testFloatDirect, org.apache.commons.math3.util.FastMathTest#testDoubleScalbSpecialCases, org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeInfinity, org.apache.commons.math3.linear.FieldMatrixImplTest#testGetVectors, org.apache.commons.math3.fraction.BigFractionTest#testGetReducedFraction, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionInsideInside, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab, org.apache.commons.math3.fraction.BigFractionTest#testAbs, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders19, org.apache.commons.math3.stat.data.LewTest#testCertifiedValues, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders17, org.apache.commons.math3.distribution.TriangularDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders18, org.apache.commons.math3.util.FastMathTest#testConstants, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPoissonConsistency, org.apache.commons.math3.stat.descriptive.summary.SumTest#testEvaluateArraySegment, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testQuinticMinStatistics, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testHalfBounded, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testIncrementation, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testMomentSmallSamples, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders20, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testMissingSearchInterval, org.apache.commons.math3.fraction.BigFractionTest#testDoubleValue, org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testSumSinc, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntWideRange, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testNoSegments, org.apache.commons.math3.complex.FrenchComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, org.apache.commons.math3.random.Well19937aTest#testNextGaussian, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testWeightedConsistency, org.apache.commons.math3.random.Well512aTest#testNextGamma, org.apache.commons.math3.random.Well512aTest#testNextIntIAE, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testCopyConsistency, org.apache.commons.math3.random.Well19937aTest#testNextIntWideRange, org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeBoth, org.apache.commons.math3.stat.descriptive.summary.ProductTest#testCopy, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2SpecialCases, org.apache.commons.math3.linear.QRDecompositionTest#testDimensions, org.apache.commons.math3.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders11, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders12, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders10, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders15, org.apache.commons.math3.random.Well1024aTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders16, org.apache.commons.math3.special.GammaTest#testLogGamma1p, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders13, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#noReset, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders14, org.apache.commons.math3.linear.EigenDecompositionTest#testSymmetric, org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedInPlaceSolutionWithInitialGuess, org.apache.commons.math3.linear.SparseRealVectorTest#testAddToEntry, org.apache.commons.math3.random.Well44497bTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainderDouble, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testWrongVariableIndex, org.apache.commons.math3.analysis.function.SqrtTest#testComparison, org.apache.commons.math3.transform.FastHadamardTransformerTest#test4Points, org.apache.commons.math3.linear.DiagonalMatrixTest#testSubtract, org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionDimensionMismatch, org.apache.commons.math3.analysis.FunctionUtilsTest#testSample, org.apache.commons.math3.random.Well1024aTest#testNextIntNegativeRange, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSubtractField, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntNeg, org.apache.commons.math3.distribution.TDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.random.Well19937aTest#testNextWeibull, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testDisjointPolygons, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testConstant, org.apache.commons.math3.linear.RealVectorTest#testMapDivide, org.apache.commons.math3.transform.FastCosineTransformerTest#testParameters, org.apache.commons.math3.linear.SparseRealVectorTest#testSubtractSameType, org.apache.commons.math3.complex.ComplexFieldTest#testOne, org.apache.commons.math3.util.PrecisionTest#testFloatEqualsWithAllowedUlps, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal1, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math3.distribution.TriangularDistributionTest#testGetLowerBound, org.apache.commons.math3.complex.ComplexTest#testMath221, org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange, org.apache.commons.math3.genetics.ListPopulationTest#testAddTooManyChromosomesSingleCall, org.apache.commons.math3.complex.ComplexTest#testTanhCritical, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFitting2, org.apache.commons.math3.linear.RealVectorFormatTest#testParseManyComponents, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testTooLargeFirstStep, org.apache.commons.math3.complex.QuaternionTest#testIsUnitQuaternion, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextChiSquare, org.apache.commons.math3.random.EmpiricalDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.random.Well44497bTest#testNextChiSquare, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal3, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal2, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal5, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal4, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal6, org.apache.commons.math3.linear.RealVectorTest#testMapDivideToSelf, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextBinomial, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureHex, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, org.apache.commons.math3.stat.descriptive.summary.SumTest#testWeightedSum, org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformNegaiveBounds, org.apache.commons.math3.fraction.FractionFieldTest#testOne, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testSerialization, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulNeitherRev, org.apache.commons.math3.analysis.solvers.NewtonSolverTest#testQuinticZero, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongIAE, org.apache.commons.math3.util.PrecisionTest#testRoundDouble, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackLinearRank1, org.apache.commons.math3.stat.FrequencyTest#testMerge, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testBackward, org.apache.commons.math3.random.Well19937aTest#testNextChiSquare, org.apache.commons.math3.random.ValueServerTest#testReplay, org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunction, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testCopy, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNoComponents, org.apache.commons.math3.fraction.BigFractionFormatTest#testNumeratorFormat, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, org.apache.commons.math3.util.FastMathTest#testCosAccuracy, org.apache.commons.math3.complex.QuaternionTest#testProductQuaternionQuaternion, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiplyField, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testDegRad, org.apache.commons.math3.linear.BlockRealMatrixTest#testMultiply2, org.apache.commons.math3.util.MathArraysTest#testCopyOfInt, org.apache.commons.math3.primes.PrimesTest#testNextPrime, org.apache.commons.math3.util.MathArraysTest#testLinearCombinationInfinite, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextHypergeometric, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testBug20040520, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntNeg, org.apache.commons.math3.linear.SparseFieldMatrixTest#testDimensions, org.apache.commons.math3.genetics.ElitisticListPopulationTest#testNextGeneration, org.apache.commons.math3.linear.RealVectorTest#testGetDistanceDimensionMismatch, org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, org.apache.commons.math3.random.Well19937cTest#testNextLongNegativeToPositiveRange, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest#testMessage, org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitVectorNullVector, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfDistanceMixedTypes, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetColumn, org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedResidual, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPoisson, org.apache.commons.math3.linear.SparseFieldMatrixTest#testScalarAdd, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testCentroid, org.apache.commons.math3.random.ISAACTest#testNextSample, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, org.apache.commons.math3.util.FastMathTest#testExpSpecialCases, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNexBytes, org.apache.commons.math3.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, org.apache.commons.math3.linear.FieldMatrixImplTest#testAddFail, org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionAboveSide, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithDecimals, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInputSigmaNegative, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse, org.apache.commons.math3.util.Decimal64Test#testRemainderDouble, org.apache.commons.math3.stat.inference.TestUtilsTest#testPaired, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveNull, org.apache.commons.math3.fraction.BigFractionFieldTest#testSerial, org.apache.commons.math3.distribution.CauchyDistributionTest#testMoments, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testEmptySample, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testSerialization, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testMath798, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseZeroX, org.apache.commons.math3.linear.BlockFieldMatrixTest#testSerial, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.fraction.FractionFormatTest#testNumeratorFormat, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMath864, org.apache.commons.math3.linear.SparseFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveSingle, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAcos, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testCoordinatesStoC, org.apache.commons.math3.util.IncrementorTest#testBulkIncrement, org.apache.commons.math3.linear.SparseRealMatrixTest#testTranspose, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderChangingVisitor2, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testEventsScheduling, org.apache.commons.math3.linear.ArrayRealVectorTest#testSetEntryInvalidIndex1, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderChangingVisitor1, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRegressExceptions, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSqrtDefinition, org.apache.commons.math3.linear.ArrayRealVectorTest#testSetEntryInvalidIndex2, org.apache.commons.math3.random.ISAACTest#testNextLong2, org.apache.commons.math3.analysis.FunctionUtilsTest#testSampleNegativeNumberOfPoints, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSerial, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testScalarProduct, org.apache.commons.math3.random.ISAACTest#testNextIntNegativeRange, org.apache.commons.math3.linear.ArrayRealVectorTest#testAddToEntry, org.apache.commons.math3.special.BetaTest#testLogBetaPositiveZero, org.apache.commons.math3.fitting.GaussianFitterTest#testMath519, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testDivideField, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEvaluation, org.apache.commons.math3.distribution.ExponentialDistributionTest#testMoments, org.apache.commons.math3.linear.FieldMatrixImplTest#testCopySubMatrix, org.apache.commons.math3.random.MersenneTwisterTest#testNextPoissonConsistency, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testParameters, org.apache.commons.math3.stat.StatUtilsTest#testProduct, org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetRowMatrix, org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossoverDimensionMismatchException, org.apache.commons.math3.linear.FieldMatrixImplTest#testPower, org.apache.commons.math3.linear.RealVectorTest#testUnitizeNullVector, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testEpsilon, org.apache.commons.math3.linear.FieldLUDecompositionTest#testUUpperTriangular, org.apache.commons.math3.filter.KalmanFilterTest#testConstant, org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfDimensionMismatchMixedTypes, org.apache.commons.math3.stat.inference.TTestTest#testPaired, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDistanceSameType, org.apache.commons.math3.linear.FieldMatrixImplTest#testMultiply, org.apache.commons.math3.analysis.function.LogitTest#testDerivative, org.apache.commons.math3.random.MersenneTwisterTest#testNextBeta, org.apache.commons.math3.fraction.BigFractionTest#testIntValue, org.apache.commons.math3.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math3.random.ISAACTest#testNextGaussian, org.apache.commons.math3.util.FastMathTest#testToDegrees, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSample, org.apache.commons.math3.distribution.LevyDistributionTest#testDistributionClone, org.apache.commons.math3.util.Decimal64Test#testMultiplyDouble, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes, org.apache.commons.math3.linear.BlockRealMatrixTest#testSetColumnVector, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math3.complex.QuaternionTest#testConjugate, org.apache.commons.math3.linear.SparseRealMatrixTest#testGetRowMatrix, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters, org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformMaximalInterval, org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage2, org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage3, org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage1, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testHalfBounded, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math3.transform.FastHadamardTransformerTest#testNoIntInverse, org.apache.commons.math3.fraction.FractionTest#testDivide, org.apache.commons.math3.random.Well512aTest#testNextCauchy, org.apache.commons.math3.distribution.LogNormalDistributionTest#testDistributionClone, org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage6, org.apache.commons.math3.fraction.BigFractionTest#testGoldenRatio, org.apache.commons.math3.linear.RealMatrixFormatTest#testNonDefaultSetting, org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage4, org.apache.commons.math3.linear.EigenDecompositionTest#testRandomUnsymmetricMatrix, org.apache.commons.math3.random.Well19937cTest#testNextIntWideRange, org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage5, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSinZero, org.apache.commons.math3.linear.RealVectorTest#testDotProductMixedTypes, org.apache.commons.math3.analysis.FunctionUtilsTest#testCompose, org.apache.commons.math3.linear.SingularValueDecompositionTest#testUOrthogonal, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testIterator, org.apache.commons.math3.dfp.DfpTest#testFloor, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNormalize, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testKeepInitIfBest, org.apache.commons.math3.linear.ArrayRealVectorTest#testMapToSelf, org.apache.commons.math3.util.IncrementorTest#testConstructor1, org.apache.commons.math3.complex.QuaternionTest#testNormalize, org.apache.commons.math3.random.Well19937cTest#testNextIntNeg, org.apache.commons.math3.random.MersenneTwisterTest#testNextLongExtremeValues, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, org.apache.commons.math3.util.IncrementorTest#testConstructor2, org.apache.commons.math3.complex.ComplexFormatTest#testNan, org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideSameType, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testPowell, org.apache.commons.math3.linear.SparseRealVectorTest#testUnitizeNullVector, org.apache.commons.math3.distribution.LogNormalDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPlane, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleNoDecimals, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testFasterThanNewton, org.apache.commons.math3.distribution.NormalDistributionTest#testMoments, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderChangingVisitor3, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testSerialization, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionBoundaryBoundary, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testSingularities, org.apache.commons.math3.distribution.PascalDistributionTest#testConsistencyAtSupportBounds, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, org.apache.commons.math3.stat.FrequencyTest#testIntegerValues, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testMath209, org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeReal, org.apache.commons.math3.linear.ArrayFieldVectorTest#testSerial, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testConstant, org.apache.commons.math3.dfp.DfpTest#testSignPredicates, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testAddObsGetNClear, org.apache.commons.math3.random.Well44497aTest#testNextHypergeometric, org.apache.commons.math3.genetics.ListPopulationTest#testAddTooManyChromosomes, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSubtract, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination1DSDS, org.apache.commons.math3.random.MersenneTwisterTest#testFloatDirect, org.apache.commons.math3.util.OpenIntToFieldTest#testContainsKey, org.apache.commons.math3.util.DefaultTransformerTest#testTransformNull, org.apache.commons.math3.util.FastMathTest#testTanhAccuracy, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testTwoAxes, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testConstrainedRosenWithMoreInterpolationPoints, org.apache.commons.math3.util.Decimal64Test#testCosh, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncNeither, org.apache.commons.math3.linear.ArrayFieldVectorTest#testMisc, org.apache.commons.math3.linear.ConjugateGradientTest#testDimensionMismatchSolution, org.apache.commons.math3.complex.ComplexFormatTest#testParseNegativeReal, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testForgottenPrefix, org.apache.commons.math3.complex.ComplexTest#testGetArgument, org.apache.commons.math3.random.Well44497aTest#testNextBeta, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSin, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest#testAccessors, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetRow, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionLeftSide, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiplyNonDiagonalEntry, org.apache.commons.math3.dfp.DfpTest#testReciprocal, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongIAE, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testAdd, org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, org.apache.commons.math3.geometry.euclidean.twod.LineTest#testOriginOffset, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testMaximize, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetRowVector, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulLastRev, org.apache.commons.math3.random.Well512aTest#testNexBytes, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testNullEmpty, org.apache.commons.math3.linear.DiagonalMatrixTest#testSetNonDiagonalZero, org.apache.commons.math3.util.MathArraysTest#testCopyOfDouble2, org.apache.commons.math3.util.MathArraysTest#testCopyOfDouble3, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSampleInsufficientData, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testCopy, org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDaFa, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongPositiveRange, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeY, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeZ, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSample2, org.apache.commons.math3.linear.MatrixUtilsTest#testBigFractionConverter, org.apache.commons.math3.optimization.SimplePointCheckerTest#testIterationCheck, org.apache.commons.math3.util.Decimal64Test#testMultiplyInt, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testEmptyDifference, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeX, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testConcentric, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderPreservingVisitor2, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderPreservingVisitor1, org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitVector, org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderPreservingVisitor3, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testSimplistic, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testRepetition, org.apache.commons.math3.linear.RealVectorTest#testEbeDivideMixedTypes, org.apache.commons.math3.linear.RealVectorFormatTest#testPositiveInfinity, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testMath798WithToleranceTooLow, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMinimize2, org.apache.commons.math3.linear.EigenDecompositionTest#testSquareRoot, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMinimize1, org.apache.commons.math3.analysis.function.LogitTest#testSomeValues, org.apache.commons.math3.distribution.FDistributionTest#testPreconditions, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMinimize2, org.apache.commons.math3.linear.SymmLQTest#testPreconditionedSolution2, org.apache.commons.math3.optim.SimpleValueCheckerTest#testIterationCheck, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMinimize1, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testCopy, org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testCopyConsistency, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations, org.apache.commons.math3.complex.QuaternionTest#testGetInverse, org.apache.commons.math3.linear.ArrayFieldVectorTest#testDataInOut, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testUnboundedSolution, org.apache.commons.math3.linear.SparseRealVectorTest#testGetNorm, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, org.apache.commons.math3.linear.ArrayRealVectorTest#testAddDimensionMismatch, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testInfinite, org.apache.commons.math3.util.ArithmeticUtilsTest#testGcdConsistency, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testIssue716, org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplySameType, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testHahn1, org.apache.commons.math3.fraction.FractionTest#testIntegerOverflow, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPoissonConsistency, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testSerial, org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionBelowSide, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseIgnoredWhitespace, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongPositiveRange, org.apache.commons.math3.complex.QuaternionTest#testSubtractQuaternionQuaternion, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testZero, org.apache.commons.math3.random.EmpiricalDistributionTest#testSerialization, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMath283, org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformFunctionSizeNotAPowerOfTwo, org.apache.commons.math3.linear.FieldMatrixImplTest#testGetRow, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testSine, org.apache.commons.math3.analysis.function.GaussianTest#testDerivativesNaN, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, org.apache.commons.math3.random.ISAACTest#testNexBoolean2, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformIAE, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTwoSets, org.apache.commons.math3.special.BetaTest#testLogBetaNegativePositive, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testRandomPolynomialsFirstDerivative, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDistributionClone, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDfAccessors, org.apache.commons.math3.linear.RealVectorTest#testSetEntryInvalidIndex2, org.apache.commons.math3.linear.RealVectorTest#testSetEntryInvalidIndex1, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testStartSimplexOutsideRange, org.apache.commons.math3.dfp.DfpTest#testPowInt, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinCos, org.apache.commons.math3.linear.SparseRealVectorTest#testMapDivide, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, org.apache.commons.math3.util.Decimal64Test#testSin, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testOverrideVarianceWithMathClass, org.apache.commons.math3.linear.BlockFieldMatrixTest#testScalarAdd, org.apache.commons.math3.distribution.BinomialDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, org.apache.commons.math3.linear.BlockRealMatrixTest#testPremultiplyVector, org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testSingleLink, org.apache.commons.math3.complex.FrenchComplexFormatTest#testGetRealFormat, org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformNegativeToPositiveBounds, org.apache.commons.math3.random.EmpiricalDistributionTest#testGridTooFine, org.apache.commons.math3.complex.QuaternionTest#testDotProductQuaternionQuaternion, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextBeta, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testNoEndPoints, org.apache.commons.math3.util.PrecisionTest#testEqualsIncludingNaNWithAllowedDelta, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math3.util.MathArraysTest#testCheckRectangular, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, org.apache.commons.math3.random.Well19937cTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.optim.linear.SimplexSolverTest#testEpsilon, org.apache.commons.math3.dfp.DfpTest#testRemainderDouble, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfNorm, org.apache.commons.math3.util.MathArraysTest#testEbeAddPrecondition, org.apache.commons.math3.util.ArithmeticUtilsTest#testFactorialFail, org.apache.commons.math3.util.IncrementorTest#testAlternateException, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testRotate, org.apache.commons.math3.distribution.UniformRealDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.linear.SparseRealVectorTest#testConcurrentModification, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntIAE2, org.apache.commons.math3.analysis.function.SincTest#testDerivativeShortcut, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testCompose, org.apache.commons.math3.linear.SparseFieldMatrixTest#testMath209, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPascal, org.apache.commons.math3.random.Well19937aTest#testNextIntNegativeRange, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan, org.apache.commons.math3.util.BigRealTest#testReciprocalOfZero, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetColumnLarge, org.apache.commons.math3.random.ISAACTest#testNextIntDirect, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testSparseIterator, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testProbability, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testWeightSumOverFlow, org.apache.commons.math3.dfp.DfpTest#testAtan, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveSubtract, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongExtremeValues, org.apache.commons.math3.util.FastMathTest#testAtan2SpecialCases, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testNaN, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434PivotRowSelection, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testQuadratic, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testDimensions, org.apache.commons.math3.linear.BiDiagonalTransformerTest#testDimensions, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testInconsistentEquations, org.apache.commons.math3.util.FastMathTest#testIntPow, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncLast, org.apache.commons.math3.primes.PrimesTest#testIsPrime, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testAllButExcluded, org.apache.commons.math3.fraction.FractionTest#testFloatValue, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetEntry, org.apache.commons.math3.random.Well512aTest#testNextIntPositiveRange, org.apache.commons.math3.random.Well19937cTest#testNextUniformIAE, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, org.apache.commons.math3.complex.QuaternionTest#testAccessors1, org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testDensities, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testRosenbrock, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, org.apache.commons.math3.complex.QuaternionTest#testAccessors3, org.apache.commons.math3.complex.QuaternionTest#testAccessors2, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testSerialization, org.apache.commons.math3.stat.descriptive.moment.MeanTest#testCopyConsistency, org.apache.commons.math3.complex.ComplexTest#testAddNaN, org.apache.commons.math3.distribution.NormalDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.linear.RealVectorTest#testGetL1DistanceDimensionMismatch, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog10Definition, org.apache.commons.math3.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, org.apache.commons.math3.random.Well44497aTest#testNextGaussian, org.apache.commons.math3.genetics.ListPopulationTest#testConstructorListOfChromosomesBiggerThanPopulationSize, org.apache.commons.math3.geometry.euclidean.threed.LineTest#testPointDistance, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testString, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math3.random.Well44497bTest#testNextZipf, org.apache.commons.math3.random.Well1024aTest#testNextIntIAE2, org.apache.commons.math3.dfp.DfpTest#testScalb, org.apache.commons.math3.util.FastMathTest#testAtanAccuracy, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testSerialization, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPoisson, org.apache.commons.math3.dfp.DfpTest#testTan, org.apache.commons.math3.special.BetaTest#testLogBetaNanPositive, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, org.apache.commons.math3.linear.BlockRealMatrixTest#testScalarAdd, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testSubtraction, org.apache.commons.math3.util.Decimal64Test#testCopySignDouble, org.apache.commons.math3.random.Well44497bTest#testNextIntIAE, org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testSinFunction, org.apache.commons.math3.distribution.LogNormalDistributionTest#testQuantiles, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testConstrainedRosenWithMoreInterpolationPoints, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math3.random.Well19937aTest#testNextGamma, org.apache.commons.math3.dfp.DfpTest#testDivideDouble, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testCopy, org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionNullVector, org.apache.commons.math3.distribution.UniformRealDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.distribution.GammaDistributionTest#testMoments, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testQuinticZero, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackChebyquad, org.apache.commons.math3.util.ResizableDoubleArrayTest#testMutators, org.apache.commons.math3.random.SynchronizedRandomGeneratorTest#testAdapter, org.apache.commons.math3.complex.QuaternionTest#testProductQuaternionVector, org.apache.commons.math3.fraction.BigFractionTest#testConstructorDouble, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testForgottenSuffix, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testMaximizeQuadratic, org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextZipf, org.apache.commons.math3.special.GammaTest#testInvGamma1pm1Precondition2, org.apache.commons.math3.stat.correlation.CovarianceTest#testSwissFertility, org.apache.commons.math3.random.Well19937aTest#testNextHypergeometric, org.apache.commons.math3.special.GammaTest#testInvGamma1pm1Precondition1, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testDoubleVectors, org.apache.commons.math3.random.Well44497aTest#testNextSample, org.apache.commons.math3.dfp.DfpTest#testIsZero, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testIssue639, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest#testDecomposition3x3, org.apache.commons.math3.linear.LUSolverTest#testThreshold, org.apache.commons.math3.fraction.FractionTest#testDoubleValue, org.apache.commons.math3.linear.SparseRealVectorTest#testAppendScalar, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEvaluation, org.apache.commons.math3.optim.univariate.BracketFinderTest#testCubicMax, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongNegativeRange, org.apache.commons.math3.random.ISAACTest#testConfig, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTangentDefinition, org.apache.commons.math3.optim.PointValuePairTest#testSerial, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNegate, org.apache.commons.math3.random.BitsStreamGeneratorTest#testSeeding, org.apache.commons.math3.random.Well19937aTest#testNextUniformExtremeValues, org.apache.commons.math3.complex.ComplexTest#testSinh, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, org.apache.commons.math3.linear.RealVectorTest#testUnitize, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testSmallStep, org.apache.commons.math3.random.Well44497bTest#testNextLong2, org.apache.commons.math3.ode.FirstOrderConverterTest#testBigStep, org.apache.commons.math3.special.BetaTest#testRegularizedBetaNanPositivePositive, org.apache.commons.math3.ode.ContinuousOutputModelTest#testBoundaries, org.apache.commons.math3.analysis.FunctionUtilsTest#testToMultivariateDifferentiableFunction, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testAckley, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testIssue801, org.apache.commons.math3.complex.ComplexTest#testDivideInf, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testBug20041003, org.apache.commons.math3.random.Well1024aTest#testSeeding, org.apache.commons.math3.random.ISAACTest#testNextIntIAE, org.apache.commons.math3.linear.ArrayRealVectorTest#testAddSameType, org.apache.commons.math3.util.MathArraysTest#testIsMonotonic, org.apache.commons.math3.distribution.TriangularDistributionTest#testSampling, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionInsideOutside, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testQuinticZero, org.apache.commons.math3.analysis.function.LogitTest#testParametricValue, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, org.apache.commons.math3.distribution.FDistributionTest#testSampling, org.apache.commons.math3.fraction.BigFractionTest#testCompareTo, org.apache.commons.math3.linear.QRDecompositionTest#testNonInvertible, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNexBoolean2, org.apache.commons.math3.fraction.BigFractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionInvalidBounds, org.apache.commons.math3.linear.FieldMatrixImplTest#testSetRowVector, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math3.analysis.solvers.MullerSolverTest#testExpm1Function, org.apache.commons.math3.linear.RealVectorTest#testMapAddToSelf, org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testIncompatibleOrder, org.apache.commons.math3.fitting.PolynomialFitterTest#testMath798, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testConsistency, org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedNormOfResidual, org.apache.commons.math3.linear.SparseFieldVectorTest#testMapFunctions, org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideDimensionMismatch, org.apache.commons.math3.analysis.FunctionUtilsTest#testToDifferentiableUnivariateFunction, org.apache.commons.math3.linear.BlockFieldMatrixTest#testTranspose, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.ode.events.EventFilterTest#testHistoryIncreasingBackward, org.apache.commons.math3.distribution.LogNormalDistributionTest#testMeanVariance, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math3.distribution.NormalDistributionTest#testPreconditions, org.apache.commons.math3.linear.RealMatrixFormatTest#testSimpleWithDecimals, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testCrossProduct, org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformExclusiveEndpoints, org.apache.commons.math3.random.Well512aTest#testNextIntIAE2, org.apache.commons.math3.util.FastMathTestPerformance#testCbrt, org.apache.commons.math3.distribution.LevyDistributionTest#testSampling, org.apache.commons.math3.ode.JacobianMatricesTest#testFinalResult, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest#testSinZero, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetRowMatrix, org.apache.commons.math3.linear.FieldLUDecompositionTest#testPPermutation, org.apache.commons.math3.special.ErfTest#testErf2807, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, org.apache.commons.math3.util.Decimal64Test#testAcosh, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testPerformClusterAnalysisDegenerate, org.apache.commons.math3.linear.RealVectorTest#testMapToSelf, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testPowell, org.apache.commons.math3.random.Well19937cTest#testNextBooleanDirect, org.apache.commons.math3.distribution.PoissonDistributionTest#testMean, org.apache.commons.math3.transform.FastHadamardTransformerTest#test8Points, org.apache.commons.math3.linear.FieldMatrixImplTest#testSetColumnMatrix, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testSerial, org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, org.apache.commons.math3.random.Well19937cTest#testNextUniformExtremeValues, org.apache.commons.math3.distribution.BinomialDistributionTest#testIllegalArguments, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex3, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testUnsortedSamples, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex4, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex1, org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex2, org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDensity, org.apache.commons.math3.util.TransformerMapTest#testClasses, org.apache.commons.math3.dfp.DfpTest#testLog10, org.apache.commons.math3.random.Well1024aTest#testNextExponential, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testPValueNearZero, org.apache.commons.math3.linear.BlockFieldMatrixTest#testAdd, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testSerial, org.apache.commons.math3.linear.BlockRealMatrixTest#testWalk, org.apache.commons.math3.stat.inference.GTestTest#testRootLogLikelihood, org.apache.commons.math3.distribution.LogNormalDistributionTest#testPreconditions, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testIterator, org.apache.commons.math3.random.Well512aTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.linear.MatrixUtilsTest#testIsSymmetricTolerance, org.apache.commons.math3.random.EmpiricalDistributionTest#testIsSupportLowerBoundInclusive, org.apache.commons.math3.distribution.CauchyDistributionTest#testMedian, org.apache.commons.math3.special.GammaTest#testLogGamma, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetEntry, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongOrderVector, org.apache.commons.math3.complex.ComplexTest#testLogZero, org.apache.commons.math3.linear.BiDiagonalTransformerTest#testSingularMatrix, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testAckley, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetMatrixLarge, org.apache.commons.math3.linear.BlockRealMatrixTest#testSetRowVector, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testAllButExcluded, org.apache.commons.math3.random.Well19937cTest#testNextGamma, org.apache.commons.math3.complex.ComplexTest#testDivideZero, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, org.apache.commons.math3.special.BetaTest#testRegularizedBetaZeroPositivePositive, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPreconditions, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testIncrementation, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, org.apache.commons.math3.random.ISAACTest#testNextPermutation, org.apache.commons.math3.complex.ComplexTest#testConjugateNaN, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, org.apache.commons.math3.distribution.CauchyDistributionTest#testConsistency, org.apache.commons.math3.distribution.FDistributionTest#testIllegalArguments, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar, org.apache.commons.math3.linear.SingularValueDecompositionTest#testDimensions, org.apache.commons.math3.linear.LUDecompositionTest#testNonSquare, org.apache.commons.math3.dfp.DfpTest#testLog1p, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testRevert, org.apache.commons.math3.util.OpenIntToFieldTest#testRemove2, org.apache.commons.math3.random.Well19937aTest#testNextLongWideRange, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest#testGetRMS, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testQuaternion, org.apache.commons.math3.util.MathUtilsTest#testSignShort, org.apache.commons.math3.linear.ArrayRealVectorTest#testOuterProductSameType, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testSerial, org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSetQuantile, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTrivial, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testNaN, org.apache.commons.math3.analysis.solvers.MullerSolverTest#testSinFunction, org.apache.commons.math3.random.EmpiricalDistributionTest#testDoubleLoad, org.apache.commons.math3.util.FastMathTestPerformance#testSinh, org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverExample2, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEvaluation, org.apache.commons.math3.complex.ComplexTest#testHashCode, org.apache.commons.math3.random.Well1024aTest#testNextPoisson, org.apache.commons.math3.complex.ComplexTest#testAtanNaN, org.apache.commons.math3.random.ValueServerTest#testEmptyReplayFile, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNegativeComponent, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testSparseIterator, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDegenerateFullSample, org.apache.commons.math3.fraction.BigFractionTest#testPercentage, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.fraction.BigFractionTest#testDigitLimitConstructor, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testConsistency, org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetColumnMatrix, org.apache.commons.math3.distribution.UniformRealDistributionTest#testMeanVariance, org.apache.commons.math3.random.ISAACTest#testReseed, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextInversionDeviate, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testSymmetry, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNan, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testQuinticMax, org.apache.commons.math3.dfp.DfpDecTest#testRound, org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testMatrix, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testSerialization, org.apache.commons.math3.linear.BlockRealMatrixTest#testCopySubMatrix, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testMultiplication, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveBadAccuracy, org.apache.commons.math3.random.ISAACTest#testSeeding, org.apache.commons.math3.random.Well19937aTest#testNextLongNegativeRange, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, org.apache.commons.math3.util.TransformerMapTest#testContainsTransformer, org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfMixedTypes, org.apache.commons.math3.random.Well512aTest#testNextChiSquare, org.apache.commons.math3.random.ValueServerTest#testFixedSeed, org.apache.commons.math3.random.Well44497bTest#testNextSample, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutOnExisting, org.apache.commons.math3.linear.RealVectorTest#testSetEntry, org.apache.commons.math3.linear.RealMatrixFormatTest#tesNegativeInfinity, org.apache.commons.math3.special.ErfTest#testErf3291, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testInfinite, org.apache.commons.math3.distribution.NormalDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.fraction.FractionFieldTest#testSerial, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testNegate, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testCopy, org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionAboveSide, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testConstant, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math3.util.OpenIntToFieldTest#testIterator, org.apache.commons.math3.linear.EigenDecompositionTest#testUnsymmetric, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testLonglySimpleVar, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testSerial, org.apache.commons.math3.stat.StatUtilsTest#testVariance, org.apache.commons.math3.distribution.CauchyDistributionTest#testCumulativeProbabilities, org.apache.commons.math3.complex.ComplexTest#testScalarPowZero, org.apache.commons.math3.linear.RealVectorFormatTest#testForgottenSuffix, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes1, org.apache.commons.math3.dfp.DfpTest#testAcos, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes2, org.apache.commons.math3.dfp.DfpTest#testCos, org.apache.commons.math3.util.MultidimensionalCounterTest#testIterationConsistency, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetColumn, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testDefaultFormatRealVectorImpl, org.apache.commons.math3.stat.StatUtilsTest#testPopulationVariance, org.apache.commons.math3.analysis.function.LogitTest#testDerivativesHighOrder, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest#testNoOptimum, org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testQuinticFunction, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest#testMath789, org.apache.commons.math3.random.RandomDataGeneratorTest#testConfig, org.apache.commons.math3.complex.ComplexTest#testScalarAddInf, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testMoreThanOnePeriodCoverage, org.apache.commons.math3.linear.QRDecompositionTest#testRUpperTriangular, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNormInf, org.apache.commons.math3.linear.BlockRealMatrixTest#testMath209, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testMath341, org.apache.commons.math3.complex.ComplexTest#testScalarMultiplyInf, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest#testAccessors, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNan, org.apache.commons.math3.linear.RealMatrixFormatTest#testNegativeSecondRow, org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionBelowSide, org.apache.commons.math3.geometry.euclidean.twod.LineTest#testOffset, org.apache.commons.math3.analysis.FunctionUtilsTest#testToUnivariateDifferential, org.apache.commons.math3.util.BigRealTest#testMultiply, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math3.complex.ComplexFormatTest#testZeroReal, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testStats, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest#testWilcoxonSignedRankSimple, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowReciprocalPow, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBrownDennis, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntNegativeToPositiveRange, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testSample, org.apache.commons.math3.linear.BlockRealMatrixTest#testGetRowVector, org.apache.commons.math3.linear.SingularValueDecompositionTest#testRank, org.apache.commons.math3.util.IncrementorTest#testReset, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math3.special.GammaTest#testTrigamma, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testConstraintsUnsupported, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testReseed, org.apache.commons.math3.linear.RealVectorTest#testGetLInfDistanceSameType, org.apache.commons.math3.genetics.ListPopulationTest#testConstructorPopulationLimitNotPositive, org.apache.commons.math3.linear.SymmLQTest#testPreconditionedNormOfResidual, org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaPValue, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongDirect, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongOrder, org.apache.commons.math3.util.FastMathTestPerformance#testPow, org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNegativeAll, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testCigTab, org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineLeftNullVector, org.apache.commons.math3.random.MersenneTwisterTest#testNextExponential, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testRosen, org.apache.commons.math3.dfp.DfpTest#testAsinh, org.apache.commons.math3.optim.linear.SimplexSolverTest#testSingleVariableAndConstraint, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetRMS, org.apache.commons.math3.genetics.ChromosomeTest#testCompareTo, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testQuinticMin, org.apache.commons.math3.distribution.CauchyDistributionTest#testDensities, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextHypergeometric, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackWatson, org.apache.commons.math3.stat.descriptive.summary.SumTest#testCopy, org.apache.commons.math3.linear.SparseRealMatrixTest#testSubMatrix, org.apache.commons.math3.complex.ComplexTest#testEqualsImaginaryDifference, org.apache.commons.math3.special.GammaTest#testGamma, org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionLeftSide, org.apache.commons.math3.util.FastMathTest#testLogAccuracy, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testSingularities, org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math3.linear.QRSolverTest#testUnderdetermined, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testHole, org.apache.commons.math3.ode.FirstOrderConverterTest#testDecreasingSteps, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEvaluateArraySegmentWeighted, org.apache.commons.math3.complex.ComplexTest#testAcosInf, org.apache.commons.math3.stat.descriptive.rank.MaxTest#testSerialization, org.apache.commons.math3.complex.ComplexTest#testEqualsTrue, org.apache.commons.math3.random.Well44497bTest#testNextIntExtremeValues, org.apache.commons.math3.analysis.function.SigmoidTest#testDerivative, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testSerialization, org.apache.commons.math3.stat.FrequencyTest#testAdd, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testNonInvertible, org.apache.commons.math3.linear.BlockFieldMatrixTest#testMath209, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, org.apache.commons.math3.linear.SparseRealMatrixTest#testSerial, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAsin, org.apache.commons.math3.util.OpenIntToFieldTest#testRemoveAbsent, org.apache.commons.math3.optim.linear.SimplexSolverTest#testSimplexSolver, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetRowVector, org.apache.commons.math3.distribution.ZipfDistributionTest#testConsistencyAtSupportBounds, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testMinEndpoints, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testAxisAngle, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanh, org.apache.commons.math3.optimization.linear.SimplexSolverTest#testLargeModel, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testKeepInitIfBest, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testOrthogonal, org.apache.commons.math3.linear.RealVectorTest#testAppendVector, org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape142, org.apache.commons.math3.linear.SparseRealVectorTest#testCombineDimensionMismatchSameType, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextBooleanDirect, org.apache.commons.math3.util.Decimal64Test#testRint, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testCircleFittingGoodInit, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testMath855, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNan, org.apache.commons.math3.complex.FrenchComplexFormatTest#testTrimOneImaginary, org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testCopyConsistency, org.apache.commons.math3.random.EmpiricalDistributionTest#testBinIndexOverflow, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testInsufficientData, org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, org.apache.commons.math3.optimization.SimplePointCheckerTest#testIterationCheckPrecondition, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveXY, org.apache.commons.math3.complex.ComplexTest#testNthRoot_normal_thirdRoot, org.apache.commons.math3.util.PrecisionTest#testMath843, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testPopulation, org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossover, org.apache.commons.math3.linear.FieldMatrixImplTest#testSetColumn, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testXor, org.apache.commons.math3.linear.LUDecompositionTest#testLLowerTriangular, org.apache.commons.math3.random.Well44497aTest#testNextIntWideRange, org.apache.commons.math3.linear.ArrayRealVectorTest#testIsNaN, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth1, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testSinMin, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth2, org.apache.commons.math3.linear.BlockFieldMatrixTest#testMultiply2, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testInference, org.apache.commons.math3.util.MathArraysTest#testEbeMultiply, org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitizeNullVector, org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath290GEQ, org.apache.commons.math3.dfp.DfpTest#testLongConstructor, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testCigar, org.apache.commons.math3.util.FastMathTest#testAtan2Accuracy, org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroImaginary, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testFixedState, org.apache.commons.math3.random.RandomDataGeneratorTest#testReseed, org.apache.commons.math3.linear.DiagonalMatrixTest#testSetSubMatrix, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math3.stat.inference.TestUtilsTest#testOneWayAnovaUtils, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, org.apache.commons.math3.fitting.PolynomialFitterTest#testMath798WithToleranceTooLow, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntPositiveRange, org.apache.commons.math3.fraction.FractionFormatTest#testParseZero2, org.apache.commons.math3.fraction.FractionFormatTest#testParseZero1, org.apache.commons.math3.complex.ComplexTest#testSqrtNaN, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testHalfInfiniteNeg, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testQuintic, org.apache.commons.math3.distribution.LevyDistributionTest#testConsistency, org.apache.commons.math3.complex.ComplexUtilsTest#testConvertToComplex, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testThreeRedundantColumn, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testEquals, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testOnePointParabola, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testOverrideVarianceWithMathClass, org.apache.commons.math3.analysis.function.SigmoidTest#testDerivativeLargeArguments, org.apache.commons.math3.linear.BlockFieldMatrixTest#testCopyFunctions, org.apache.commons.math3.linear.SymmLQTest#testDimensionMismatchRightHandSide, org.apache.commons.math3.util.BigRealTest#testDivisionByZero, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEvaluation, org.apache.commons.math3.distribution.TriangularDistributionTest#testConsistency, org.apache.commons.math3.distribution.LevyDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.random.Well44497aTest#testNextLongDirect, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testConfig, org.apache.commons.math3.linear.RealMatrixFormatTest#testNegativeComponent, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testDefaultFormatVector3D, org.apache.commons.math3.exception.NotPositiveExceptionTest#testAccessors, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, org.apache.commons.math3.linear.SparseRealVectorTest#testUnitize, org.apache.commons.math3.distribution.LogNormalDistributionTest#testIsSupportUpperBoundInclusive, org.apache.commons.math3.dfp.DfpTest#testCopySign, org.apache.commons.math3.optimization.general.MinpackTest#testMinpackHelicalValley, org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetColumnLarge, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testHalfInfiniteNeg, org.apache.commons.math3.random.Well44497bTest#testNextHex, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testMixedDerivatives, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testSphere, org.apache.commons.math3.distribution.TDistributionTest#testPreconditions, org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape100, org.apache.commons.math3.linear.SparseFieldMatrixTest#testTrace, org.apache.commons.math3.random.Well1024aTest#testNextSample, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAdd, org.apache.commons.math3.random.ISAACTest#testNextInt2, org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformPositiveBounds, org.apache.commons.math3.random.Well19937cTest#testNexBoolean2, org.apache.commons.math3.stat.regression.SimpleRegressionTest#testCorr, org.apache.commons.math3.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testIncrementation, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testInsert, org.apache.commons.math3.fraction.BigFractionTest#testBigDecimalValue, org.apache.commons.math3.util.MathArraysTest#testL1DistanceDouble, org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testSinMin, org.apache.commons.math3.linear.BlockRealMatrixTest#testNorm, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testGetField, org.apache.commons.math3.util.Decimal64Test#testEquals, org.apache.commons.math3.linear.FieldMatrixImplTest#testExamples, org.apache.commons.math3.util.ResizableDoubleArrayTest#testAddElementRolling, org.apache.commons.math3.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math3.linear.EigenSolverTest#testInvertible, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistanceSq, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes1, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes2, org.apache.commons.math3.linear.SingularValueSolverTest#testSolveDimensionErrors, org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfDimensionMismatchMixedTypes, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testVectorialProducts, org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiplyEntry, org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDaFa, org.apache.commons.math3.complex.ComplexTest#testPow, org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetRowMatrix, org.apache.commons.math3.random.Well44497bTest#testNextPermutation, org.apache.commons.math3.util.DefaultTransformerTest#testTransformBigDecimal, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testMath832, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testOffset, org.apache.commons.math3.fraction.BigFractionTest#testConstructor, org.apache.commons.math3.special.GammaTest#testRegularizedGammaZeroPositive, org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextChiSquare, org.apache.commons.math3.fraction.FractionFormatTest#testFormatNegative, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSampleNullData, org.apache.commons.math3.linear.FieldMatrixImplTest#testSetRow, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest#serialization, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAbs, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testChoppedHexagon, org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFF2, org.apache.commons.math3.random.Well44497aTest#testReferenceCode, org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFF3, org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFF4, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest#testAccessors, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testRastrigin, org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextExponential], jUnit5Tests=[], jacocoIncludes=[org.apache.commons.*], jacocoExcludes=[java.*], family=SPECTRUM_BASED, spectrumFormula=OP2, computeSpoonResults=false}
Computing tests from config.
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testWeightedVariance, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformComplex, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testGTestGoodnesOfFit, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInitOutofbounds2, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testXSampleDataNull, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCeil, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetChiSquare, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInitOutofbounds1, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testAlphaRangeBelowZero, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiply1, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetNumericalMean, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testDuplicatedAbscissa, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMinMax, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testNegativeMean, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapAdd, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testNonPositiveDefinitePreconditioner, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testEmptySampleDerivative, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRootN, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalReal, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCheckFinite, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDotProduct, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testPointAt, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest#testConcurrentCreation, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testMath864, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapSubtractToSelf, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testDerivative, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAccurateDotProduct, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideReal, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testIsNaN, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testScalarMultiplyDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testClosest, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testDerivativeLargeArguments, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testZero, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testPercentage, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplyDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFaFa, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiplyNonDiagonalZero, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testOneOrderConstructor, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination2DSDS, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddMixedTypes, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testOptimumOutsideRange, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testStandardTransformReal, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testSumDeltaMinusDeltaSum, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testArrayEqualsIncludingNaN, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAcos, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNegativeComponent2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testMath798WithToleranceTooLowButNoException, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testRandomPolynomialsValuesOnly, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testSimpleBenchmark, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testSchurForm, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testHahn1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testCompareDerivativeSigmoid, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testNegativeMinPts, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testChromosomes, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testSin, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testOverrideGeoMeanWithMathClass, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testInitOutOfBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarAddNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testScalb, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAsinSpecialCases, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsWithRelativeTolerance, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetL1DistanceSameType, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SegmentTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionMixedTypes, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSubtractDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testGaussianCase, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcMaple, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAcosSpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog1p, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testPowInt, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testYSampleDataNull, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testNonPositiveDefiniteLinearOperator, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testAngles, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfInvNaN, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testGetField, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testProjectionSameType, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testRandomData, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BisectionSolverTest#testMath369, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSin, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testDerivativeLargeArguments, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testIteratorPreconditions, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPow, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDaFa, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testOuterProduct, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testIncrement, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testConstrainedRosen, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleDataXNull, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testOppositeHyperplanes, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testTooFewSamples, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAtan2, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCopySignByte, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIssue942, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testRandomData, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testSimilar, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAcosAccuracy, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDF2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDF3, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDF4, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInputSigmaOutOfRange, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testCumulativeProbabilityAgainstStackOverflow, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSubtractDouble, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434UnfeasibleSolution, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testCrossProductCancellation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testIntersection, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testSumSinc, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testSignumFloat, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCopySignDouble, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinhDefinition, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanhAtanh, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAppendScalar, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2LargeK, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testNormalDistributionUnsymmetricMatrix, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLog1pSpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testMath798, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testTwoArgumentErf, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testPreconditionedSolution, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testGetIterations, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testComputeSigma, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfMixedTypes, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testRepresentableDelta, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testSine, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testEmptySampleValue, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testDivide, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetL1DistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testRandomDataNormalDistribution, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCompositionOneVariableY, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAccurateCrossProduct, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCompositionOneVariableX, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricGradient, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricGradient, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testContains, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testToString, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSampleInvalidData, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetDimension, [Manual]TestMethod=org.apache.commons.math3.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAsinh, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testStartSimplexInsideRange, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSqrtPow2, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testAddDifferentiable, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedNormOfResidual, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testInvalidRepresentation, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanAtan, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testDimensionMismatchSolution, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNoIntercept_noint1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarDivideZero, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testSqrt, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testParameters, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNormSq, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDF3, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDF4, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDF2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testScale, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testNegativeEps, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1DistanceSameType, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunction, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetNumericalMean, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testPCorr, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testCreate, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math3.exception.MaxCountExceededExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testMath644, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testGetArrayRef, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLinearCombination1, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLinearCombination2, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testWikipedia, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testTwoOppositeFilters, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testComposeDifferentiable, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeSubtractPrecondition, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BracketFinderTest#testCubicMin, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testOuterProductSameType, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testDivideField, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNormSq, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAtanh, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testProjectionNullVector, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testIsInfinite, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testWrongDimension, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testNonSquarePreconditioner, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsIncludingNaN, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testFit, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testEllipse, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testTan, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testEllipse, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncFirst, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testChromosomeListConstructorTooLow, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCosh, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testLog1p, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddMixedTypes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testHalfInfinitePos, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testRatioTooLow, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testIssue631, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testOuterProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testMultiplyDouble, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testMultiplyField, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions4, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions3, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest#testLinearFunction2D, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testUnitVector, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testSsDiffPow, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testLog10, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testRelativeToleranceOnScaledValues, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetLInfDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest#testCumulativeDensityFunction, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testCrossProduct, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckOrder, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testAEqualPHPt, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckNonNegative, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCosh, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSubtractField, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testDivideDouble, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMap, [Manual]TestMethod=org.apache.commons.math3.filter.KalmanFilterTest#testTransitionMeasurementMatrixMismatch, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath713NegativeVariable, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testIndices, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath781, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testGetEps, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testInfinite, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testGetUniqueCount, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSubtractSameType, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testTinyVariationsData, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAbs, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testGetOptimaBeforeOptimize, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testHypot, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarDivideInf, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPow, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSample2, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testKernelOverrideUniform, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSignum, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRound, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testBlockInverse, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testDoubleVectors, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape1000, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BracketFinderTest#testCubicMin, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testHash, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCopySignByte2, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testUnitVectorNullVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testJacobiOrthogonality, [Manual]TestMethod=org.apache.commons.math3.linear.OpenMapRealMatrixTest#testMath679, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testSortInPlaceFailures, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testNegate, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveMultiply, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testThreePoints, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testInterval, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulFirstRev, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testMath832, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit03, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit04, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit01, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex4, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit02, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit07, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit05, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit06, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSummaryConsistency, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSum, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testUnbounded, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAddField, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAppendScalar, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapSubtract, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncNeither, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testThresholdPositive, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testIssue464, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testMath855, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testLeastSquareSolve, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.exception.util.ArgUtilsTest#testFlatten, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testDefaultFormatComplex, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.AbstractRealDistributionTest#testContinuous, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testQuaternionEquals, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testIssue801, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testOverrideMeanWithMathClass, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreTest#testInverse, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitize, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testWeightedProduct, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulLastRev, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testLonglySimpleCov, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeAdd, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testDiagonalRosen, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2Overflow, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testRandomDataNormalDistribution, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRegressIfaceMethod, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapDivideToSelf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testMatrix, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testIdentity, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testArray, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMinMaxFloat, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarSubtractInf, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSine, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.util.BigRealFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math3.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BracketFinderTest#testCubicMax, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testZero, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testConvergenceOnFunctionAccuracy, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testMeanVariance, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAtan2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testToDifferentiableMultivariateFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testToString, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddSameType, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapAddToSelf, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testRastrigin, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testCrossings, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testGradientComponent5, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMaximize2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testSetPopulationLimitTooSmall, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMaximize1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapMultiplyToSelf, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testIssue639, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testCreateError, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testSetElitismRate, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1DistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpMathTest#testSin, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAtan, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math3.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDataRef, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testDelete1, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testCompareSigmoid, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SqrtTest#testDerivativeComparison, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testTablet, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.RetryRunnerTest#testRetryFailSometimes, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncNeitherRev, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongOrderMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testMultiplyDifferentiable, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testIssue880Complete, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testEndPoints, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testIdentity, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testContains, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testCompositionRules, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testMessageChain, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testMismatchedOperatorDimensions, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testProblemDimensionTooSmall, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testEventManagement, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testBoundedSqrt, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAddDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testTranslate, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetLInfNorm, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath290LEQ, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testMatrix, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testIssue639, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testCombine, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncLast, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testMergeCollection, [Manual]TestMethod=org.apache.commons.math3.ode.events.ReappearingEventTest#testDormandPrince, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage6, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage5, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testDimensionMismatchRightHandSide, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapToSelf, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testElliRotated, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testMulti2UniConversion, [Manual]TestMethod=org.apache.commons.math3.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAddDouble, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension1, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testNoArgAddMessage, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension3, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension2, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckNonNegative2D, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testZeroExpectedCounts, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapDivide, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testCigar, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testDuplicatedAbscissa, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testToArray, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineLeftNullVector, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testMissedEndEvent, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testTinyVariationsData, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncFirst, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulBothRev, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testNumberIsTooLargeException, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testNavigation, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.optim.SimplePointCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testExpm1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testRosen, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionSameType, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetNonDiagonalEntry, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddToEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddToEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddToEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddToEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#test2DDataUnitary, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfGnu, [Manual]TestMethod=org.apache.commons.math3.optim.SimplePointCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.ode.events.OverlappingEventsTest#testOverlappingEvents0, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.ode.events.OverlappingEventsTest#testOverlappingEvents1, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRemainderField, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testHyperbolicInverses, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testSerialize, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testSsDiffPow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveRemainder, [Manual]TestMethod=org.apache.commons.math3.genetics.FixedElapsedTimeTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionNullVector, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypot, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testSinglePoint, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testProjectionMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testWave, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testMath340, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testWrongDimension, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMinMaxDouble, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLog10K, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSignum, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testDivideDouble, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testUnitVector, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testElliRotated, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testStartSimplexInsideRange, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedResidual, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.GradientFunctionTest#test2DDistance, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1Norm, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BracketFinderTest#testIntervalBoundsOrdering, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncLastRev, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testBounds, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testSummaryConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testStartSimplexInsideRange, [Manual]TestMethod=org.apache.commons.math3.distribution.AbstractIntegerDistributionTest#testCumulativeProbabilitiesRangeArguments, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testZeroVectors, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformRealInvalidDataSize, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformReal, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434NegativeVariable, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongStepSize, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testCompareToMaxUlps, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testHessenbergForm, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulLast, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testMath718, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMath905LargeNegative, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowDouble, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testRank, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testMultipleColumnsRequired, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInputSigmaDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSampleWrongBounds, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionSameType, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.random.SynchronizedRandomGeneratorTest#testMath899Sync, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpMathTest#testPow, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testField, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPowNaNBase, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testBevington, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testBoundariesDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetSubMatrixError, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testPTOrthogonal, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testRootLogLikelihood, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testMaxIterationsPositive, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testToArray, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testOuterProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testCigarWithBoundaries, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotSpecial, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeDivideDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.util.PairTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape1, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaOutOfRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath713NegativeVariable, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testMath798WithToleranceTooLowButNoException, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowInt, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapAdd, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testIssue880Simplified, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapMultiplyToSelf, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMinMax, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testTolerance, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testMath785, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape8, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLegendreOrthogonality, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testInitialMixture, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapAddToSelf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testMath475, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformComplexSizeNotAPowerOfTwo, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSample, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting2, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testSortInPlaceExample, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductSameType, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRint, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog10Power, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.RetryRunnerTest#testRetryFailAlways, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testHash, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testWampler3, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testMath519, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testLineIntersection, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testWampler1, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testWampler2, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testCircleFittingGoodInit, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math3.optimization.SimplePointCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testUnivariateDistribution, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testSolveLowerTriangularSystem, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSubtractDouble, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testKirby2, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncLastRev, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testLargeArguments, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testInitOutOfBounds, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testBoundsUnsupported, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testFilippelli, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCbrt, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCoshDefinition, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotNeglectible, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapMultiply, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleInsufficientData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncFirstRev, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLogExp, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetEntryOutOfRange, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulBoth, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testJacobiEvaluationAt1, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetSupportLowerBound, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testUnbounded, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testIssue567, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testDotProductDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testCluster, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testAccessor, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testMath308, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testRatioTooHigh, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricValue, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testQuaternionEquals2, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeSubtract, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testTooLargeFirstStep, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseZeroComponent, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testRevert, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSinc, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testSingularPoint, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFF2, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testYVariance, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFF3, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFF4, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPowInf, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testBetaRangeBelowMinusOne, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionOutsideOutside, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaMinusLogGammaSumPrecondition1, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFF2, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFF3, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFF4, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testDifference, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineLeftNullVector, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPowNaNExponent, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineRightNullVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.BetaDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testToArray, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalImaginary, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaMinusLogGammaSumPrecondition2, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulNeither, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testGLSEfficiency, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsIncludingNaNWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testBoundariesDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testShortcut, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath293, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleInvalidData, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testDerivatives1Dot2Normalized, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testDerivatives1Dot2Unnormalized, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInitOutofbounds1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInitOutofbounds2, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testPreconditionPositiveWeights, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testAllPropertiesCorrespondToKeys, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCeil, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex4, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testFloor, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testTransform, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math3.fitting.CurveFitterTest#testMath304, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testStability2, [Manual]TestMethod=org.apache.commons.math3.fitting.CurveFitterTest#testMath303, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testStability1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSampleNullNumberOfPoints, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testPTOrthogonal, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfInt2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfInt3, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedSolution, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulNeitherRev, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testTanh, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testOneRedundantColumn, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSinh, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleDataYNull, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testExpm1, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testSinhAccuracy, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination2DoubleDS, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testHistoryIncreasingForward, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler1, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDoubleValueForLargeNumeratorAndDenominator, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler2, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedSolutionWithInitialGuess, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testPOrthogonal, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorSameType, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testBoundariesDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testSquareRootNonSymmetric, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler3, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler4, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalInf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testNonJaggedData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAsin, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMath904, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverExample, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testSample, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testMismatchedOperatorDimensions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testDefaultFormatComplex, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLog1pAccuracy, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testChebyshevOrthogonality, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testYVariance, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testPowAccuracy, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testConvergenceOnFunctionAccuracy, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionBoundaryOutside, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testPOrthogonal, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaMinusLogGammaSum, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testNonEmptyData, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorMixedType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarDivideNaN, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testSingleUp, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testWikipedia, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.CurveFitterTest#testMath372, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSqrt, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest#testInverse, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testMath296withoutWeights, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntIAE, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarSubtract, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetCovarianceMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSubtractDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testDoubleRotations, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testAddElements, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testMisc, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSpecialConstructors, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapAdd, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testFloatScalbSpecialCases, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testFloor, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1DistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.stat.inference.MannWhitneyUTestTest#testMannWhitneyUSimple, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplyMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedSolution2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMinMax, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotNoOverflow, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testNoEndPoints, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapSubtractToSelf, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math3.util.PairTest#testAccessor, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testEuler, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAsinh, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testAEqualPTPt, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testSinMinWithValueChecker, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLogSpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest#testAllMonomials, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeDivide, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math3.stat.inference.MannWhitneyUTestTest#testBigDataSet, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath290LEQ, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCopySignField, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testRevert, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testSingular, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testDerivatives, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testIsPowerOfTwo, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulFirstRev, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative, [Manual]TestMethod=org.apache.commons.math3.util.BigRealFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition1, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition2, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition3, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition4, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testUnmatchedArrays, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testSolveUpperTriangularSystem, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testConvergenceException, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.util.BigRealFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testSinAccuracy, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testKirby2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionInsideOutside, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineSameType, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testIncompatibleIntialMixture, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testLineDistance, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExpm1, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testUnion, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testExceptions, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testRegressAirlineConstantExternal, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncBoth, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testInsufficientOrder3, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1DistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testInsufficientOrder2, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testInsufficientOrder1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSubtractMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.distribution.AbstractIntegerDistributionTest#testCumulativeProbabilitiesSingleArguments, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testDefaultFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testIntersection, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testNegativeTestAddMultipleObs, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplyMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testHahn1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapSubtractToSelf, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplyMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testReSeed, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPower10K, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math3.primes.PrimesTest#testPrimeFactors, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedSolutionWithInitialGuess, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testIssue464, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testOnePointParabola, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreTest#testCos, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleVectorValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testHalfBounded, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testSeveralSegments, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.stat.inference.MannWhitneyUTestTest#testMannWhitneyUInputValidation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddToEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddToEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalZero, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testProbability, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testContains, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformFunctionInvalidBounds, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeMultiplyPrecondition, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfDouble, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSet, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSet, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testConstructorTooLow, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testToString, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineRightNullVector, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAccurateCrossProduct, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformRealInvalidDataSize, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetSupportUpperBound, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddSameType, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleVectorValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedSolution, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testGetLowerBound, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testSeveralSegments, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMinimize2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMinimize1, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAddInf, [Manual]TestMethod=org.apache.commons.math3.optim.PointVectorValuePairTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCeil, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testIsNaN, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapMultiplyToSelf, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCopySignField, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testInverseConditionNumber, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMultiplyInfInf, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testCos, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testDiffPow, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testAlphaRangeAboveTwo, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testByteConstructor, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testChromosomeListConstructorTooHigh, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.CurveFitterTest#testMath304, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.CurveFitterTest#testMath303, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfSameType, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testSetElitismRateTooLow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanhDefinition, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplySameType, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAppendVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testPowDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testKirby2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExp, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotDefinition, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testExpm1Accuracy, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testIssue801, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testDoubleRotations, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testConstrainedRosen, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testScalb, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineRightNullVector, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulBothRev, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetLInfDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCompare, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testSerializeUnserializable, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testMathpbx02, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testMathpbx03, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNoInterceot_noint2, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseOne1, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testLargeSample, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseOne2, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapSubtract, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testLonglyByRow, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1DistanceSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testOverrideMeanWithMathClass, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRint, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleVectorValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformReal, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testDegeneracy, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testConstraintsUnsupported, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testCosh, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigarWithBoundaries, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testOptimumOutsideRange, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions5, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testCanIncrement2, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions6, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination1DoubleDS, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testCanIncrement1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions3, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions4, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen, [Manual]TestMethod=org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaPValueSummaryStatistics, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testExp, [Manual]TestMethod=org.apache.commons.math3.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcInvInfinite, [Manual]TestMethod=org.apache.commons.math3.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSquareRoot, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testGetBinUpperBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testMixedDerivatives, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testIntersection, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLaguerreOrthogonality, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testGetUpperBound, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testMaximize, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testHistoryDecreasingForward, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testCrossProductCancellation, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAcosh, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcInv, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testGeneratorConfig, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCosAcos, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testAboveMaxCount, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testMissingMaxEval, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCbrtDefinition, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testHypot, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testPoint, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testAngles, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.optimization.PointVectorValuePairTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testZeroDivide, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testGLSOLSConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testRandomPolynomialsFirstDerivative, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionInsideBoundary, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetSupportLowerBound, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLog1p, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testDerivative, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testLowAccuracyExternalDifferentiation, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testNegativeObservedCounts, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testLog, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testSample, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath930, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testSetSubVector, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testAPEqualQR, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest#testFullRank, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testGradient, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testArray, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineSameType, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNoNaNsFailed, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testDefaultFormat, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testMakotoNishimura, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIssue780, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testTablet, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.GradientFunctionTest#test3DDistance, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineSameType, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testGetScale, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testIncompatibleParams, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434PivotRowSelection2, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testWrongDimension, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testToRadians, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testMath844, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testObjectEquals, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testLcmLong, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfSameType, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAppendVector, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedNormOfResidual, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testRegressAirlineConstantInternal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineSameType, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testNullDataset, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testIssue721, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAtanh, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testOneParameterConstructor, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapMultiply, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testGammaNegativeInteger, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossoverDimensionMismatchException, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testNonUnitWeightSum, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineSameType, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testHadamard, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFaFa, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testSize, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBeta, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckPositive, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedSolution, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSubtractDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testKirby2, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BracketFinderTest#testMinimumIsOnIntervalBoundary, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testHash, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testDoubleNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testYSampleDataNull, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorSameType, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testStartSimplexOutsideRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongIAE, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testNormalizeFail, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testPowField, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testDecreasingOnly, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testNeta, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testHistoryDecreasingBackward, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage5, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage6, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testHighAccuracyExternalDifferentiation, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testInconsistentSizes2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testHdiagConstant, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testFixingArguments, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpDecTest#testRoundDecimal10, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testInconsistentSizes1, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testMath320B, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainder, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAtan2, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testEndpointBehavior, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit02, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testIsInfinite, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit03, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit04, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit05, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit01, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testConstrainedRosen, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit06, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit07, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingGoodInit, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828Cycle, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAtan2, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testSingular, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testLessThanOnePeriodCoverage, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testCauchyCase, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonSelfAdjointOperator, [Manual]TestMethod=org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetSupportUpperBound, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testDerivativeZero, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinAsin, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapDivideToSelf, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testDotProductSameType, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testAbscissa, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testInvGamma1pm1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIsSupportConnected, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testCbrtAccuracy, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testHdiag, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMath905LargePositive, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfNorm, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCos, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricValue, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testIsMonotonicComparable, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math3.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricValue, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testDiffPow, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest#testGetChiSquare, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testKernelOverrideConstant, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testShift, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAcos, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testIsSupportConnected, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRemainderField, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMissingOrders, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testXSampleDataNull, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulBoth, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfInv, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAddField, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfInvInfinite, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSqrt, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSet, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#checkMissingFastMathClasses, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testGetNumberOfRoots, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testIntConstructor, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testTrimOneImaginary, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434PivotRowSelection2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRootN, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testNoVariance, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testNextDouble, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testMath848, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGamma1pPrecondition1, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFailed, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGamma1pPrecondition2, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testSimilar, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcInvNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCopySign, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverDimensionMismatchException, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testScaleInPlace, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.exception.DimensionMismatchExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testNoMissingFrenchTranslation, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath828Cycle, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testComputeRoots, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testFitAccuracyDependsOnBoundary, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testMultiplyField, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testUnlimitedSubHyperplane, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest#testAllMonomials, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testDotProductDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSubtractInf, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexTableauTest#testDropPhase1Objective, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testGetUpperBound, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath290GEQ, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfSameType, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testDivideInt, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAtanI, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testSampleWithZeroCovariance, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testGetData, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testSubsetRegression, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testGTestIndependance, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testOneColumn, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testOverrideGeoMeanWithMathClass, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testVariableWithoutDerivative1, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testMaximizeQuadratic, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testVariableWithoutDerivative0, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testIssue914, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testSupport, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testSumDeltaMinusDeltaSumPrecondition2, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testSumDeltaMinusDeltaSumPrecondition1, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testGcdLong, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testNonSquareOperator, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHash, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testUnbounded, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testStartSimplexInsideRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testEndPoints, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRemainder, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongNumberOfPoints, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBadMaximumIterations, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMinimize2, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMinimize1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testHalfBounded, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion1, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testBoundsUnsupported, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testSearch, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1DistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testCoshAccuracy, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SqrtTest#testDerivativesHighOrder, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testPowSpecialCases, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCbrtPow3, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBracketEndpointRoot, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCbrt, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventStateTest#closeEvents, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.random.UnitSphereRandomVectorGeneratorTest#test2DDistribution, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventStateTest#testIssue695, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testNormalizeArray, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testContext, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideMixedTypes, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testNoSegments, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExpm1Definition, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1Norm, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testSqueezedHexa, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testTan, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncFirstRev, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexTableauTest#testDropPhase1Objective, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testConstructor3, [Manual]TestMethod=org.apache.commons.math3.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testDerivatives, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulLast, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSinh, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testToRadiansDefinition, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAtan, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplyDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest#testToString, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testConstructorsOK, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testProjectionDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testSetSubVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testQuinticMinStatistics, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testBetaRangeAboveOne, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testHyperbolic, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testLowPercentile, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders4, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders5, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders2, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders3, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders8, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders9, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders6, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testVariable, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders7, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplySameType, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders1, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveAdd, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testSwissFertilityByRow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiplyDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDotProduct, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedInPlaceSolutionWithInitialGuess, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testCompareToEpsilon, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompNonMeanCutoff, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testTwoAxes, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAcosh, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarDivide, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testFitAccuracyDependsOnBoundary, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testTanAccuracy, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMaximize1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMaximize2, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testPreMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.exception.OutOfRangeExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#nistData, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulNeither, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testPValueNearZero, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testRandomPolynomialsValuesOnly, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSparseIterator, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testPerformClusterAnalysisToManyClusters, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionBoundaryBoundary, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAsin, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testSpace, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testWeightedMean, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDimension, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testBadAlpha, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorMixedType, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testAckley, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.fitting.CurveFitterTest#testMath372, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testSmallDistances, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossoverDimensionMismatchException, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testGetMinPts, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testMultiply, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testReduceComparedWithNormalizeAngle, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompMeanCutoff, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionInsideBoundary, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testFit, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testInternalDifferentiation, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testUnitVectorNullVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing2, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing1, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testScaling, [Manual]TestMethod=org.apache.commons.math3.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncBothRev, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testCoordinatesCtoS, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testSinMinWithValueChecker, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiplyInt, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTan, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testZero, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinhAsinh, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testZeroNumberOfRoots, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testNormalize2, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testNormalize1, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testOptimumOutsideRange, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testLargeSample, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testCollector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionMixedTypes, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowField, [Manual]TestMethod=org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest#testWilcoxonSignedRankInputValidation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRootN, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBadInitial, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.util.PairTest#testHashCode, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest#testComputeSigma, [Manual]TestMethod=org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testConstructorOK, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testBelowMaxCount, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testDerivativesHighOrder, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPower10, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestIndependance1, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestIndependance2, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestIndependance3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testEventManagement, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionOutsideOutside, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCbrt, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithClosingRowSeparator, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testCertainSpace, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSubtractSameType, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtanh, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarSubtractNaN, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testNoOpEnglishTranslation, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testMath274, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testMath798, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAsinAccuracy, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testNullFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinh, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionInvalidDataSize, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCheckSymmetric1, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434PivotRowSelection, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCheckSymmetric2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testHahn1, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testNull, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2NegativeN, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testReference, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetL1Norm, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog1pDefinition, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorMixedType, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog1pExpm1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testIssue947, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testAddNonDiagonalZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testFit, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testOuterProduct, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCheckNotNull1, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCheckNotNull2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testSortInPlace, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testGetShape, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleNullData, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testPolarForm, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.filter.KalmanFilterTest#testConstantAcceleration, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAccurateDotProduct, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath828, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulFirst, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testSquareRoot, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testTanh, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplyDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testIsInfinite, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testConstructorTooHigh, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testGradientComponent1Component2Component3, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testAddQuaternionQuaternion, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCopySignDouble, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BracketFinderTest#testMinimumIsOnIntervalBoundary, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testHash, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testTooLargeStep, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testOuterProductSameType, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testMultiplicationRules, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIssue596, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath293, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension3MultipleRoot, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetNorm, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSignum, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSubtractMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testExp, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDF3, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDF4, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRound, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDF2, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testFloatNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMap, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFittingGoodInit, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMaximize2, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testInsufficientOrder3, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpDecTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMaximize1, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetNumericalVariance, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testHypot, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPowField, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testToDegreesDefinition, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testIsPureQuaternion, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testIntersection, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaPrecondition1, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaPrecondition2, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, [Manual]TestMethod=org.apache.commons.math3.util.FastMathStrictComparisonTest#test1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddMixedTypes, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath781, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetDimension, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncBothRev, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSqrt, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testArray, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testBoundsUnsupported, [Manual]TestMethod=org.apache.commons.math3.ode.events.ReappearingEventTest#testGragg, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCos, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testJacobiLegendre, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonSelfAdjointPreconditioner, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionInvalidDataSize, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncNeitherRev, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BracketFinderTest#testIntervalBoundsOrdering, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testVariablePartsConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testHeaviside, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434UnfeasibleSolution, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSubtractField, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testSignumDouble, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest#testCos, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testMissedEndEvent, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testDefaultFormatVector3D, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testOuterProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTaylorPolynomial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest#testParaboloid2D, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testExp, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMaximize2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMaximize1, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testMath848, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionBoundaryOutside, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPowDouble, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testStandardTransformFunction, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideImaginary, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testMath832, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testNegativeTestAddObs, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#checkExtraFastMathClasses, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testSetPopulationLimit, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testIncreasingOnly, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testParallel, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInfinite, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonSquareOperator, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testHalfInfinitePos, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSubtractMixedTypes, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math3.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testAllKeysPresentInPropertiesFiles, [Manual]TestMethod=org.apache.commons.math3.filter.KalmanFilterTest#testTransitionControlMatrixMismatch, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testIntValue, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testDivideField, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncBoth, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testMathIllegalState3, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testMathIllegalState2, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testMathIllegalState1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testZeroVectors, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testBadFunction, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testInconsistentSizes2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testInconsistentSizes1, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testAddNonDiagonalEntry, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLog, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testSimplyConnected, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLogWithBase, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testIsInfinite, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testExceptions, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcGnu, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestGoodnesOfFit3, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestGoodnesOfFit2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testAnalyticalDifferentiation, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testHasIntercept, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testChromosomeListConstructorPopulationLimitNotPositive, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAddField, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestGoodnesOfFit1, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testSingleDown, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testGradientComponent0Component4, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testSetElitismRateTooHigh, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math3.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest#testBadFunction, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testGetIterations, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434NegativeVariable, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math3.optim.SimplePointCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testCigTab, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLog, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeDividePrecondition, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonSquarePreconditioner, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testCompute, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testIntersection3, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testIntersection2, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTooLargeOrder, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeDivideSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPower, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonPositiveDefinitePreconditioner, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExpression, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testReduce, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testFloatValueForLargeNumeratorAndDenominator, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testNonMeanCutoffs, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAdd, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testMultiplyInt, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTaylorAtan2, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSubtractDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testIsNaN, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.optimization.PointValuePairTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testHermiteOrthogonality, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math3.distribution.AbstractRealDistributionTest#testDiscontinuous, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testBoundsUnsupported, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testOptimumOutsideRange, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testBevington, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testGetField, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testMath835, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetNumericalVariance, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape10, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformRealSizeNotAPowerOfTwo, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalNaN, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testCumulativeProbabilitySpecial, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAbs, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionInsideInside, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testMath844, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math3.util.PairTest#testAccessor2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testHessian, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testDerivativesWithInverseFunction, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCoshAcosh, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionInvalidBounds, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testRelativeToleranceOnScaledValues, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testDegeneracy, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCeilFloorRintLong, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testBoundariesDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAddDouble, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testUnbounded, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testExpm1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMap, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testToString, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testValueWithInverseFunction, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRound, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testComposeMismatchedDimensions, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformRealFirstElementNotZero, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testConstrainedRosen, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainderField, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testSymmetry, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLog10Accuracy, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testTanh, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideZeroZero, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFaFa, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testDiffPow, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCopySignField, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAsin, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testExpAccuracy, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetNorm, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulFirst, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTrigo, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testIsSymmetric, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testParameterizable, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRootNSingularity, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testSquareRootNonPositiveDefinite, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testStair, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testDoubleScalbSpecialCases, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionInsideInside, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders19, [Manual]TestMethod=org.apache.commons.math3.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders17, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders18, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testConstants, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testQuinticMinStatistics, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testHalfBounded, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders20, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testMissingSearchInterval, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testSumSinc, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testNoSegments, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2SpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders11, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders12, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders10, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders15, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders16, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGamma1p, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders13, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders14, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testSymmetric, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedInPlaceSolutionWithInitialGuess, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainderDouble, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testWrongVariableIndex, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SqrtTest#testComparison, [Manual]TestMethod=org.apache.commons.math3.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSample, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSubtractField, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testDisjointPolygons, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapDivide, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSubtractSameType, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testFloatEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal1, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testGetLowerBound, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testAddTooManyChromosomesSingleCall, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFitting2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testTooLargeFirstStep, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testIsUnitQuaternion, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal3, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal2, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal5, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal4, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal6, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapDivideToSelf, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testWeightedSum, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulNeitherRev, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testMerge, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunction, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testCosAccuracy, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testProductQuaternionQuaternion, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiplyField, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testDegRad, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfInt, [Manual]TestMethod=org.apache.commons.math3.primes.PrimesTest#testNextPrime, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLinearCombinationInfinite, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testBug20040520, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest#testMessage, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitVectorNullVector, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedResidual, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testExpSpecialCases, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInputSigmaNegative, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRemainderDouble, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testEmptySample, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testMath798, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMath864, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAcos, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testCoordinatesStoC, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testBulkIncrement, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testEventsScheduling, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRegressExceptions, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSqrtDefinition, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSampleNegativeNumberOfPoints, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testMath519, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testDivideField, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossoverDimensionMismatchException, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testPower, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testUnitizeNullVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math3.filter.KalmanFilterTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testDerivative, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testToDegrees, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSample, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testMultiplyDouble, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testConjugate, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testHalfBounded, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage6, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testRandomUnsymmetricMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage5, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testDotProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testFloor, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testKeepInitIfBest, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapToSelf, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testNormalize, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testUnitizeNullVector, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testFasterThanNewton, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionBoundaryBoundary, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testSingularities, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSignPredicates, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testAddObsGetNClear, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testAddTooManyChromosomes, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination1DSDS, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testTanhAccuracy, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testTwoAxes, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testConstrainedRosenWithMoreInterpolationPoints, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCosh, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncNeither, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testDimensionMismatchSolution, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSin, [Manual]TestMethod=org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiplyNonDiagonalEntry, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testOriginOffset, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testMaximize, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulLastRev, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetNonDiagonalZero, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfDouble2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfDouble3, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSampleInsufficientData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDaFa, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSample2, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math3.optimization.SimplePointCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testMultiplyInt, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testEmptyDifference, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testConcentric, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitVector, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testRepetition, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeDivideMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testMath798WithToleranceTooLow, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMinimize2, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testSquareRoot, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMinimize1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMinimize2, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testPreconditionedSolution2, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMinimize1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testGetInverse, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetNorm, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testInfinite, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testGcdConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testIssue716, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplySameType, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testHahn1, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testSubtractQuaternionQuaternion, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testZero, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformFunctionSizeNotAPowerOfTwo, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testSine, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testDerivativesNaN, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testRandomPolynomialsFirstDerivative, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testStartSimplexOutsideRange, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPowInt, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinCos, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapDivide, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSin, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testOverrideVarianceWithMathClass, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testSingleLink, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testDotProductQuaternionQuaternion, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testNoEndPoints, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsIncludingNaNWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckRectangular, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRemainderDouble, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfNorm, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeAddPrecondition, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testAlternateException, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testRotate, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testDerivativeShortcut, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testReciprocalOfZero, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testSparseIterator, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testProbability, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testWeightSumOverFlow, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAtan, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveSubtract, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAtan2SpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434PivotRowSelection, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testIntPow, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncLast, [Manual]TestMethod=org.apache.commons.math3.primes.PrimesTest#testIsPrime, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testAllButExcluded, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testAccessors1, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testAccessors3, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testAccessors2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetL1DistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog10Definition, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testConstructorListOfChromosomesBiggerThanPopulationSize, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testPointDistance, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testScalb, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAtanAccuracy, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testTan, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCopySignDouble, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testConstrainedRosenWithMoreInterpolationPoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testDivideDouble, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionNullVector, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math3.random.SynchronizedRandomGeneratorTest#testAdapter, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testProductQuaternionVector, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testMaximizeQuadratic, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testInvGamma1pm1Precondition2, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testInvGamma1pm1Precondition1, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testDoubleVectors, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testIsZero, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testIssue639, [Manual]TestMethod=org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest#testDecomposition3x3, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAppendScalar, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BracketFinderTest#testCubicMax, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTangentDefinition, [Manual]TestMethod=org.apache.commons.math3.optim.PointValuePairTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testUnitize, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math3.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testToMultivariateDifferentiableFunction, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testAckley, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testIssue801, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideInf, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testBug20041003, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddSameType, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testIsMonotonic, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionInsideOutside, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricValue, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionInvalidBounds, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapAddToSelf, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testIncompatibleOrder, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testMath798, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedNormOfResidual, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testToDifferentiableUnivariateFunction, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testHistoryIncreasingBackward, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testMeanVariance, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testCrossProduct, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testCbrt, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testFinalResult, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAcosh, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testPerformClusterAnalysisDegenerate, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapToSelf, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math3.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testUnsortedSamples, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex4, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLog10, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testPValueNearZero, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testRootLogLikelihood, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testIsSymmetricTolerance, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGamma, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongOrderVector, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testSingularMatrix, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testAckley, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testAllButExcluded, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLog1p, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testRevert, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest#testGetRMS, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testOuterProductSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testSinh, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverExample2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testEmptyReplayFile, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNegativeComponent, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testSparseIterator, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testPercentage, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testMeanVariance, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testSymmetry, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpDecTest#testRound, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveBadAccuracy, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testFixedSeed, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testInfinite, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testUnsymmetric, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testLonglySimpleVar, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPowZero, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes1, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAcos, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCos, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testIterationConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testDefaultFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testPopulationVariance, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testDerivativesHighOrder, [Manual]TestMethod=org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest#testMath789, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarAddInf, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testMoreThanOnePeriodCoverage, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testMath341, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNegativeSecondRow, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testOffset, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testToUnivariateDifferential, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest#testWilcoxonSignedRankSimple, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowReciprocalPow, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testSample, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testRank, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testReset, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testConstraintsUnsupported, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetLInfDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testConstructorPopulationLimitNotPositive, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testPreconditionedNormOfResidual, [Manual]TestMethod=org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongOrder, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testPow, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testCigTab, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineLeftNullVector, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testRosen, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAsinh, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetRMS, [Manual]TestMethod=org.apache.commons.math3.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testGamma, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLogAccuracy, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testSingularities, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testHole, [Manual]TestMethod=org.apache.commons.math3.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testDerivative, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAsin, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanh, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testKeepInitIfBest, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAppendVector, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape142, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRint, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testCircleFittingGoodInit, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testMath855, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testTrimOneImaginary, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, [Manual]TestMethod=org.apache.commons.math3.optimization.SimplePointCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testMath843, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testXor, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testIsNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth1, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth2, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitizeNullVector, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath290GEQ, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLongConstructor, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testCigar, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAtan2Accuracy, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testMath798WithToleranceTooLow, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseZero2, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseZero1, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testHalfInfiniteNeg, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testConvertToComplex, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testThreeRedundantColumn, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testOnePointParabola, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testOverrideVarianceWithMathClass, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testDerivativeLargeArguments, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testDimensionMismatchRightHandSide, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testDivisionByZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNegativeComponent, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testDefaultFormatVector3D, [Manual]TestMethod=org.apache.commons.math3.exception.NotPositiveExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testUnitize, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCopySign, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testHalfInfiniteNeg, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testMixedDerivatives, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape100, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testInsert, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testGetField, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testEquals, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes1, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes2, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiplyEntry, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDaFa, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testMath832, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testOffset, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSampleNullData, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testChoppedHexagon, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFF2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFF3, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFF4, [Manual]TestMethod=org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testRastrigin, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextExponential], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@60c16548}
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testWeightedVariance, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformComplex, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testGTestGoodnesOfFit, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInitOutofbounds2, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testXSampleDataNull, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCeil, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetChiSquare, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInitOutofbounds1, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testAlphaRangeBelowZero, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiply1, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetNumericalMean, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testDuplicatedAbscissa, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMinMax, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testNegativeMean, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapAdd, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testNonPositiveDefinitePreconditioner, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testEmptySampleDerivative, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRootN, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalReal, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCheckFinite, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDotProduct, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testPointAt, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest#testConcurrentCreation, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testMath864, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapSubtractToSelf, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testDerivative, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAccurateDotProduct, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideReal, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testIsNaN, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testScalarMultiplyDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testClosest, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testDerivativeLargeArguments, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testZero, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testPercentage, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplyDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFaFa, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiplyNonDiagonalZero, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testOneOrderConstructor, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination2DSDS, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddMixedTypes, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testOptimumOutsideRange, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testStandardTransformReal, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testSumDeltaMinusDeltaSum, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testArrayEqualsIncludingNaN, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAcos, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNegativeComponent2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testMath798WithToleranceTooLowButNoException, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testRandomPolynomialsValuesOnly, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testSimpleBenchmark, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testSchurForm, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testHahn1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testCompareDerivativeSigmoid, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testNegativeMinPts, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testChromosomes, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testSin, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testOverrideGeoMeanWithMathClass, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testInitOutOfBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarAddNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testScalb, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAsinSpecialCases, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsWithRelativeTolerance, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetL1DistanceSameType, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SegmentTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionMixedTypes, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSubtractDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testGaussianCase, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcMaple, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAcosSpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog1p, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testPowInt, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testYSampleDataNull, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testNonPositiveDefiniteLinearOperator, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testAngles, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfInvNaN, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testGetField, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testProjectionSameType, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testRandomData, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BisectionSolverTest#testMath369, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSin, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testDerivativeLargeArguments, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testIteratorPreconditions, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPow, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDaFa, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testOuterProduct, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testIncrement, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testConstrainedRosen, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleDataXNull, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testOppositeHyperplanes, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testTooFewSamples, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAtan2, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCopySignByte, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIssue942, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testRandomData, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testSimilar, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAcosAccuracy, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDF2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDF3, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDF4, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInputSigmaOutOfRange, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testCumulativeProbabilityAgainstStackOverflow, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSubtractDouble, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434UnfeasibleSolution, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testCrossProductCancellation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testIntersection, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testSumSinc, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testSignumFloat, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCopySignDouble, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinhDefinition, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanhAtanh, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAppendScalar, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2LargeK, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testNormalDistributionUnsymmetricMatrix, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLog1pSpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testMath798, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testTwoArgumentErf, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testPreconditionedSolution, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testGetIterations, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testComputeSigma, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfMixedTypes, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testRepresentableDelta, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testSine, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testEmptySampleValue, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testDivide, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetL1DistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testRandomDataNormalDistribution, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCompositionOneVariableY, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAccurateCrossProduct, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCompositionOneVariableX, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricGradient, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricGradient, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testContains, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testToString, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSampleInvalidData, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetDimension, [Manual]TestMethod=org.apache.commons.math3.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAsinh, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testStartSimplexInsideRange, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSqrtPow2, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testAddDifferentiable, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedNormOfResidual, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testInvalidRepresentation, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanAtan, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testDimensionMismatchSolution, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNoIntercept_noint1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarDivideZero, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testSqrt, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testParameters, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNormSq, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDF3, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDF4, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationDF2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testScale, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testNegativeEps, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1DistanceSameType, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunction, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetNumericalMean, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testPCorr, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testCreate, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math3.exception.MaxCountExceededExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testMath644, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testGetArrayRef, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLinearCombination1, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLinearCombination2, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testWikipedia, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testTwoOppositeFilters, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testComposeDifferentiable, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeSubtractPrecondition, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BracketFinderTest#testCubicMin, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testOuterProductSameType, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testDivideField, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNormSq, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAtanh, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testProjectionNullVector, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testIsInfinite, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testWrongDimension, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testNonSquarePreconditioner, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsIncludingNaN, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testFit, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testEllipse, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testTan, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testEllipse, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncFirst, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testChromosomeListConstructorTooLow, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCosh, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testLog1p, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddMixedTypes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testHalfInfinitePos, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testRatioTooLow, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testIssue631, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testOuterProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testMultiplyDouble, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testMultiplyField, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions4, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions3, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest#testLinearFunction2D, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testUnitVector, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testSsDiffPow, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testLog10, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testRelativeToleranceOnScaledValues, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetLInfDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest#testCumulativeDensityFunction, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testCrossProduct, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckOrder, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testAEqualPHPt, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckNonNegative, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCosh, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSubtractField, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testDivideDouble, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMap, [Manual]TestMethod=org.apache.commons.math3.filter.KalmanFilterTest#testTransitionMeasurementMatrixMismatch, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath713NegativeVariable, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testIndices, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath781, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testGetEps, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testInfinite, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testGetUniqueCount, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSubtractSameType, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testTinyVariationsData, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAbs, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testGetOptimaBeforeOptimize, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testHypot, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarDivideInf, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPow, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSample2, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testKernelOverrideUniform, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSignum, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRound, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testBlockInverse, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testDoubleVectors, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape1000, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BracketFinderTest#testCubicMin, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testHash, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCopySignByte2, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testUnitVectorNullVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testJacobiOrthogonality, [Manual]TestMethod=org.apache.commons.math3.linear.OpenMapRealMatrixTest#testMath679, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testSortInPlaceFailures, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testNegate, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveMultiply, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testThreePoints, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testInterval, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulFirstRev, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testMath832, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit03, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit04, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit01, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex4, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit02, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit07, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit05, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testFit06, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSummaryConsistency, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSum, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testUnbounded, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAddField, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAppendScalar, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapSubtract, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncNeither, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testThresholdPositive, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testIssue464, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testMath855, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testLeastSquareSolve, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.exception.util.ArgUtilsTest#testFlatten, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testDefaultFormatComplex, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.AbstractRealDistributionTest#testContinuous, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testQuaternionEquals, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testIssue801, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testOverrideMeanWithMathClass, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreTest#testInverse, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitize, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testWeightedProduct, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulLastRev, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testLonglySimpleCov, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeAdd, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testDiagonalRosen, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2Overflow, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testRandomDataNormalDistribution, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRegressIfaceMethod, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapDivideToSelf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testMatrix, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testIdentity, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testArray, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMinMaxFloat, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarSubtractInf, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSine, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.util.BigRealFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math3.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BracketFinderTest#testCubicMax, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testZero, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testConvergenceOnFunctionAccuracy, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testMeanVariance, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAtan2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testToDifferentiableMultivariateFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testToString, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddSameType, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapAddToSelf, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testRastrigin, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testCrossings, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testGradientComponent5, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMaximize2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testSetPopulationLimitTooSmall, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMaximize1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapMultiplyToSelf, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testIssue639, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testCreateError, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testSetElitismRate, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1DistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpMathTest#testSin, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAtan, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math3.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDataRef, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testDelete1, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testCompareSigmoid, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SqrtTest#testDerivativeComparison, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testTablet, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.RetryRunnerTest#testRetryFailSometimes, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncNeitherRev, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongOrderMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testMultiplyDifferentiable, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testIssue880Complete, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testEndPoints, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testIdentity, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testContains, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testCompositionRules, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testMessageChain, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testMismatchedOperatorDimensions, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testProblemDimensionTooSmall, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testEventManagement, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testBoundedSqrt, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAddDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testTranslate, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetLInfNorm, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath290LEQ, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testMatrix, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testIssue639, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testCombine, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncLast, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testMergeCollection, [Manual]TestMethod=org.apache.commons.math3.ode.events.ReappearingEventTest#testDormandPrince, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage6, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage5, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testDimensionMismatchRightHandSide, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapToSelf, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testElliRotated, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testMulti2UniConversion, [Manual]TestMethod=org.apache.commons.math3.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAddDouble, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension1, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testNoArgAddMessage, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension3, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension2, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckNonNegative2D, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testZeroExpectedCounts, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapDivide, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testCigar, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testDuplicatedAbscissa, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testToArray, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineLeftNullVector, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testMissedEndEvent, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testTinyVariationsData, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncFirst, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulBothRev, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testNumberIsTooLargeException, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testNavigation, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.optim.SimplePointCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testExpm1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testRosen, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionSameType, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetNonDiagonalEntry, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddToEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddToEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddToEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddToEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#test2DDataUnitary, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfGnu, [Manual]TestMethod=org.apache.commons.math3.optim.SimplePointCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.ode.events.OverlappingEventsTest#testOverlappingEvents0, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.ode.events.OverlappingEventsTest#testOverlappingEvents1, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRemainderField, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testHyperbolicInverses, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testSerialize, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testSsDiffPow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveRemainder, [Manual]TestMethod=org.apache.commons.math3.genetics.FixedElapsedTimeTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionNullVector, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypot, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testSinglePoint, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testProjectionMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testWave, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testMath340, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testWrongDimension, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMinMaxDouble, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLog10K, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSignum, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testDivideDouble, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testUnitVector, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testElliRotated, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testStartSimplexInsideRange, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedResidual, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.GradientFunctionTest#test2DDistance, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1Norm, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BracketFinderTest#testIntervalBoundsOrdering, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncLastRev, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testBounds, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testSummaryConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testStartSimplexInsideRange, [Manual]TestMethod=org.apache.commons.math3.distribution.AbstractIntegerDistributionTest#testCumulativeProbabilitiesRangeArguments, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testZeroVectors, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformRealInvalidDataSize, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformReal, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434NegativeVariable, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongStepSize, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testCompareToMaxUlps, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testHessenbergForm, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulLast, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testMath718, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMath905LargeNegative, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowDouble, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testRank, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testMultipleColumnsRequired, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInputSigmaDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSampleWrongBounds, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionSameType, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.random.SynchronizedRandomGeneratorTest#testMath899Sync, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpMathTest#testPow, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testField, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPowNaNBase, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testBevington, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testBoundariesDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetSubMatrixError, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testPTOrthogonal, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testRootLogLikelihood, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testMaxIterationsPositive, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testToArray, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testOuterProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testCigarWithBoundaries, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotSpecial, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeDivideDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.util.PairTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape1, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaOutOfRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath713NegativeVariable, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testMath798WithToleranceTooLowButNoException, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowInt, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapAdd, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testIssue880Simplified, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapMultiplyToSelf, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMinMax, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testTolerance, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testMath785, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape8, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLegendreOrthogonality, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testInitialMixture, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapAddToSelf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testMath475, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformComplexSizeNotAPowerOfTwo, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSample, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting2, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testSortInPlaceExample, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductSameType, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRint, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog10Power, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testDotProductDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.RetryRunnerTest#testRetryFailAlways, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testHash, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testWampler3, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testMath519, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testLineIntersection, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testWampler1, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testWampler2, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testCircleFittingGoodInit, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math3.optimization.SimplePointCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testUnivariateDistribution, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testSolveLowerTriangularSystem, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSubtractDouble, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testKirby2, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncLastRev, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testLargeArguments, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testInitOutOfBounds, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testBoundsUnsupported, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testFilippelli, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCbrt, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCoshDefinition, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotNeglectible, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapMultiply, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleInsufficientData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncFirstRev, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLogExp, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetEntryOutOfRange, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulBoth, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testJacobiEvaluationAt1, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetSupportLowerBound, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testUnbounded, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testIssue567, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testDotProductDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testCluster, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testAccessor, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testMath308, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testRatioTooHigh, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricValue, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testQuaternionEquals2, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeSubtract, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testTooLargeFirstStep, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseZeroComponent, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testRevert, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSinc, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testSingularPoint, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFF2, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testYVariance, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFF3, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFF4, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPowInf, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testBetaRangeBelowMinusOne, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionOutsideOutside, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaMinusLogGammaSumPrecondition1, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFF2, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFF3, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFF4, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testDifference, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineLeftNullVector, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPowNaNExponent, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineRightNullVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.BetaDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testToArray, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalImaginary, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaMinusLogGammaSumPrecondition2, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulNeither, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testGLSEfficiency, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsIncludingNaNWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testBoundariesDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testShortcut, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath293, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleInvalidData, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testDerivatives1Dot2Normalized, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testDerivatives1Dot2Unnormalized, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInitOutofbounds1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInitOutofbounds2, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testPreconditionPositiveWeights, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testAllPropertiesCorrespondToKeys, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCeil, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex4, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testFloor, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testTransform, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math3.fitting.CurveFitterTest#testMath304, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testStability2, [Manual]TestMethod=org.apache.commons.math3.fitting.CurveFitterTest#testMath303, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testStability1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSampleNullNumberOfPoints, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testPTOrthogonal, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfInt2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfInt3, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedSolution, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulNeitherRev, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testTanh, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testOneRedundantColumn, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSinh, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleDataYNull, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testExpm1, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testSinhAccuracy, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination2DoubleDS, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testHistoryIncreasingForward, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler1, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDoubleValueForLargeNumeratorAndDenominator, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler2, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedSolutionWithInitialGuess, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testPOrthogonal, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorSameType, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testBoundariesDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testSquareRootNonSymmetric, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler3, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testWampler4, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalInf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testNonJaggedData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAsin, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMath904, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverExample, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testSample, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testMismatchedOperatorDimensions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testDefaultFormatComplex, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLog1pAccuracy, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testChebyshevOrthogonality, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testYVariance, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testPowAccuracy, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testConvergenceOnFunctionAccuracy, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionBoundaryOutside, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testPOrthogonal, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaMinusLogGammaSum, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testNonEmptyData, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorMixedType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarDivideNaN, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testSingleUp, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testWikipedia, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.CurveFitterTest#testMath372, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSqrt, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest#testInverse, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testMath296withoutWeights, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntIAE, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarSubtract, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetCovarianceMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSubtractDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testDoubleRotations, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testAddElements, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testMisc, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSpecialConstructors, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapAdd, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testFloatScalbSpecialCases, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testFloor, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.HessenbergTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1DistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.stat.inference.MannWhitneyUTestTest#testMannWhitneyUSimple, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplyMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedSolution2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMinMax, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotNoOverflow, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testNoEndPoints, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapSubtractToSelf, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math3.util.PairTest#testAccessor, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testEuler, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAsinh, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testAEqualPTPt, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testSinMinWithValueChecker, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLogSpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest#testAllMonomials, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeDivide, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math3.stat.inference.MannWhitneyUTestTest#testBigDataSet, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath290LEQ, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCopySignField, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testRevert, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testSingular, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testDerivatives, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testIsPowerOfTwo, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulFirstRev, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative, [Manual]TestMethod=org.apache.commons.math3.util.BigRealFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition1, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition2, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition3, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogGammaSumPrecondition4, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testUnmatchedArrays, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testSolveUpperTriangularSystem, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testConvergenceException, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.util.BigRealFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testSinAccuracy, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testKirby2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionInsideOutside, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineSameType, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testIncompatibleIntialMixture, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testLineDistance, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExpm1, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testUnion, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testExceptions, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testRegressAirlineConstantExternal, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncBoth, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testInsufficientOrder3, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1DistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testInsufficientOrder2, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testInsufficientOrder1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSubtractMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.distribution.AbstractIntegerDistributionTest#testCumulativeProbabilitiesSingleArguments, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testDefaultFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testIntersection, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testNegativeTestAddMultipleObs, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplyMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testHahn1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapSubtractToSelf, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplyMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testReSeed, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInOptimizedOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPower10K, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math3.primes.PrimesTest#testPrimeFactors, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedSolutionWithInitialGuess, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest#testIssue464, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testOnePointParabola, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreTest#testCos, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleVectorValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testHalfBounded, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testSeveralSegments, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.stat.inference.MannWhitneyUTestTest#testMannWhitneyUInputValidation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddToEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddToEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalZero, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testProbability, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testContains, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformFunctionInvalidBounds, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeMultiplyPrecondition, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfDouble, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSet, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSet, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testConstructorTooLow, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testToString, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineRightNullVector, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAccurateCrossProduct, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformRealInvalidDataSize, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetSupportUpperBound, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAddSameType, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleVectorValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedSolution, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testGetLowerBound, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testSeveralSegments, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMinimize2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMinimize1, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAddInf, [Manual]TestMethod=org.apache.commons.math3.optim.PointVectorValuePairTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCeil, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testIsNaN, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapMultiplyToSelf, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCopySignField, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testInverseConditionNumber, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMultiplyInfInf, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testCos, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testDiffPow, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testAlphaRangeAboveTwo, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testByteConstructor, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testChromosomeListConstructorTooHigh, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.CurveFitterTest#testMath304, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.CurveFitterTest#testMath303, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfSameType, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testSetElitismRateTooLow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanhDefinition, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplySameType, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAppendVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testPowDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testKirby2, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExp, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHypotDefinition, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testExpm1Accuracy, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testIssue801, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testDoubleRotations, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testConstrainedRosen, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testScalb, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineRightNullVector, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulBothRev, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetLInfDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCompare, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testSerializeUnserializable, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testMathpbx02, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testMathpbx03, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testNoInterceot_noint2, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseOne1, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testLargeSample, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseOne2, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapSubtract, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testLonglyByRow, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1DistanceSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testOverrideMeanWithMathClass, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRint, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleVectorValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformReal, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testDegeneracy, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testConstraintsUnsupported, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testCosh, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigarWithBoundaries, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testOptimumOutsideRange, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions5, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testCanIncrement2, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions6, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination1DoubleDS, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testCanIncrement1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions3, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions4, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen, [Manual]TestMethod=org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaPValueSummaryStatistics, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testExp, [Manual]TestMethod=org.apache.commons.math3.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcInvInfinite, [Manual]TestMethod=org.apache.commons.math3.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSquareRoot, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testGetBinUpperBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testMixedDerivatives, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testIntersection, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLaguerreOrthogonality, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testGetUpperBound, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testMaximize, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testHistoryDecreasingForward, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testCrossProductCancellation, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAcosh, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcInv, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testGeneratorConfig, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCosAcos, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testAboveMaxCount, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testMissingMaxEval, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCbrtDefinition, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testHypot, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testPoint, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testAngles, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.optimization.PointVectorValuePairTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testZeroDivide, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testGLSOLSConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testRandomPolynomialsFirstDerivative, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionInsideBoundary, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetSupportLowerBound, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLog1p, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testDerivative, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testLowAccuracyExternalDifferentiation, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testNegativeObservedCounts, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testLog, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testSample, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath930, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testSetSubVector, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testAPEqualQR, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest#testFullRank, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testGradient, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testArray, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineSameType, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNoNaNsFailed, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testDefaultFormat, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testMakotoNishimura, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIssue780, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testTablet, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.GradientFunctionTest#test3DDistance, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineSameType, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testGetScale, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testIncompatibleParams, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434PivotRowSelection2, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testWrongDimension, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testToRadians, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#testMath844, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testObjectEquals, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testLcmLong, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfSameType, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAppendVector, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedNormOfResidual, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testRegressAirlineConstantInternal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineSameType, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testNullDataset, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testIssue721, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAtanh, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testOneParameterConstructor, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapMultiply, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testGammaNegativeInteger, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossoverDimensionMismatchException, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testNonUnitWeightSum, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineSameType, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testHadamard, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationFaFa, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testSize, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBeta, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckPositive, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testPreconditionedSolution, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSubtractDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testKirby2, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BracketFinderTest#testMinimumIsOnIntervalBoundary, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testHash, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testDoubleNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testYSampleDataNull, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorSameType, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testStartSimplexOutsideRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureLongIAE, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testNormalizeFail, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testPowField, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testDecreasingOnly, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testNeta, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testHistoryDecreasingBackward, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage5, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage6, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testHighAccuracyExternalDifferentiation, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testInconsistentSizes2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testHdiagConstant, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testFixingArguments, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpDecTest#testRoundDecimal10, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testInconsistentSizes1, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testMath320B, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainder, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testAtan2, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testEndpointBehavior, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit02, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testIsInfinite, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit03, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit04, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit05, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit01, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testConstrainedRosen, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit06, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.GaussianFitterTest#testFit07, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingGoodInit, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828Cycle, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAtan2, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testSingular, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testLessThanOnePeriodCoverage, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testCauchyCase, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonSelfAdjointOperator, [Manual]TestMethod=org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetSupportUpperBound, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testDerivativeZero, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinAsin, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapDivideToSelf, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testDotProductSameType, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testAbscissa, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testInvGamma1pm1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testIsSupportConnected, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testCbrtAccuracy, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testHdiag, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testMath905LargePositive, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfNorm, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCos, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricValue, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testIsMonotonicComparable, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math3.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.analysis.function.HarmonicOscillatorTest#testParametricValue, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testDiffPow, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest#testGetChiSquare, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testKernelOverrideConstant, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testShift, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAcos, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.IllinoisSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testIsSupportConnected, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRemainderField, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMissingOrders, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testXSampleDataNull, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulBoth, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfInv, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAddField, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfInvInfinite, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSqrt, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSet, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#checkMissingFastMathClasses, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testGetNumberOfRoots, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testIntConstructor, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testTrimOneImaginary, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434PivotRowSelection2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRootN, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testNoVariance, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testNextDouble, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math3.linear.SchurTransformerTest#testMath848, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGamma1pPrecondition1, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFailed, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGamma1pPrecondition2, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testSimilar, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcInvNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCopySign, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverDimensionMismatchException, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testScaleInPlace, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.exception.DimensionMismatchExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testNoMissingFrenchTranslation, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath828Cycle, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testComputeRoots, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testFitAccuracyDependsOnBoundary, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testMultiplyField, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testUnlimitedSubHyperplane, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest#testAllMonomials, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testDotProductDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSubtractInf, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexTableauTest#testDropPhase1Objective, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testGetUpperBound, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath290GEQ, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfSameType, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testDivideInt, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAtanI, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testSampleWithZeroCovariance, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testGetData, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testSubsetRegression, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testGTestIndependance, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testOneColumn, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testOverrideGeoMeanWithMathClass, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testVariableWithoutDerivative1, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testMaximizeQuadratic, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testVariableWithoutDerivative0, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest#testIssue914, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testSupport, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testSumDeltaMinusDeltaSumPrecondition2, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testSumDeltaMinusDeltaSumPrecondition1, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testGcdLong, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testNonSquareOperator, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testHash, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testUnbounded, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testStartSimplexInsideRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testEndPoints, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRemainder, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongNumberOfPoints, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBadMaximumIterations, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMinimize2, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMinimize1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testHalfBounded, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion1, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testBoundsUnsupported, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math3.genetics.UniformCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testSearch, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetL1DistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testCoshAccuracy, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SqrtTest#testDerivativesHighOrder, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testPowSpecialCases, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCbrtPow3, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBracketEndpointRoot, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCbrt, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventStateTest#closeEvents, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.random.UnitSphereRandomVectorGeneratorTest#test2DDistribution, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventStateTest#testIssue695, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testNormalizeArray, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.exception.util.ExceptionContextTest#testContext, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideMixedTypes, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testNoSegments, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExpm1Definition, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetL1Norm, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testSqueezedHexa, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testTan, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncFirstRev, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexTableauTest#testDropPhase1Objective, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testConstructor3, [Manual]TestMethod=org.apache.commons.math3.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testDerivatives, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulLast, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSinh, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testToRadiansDefinition, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAtan, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplyDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleValueCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest#testToString, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testConstructorsOK, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testProjectionDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testSetSubVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testQuinticMinStatistics, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.random.StableRandomGeneratorTest#testBetaRangeAboveOne, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testHyperbolic, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testLowPercentile, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders4, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders5, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders2, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders3, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders8, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders9, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders6, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testVariable, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders7, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplySameType, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders1, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveAdd, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testSwissFertilityByRow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiplyDouble, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDotProduct, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedInPlaceSolutionWithInitialGuess, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testCompareToEpsilon, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompNonMeanCutoff, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testTwoAxes, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAcosh, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarDivide, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testFitAccuracyDependsOnBoundary, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testTanAccuracy, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMaximize1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testMaximize2, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testPreMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.exception.OutOfRangeExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#nistData, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulNeither, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testPValueNearZero, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testRandomPolynomialsValuesOnly, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSparseIterator, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testPerformClusterAnalysisToManyClusters, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionBoundaryBoundary, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAsin, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testSpace, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testWeightedMean, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDimension, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testBadAlpha, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorMixedType, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testAckley, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.fitting.CurveFitterTest#testMath372, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testSmallDistances, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossoverDimensionMismatchException, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testGetMinPts, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testMultiply, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testReduceComparedWithNormalizeAngle, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testVarianceDecompMeanCutoff, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionInsideBoundary, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testFit, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testInternalDifferentiation, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testUnitVectorNullVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing2, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing1, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testScaling, [Manual]TestMethod=org.apache.commons.math3.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncBothRev, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testCoordinatesCtoS, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testSinMinWithValueChecker, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiplyInt, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTan, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testZero, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinhAsinh, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testZeroNumberOfRoots, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testNormalize2, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testNormalize1, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest#testOptimumOutsideRange, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testLargeSample, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testCollector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testProjectionMixedTypes, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowField, [Manual]TestMethod=org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest#testWilcoxonSignedRankInputValidation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRootN, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testBadInitial, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.util.PairTest#testHashCode, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest#testComputeSigma, [Manual]TestMethod=org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testConstructorOK, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testBelowMaxCount, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testDerivativesHighOrder, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPower10, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestIndependance1, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestIndependance2, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestIndependance3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testEventManagement, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionOutsideOutside, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCbrt, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithClosingRowSeparator, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testCertainSpace, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSubtractSameType, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtanh, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarSubtractNaN, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testNoOpEnglishTranslation, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCosineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testMath274, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testMath798, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAsinAccuracy, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testNullFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinh, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionInvalidDataSize, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCheckSymmetric1, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434PivotRowSelection, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testCheckSymmetric2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testHahn1, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testNull, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testStirlingS2NegativeN, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testParaboloid, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testReference, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetL1Norm, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog1pDefinition, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetSubVectorMixedType, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog1pExpm1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testIssue947, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testAddNonDiagonalZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testFit, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCosineDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testOuterProduct, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCheckNotNull1, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testCheckNotNull2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testSortInPlace, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testGetShape, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSampleNullData, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testPolarForm, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testDistance, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.filter.KalmanFilterTest#testConstantAcceleration, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAccurateDotProduct, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath828, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulFirst, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testSquareRoot, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testTanh, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplyDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testIsInfinite, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testConstructorTooHigh, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testGradientComponent1Component2Component3, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testAddQuaternionQuaternion, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCopySignDouble, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BracketFinderTest#testMinimumIsOnIntervalBoundary, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testHash, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testTooLargeStep, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testOuterProductSameType, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testMultiplicationRules, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIssue596, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath293, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDimension3MultipleRoot, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInDefaultOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetLInfDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetNorm, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSignum, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSubtractMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testDoubleDirect, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testExp, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRDecompositionTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDF3, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDF4, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRound, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDF2, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testFloatNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMap, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFittingGoodInit, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMaximize2, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest#testInsufficientOrder3, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpDecTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest#testMaximize1, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest#testGetNumericalVariance, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testHypot, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPowField, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testToDegreesDefinition, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testIsPureQuaternion, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testIntersection, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaPrecondition1, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaPrecondition2, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, [Manual]TestMethod=org.apache.commons.math3.util.FastMathStrictComparisonTest#test1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddMixedTypes, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath781, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetDimension, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testWalkInOptimizedOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncBothRev, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSqrt, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testArray, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextFloatDirect, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testBoundsUnsupported, [Manual]TestMethod=org.apache.commons.math3.ode.events.ReappearingEventTest#testGragg, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCos, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testJacobiLegendre, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonSelfAdjointPreconditioner, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionInvalidDataSize, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncNeitherRev, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BracketFinderTest#testIntervalBoundsOrdering, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testVariablePartsConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.analysis.function.StepFunctionTest#testHeaviside, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434UnfeasibleSolution, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSubtractField, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testSignumDouble, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest#testCos, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testMissedEndEvent, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testDefaultFormatVector3D, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testOuterProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTaylorPolynomial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest#testParaboloid2D, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testExp, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMaximize2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMaximize1, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testMath848, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionBoundaryOutside, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPowDouble, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testStandardTransformFunction, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideImaginary, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testMath832, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testNegativeTestAddObs, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#checkExtraFastMathClasses, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testSetPopulationLimit, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testIncreasingOnly, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testParallel, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInfinite, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonSquareOperator, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testHalfInfinitePos, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSubtractMixedTypes, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math3.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math3.exception.util.LocalizedFormatsTest#testAllKeysPresentInPropertiesFiles, [Manual]TestMethod=org.apache.commons.math3.filter.KalmanFilterTest#testTransitionControlMatrixMismatch, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testIntValue, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testDivideField, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncBoth, [Manual]TestMethod=org.apache.commons.math3.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testMathIllegalState3, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testMathIllegalState2, [Manual]TestMethod=org.apache.commons.math3.complex.RootsOfUnityTest#testMathIllegalState1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testZeroVectors, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testBadFunction, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testInconsistentSizes2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testInconsistentSizes1, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testAddNonDiagonalEntry, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLog, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testSimplyConnected, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLogWithBase, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testIsInfinite, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testDotProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testExceptions, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErfcGnu, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest#testIterationCheckDisabled, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInOptimizedOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestGoodnesOfFit3, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestGoodnesOfFit2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testAnalyticalDifferentiation, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testHasIntercept, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testChromosomeListConstructorPopulationLimitNotPositive, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAddField, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testGTestGoodnesOfFit1, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testSingleDown, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testGradientComponent0Component4, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testSetElitismRateTooHigh, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math3.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest#testBadFunction, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testGetIterations, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testMath434NegativeVariable, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math3.optim.SimplePointCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testCigTab, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLog, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeDividePrecondition, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonSquarePreconditioner, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testCompute, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testIntersection3, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testDensityIntegrals, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testIntersection2, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTooLargeOrder, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeDivideSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testPower, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogisticTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testNonPositiveDefinitePreconditioner, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testExpression, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testReduce, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testFloatValueForLargeNumeratorAndDenominator, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testNonMeanCutoffs, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAdd, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MinTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testMultiplyInt, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTaylorAtan2, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSubtractDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testIsNaN, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math3.optimization.PointValuePairTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testHermiteOrthogonality, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionRightSide, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextF, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math3.distribution.AbstractRealDistributionTest#testDiscontinuous, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math3.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testBoundsUnsupported, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testOptimumOutsideRange, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testBevington, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testGetField, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testMath835, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testGetNumericalVariance, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextT, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape10, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformRealSizeNotAPowerOfTwo, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testReciprocalNaN, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testWalkInDefaultOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testCumulativeProbabilitySpecial, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAbs, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionInsideInside, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math3.fitting.HarmonicFitterTest#testMath844, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math3.util.PairTest#testAccessor2, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testHessian, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testDerivativesWithInverseFunction, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCoshAcosh, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionInvalidBounds, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testRelativeToleranceOnScaledValues, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testDegeneracy, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testCeilFloorRintLong, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testBoundariesDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAddDouble, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testUnbounded, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testExpm1, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMap, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testToString, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testValueWithInverseFunction, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRound, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testComposeMismatchedDimensions, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVector, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformRealFirstElementNotZero, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testConstrainedRosen, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainderField, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testSymmetry, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLog10Accuracy, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testTanh, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideZeroZero, [Manual]TestMethod=org.apache.commons.math3.linear.RRQRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombinationFaFa, [Manual]TestMethod=org.apache.commons.math3.linear.CholeskyDecompositionTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testDiffPow, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCopySignField, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAsin, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testExpAccuracy, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetNorm, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math3.optimization.SimpleValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulFirst, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTrigo, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testIsSymmetric, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testParameterizable, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRootNSingularity, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testSquareRootNonPositiveDefinite, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testStair, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testPreconditions1, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testPreconditions2, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testDoubleScalbSpecialCases, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionInsideInside, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders19, [Manual]TestMethod=org.apache.commons.math3.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders17, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders18, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testConstants, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testEvaluateArraySegment, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testQuinticMinStatistics, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest#testHalfBounded, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders20, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testMissingSearchInterval, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.PowellOptimizerTest#testSumSinc, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testNoSegments, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2SpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders11, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders12, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders10, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders15, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders16, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGamma1p, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders13, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testSolveSaunders14, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testSymmetric, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedInPlaceSolutionWithInitialGuess, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainderDouble, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testWrongVariableIndex, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SqrtTest#testComparison, [Manual]TestMethod=org.apache.commons.math3.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSample, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSubtractField, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextWeibull, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testDisjointPolygons, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapDivide, [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testSubtractSameType, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testFloatEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal1, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testGetLowerBound, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testAddTooManyChromosomesSingleCall, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFitting2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testTooLargeFirstStep, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testIsUnitQuaternion, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal3, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal2, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal5, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal4, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal6, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapDivideToSelf, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextBinomial, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testWeightedSum, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformNegaiveBounds, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulNeitherRev, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testMerge, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunction, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testCosAccuracy, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testProductQuaternionQuaternion, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testMultiplyField, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testDegRad, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfInt, [Manual]TestMethod=org.apache.commons.math3.primes.PrimesTest#testNextPrime, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testLinearCombinationInfinite, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testBug20040520, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetDistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextLongNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest#testMessage, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitVectorNullVector, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfDistanceMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testUnpreconditionedResidual, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testExpSpecialCases, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testInputSigmaNegative, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRemainderDouble, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testEmptySample, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testMath798, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMath864, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAcos, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest#testCoordinatesStoC, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testBulkIncrement, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderChangingVisitor2, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testEventsScheduling, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderChangingVisitor1, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRegressExceptions, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSqrtDefinition, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testSetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testSampleNegativeNumberOfPoints, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddToEntry, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math3.fitting.GaussianFitterTest#testMath519, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testDivideField, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.distribution.ExponentialDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossoverDimensionMismatchException, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testPower, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testUnitizeNullVector, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math3.filter.KalmanFilterTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCombineToSelfDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testDerivative, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testToDegrees, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSample, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testMultiplyDouble, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testConjugate, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformUniformMaximalInterval, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage3, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage1, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest#testHalfBounded, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextCauchy, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage6, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage4, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testRandomUnsymmetricMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testParametricUsage5, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testDotProductMixedTypes, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testFloor, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testKeepInitIfBest, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testMapToSelf, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testNormalize, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testUnitizeNullVector, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testFasterThanNewton, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderChangingVisitor3, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testIntersectionBoundaryBoundary, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testSingularities, [Manual]TestMethod=org.apache.commons.math3.distribution.PascalDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testSignPredicates, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testAddObsGetNClear, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testAddTooManyChromosomes, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSubtract, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLinearCombination1DSDS, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testFloatDirect, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testTanhAccuracy, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testTwoAxes, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testConstrainedRosenWithMoreInterpolationPoints, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCosh, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncNeither, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math3.linear.ConjugateGradientTest#testDimensionMismatchSolution, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSin, [Manual]TestMethod=org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiplyNonDiagonalEntry, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongIAE, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testOriginOffset, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testMaximize, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testMulLastRev, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetNonDiagonalZero, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfDouble2, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCopyOfDouble3, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSampleInsufficientData, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLinearCombinationDaFa, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#testNewSample2, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math3.optimization.SimplePointCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testMultiplyInt, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testEmptyDifference, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testConcentric, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderPreservingVisitor2, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderPreservingVisitor1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitVector, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testWalkInDefaultOrderPreservingVisitor3, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testRepetition, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeDivideMixedTypes, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.optimization.fitting.PolynomialFitterTest#testMath798WithToleranceTooLow, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMinimize2, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testSquareRoot, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMinimize1, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testSomeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMinimize2, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testPreconditionedSolution2, [Manual]TestMethod=org.apache.commons.math3.optim.SimpleValueCheckerTest#testIterationCheck, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest#testMinimize1, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testGetInverse, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testGetNorm, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.oned.IntervalTest#testInfinite, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testGcdConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testIssue716, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplySameType, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testHahn1, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextPoissonConsistency, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextLongPositiveRange, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testSubtractQuaternionQuaternion, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testZero, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math3.transform.FastFourierTransformerTest#testTransformFunctionSizeNotAPowerOfTwo, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testSine, [Manual]TestMethod=org.apache.commons.math3.analysis.function.GaussianTest#testDerivativesNaN, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testRandomPolynomialsFirstDerivative, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDistributionClone, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetEntryInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetEntryInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest#testStartSimplexOutsideRange, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testPowInt, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testSinCos, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapDivide, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testSin, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testOverrideVarianceWithMathClass, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.DBSCANClustererTest#testSingleLink, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextUniformUniformNegativeToPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testDotProductQuaternionQuaternion, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextBeta, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testNoEndPoints, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testEqualsIncludingNaNWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testCheckRectangular, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testRemainderDouble, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetLInfNorm, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeAddPrecondition, [Manual]TestMethod=org.apache.commons.math3.util.ArithmeticUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testAlternateException, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testRotate, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SincTest#testDerivativeShortcut, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testCompose, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPascal, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextIntNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testReciprocalOfZero, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntDirect, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testSparseIterator, [Manual]TestMethod=org.apache.commons.math3.distribution.EnumeratedRealDistributionTest#testProbability, [Manual]TestMethod=org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest#testWeightSumOverFlow, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAtan, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveSubtract, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAtan2SpecialCases, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath434PivotRowSelection, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testIntPow, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testIncLast, [Manual]TestMethod=org.apache.commons.math3.primes.PrimesTest#testIsPrime, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testAllButExcluded, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformIAE, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testAccessors1, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformIntegerDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testAccessors3, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testAccessors2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetL1DistanceDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testLog10Definition, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testConstructorListOfChromosomesBiggerThanPopulationSize, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.LineTest#testPointDistance, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testScalb, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAtanAccuracy, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testTan, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testCopySignDouble, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testConstrainedRosenWithMoreInterpolationPoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testDivideDouble, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testProjectionNullVector, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMoments, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math3.random.SynchronizedRandomGeneratorTest#testAdapter, [Manual]TestMethod=org.apache.commons.math3.complex.QuaternionTest#testProductQuaternionVector, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest#testMaximizeQuadratic, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextZipf, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testInvGamma1pm1Precondition2, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testInvGamma1pm1Precondition1, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testDoubleVectors, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testIsZero, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testIssue639, [Manual]TestMethod=org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest#testDecomposition3x3, [Manual]TestMethod=org.apache.commons.math3.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testAppendScalar, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BracketFinderTest#testCubicMax, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTangentDefinition, [Manual]TestMethod=org.apache.commons.math3.optim.PointValuePairTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testUnitize, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextLong2, [Manual]TestMethod=org.apache.commons.math3.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math3.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testToMultivariateDifferentiableFunction, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testAckley, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testIssue801, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideInf, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testBug20041003, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextIntIAE, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testAddSameType, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testIsMonotonic, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testIntersectionInsideOutside, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testParametricValue, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionInvalidBounds, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapAddToSelf, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DSCompilerTest#testIncompatibleOrder, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testMath798, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testUnpreconditionedNormOfResidual, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideDimensionMismatch, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testToDifferentiableUnivariateFunction, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.ode.events.EventFilterTest#testHistoryIncreasingBackward, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testMeanVariance, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testCrossProduct, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntIAE2, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testCbrt, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math3.ode.JacobianMatricesTest#testFinalResult, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.linear.FieldLUDecompositionTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testAcosh, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest#testPerformClusterAnalysisDegenerate, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testMapToSelf, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math3.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.genetics.NPointCrossoverTest#testCrossoverInvalidFixedLengthChromosomeFirst, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextUniformExtremeValues, [Manual]TestMethod=org.apache.commons.math3.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex3, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testUnsortedSamples, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex4, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex1, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testGetSubVectorInvalidIndex2, [Manual]TestMethod=org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLog10, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest#testPValueNearZero, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math3.stat.inference.GTestTest#testRootLogLikelihood, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.linear.MatrixUtilsTest#testIsSymmetricTolerance, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testIsSupportLowerBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testLogGamma, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongOrderVector, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math3.linear.BiDiagonalTransformerTest#testSingularMatrix, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testAckley, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testAllButExcluded, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNextGamma, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testDivideZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math3.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testDimensions, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLog1p, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testRevert, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongWideRange, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest#testGetRMS, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math3.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testOuterProductSameType, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testSinh, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossoverExample2, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testEmptyReplayFile, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNegativeComponent, [Manual]TestMethod=org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testSparseIterator, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testPercentage, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math3.distribution.UniformRealDistributionTest#testMeanVariance, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextInversionDeviate, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testSymmetry, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpDecTest#testRound, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest#testSolveBadAccuracy, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testSeeding, [Manual]TestMethod=org.apache.commons.math3.random.Well19937aTest#testNextLongNegativeRange, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math3.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testCombineToSelfMixedTypes, [Manual]TestMethod=org.apache.commons.math3.random.Well512aTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.random.ValueServerTest#testFixedSeed, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetEntry, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#tesNegativeInfinity, [Manual]TestMethod=org.apache.commons.math3.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testInfinite, [Manual]TestMethod=org.apache.commons.math3.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testNegate, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionAboveSide, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testConstant, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testUnsymmetric, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.stat.correlation.StorelessCovarianceTest#testLonglySimpleVar, [Manual]TestMethod=org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarPowZero, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes1, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAcos, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes2, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCos, [Manual]TestMethod=org.apache.commons.math3.util.MultidimensionalCounterTest#testIterationConsistency, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testDefaultFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math3.stat.StatUtilsTest#testPopulationVariance, [Manual]TestMethod=org.apache.commons.math3.analysis.function.LogitTest#testDerivativesHighOrder, [Manual]TestMethod=org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.MullerSolver2Test#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest#testMath789, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarAddInf, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest#testMoreThanOnePeriodCoverage, [Manual]TestMethod=org.apache.commons.math3.linear.QRDecompositionTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testMath341, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNegativeSecondRow, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.SecantSolverTest#testSolutionBelowSide, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.LineTest#testOffset, [Manual]TestMethod=org.apache.commons.math3.analysis.FunctionUtilsTest#testToUnivariateDifferential, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testMultiply, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest#testWilcoxonSignedRankSimple, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPowReciprocalPow, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextIntNegativeToPositiveRange, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testSample, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueDecompositionTest#testRank, [Manual]TestMethod=org.apache.commons.math3.util.IncrementorTest#testReset, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testConstraintsUnsupported, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetLInfDistanceSameType, [Manual]TestMethod=org.apache.commons.math3.genetics.ListPopulationTest#testConstructorPopulationLimitNotPositive, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testPreconditionedNormOfResidual, [Manual]TestMethod=org.apache.commons.math3.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testWrongOrder, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTestPerformance#testPow, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testCigTab, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testCosineLeftNullVector, [Manual]TestMethod=org.apache.commons.math3.random.MersenneTwisterTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testRosen, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testAsinh, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetRMS, [Manual]TestMethod=org.apache.commons.math3.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math3.distribution.CauchyDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextHypergeometric, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testGamma, [Manual]TestMethod=org.apache.commons.math3.analysis.solvers.PegasusSolverTest#testSolutionLeftSide, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testLogAccuracy, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest#testSingularities, [Manual]TestMethod=org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testHole, [Manual]TestMethod=org.apache.commons.math3.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest#testEvaluateArraySegmentWeighted, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testDerivative, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math3.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAsin, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math3.distribution.ZipfDistributionTest#testConsistencyAtSupportBounds, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testTanh, [Manual]TestMethod=org.apache.commons.math3.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testKeepInitIfBest, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAppendVector, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape142, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineDimensionMismatchSameType, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextBooleanDirect, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testRint, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testCircleFittingGoodInit, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testMath855, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testTrimOneImaginary, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math3.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math3.genetics.OrderedCrossoverTest#testCrossoverInvalidFixedLengthChromosomeSecond, [Manual]TestMethod=org.apache.commons.math3.optimization.SimplePointCheckerTest#testIterationCheckPrecondition, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math3.util.PrecisionTest#testMath843, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math3.genetics.CycleCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testXor, [Manual]TestMethod=org.apache.commons.math3.linear.LUDecompositionTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextIntWideRange, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testIsNaN, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth1, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth2, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testEbeMultiply, [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testUnitizeNullVector, [Manual]TestMethod=org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath290GEQ, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testLongConstructor, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testCigar, [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#testAtan2Accuracy, [Manual]TestMethod=org.apache.commons.math3.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testReseed, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math3.fitting.PolynomialFitterTest#testMath798WithToleranceTooLow, [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math3.random.RandomDataGeneratorTest#testNextSecureIntPositiveRange, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseZero2, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testParseZero1, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.SubLineTest#testHalfInfiniteNeg, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexUtilsTest#testConvertToComplex, [Manual]TestMethod=org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest#testThreeRedundantColumn, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest#testEquals, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testOnePointParabola, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest#testOverrideVarianceWithMathClass, [Manual]TestMethod=org.apache.commons.math3.analysis.function.SigmoidTest#testDerivativeLargeArguments, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math3.linear.SymmLQTest#testDimensionMismatchRightHandSide, [Manual]TestMethod=org.apache.commons.math3.util.BigRealTest#testDivisionByZero, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math3.distribution.TriangularDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math3.distribution.LevyDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testNextLongDirect, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testNegativeComponent, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testDefaultFormatVector3D, [Manual]TestMethod=org.apache.commons.math3.exception.NotPositiveExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testUnitize, [Manual]TestMethod=org.apache.commons.math3.distribution.LogNormalDistributionTest#testIsSupportUpperBoundInclusive, [Manual]TestMethod=org.apache.commons.math3.dfp.DfpTest#testCopySign, [Manual]TestMethod=org.apache.commons.math3.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math3.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.SubLineTest#testHalfInfiniteNeg, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextHex, [Manual]TestMethod=org.apache.commons.math3.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest#testMixedDerivatives, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest#testSphere, [Manual]TestMethod=org.apache.commons.math3.distribution.TDistributionTest#testPreconditions, [Manual]TestMethod=org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape100, [Manual]TestMethod=org.apache.commons.math3.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math3.random.Well1024aTest#testNextSample, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAdd, [Manual]TestMethod=org.apache.commons.math3.random.ISAACTest#testNextInt2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextUniformUniformPositiveBounds, [Manual]TestMethod=org.apache.commons.math3.random.Well19937cTest#testNexBoolean2, [Manual]TestMethod=org.apache.commons.math3.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math3.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math3.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest#testInsert, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math3.util.MathArraysTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math3.optim.univariate.BrentOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math3.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testGetField, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testEquals, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math3.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math3.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes1, [Manual]TestMethod=org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes2, [Manual]TestMethod=org.apache.commons.math3.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testCombineToSelfDimensionMismatchMixedTypes, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math3.linear.DiagonalMatrixTest#testMultiplyEntry, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationDaFa, [Manual]TestMethod=org.apache.commons.math3.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math3.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math3.random.Well44497bTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math3.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math3.optimization.univariate.BrentOptimizerTest#testMath832, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.threed.PlaneTest#testOffset, [Manual]TestMethod=org.apache.commons.math3.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math3.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextChiSquare, [Manual]TestMethod=org.apache.commons.math3.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest#testNewSampleNullData, [Manual]TestMethod=org.apache.commons.math3.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAbs, [Manual]TestMethod=org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest#testChoppedHexagon, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFF2, [Manual]TestMethod=org.apache.commons.math3.random.Well44497aTest#testReferenceCode, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFF3, [Manual]TestMethod=org.apache.commons.math3.util.Decimal64Test#testLinearCombinationFF4, [Manual]TestMethod=org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest#testAccessors, [Manual]TestMethod=org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest#testRastrigin, [Manual]TestMethod=org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextExponential], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@60c16548}
Path to runner Classes: /Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplyDimensionMismatch result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testNormalDistributionUnsymmetricMatrix result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunction result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex4 result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex2 result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex3 result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVectorInvalidIndex1 result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAppendScalar result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testSinFunction result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex1 result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex3 result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorInvalidIndex2 result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetLInfNorm result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMapToSelf result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testAdHocData result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformRealInvalidDataSize result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformReal result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionNotStrictlyPositiveNumberOfSamples result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeDivideDimensionMismatch result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testInitialMixture result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testSinFunction result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEquals result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorSameType result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideDimensionMismatch result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplyMixedTypes result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest#testAllMonomials result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplyMixedTypes result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplyMixedTypes result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformRealInvalidDataSize result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testIsNaN result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplySameType result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideMixedTypes result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformReal result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest#testMath199 result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest#testAllMonomials result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideMixedTypes result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeMultiplyDimensionMismatch result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplySameType result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSetSubVectorMixedType result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest#testFit result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testSerial result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideSameType result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealMatrixFormatTest#testParseSimpleWithClosingRowSeparator result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionInvalidDataSize result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetL1Norm result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeMultiplyDimensionMismatch result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testIsInfinite result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testMap result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.util.FastMathStrictComparisonTest#test1 result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionInvalidDataSize result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testAdHocData result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.util.FastMathTest#checkExtraFastMathClasses result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testParameters result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeDivideSameType result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testTransformFunctionInvalidBounds result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testGetSubVector result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformRealFirstElementNotZero result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastCosineTransformerTest#testParameters result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunction result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.EigenDecompositionTest#testRandomUnsymmetricMatrix result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.SparseRealVectorTest#testEbeDivideSameType result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeDivideMixedTypes result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testEbeMultiplySameType result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.transform.FastSineTransformerTest#testTransformFunctionInvalidBounds result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.ArrayRealVectorTest#testEbeDivideDimensionMismatch result was not reported by test-runner.
Test [Manual]TestMethod=org.apache.commons.math3.linear.RealVectorTest#testAppendVector result was not reported by test-runner.
Tests found: 4775
Tests executed: 4708
Suspicious: 1 line org.apache.commons.math3.complex.Complex l: 305, susp 1.0
Suspicious: 2 line org.apache.commons.math3.complex.Complex l: 1228, susp 1.0
Suspicious: 3 line org.apache.commons.math3.complex.Complex l: 304, susp 0.9991487550542668
Suspicious: 4 line org.apache.commons.math3.complex.Complex l: 300, susp 0.9989359438178336
Suspicious: 5 line org.apache.commons.math3.complex.Complex l: 348, susp 0.9912747393062353
Suspicious: 6 line org.apache.commons.math3.complex.Complex l: 344, susp 0.9906363055969355
Suspicious: 7 line org.apache.commons.math3.complex.Complex l: 345, susp 0.9906363055969355
Suspicious: 8 line org.apache.commons.math3.complex.Complex l: 343, susp 0.9902106831240689
Suspicious: 9 line org.apache.commons.math3.complex.Complex l: 340, susp 0.9868057033411364
Suspicious: 10 line org.apache.commons.math3.complex.Complex l: 98, susp 0.9585018088955097
Suspicious: 11 line org.apache.commons.math3.complex.Complex l: 99, susp 0.9585018088955097
Suspicious: 12 line org.apache.commons.math3.complex.Complex l: 100, susp 0.9585018088955097
Suspicious: 13 line org.apache.commons.math3.complex.Complex l: 102, susp 0.9585018088955097
Suspicious: 14 line org.apache.commons.math3.complex.Complex l: 103, susp 0.9585018088955097
Suspicious: 15 line org.apache.commons.math3.complex.Complex l: 104, susp 0.9585018088955097
Suspicious: 16 line org.apache.commons.math3.complex.Complex l: 105, susp 0.9585018088955097
Suspicious:  line org.apache.commons.math3.complex.Complex l: 305, susp 1.0
Suspicious:  line org.apache.commons.math3.complex.Complex l: 1228, susp 1.0
Suspicious:  line org.apache.commons.math3.complex.Complex l: 304, susp 0.9991487550542668
Suspicious:  line org.apache.commons.math3.complex.Complex l: 300, susp 0.9989359438178336
Suspicious:  line org.apache.commons.math3.complex.Complex l: 348, susp 0.9912747393062353
Suspicious:  line org.apache.commons.math3.complex.Complex l: 344, susp 0.9906363055969355
Suspicious:  line org.apache.commons.math3.complex.Complex l: 345, susp 0.9906363055969355
Suspicious:  line org.apache.commons.math3.complex.Complex l: 343, susp 0.9902106831240689
Suspicious:  line org.apache.commons.math3.complex.Complex l: 340, susp 0.9868057033411364
Suspicious:  line org.apache.commons.math3.complex.Complex l: 98, susp 0.9585018088955097
Suspicious:  line org.apache.commons.math3.complex.Complex l: 99, susp 0.9585018088955097
Suspicious:  line org.apache.commons.math3.complex.Complex l: 100, susp 0.9585018088955097
Suspicious:  line org.apache.commons.math3.complex.Complex l: 102, susp 0.9585018088955097
Suspicious:  line org.apache.commons.math3.complex.Complex l: 103, susp 0.9585018088955097
Suspicious:  line org.apache.commons.math3.complex.Complex l: 104, susp 0.9585018088955097
Suspicious:  line org.apache.commons.math3.complex.Complex l: 105, susp 0.9585018088955097
Executing time Fault localization: 601 sec
Setting up the max to 6010080 milliseconds (6010 sec)
---- Initial suspicious size: 16
Creating variant 1
--ModifPoint:CtReturnImpl, suspValue 1.0, line 305, file Complex.java
--ModifPoint:CtReturnImpl, suspValue 1.0, line 1228, file Complex.java
--ModifPoint:CtIfImpl, suspValue 0.9991487550542668, line 304, file Complex.java
--ModifPoint:CtIfImpl, suspValue 0.9989359438178336, line 300, file Complex.java
--ModifPoint:CtReturnImpl, suspValue 0.9912747393062353, line 348, file Complex.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9906363055969355, line 344, file Complex.java
--ModifPoint:CtIfImpl, suspValue 0.9906363055969355, line 345, file Complex.java
--ModifPoint:CtIfImpl, suspValue 0.9902106831240689, line 343, file Complex.java
--ModifPoint:CtIfImpl, suspValue 0.9868057033411364, line 340, file Complex.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9585018088955097, line 99, file Complex.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9585018088955097, line 100, file Complex.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9585018088955097, line 102, file Complex.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9585018088955097, line 103, file Complex.java
Total suspicious from FL: 16,  13
Total ModPoint created: 13
Creating program variant #1, [Variant id: 1, #gens: 13, #ops: 0, parent:-]
Calculating fitness
Calculating fitness for original program variant.
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout6010secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.stat.inference.TTestTest  org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest  org.apache.commons.math3.analysis.solvers.MullerSolverTest  org.apache.commons.math3.analysis.differentiation.DSCompilerTest  org.apache.commons.math3.stat.inference.OneWayAnovaTest  org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest  org.apache.commons.math3.distribution.AbstractIntegerDistributionTest  org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math3.ode.FirstOrderConverterTest  org.apache.commons.math3.linear.BiDiagonalTransformerTest  org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest  org.apache.commons.math3.random.Well19937cTest  org.apache.commons.math3.optim.SimpleValueCheckerTest  org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest  org.apache.commons.math3.linear.ArrayRealVectorTest  org.apache.commons.math3.distribution.TriangularDistributionTest  org.apache.commons.math3.random.UniformRandomGeneratorTest  org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest  org.apache.commons.math3.distribution.BetaDistributionTest  org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math3.linear.QRSolverTest  org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest  org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math3.genetics.ChromosomeTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest  org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math3.ode.JacobianMatricesTest  org.apache.commons.math3.linear.FieldMatrixImplTest  org.apache.commons.math3.geometry.euclidean.twod.SegmentTest  org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest  org.apache.commons.math3.util.OpenIntToFieldTest  org.apache.commons.math3.linear.OpenMapRealMatrixTest  org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math3.linear.EigenDecompositionTest  org.apache.commons.math3.exception.util.ArgUtilsTest  org.apache.commons.math3.genetics.ListPopulationTest  org.apache.commons.math3.primes.PrimesTest  org.apache.commons.math3.special.ErfTest  org.apache.commons.math3.ode.events.ReappearingEventTest  org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math3.fraction.FractionTest  org.apache.commons.math3.util.IncrementorTest  org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math3.special.GammaTest  org.apache.commons.math3.analysis.solvers.IllinoisSolverTest  org.apache.commons.math3.genetics.FixedElapsedTimeTest  org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest  org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest  org.apache.commons.math3.linear.MatrixUtilsTest  org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest  org.apache.commons.math3.random.Well512aTest  org.apache.commons.math3.optimization.fitting.PolynomialFitterTest  org.apache.commons.math3.stat.descriptive.moment.InteractionTest  org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math3.fraction.BigFractionFormatTest  org.apache.commons.math3.optimization.linear.SimplexSolverTest  org.apache.commons.math3.util.FastMathTest  org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest  org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest  org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest  org.apache.commons.math3.optim.univariate.BracketFinderTest  org.apache.commons.math3.linear.RealVectorTest  org.apache.commons.math3.analysis.solvers.SecantSolverTest  org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest  org.apache.commons.math3.geometry.euclidean.oned.IntervalTest  org.apache.commons.math3.distribution.NormalDistributionTest  org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math3.exception.NotPositiveExceptionTest  org.apache.commons.math3.linear.RealVectorFormatTest  org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest  org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math3.util.TransformerMapTest  org.apache.commons.math3.distribution.LogNormalDistributionTest  org.apache.commons.math3.analysis.integration.RombergIntegratorTest  org.apache.commons.math3.optim.PointVectorValuePairTest  org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math3.util.OpenIntToDoubleHashMapTest  org.apache.commons.math3.complex.ComplexFieldTest  org.apache.commons.math3.analysis.differentiation.GradientFunctionTest  org.apache.commons.math3.random.RandomDataGeneratorTest  org.apache.commons.math3.util.FastMathStrictComparisonTest  org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest  org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest  org.apache.commons.math3.optim.PointValuePairTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest  org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math3.genetics.UniformCrossoverTest  org.apache.commons.math3.genetics.BinaryMutationTest  org.apache.commons.math3.stat.FrequencyTest  org.apache.commons.math3.genetics.TournamentSelectionTest  org.apache.commons.math3.analysis.solvers.MullerSolver2Test  org.apache.commons.math3.geometry.euclidean.twod.SubLineTest  org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest  org.apache.commons.math3.exception.MaxCountExceededExceptionTest  org.apache.commons.math3.random.BitsStreamGeneratorTest  org.apache.commons.math3.analysis.function.SincTest  org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest  org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math3.fitting.CurveFitterTest  org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest  org.apache.commons.math3.analysis.solvers.BrentSolverTest  org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest  org.apache.commons.math3.random.Well44497aTest  org.apache.commons.math3.exception.OutOfRangeExceptionTest  org.apache.commons.math3.stat.inference.GTestTest  org.apache.commons.math3.RetryRunnerTest  org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math3.genetics.RandomKeyTest  org.apache.commons.math3.genetics.BinaryChromosomeTest  org.apache.commons.math3.optim.linear.SimplexSolverTest  org.apache.commons.math3.stat.descriptive.rank.MaxTest  org.apache.commons.math3.analysis.function.GaussianTest  org.apache.commons.math3.random.AbstractRandomGeneratorTest  org.apache.commons.math3.linear.SchurTransformerTest  org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math3.genetics.FitnessCachingTest  org.apache.commons.math3.genetics.OnePointCrossoverTest  org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest  org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest  org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest  org.apache.commons.math3.linear.RRQRSolverTest  org.apache.commons.math3.genetics.NPointCrossoverTest  org.apache.commons.math3.geometry.euclidean.twod.LineTest  org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math3.linear.TriDiagonalTransformerTest  org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest  org.apache.commons.math3.genetics.RandomKeyMutationTest  org.apache.commons.math3.util.ArithmeticUtilsTest  org.apache.commons.math3.stat.StatUtilsTest  org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math3.stat.clustering.DBSCANClustererTest  org.apache.commons.math3.distribution.FDistributionTest  org.apache.commons.math3.optimization.direct.CMAESOptimizerTest  org.apache.commons.math3.filter.KalmanFilterTest  org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest  org.apache.commons.math3.analysis.solvers.LaguerreSolverTest  org.apache.commons.math3.complex.QuaternionTest  org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest  org.apache.commons.math3.distribution.CauchyDistributionTest  org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math3.distribution.ZipfDistributionTest  org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest  org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest  org.apache.commons.math3.transform.FastFourierTransformerTest  org.apache.commons.math3.linear.HessenbergTransformerTest  org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest  org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math3.fraction.BigFractionTest  org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest  org.apache.commons.math3.stat.descriptive.moment.KurtosisTest  org.apache.commons.math3.fraction.BigFractionFieldTest  org.apache.commons.math3.analysis.function.SigmoidTest  org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest  org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest  org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest  org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math3.stat.descriptive.rank.MedianTest  org.apache.commons.math3.util.PairTest  org.apache.commons.math3.analysis.function.SqrtTest  org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest  org.apache.commons.math3.linear.EigenSolverTest  org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest  org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math3.stat.correlation.StorelessCovarianceTest  org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math3.ode.events.OverlappingEventsTest  org.apache.commons.math3.fraction.FractionFieldTest  org.apache.commons.math3.analysis.function.LogisticTest  org.apache.commons.math3.util.DefaultTransformerTest  org.apache.commons.math3.optimization.general.MinpackTest  org.apache.commons.math3.linear.BlockRealMatrixTest  org.apache.commons.math3.linear.LUDecompositionTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation  org.apache.commons.math3.optim.univariate.BrentOptimizerTest  org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest  org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest  org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest  org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest  org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest  org.apache.commons.math3.analysis.solvers.PegasusSolverTest  org.apache.commons.math3.complex.FrenchComplexFormatTest  org.apache.commons.math3.optimization.univariate.BrentOptimizerTest  org.apache.commons.math3.dfp.DfpDecTest  org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest  org.apache.commons.math3.analysis.FunctionUtilsTest  org.apache.commons.math3.complex.ComplexUtilsTest  org.apache.commons.math3.complex.RootsOfUnityTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest  org.apache.commons.math3.linear.SparseRealMatrixTest  org.apache.commons.math3.util.ResizableDoubleArrayTest  org.apache.commons.math3.optimization.fitting.HarmonicFitterTest  org.apache.commons.math3.distribution.UniformRealDistributionTest  org.apache.commons.math3.analysis.solvers.RiddersSolverTest  org.apache.commons.math3.distribution.AbstractRealDistributionTest  org.apache.commons.math3.dfp.DfpTest  org.apache.commons.math3.stat.correlation.CovarianceTest  org.apache.commons.math3.analysis.function.StepFunctionTest  org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math3.transform.FastSineTransformerTest  org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest  org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest  org.apache.commons.math3.fitting.GaussianFitterTest  org.apache.commons.math3.linear.SingularValueSolverTest  org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math3.linear.RRQRDecompositionTest  org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math3.linear.FrenchRealVectorFormatTest  org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest  org.apache.commons.math3.optimization.fitting.GaussianFitterTest  org.apache.commons.math3.stat.inference.MannWhitneyUTestTest  org.apache.commons.math3.stat.descriptive.moment.MeanTest  org.apache.commons.math3.optimization.linear.SimplexTableauTest  org.apache.commons.math3.util.BigRealFieldTest  org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest  org.apache.commons.math3.linear.BlockFieldMatrixTest  org.apache.commons.math3.util.Decimal64Test  org.apache.commons.math3.genetics.FixedGenerationCountTest  org.apache.commons.math3.distribution.BinomialDistributionTest  org.apache.commons.math3.stat.descriptive.summary.SumSqTest  org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest  org.apache.commons.math3.optim.SimplePointCheckerTest  org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest  org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math3.random.Well1024aTest  org.apache.commons.math3.linear.CholeskySolverTest  org.apache.commons.math3.util.FastMathTestPerformance  org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest  org.apache.commons.math3.stat.descriptive.summary.SumLogTest  org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest  org.apache.commons.math3.stat.data.LotteryTest  org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest  org.apache.commons.math3.random.UnitSphereRandomVectorGeneratorTest  org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math3.geometry.euclidean.threed.LineTest  org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest  org.apache.commons.math3.stat.descriptive.moment.SkewnessTest  org.apache.commons.math3.distribution.ExponentialDistributionTest  org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math3.random.MersenneTwisterTest  org.apache.commons.math3.stat.descriptive.summary.ProductTest  org.apache.commons.math3.geometry.euclidean.threed.PlaneTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest  org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest  org.apache.commons.math3.distribution.WeibullDistributionTest  org.apache.commons.math3.distribution.HypergeometricDistributionTest  org.apache.commons.math3.linear.ConjugateGradientTest  org.apache.commons.math3.stat.inference.ChiSquareTestTest  org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest  org.apache.commons.math3.random.RandomAdaptorTest  org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest  org.apache.commons.math3.linear.QRDecompositionTest  org.apache.commons.math3.linear.SparseFieldMatrixTest  org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest  org.apache.commons.math3.stat.descriptive.rank.PercentileTest  org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest  org.apache.commons.math3.util.MultidimensionalCounterTest  org.apache.commons.math3.ode.sampling.StepNormalizerTest  org.apache.commons.math3.stat.descriptive.moment.VarianceTest  org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest  org.apache.commons.math3.ode.events.EventStateTest  org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest  org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math3.transform.FastHadamardTransformerTest  org.apache.commons.math3.stat.descriptive.rank.MinTest  org.apache.commons.math3.analysis.solvers.BisectionSolverTest  org.apache.commons.math3.exception.util.LocalizedFormatsTest  org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest  org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math3.transform.FastCosineTransformerTest  org.apache.commons.math3.linear.SparseFieldVectorTest  org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest  org.apache.commons.math3.linear.ArrayFieldVectorTest  org.apache.commons.math3.complex.ComplexTest  org.apache.commons.math3.optimization.univariate.BracketFinderTest  org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation  org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest  org.apache.commons.math3.optim.SimpleVectorValueCheckerTest  org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math3.optimization.fitting.CurveFitterTest  org.apache.commons.math3.distribution.MultivariateNormalDistributionTest  org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math3.fitting.HarmonicFitterTest  org.apache.commons.math3.linear.FieldLUDecompositionTest  org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest  org.apache.commons.math3.exception.DimensionMismatchExceptionTest  org.apache.commons.math3.fitting.PolynomialFitterTest  org.apache.commons.math3.ode.events.EventFilterTest  org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math3.dfp.DfpMathTest  org.apache.commons.math3.optimization.SimplePointCheckerTest  org.apache.commons.math3.util.MathUtilsTest  org.apache.commons.math3.linear.LUSolverTest  org.apache.commons.math3.genetics.ElitisticListPopulationTest  org.apache.commons.math3.random.ISAACTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest  org.apache.commons.math3.special.BetaTest  org.apache.commons.math3.random.ValueServerTest  org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest  org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest  org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest  org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math3.geometry.euclidean.threed.RotationTest  org.apache.commons.math3.distribution.PoissonDistributionTest  org.apache.commons.math3.analysis.integration.gauss.LegendreTest  org.apache.commons.math3.linear.FieldLUSolverTest  org.apache.commons.math3.optimization.PointVectorValuePairTest  org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest  org.apache.commons.math3.stat.CertifiedDataTest  org.apache.commons.math3.util.ContinuedFractionTest  org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest  org.apache.commons.math3.optimization.direct.PowellOptimizerTest  org.apache.commons.math3.distribution.LevyDistributionTest  org.apache.commons.math3.random.GaussianRandomGeneratorTest  org.apache.commons.math3.util.PrecisionTest  org.apache.commons.math3.distribution.EnumeratedRealDistributionTest  org.apache.commons.math3.stat.ranking.NaturalRankingTest  org.apache.commons.math3.linear.SymmLQTest  org.apache.commons.math3.linear.SingularValueDecompositionTest  org.apache.commons.math3.random.Well44497bTest  org.apache.commons.math3.util.MathArraysTest  org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest  org.apache.commons.math3.optim.linear.SimplexTableauTest  org.apache.commons.math3.random.SynchronizedRandomGeneratorTest  org.apache.commons.math3.geometry.euclidean.threed.SubLineTest  org.apache.commons.math3.distribution.TDistributionTest  org.apache.commons.math3.analysis.solvers.NewtonSolverTest  org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest  org.apache.commons.math3.analysis.function.HarmonicOscillatorTest  org.apache.commons.math3.util.BigRealTest  org.apache.commons.math3.linear.DiagonalMatrixTest  org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math3.linear.Array2DRowRealMatrixTest  org.apache.commons.math3.genetics.CycleCrossoverTest  org.apache.commons.math3.genetics.OrderedCrossoverTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest  org.apache.commons.math3.distribution.ChiSquaredDistributionTest  org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest  org.apache.commons.math3.distribution.UniformIntegerDistributionTest  org.apache.commons.math3.exception.util.ExceptionContextTest  org.apache.commons.math3.ode.ContinuousOutputModelTest  org.apache.commons.math3.random.StableRandomGeneratorTest  org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest  org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math3.linear.SparseRealVectorTest  org.apache.commons.math3.ode.nonstiff.GillIntegratorTest  org.apache.commons.math3.stat.regression.SimpleRegressionTest  org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest  org.apache.commons.math3.complex.ComplexFormatTest  org.apache.commons.math3.linear.CholeskyDecompositionTest  org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest  org.apache.commons.math3.fraction.FractionFormatTest  org.apache.commons.math3.analysis.function.LogitTest  org.apache.commons.math3.stat.data.LewTest  org.apache.commons.math3.linear.RealMatrixFormatTest  org.apache.commons.math3.distribution.GammaDistributionTest  org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest  org.apache.commons.math3.stat.descriptive.summary.SumTest  org.apache.commons.math3.stat.inference.TestUtilsTest  org.apache.commons.math3.random.EmpiricalDistributionTest  org.apache.commons.math3.distribution.PascalDistributionTest  org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math3.random.Well19937aTest  org.apache.commons.math3.optimization.PointValuePairTest  org.apache.commons.math3.optimization.SimpleValueCheckerTest  org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 4949] ,[]
The original fitness is : 1.0
----------------------------
---Configuration properties
p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
p:alternativecompliancelevel= 8
p:ignoredTestCases= 
p:workingDirectory= /Users/marekmazur/astor/./output_astor
p:manipulatesuper= false
p:validation= process
p:jvm4testexecution= /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:operatorspace= irr-statements
p:diffcontext= 0
p:binjavafolder= /target/classes/
p:synthesis_depth= 3
p:gzoltartestpackagetoexclude= junit.framework
p:skipfitnessinitialpopulation= false
p:evosuiteresultfolder= evosuite
p:flthreshold= 0
p:regressionforfaultlocalization= true
p:collectonlyusedmethod= false
p:folderDiff= ./diffSolutions
p:preservelinenumbers= true
p:tmax2= 6010080
p:tmax1= 10000
p:probagenmutation= false
p:nomodificationconvergence= 100
p:diff_type= relative
p:nolog= False
p:targetelementprocessor= statements
p:srctestfolder= /src/test/
p:forceExecuteRegression= false
p:clusteringfilename= clustering.csv
p:failing= org.apache.commons.math3.complex.ComplexTest
p:logtestexecution= false
p:evo_buggy_class= true
p:numberExecutions= 1
p:maxnumbersolutions= 1000000
p:evo_affected_by_op= true
p:population= 1
p:maxCombinationVariableLimit= false
p:savesolution= true
p:javacompliancelevel= 8
p:uniqueoptogen= false
p:gzoltarpackagetonotinstrument= junit.framework
p:projectIdentifier= 
p:modificationpointnavigation= weight
p:stopfirst= true
p:multipointmodification= false
p:elementsToMutate= 10
p:jsonoutputname= astor_output
p:evoDSE= false
p:bintestfolder= /target/test-classes/
p:testbystep= false
p:version-location= ./math-version/
p:gzoltarVersion= 1.7.3
p:locationGzoltarJar= ./lib/
p:reintroduce= PARENTS:ORIGINAL
p:executorjar= ./lib/jtestex7.jar
p:maxGeneration= 1000000
p:max_synthesis_step= 10000
p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
p:maxVarCombination= 1000
p:includeZeros= false
p:maxtime= 60
p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
p:jvmversion= 1.8.0_202
p:commandTrunk= 50000
p:faultlocalization= flacoco
p:resetmodel= true
p:maxsuspcandidates= 1000
p:mode= jgenprog
p:learningdir= 
p:jvm4evosuitetestexecution= /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:filterfaultlocalization= true
p:mutationrate= 1 
p:pathToMVNRepository= 
p:resourcesfolder= /src/main/resources:/src/test/resources:
p:timezone= America/Los_Angeles
p:runjava7code= false
p:evoRunOnBuggyClass= true
p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
p:limitbysuspicious= true
p:logsattemps= true
p:dependenciespath= /Users/marekmazur/astor/examples/libs/junit-4.4.jar
p:packageToInstrument= org.apache.commons
p:skipfaultlocalization= false
p:scope= local
p:transformingredient= false
p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
p:maxnumvariablesperingredient= 10
p:parsesourcefromoriginal= true
p:pvariantfoldername= variant-
p:savespoonmodelondisk= false
p:srcjavafolder= /src/java/
p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
p:ignoreflakyinfl= false
p:cleantemplates= true
p:applyCrossover= false
p:maxmodificationpoints= 1000
p:duplicateingredientsinspace= false
p:metid= 0
p:continuewhenmodelfail= true
p:saveall= false
p:seed= 10
p:savecompletepatched= true
p:resetoperations= false
p:keepcomments= true
p:processoutputinfile= false
p:location= /Users/marekmazur/astor/defects4j/math-5
p:probabilistictransformation= true
p:overridemaxtime= true
p:outputjsonresult= true
p:allpoints= false
p:antipattern= false
p:bugId= 280
p:evosuitetimeout= 120
p:maxtimefactor= 10
p:nrPlaceholders= 1
p:forcesubprocesskilling= false
----------------------------
----Starting Solution Search
----------Running generation: 1, population size: 1

***** Generation 1 : 0
**Parent Variant: [Variant id: 1, #gens: 13, #ops: 0, parent:-]

--Child created id: 2
--Creating new operations for variant [Variant id: 2, #gens: 13, #ops: 0, parent:1]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 3 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
Transforming shadowed variable in if ((real == 0.0) && (imaginary == 0.0)) {
	return org.apache.commons.math3.complex.Complex.NaN;
}
location: Complex.java102
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 2, #gens: 14, #ops: 1, parent:1] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 2, errors: [Complex.java:306: error: incompatible types: unexpected return value
			return org.apache.commons.math3.complex.Complex.NaN;
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(1): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1(f=1.0), 2(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1(f=1.0), )
----------Running generation: 2, population size: 1

***** Generation 2 : 0
**Parent Variant: [Variant id: 3, #gens: 13, #ops: 0, parent:-]

--Child created id: 4
--Creating new operations for variant [Variant id: 4, #gens: 13, #ops: 0, parent:3]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 4, #gens: 14, #ops: 1, parent:3] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 4, errors: [Complex.java:1588: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1588: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1590: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1590: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1591: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1591: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1591: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1592: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1593: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1593: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1593: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1594: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1594: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1594: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1594: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1594: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1595: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1596: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1596: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1596: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1596: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1596: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1596: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1596: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1597: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1597: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1597: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1597: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1597: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1597: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1605: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1605: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1605: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1605: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1605: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1605: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1605: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1611: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1611: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1611: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1611: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1611: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1618: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1618: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1620: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1620: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1622: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1622: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(2): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (3(f=1.0), 4(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (3(f=1.0), )
----------Running generation: 3, population size: 1

***** Generation 3 : 0
**Parent Variant: [Variant id: 5, #gens: 13, #ops: 0, parent:-]

--Child created id: 6
--Creating new operations for variant [Variant id: 6, #gens: 13, #ops: 0, parent:5]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, real, imaginary]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 6, #gens: 14, #ops: 1, parent:5] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 6, errors: [Complex.java:303: error: cannot assign a value to final variable isNaN
		} 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary);
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(3): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (5(f=1.0), 6(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (5(f=1.0), )
----------Running generation: 4, population size: 1

***** Generation 4 : 0
**Parent Variant: [Variant id: 7, #gens: 13, #ops: 0, parent:-]

--Child created id: 8
--Creating new operations for variant [Variant id: 8, #gens: 13, #ops: 0, parent:7]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 8, #gens: 14, #ops: 1, parent:7] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 8, errors: [Complex.java:1438: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1438: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1440: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1440: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1441: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1441: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1441: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1442: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1443: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1443: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1443: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1444: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1444: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1444: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1444: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1444: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1445: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1446: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1446: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1446: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1446: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1446: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1446: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1446: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1447: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1447: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1447: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1447: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1447: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1447: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1455: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1455: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1455: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1455: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1455: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1455: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1455: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1461: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1461: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1461: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1461: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1461: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1468: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1468: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1470: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1470: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1472: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1472: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(4): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (7(f=1.0), 8(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (7(f=1.0), )
----------Running generation: 5, population size: 1

***** Generation 5 : 0
**Parent Variant: [Variant id: 9, #gens: 13, #ops: 0, parent:-]

--Child created id: 10
--Creating new operations for variant [Variant id: 10, #gens: 13, #ops: 0, parent:9]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 10, #gens: 14, #ops: 1, parent:9] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 10, errors: [Complex.java:347: error: incompatible types: unexpected return value
		return isNaN; 		this.real = real; 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(5): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (9(f=1.0), 10(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (9(f=1.0), )
----------Running generation: 6, population size: 1

***** Generation 6 : 0
**Parent Variant: [Variant id: 11, #gens: 13, #ops: 0, parent:-]

--Child created id: 12
--Creating new operations for variant [Variant id: 12, #gens: 13, #ops: 0, parent:11]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [this.imaginary]
--> var from patch: this.imaginary spoon.support.reflect.code.CtFieldWriteImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in imaginary = imaginary
location: Complex.java103
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 12, #gens: 13, #ops: 1, parent:11] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 12, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(6): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (11(f=1.0), 12(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (11(f=1.0), )
----------Running generation: 7, population size: 1

***** Generation 7 : 0
**Parent Variant: [Variant id: 13, #gens: 13, #ops: 0, parent:-]

--Child created id: 14
--Creating new operations for variant [Variant id: 14, #gens: 13, #ops: 0, parent:13]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 14, #gens: 12, #ops: 1, parent:13] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 14
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-14/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(7): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (13(f=1.0), 14(f=15.0), )
Selected to next generation: IDs2--> (13(f=1.0), )
----------Running generation: 8, population size: 1

***** Generation 8 : 0
**Parent Variant: [Variant id: 15, #gens: 13, #ops: 0, parent:-]

--Child created id: 16
--Creating new operations for variant [Variant id: 16, #gens: 13, #ops: 0, parent:15]
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 16, #gens: 14, #ops: 1, parent:15] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 16, errors: [Complex.java:305: error: incompatible types: double cannot be converted to org.apache.commons.math3.complex.Complex
		if ((real == 0.0) && (imaginary == 0.0)) { 			return org.apache.commons.math3.util.FastMath.abs(imaginary);
		                                           			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(8): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (15(f=1.0), 16(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (15(f=1.0), )
----------Running generation: 9, population size: 1

***** Generation 9 : 0
**Parent Variant: [Variant id: 17, #gens: 13, #ops: 0, parent:-]

--Child created id: 18
--Creating new operations for variant [Variant id: 18, #gens: 13, #ops: 0, parent:17]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [isNaN, real, imaginary]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java100
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 18, #gens: 13, #ops: 1, parent:17] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 18, errors: [Complex.java:103: error: variable isNaN might already have been assigned
		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary);
		                                                                           		^, Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(9): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (17(f=1.0), 18(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (17(f=1.0), )
----------Running generation: 10, population size: 1

***** Generation 10 : 0
**Parent Variant: [Variant id: 19, #gens: 13, #ops: 0, parent:-]

--Child created id: 20
--Creating new operations for variant [Variant id: 20, #gens: 13, #ops: 0, parent:19]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 20, #gens: 12, #ops: 1, parent:19] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 20
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-20/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(10): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (19(f=1.0), 20(f=1.0), )
Selected to next generation: IDs2--> (19(f=1.0), )
----------Running generation: 11, population size: 1

***** Generation 11 : 0
**Parent Variant: [Variant id: 21, #gens: 13, #ops: 0, parent:-]

--Child created id: 22
--Creating new operations for variant [Variant id: 22, #gens: 13, #ops: 0, parent:21]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 22, #gens: 14, #ops: 1, parent:21] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 22, errors: [Complex.java:448: error: incompatible types: unexpected return value
		return org.apache.commons.math3.complex.Complex.INF; 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(11): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (21(f=1.0), 22(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (21(f=1.0), )
----------Running generation: 12, population size: 1

***** Generation 12 : 0
**Parent Variant: [Variant id: 23, #gens: 13, #ops: 0, parent:-]

--Child created id: 24
--Creating new operations for variant [Variant id: 24, #gens: 13, #ops: 0, parent:23]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java305
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 24, #gens: 14, #ops: 1, parent:23] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 24, errors: [Complex.java:342: error: incompatible types: boolean cannot be converted to org.apache.commons.math3.complex.Complex
			return true; 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(12): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (23(f=1.0), 24(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (23(f=1.0), )
----------Running generation: 13, population size: 1

***** Generation 13 : 0
**Parent Variant: [Variant id: 25, #gens: 13, #ops: 0, parent:-]

--Child created id: 26
--Creating new operations for variant [Variant id: 26, #gens: 13, #ops: 0, parent:25]
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  this.real = real
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 26, #gens: 12, #ops: 1, parent:25] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 26, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(13): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (25(f=1.0), 26(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (25(f=1.0), )
----------Running generation: 14, population size: 1

***** Generation 14 : 0
**Parent Variant: [Variant id: 27, #gens: 13, #ops: 0, parent:-]

--Child created id: 28
--Creating new operations for variant [Variant id: 28, #gens: 13, #ops: 0, parent:27]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 28, #gens: 12, #ops: 1, parent:27] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 28
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-28/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(14): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (27(f=1.0), 28(f=1.0), )
Selected to next generation: IDs2--> (27(f=1.0), )
----------Running generation: 15, population size: 1

***** Generation 15 : 0
**Parent Variant: [Variant id: 29, #gens: 13, #ops: 0, parent:-]

--Child created id: 30
--Creating new operations for variant [Variant id: 30, #gens: 13, #ops: 0, parent:29]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 30, #gens: 12, #ops: 1, parent:29] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 30, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(15): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (29(f=1.0), 30(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (29(f=1.0), )
----------Running generation: 16, population size: 1

***** Generation 16 : 0
**Parent Variant: [Variant id: 31, #gens: 13, #ops: 0, parent:-]

--Child created id: 32
--Creating new operations for variant [Variant id: 32, #gens: 13, #ops: 0, parent:31]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
Transforming shadowed variable in if (real < (-20.0)) {
	return createComplex(-1.0, 0.0);
}
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 32, #gens: 14, #ops: 1, parent:31] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 32, errors: [Complex.java:1707: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1707: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1707: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1707: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1707: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1707: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1707: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1709: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1709: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1710: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1710: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1710: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1711: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1712: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1712: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1712: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1713: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1713: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1713: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1713: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1713: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1714: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1715: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1715: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1715: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1715: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1715: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1715: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1715: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1716: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1716: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1716: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1716: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1716: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1716: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1724: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1724: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1724: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1724: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1724: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1724: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1724: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1730: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1730: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1730: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1730: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1730: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1737: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1737: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1739: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1739: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1741: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1741: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(16): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (31(f=1.0), 32(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (31(f=1.0), )
----------Running generation: 17, population size: 1

***** Generation 17 : 0
**Parent Variant: [Variant id: 33, #gens: 13, #ops: 0, parent:-]

--Child created id: 34
--Creating new operations for variant [Variant id: 34, #gens: 13, #ops: 0, parent:33]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 34, #gens: 12, #ops: 1, parent:33] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 34, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(17): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (33(f=1.0), 34(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (33(f=1.0), )
----------Running generation: 18, population size: 1

***** Generation 18 : 0
**Parent Variant: [Variant id: 35, #gens: 13, #ops: 0, parent:-]

--Child created id: 36
--Creating new operations for variant [Variant id: 36, #gens: 13, #ops: 0, parent:35]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch []
location: Complex.java348
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return org.apache.commons.math3.complex.ComplexField.getInstance()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return org.apache.commons.math3.complex.ComplexField.getInstance()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 36, #gens: 13, #ops: 1, parent:35] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 36, errors: [Complex.java:1738: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1738: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1740: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1740: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1741: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1741: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1741: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1742: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1743: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1743: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1743: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1744: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1744: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1744: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1744: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1744: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1745: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1746: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1746: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1746: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1746: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1746: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1746: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1746: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1747: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1747: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1747: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1747: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1747: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1747: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1755: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1755: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1755: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1755: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1755: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1755: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1755: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1761: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1761: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1761: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1761: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1761: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1768: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1768: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1770: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1770: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1772: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1772: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(18): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return org.apache.commons.math3.complex.ComplexField.getInstance()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (35(f=1.0), 36(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (35(f=1.0), )
----------Running generation: 19, population size: 1

***** Generation 19 : 0
**Parent Variant: [Variant id: 37, #gens: 13, #ops: 0, parent:-]

--Child created id: 38
--Creating new operations for variant [Variant id: 38, #gens: 13, #ops: 0, parent:37]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java348
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(-real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(-real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 38, #gens: 13, #ops: 1, parent:37] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 38, errors: [Complex.java:506: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
				return createComplex(-real, -imaginary);}} 		return false;} 	/**
				                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(19): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(-real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (37(f=1.0), 38(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (37(f=1.0), )
----------Running generation: 20, population size: 1

***** Generation 20 : 0
**Parent Variant: [Variant id: 39, #gens: 13, #ops: 0, parent:-]

--Child created id: 40
--Creating new operations for variant [Variant id: 40, #gens: 13, #ops: 0, parent:39]
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java102
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 40, #gens: 13, #ops: 1, parent:39] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 40, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(20): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (39(f=1.0), 40(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (39(f=1.0), )
----------Running generation: 21, population size: 1

***** Generation 21 : 0
**Parent Variant: [Variant id: 41, #gens: 13, #ops: 0, parent:-]

--Child created id: 42
--Creating new operations for variant [Variant id: 42, #gens: 13, #ops: 0, parent:41]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 42, #gens: 12, #ops: 1, parent:41] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 42, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(21): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (41(f=1.0), 42(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (41(f=1.0), )
----------Running generation: 22, population size: 1

***** Generation 22 : 0
**Parent Variant: [Variant id: 43, #gens: 13, #ops: 0, parent:-]

--Child created id: 44
--Creating new operations for variant [Variant id: 44, #gens: 13, #ops: 0, parent:43]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 1
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  this.real = real
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [isInfinite, isNaN, real, imaginary]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java103
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 44, #gens: 13, #ops: 1, parent:43] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 44
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-44/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(22): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (43(f=1.0), 44(f=1.0), )
Selected to next generation: IDs2--> (43(f=1.0), )
----------Running generation: 23, population size: 1

***** Generation 23 : 0
**Parent Variant: [Variant id: 45, #gens: 13, #ops: 0, parent:-]

--Child created id: 46
--Creating new operations for variant [Variant id: 46, #gens: 13, #ops: 0, parent:45]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 46, #gens: 12, #ops: 1, parent:45] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 46
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-46/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(23): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (45(f=1.0), 46(f=1.0), )
Selected to next generation: IDs2--> (45(f=1.0), )
----------Running generation: 24, population size: 1

***** Generation 24 : 0
**Parent Variant: [Variant id: 47, #gens: 13, #ops: 0, parent:-]

--Child created id: 48
--Creating new operations for variant [Variant id: 48, #gens: 13, #ops: 0, parent:47]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch []
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 48, #gens: 13, #ops: 1, parent:47] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 48, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return createComplex(1.0, 0.0);
	    	                    	                                     		                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(24): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (47(f=1.0), 48(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (47(f=1.0), )
----------Running generation: 25, population size: 1

***** Generation 25 : 0
**Parent Variant: [Variant id: 49, #gens: 13, #ops: 0, parent:-]

--Child created id: 50
--Creating new operations for variant [Variant id: 50, #gens: 13, #ops: 0, parent:49]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
vars from patch [isNaN, real, imaginary]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java102
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 50, #gens: 13, #ops: 1, parent:49] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 50
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-50/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(25): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (49(f=1.0), 50(f=1.0), )
Selected to next generation: IDs2--> (49(f=1.0), )
----------Running generation: 26, population size: 1

***** Generation 26 : 0
**Parent Variant: [Variant id: 51, #gens: 13, #ops: 0, parent:-]

--Child created id: 52
--Creating new operations for variant [Variant id: 52, #gens: 13, #ops: 0, parent:51]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 52, #gens: 14, #ops: 1, parent:51] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 52, errors: [Complex.java:340: error: incompatible types: double cannot be converted to boolean
	public boolean equals(java.lang.Object other) { 		if (imaginary == 0.0) { 			return org.apache.commons.math3.util.FastMath.abs(real);}
	                                                		                        			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(26): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (51(f=1.0), 52(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (51(f=1.0), )
----------Running generation: 27, population size: 1

***** Generation 27 : 0
**Parent Variant: [Variant id: 53, #gens: 13, #ops: 0, parent:-]

--Child created id: 54
--Creating new operations for variant [Variant id: 54, #gens: 13, #ops: 0, parent:53]
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 54, #gens: 12, #ops: 1, parent:53] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 54
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-54/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(27): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (53(f=1.0), 54(f=1.0), )
Selected to next generation: IDs2--> (53(f=1.0), )
----------Running generation: 28, population size: 1

***** Generation 28 : 0
**Parent Variant: [Variant id: 55, #gens: 13, #ops: 0, parent:-]

--Child created id: 56
--Creating new operations for variant [Variant id: 56, #gens: 13, #ops: 0, parent:55]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 56, #gens: 12, #ops: 1, parent:55] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 56
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-56/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(28): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (55(f=1.0), 56(f=15.0), )
Selected to next generation: IDs2--> (55(f=1.0), )
----------Running generation: 29, population size: 1

***** Generation 29 : 0
**Parent Variant: [Variant id: 57, #gens: 13, #ops: 0, parent:-]

--Child created id: 58
--Creating new operations for variant [Variant id: 58, #gens: 13, #ops: 0, parent:57]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 1
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 58, #gens: 12, #ops: 1, parent:57] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 58
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-58/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(29): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (57(f=1.0), 58(f=16.0), )
Selected to next generation: IDs2--> (57(f=1.0), )
----------Running generation: 30, population size: 1

***** Generation 30 : 0
**Parent Variant: [Variant id: 59, #gens: 13, #ops: 0, parent:-]

--Child created id: 60
--Creating new operations for variant [Variant id: 60, #gens: 13, #ops: 0, parent:59]
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real, imaginary, q]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 60, #gens: 13, #ops: 1, parent:59] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 60, errors: [Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 				if (imaginary == 0.0) { 					return org.apache.commons.math3.util.FastMath.abs(real);} 				double q = real / imaginary; 				return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 				if (real == 0.0) { 					return org.apache.commons.math3.util.FastMath.abs(imaginary);} 				double q = imaginary / real; 				return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
			                                                                                                   			                                                                                                                				                        					                                                 ^, Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 				if (imaginary == 0.0) { 					return org.apache.commons.math3.util.FastMath.abs(real);} 				double q = real / imaginary; 				return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 				if (real == 0.0) { 					return org.apache.commons.math3.util.FastMath.abs(imaginary);} 				double q = imaginary / real; 				return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
			                                                                                                   			                                                                                                                				                        					                                                          				                             				                                                             ^, Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 				if (imaginary == 0.0) { 					return org.apache.commons.math3.util.FastMath.abs(real);} 				double q = real / imaginary; 				return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 				if (real == 0.0) { 					return org.apache.commons.math3.util.FastMath.abs(imaginary);} 				double q = imaginary / real; 				return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
			                                                                                                   			                                                                                                                				                        					                                                          				                             				                                                                                                                                 				                   					                                                 ^, Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 				if (imaginary == 0.0) { 					return org.apache.commons.math3.util.FastMath.abs(real);} 				double q = real / imaginary; 				return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 				if (real == 0.0) { 					return org.apache.commons.math3.util.FastMath.abs(imaginary);} 				double q = imaginary / real; 				return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
			                                                                                                   			                                                                                                                				                        					                                                          				                             				                                                                                                                                 				                   					                                                               				                             				                                                        ^]
Ingredient counter is Zero
---Undoing: gnrtn(30): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (59(f=1.0), 60(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (59(f=1.0), )
----------Running generation: 31, population size: 1

***** Generation 31 : 0
**Parent Variant: [Variant id: 61, #gens: 13, #ops: 0, parent:-]

--Child created id: 62
--Creating new operations for variant [Variant id: 62, #gens: 13, #ops: 0, parent:61]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 62, #gens: 12, #ops: 1, parent:61] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 62
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-62/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(31): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (61(f=1.0), 62(f=1.0), )
Selected to next generation: IDs2--> (61(f=1.0), )
----------Running generation: 32, population size: 1

***** Generation 32 : 0
**Parent Variant: [Variant id: 63, #gens: 13, #ops: 0, parent:-]

--Child created id: 64
--Creating new operations for variant [Variant id: 64, #gens: 13, #ops: 0, parent:63]
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [this.real]
--> var from patch: this.real spoon.support.reflect.code.CtFieldWriteImpl
SameName: double real
SameName: double real
Transforming shadowed variable in real = real
location: Complex.java99
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 64, #gens: 13, #ops: 1, parent:63] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 64, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(32): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (63(f=1.0), 64(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (63(f=1.0), )
----------Running generation: 33, population size: 1

***** Generation 33 : 0
**Parent Variant: [Variant id: 65, #gens: 13, #ops: 0, parent:-]

--Child created id: 66
--Creating new operations for variant [Variant id: 66, #gens: 13, #ops: 0, parent:65]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 66, #gens: 14, #ops: 1, parent:65] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 66, errors: [Complex.java:1496: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1496: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1498: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1498: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1499: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1499: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1499: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1500: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1501: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1501: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1501: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1502: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1502: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1502: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1502: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1502: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1503: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1504: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1504: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1504: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1504: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1504: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1504: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1504: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1505: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1505: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1505: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1505: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1505: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1505: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1513: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1513: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1513: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1513: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1513: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1513: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1513: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1519: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1519: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1519: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1519: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1519: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1526: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1526: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1528: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1528: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1530: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1530: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(33): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (65(f=1.0), 66(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (65(f=1.0), )
----------Running generation: 34, population size: 1

***** Generation 34 : 0
**Parent Variant: [Variant id: 67, #gens: 13, #ops: 0, parent:-]

--Child created id: 68
--Creating new operations for variant [Variant id: 68, #gens: 13, #ops: 0, parent:67]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 1 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 68, #gens: 12, #ops: 1, parent:67] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 68
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-68/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(34): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (67(f=1.0), 68(f=15.0), )
Selected to next generation: IDs2--> (67(f=1.0), )
----------Running generation: 35, population size: 1

***** Generation 35 : 0
**Parent Variant: [Variant id: 69, #gens: 13, #ops: 0, parent:-]

--Child created id: 70
--Creating new operations for variant [Variant id: 70, #gens: 13, #ops: 0, parent:69]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 70, #gens: 14, #ops: 1, parent:69] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 70, errors: [Complex.java:303: error: cannot assign a value to final variable imaginary
		} 		imaginary = imaginary;
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(35): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (69(f=1.0), 70(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (69(f=1.0), )
----------Running generation: 36, population size: 1

***** Generation 36 : 0
**Parent Variant: [Variant id: 71, #gens: 13, #ops: 0, parent:-]

--Child created id: 72
--Creating new operations for variant [Variant id: 72, #gens: 13, #ops: 0, parent:71]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 72, #gens: 12, #ops: 1, parent:71] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 72
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-72/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(36): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (71(f=1.0), 72(f=1.0), )
Selected to next generation: IDs2--> (71(f=1.0), )
----------Running generation: 37, population size: 1

***** Generation 37 : 0
**Parent Variant: [Variant id: 73, #gens: 13, #ops: 0, parent:-]

--Child created id: 74
--Creating new operations for variant [Variant id: 74, #gens: 13, #ops: 0, parent:73]
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [isInfinite, isNaN, real, imaginary]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java99
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 74, #gens: 13, #ops: 1, parent:73] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 74, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^, Complex.java:105: error: variable isInfinite might already have been assigned
		(java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)); 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));
		                                                                               		                            		                                                                           		^, Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(37): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (73(f=1.0), 74(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (73(f=1.0), )
----------Running generation: 38, population size: 1

***** Generation 38 : 0
**Parent Variant: [Variant id: 75, #gens: 13, #ops: 0, parent:-]

--Child created id: 76
--Creating new operations for variant [Variant id: 76, #gens: 13, #ops: 0, parent:75]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 76, #gens: 14, #ops: 1, parent:75] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 76, errors: [Complex.java:310: error: incompatible types: unexpected return value
			return org.apache.commons.math3.complex.Complex.ZERO;
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(38): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (75(f=1.0), 76(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (75(f=1.0), )
----------Running generation: 39, population size: 1

***** Generation 39 : 0
**Parent Variant: [Variant id: 77, #gens: 13, #ops: 0, parent:-]

--Child created id: 78
--Creating new operations for variant [Variant id: 78, #gens: 13, #ops: 0, parent:77]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 78, #gens: 12, #ops: 1, parent:77] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 78
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-78/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(39): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (77(f=1.0), 78(f=1.0), )
Selected to next generation: IDs2--> (77(f=1.0), )
----------Running generation: 40, population size: 1

***** Generation 40 : 0
**Parent Variant: [Variant id: 79, #gens: 13, #ops: 0, parent:-]

--Child created id: 80
--Creating new operations for variant [Variant id: 80, #gens: 13, #ops: 0, parent:79]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 80, #gens: 12, #ops: 1, parent:79] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 80, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(40): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (79(f=1.0), 80(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (79(f=1.0), )
----------Running generation: 41, population size: 1

***** Generation 41 : 0
**Parent Variant: [Variant id: 81, #gens: 13, #ops: 0, parent:-]

--Child created id: 82
--Creating new operations for variant [Variant id: 82, #gens: 13, #ops: 0, parent:81]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 82, #gens: 12, #ops: 1, parent:81] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 82, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(41): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (81(f=1.0), 82(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (81(f=1.0), )
----------Running generation: 42, population size: 1

***** Generation 42 : 0
**Parent Variant: [Variant id: 83, #gens: 13, #ops: 0, parent:-]

--Child created id: 84
--Creating new operations for variant [Variant id: 84, #gens: 13, #ops: 0, parent:83]
---analyzing modificationPoint position: 0
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, isNaN, real, imaginary]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 84, #gens: 14, #ops: 1, parent:83] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 84, errors: [Complex.java:344: error: cannot assign a value to final variable isInfinite
		if (other instanceof org.apache.commons.math3.complex.Complex) { 			isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));
		                                                                 			^]
Ingredient counter is Zero
---Undoing: gnrtn(42): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (83(f=1.0), 84(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (83(f=1.0), )
----------Running generation: 43, population size: 1

***** Generation 43 : 0
**Parent Variant: [Variant id: 85, #gens: 13, #ops: 0, parent:-]

--Child created id: 86
--Creating new operations for variant [Variant id: 86, #gens: 13, #ops: 0, parent:85]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 86, #gens: 12, #ops: 1, parent:85] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 86
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-86/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(43): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (85(f=1.0), 86(f=1.0), )
Selected to next generation: IDs2--> (85(f=1.0), )
----------Running generation: 44, population size: 1

***** Generation 44 : 0
**Parent Variant: [Variant id: 87, #gens: 13, #ops: 0, parent:-]

--Child created id: 88
--Creating new operations for variant [Variant id: 88, #gens: 13, #ops: 0, parent:87]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 88, #gens: 12, #ops: 1, parent:87] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 88, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(44): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (87(f=1.0), 88(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (87(f=1.0), )
----------Running generation: 45, population size: 1

***** Generation 45 : 0
**Parent Variant: [Variant id: 89, #gens: 13, #ops: 0, parent:-]

--Child created id: 90
--Creating new operations for variant [Variant id: 90, #gens: 13, #ops: 0, parent:89]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 90, #gens: 14, #ops: 1, parent:89] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 90, errors: [Complex.java:1555: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1555: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1557: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1557: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1558: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1558: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1558: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1559: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1560: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1560: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1560: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1561: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1561: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1561: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1561: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1561: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1562: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1563: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1563: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1563: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1563: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1563: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1563: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1563: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1564: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1564: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1564: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1564: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1564: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1564: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1572: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1572: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1572: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1572: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1572: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1572: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1572: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1578: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1578: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1578: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1578: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1578: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1585: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1585: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1587: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1587: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1589: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1589: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(45): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (89(f=1.0), 90(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (89(f=1.0), )
----------Running generation: 46, population size: 1

***** Generation 46 : 0
**Parent Variant: [Variant id: 91, #gens: 13, #ops: 0, parent:-]

--Child created id: 92
--Creating new operations for variant [Variant id: 92, #gens: 13, #ops: 0, parent:91]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 92, #gens: 12, #ops: 1, parent:91] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 92, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(46): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (91(f=1.0), 92(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (91(f=1.0), )
----------Running generation: 47, population size: 1

***** Generation 47 : 0
**Parent Variant: [Variant id: 93, #gens: 13, #ops: 0, parent:-]

--Child created id: 94
--Creating new operations for variant [Variant id: 94, #gens: 13, #ops: 0, parent:93]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 94, #gens: 12, #ops: 1, parent:93] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 94
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-94/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(47): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (93(f=1.0), 94(f=1.0), )
Selected to next generation: IDs2--> (93(f=1.0), )
----------Running generation: 48, population size: 1

***** Generation 48 : 0
**Parent Variant: [Variant id: 95, #gens: 13, #ops: 0, parent:-]

--Child created id: 96
--Creating new operations for variant [Variant id: 96, #gens: 13, #ops: 0, parent:95]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
Transforming shadowed variable in return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
org.apache.commons.math3.util.MathUtils.hash(real))
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 96, #gens: 14, #ops: 1, parent:95] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 96, errors: [Complex.java:367: error: incompatible types: unexpected return value
		return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
		          ^]
Ingredient counter is Zero
---Undoing: gnrtn(48): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (95(f=1.0), 96(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (95(f=1.0), )
----------Running generation: 49, population size: 1

***** Generation 49 : 0
**Parent Variant: [Variant id: 97, #gens: 13, #ops: 0, parent:-]

--Child created id: 98
--Creating new operations for variant [Variant id: 98, #gens: 13, #ops: 0, parent:97]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return 7; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return 7; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 98, #gens: 14, #ops: 1, parent:97] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 98, errors: [Complex.java:365: error: incompatible types: int cannot be converted to boolean
			return 7;
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(49): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return 7; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (97(f=1.0), 98(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (97(f=1.0), )
----------Running generation: 50, population size: 1

***** Generation 50 : 0
**Parent Variant: [Variant id: 99, #gens: 13, #ops: 0, parent:-]

--Child created id: 100
--Creating new operations for variant [Variant id: 100, #gens: 13, #ops: 0, parent:99]
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java103
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 100, #gens: 13, #ops: 1, parent:99] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 100, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(50): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (99(f=1.0), 100(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (99(f=1.0), )
----------Running generation: 51, population size: 1

***** Generation 51 : 0
**Parent Variant: [Variant id: 101, #gens: 13, #ops: 0, parent:-]

--Child created id: 102
--Creating new operations for variant [Variant id: 102, #gens: 13, #ops: 0, parent:101]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 102, #gens: 12, #ops: 1, parent:101] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 102
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-102/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(51): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (101(f=1.0), 102(f=1.0), )
Selected to next generation: IDs2--> (101(f=1.0), )
----------Running generation: 52, population size: 1

***** Generation 52 : 0
**Parent Variant: [Variant id: 103, #gens: 13, #ops: 0, parent:-]

--Child created id: 104
--Creating new operations for variant [Variant id: 104, #gens: 13, #ops: 0, parent:103]
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 104, #gens: 12, #ops: 1, parent:103] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 104, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(52): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (103(f=1.0), 104(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (103(f=1.0), )
----------Running generation: 53, population size: 1

***** Generation 53 : 0
**Parent Variant: [Variant id: 105, #gens: 13, #ops: 0, parent:-]

--Child created id: 106
--Creating new operations for variant [Variant id: 106, #gens: 13, #ops: 0, parent:105]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 0
---modifPoint 1 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 106, #gens: 12, #ops: 1, parent:105] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 106, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(53): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (105(f=1.0), 106(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (105(f=1.0), )
----------Running generation: 54, population size: 1

***** Generation 54 : 0
**Parent Variant: [Variant id: 107, #gens: 13, #ops: 0, parent:-]

--Child created id: 108
--Creating new operations for variant [Variant id: 108, #gens: 13, #ops: 0, parent:107]
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 108, #gens: 12, #ops: 1, parent:107] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 108
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-108/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(54): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (107(f=1.0), 108(f=16.0), )
Selected to next generation: IDs2--> (107(f=1.0), )
----------Running generation: 55, population size: 1

***** Generation 55 : 0
**Parent Variant: [Variant id: 109, #gens: 13, #ops: 0, parent:-]

--Child created id: 110
--Creating new operations for variant [Variant id: 110, #gens: 13, #ops: 0, parent:109]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, isNaN, real, imaginary]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java102
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 110, #gens: 14, #ops: 1, parent:109] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 110, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^, Complex.java:105: error: variable isInfinite might already have been assigned
		(java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)); 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));
		                                                                               		                                                                           		^]
Ingredient counter is Zero
---Undoing: gnrtn(55): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (109(f=1.0), 110(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (109(f=1.0), )
----------Running generation: 56, population size: 1

***** Generation 56 : 0
**Parent Variant: [Variant id: 111, #gens: 13, #ops: 0, parent:-]

--Child created id: 112
--Creating new operations for variant [Variant id: 112, #gens: 13, #ops: 0, parent:111]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 112, #gens: 12, #ops: 1, parent:111] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 112, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(56): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (111(f=1.0), 112(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (111(f=1.0), )
----------Running generation: 57, population size: 1

***** Generation 57 : 0
**Parent Variant: [Variant id: 113, #gens: 13, #ops: 0, parent:-]

--Child created id: 114
--Creating new operations for variant [Variant id: 114, #gens: 13, #ops: 0, parent:113]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 114, #gens: 12, #ops: 1, parent:113] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 114, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(57): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (113(f=1.0), 114(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (113(f=1.0), )
----------Running generation: 58, population size: 1

***** Generation 58 : 0
**Parent Variant: [Variant id: 115, #gens: 13, #ops: 0, parent:-]

--Child created id: 116
--Creating new operations for variant [Variant id: 116, #gens: 13, #ops: 0, parent:115]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 116, #gens: 14, #ops: 1, parent:115] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 116, errors: [Complex.java:1536: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1536: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1538: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1538: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1539: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1539: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1539: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1540: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1541: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1541: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1541: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1542: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1542: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1542: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1542: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1542: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1543: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1544: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1544: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1544: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1544: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1544: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1544: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1544: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1545: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1545: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1545: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1545: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1545: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1545: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1553: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1553: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1553: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1553: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1553: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1553: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1553: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1559: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1559: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1566: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1566: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1568: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1568: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1570: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1570: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(58): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (115(f=1.0), 116(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (115(f=1.0), )
----------Running generation: 59, population size: 1

***** Generation 59 : 0
**Parent Variant: [Variant id: 117, #gens: 13, #ops: 0, parent:-]

--Child created id: 118
--Creating new operations for variant [Variant id: 118, #gens: 13, #ops: 0, parent:117]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java344
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 118, #gens: 14, #ops: 1, parent:117] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 118, errors: [Complex.java:1590: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1590: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1592: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1592: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1593: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1593: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1593: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1594: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1595: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1595: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1595: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1596: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1596: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1596: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1596: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1596: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1597: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1598: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1598: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1598: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1598: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1598: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1598: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1598: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1599: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1599: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1599: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1599: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1599: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1599: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1607: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1607: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1607: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1607: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1607: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1607: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1607: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1613: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1613: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1613: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1613: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1613: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1620: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1620: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1622: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1622: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1624: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1624: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(59): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (117(f=1.0), 118(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (117(f=1.0), )
----------Running generation: 60, population size: 1

***** Generation 60 : 0
**Parent Variant: [Variant id: 119, #gens: 13, #ops: 0, parent:-]

--Child created id: 120
--Creating new operations for variant [Variant id: 120, #gens: 13, #ops: 0, parent:119]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 120, #gens: 12, #ops: 1, parent:119] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 120
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-120/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(60): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (119(f=1.0), 120(f=15.0), )
Selected to next generation: IDs2--> (119(f=1.0), )
----------Running generation: 61, population size: 1

***** Generation 61 : 0
**Parent Variant: [Variant id: 121, #gens: 13, #ops: 0, parent:-]

--Child created id: 122
--Creating new operations for variant [Variant id: 122, #gens: 13, #ops: 0, parent:121]
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.ZERO, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java348
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.comp[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.comp[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 122, #gens: 14, #ops: 1, parent:121] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 122, errors: [Complex.java:348: error: incompatible types: bad type in conditional expression
			} else { 				return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.complex.Complex.NaN;
			         				                                                               ^
    org.apache.commons.math3.complex.Complex cannot be converted to boolean, Complex.java:348: error: incompatible types: bad type in conditional expression
			} else { 				return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.complex.Complex.NaN;
			         				                                                                                                               ^
    org.apache.commons.math3.complex.Complex cannot be converted to boolean]
Ingredient counter is Zero
---Undoing: gnrtn(61): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.comp[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (121(f=1.0), 122(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (121(f=1.0), )
----------Running generation: 62, population size: 1

***** Generation 62 : 0
**Parent Variant: [Variant id: 123, #gens: 13, #ops: 0, parent:-]

--Child created id: 124
--Creating new operations for variant [Variant id: 124, #gens: 13, #ops: 0, parent:123]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 124, #gens: 13, #ops: 1, parent:123] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 124, errors: [Complex.java:1320: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1320: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1322: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1322: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1323: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1323: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1323: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1324: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1325: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1325: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1325: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1326: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1326: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1326: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1326: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1326: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1327: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1328: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1328: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1328: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1328: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1328: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1328: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1328: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1329: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1329: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1329: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1329: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1329: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1329: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1337: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1337: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1337: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1337: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1337: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1337: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1337: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1343: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1343: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1343: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1343: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1343: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1350: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1350: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1352: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1352: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1354: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1354: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(62): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (123(f=1.0), 124(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (123(f=1.0), )
----------Running generation: 63, population size: 1

***** Generation 63 : 0
**Parent Variant: [Variant id: 125, #gens: 13, #ops: 0, parent:-]

--Child created id: 126
--Creating new operations for variant [Variant id: 126, #gens: 13, #ops: 0, parent:125]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 126, #gens: 13, #ops: 1, parent:125] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 126, errors: [Complex.java:367: error: incompatible types: int cannot be converted to org.apache.commons.math3.complex.Complex
			return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
			          ^]
Ingredient counter is Zero
---Undoing: gnrtn(63): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (125(f=1.0), 126(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (125(f=1.0), )
----------Running generation: 64, population size: 1

***** Generation 64 : 0
**Parent Variant: [Variant id: 127, #gens: 13, #ops: 0, parent:-]

--Child created id: 128
--Creating new operations for variant [Variant id: 128, #gens: 13, #ops: 0, parent:127]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 128, #gens: 12, #ops: 1, parent:127] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 128, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(64): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (127(f=1.0), 128(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (127(f=1.0), )
----------Running generation: 65, population size: 1

***** Generation 65 : 0
**Parent Variant: [Variant id: 129, #gens: 13, #ops: 0, parent:-]

--Child created id: 130
--Creating new operations for variant [Variant id: 130, #gens: 13, #ops: 0, parent:129]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 130, #gens: 12, #ops: 1, parent:129] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 130, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(65): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (129(f=1.0), 130(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (129(f=1.0), )
----------Running generation: 66, population size: 1

***** Generation 66 : 0
**Parent Variant: [Variant id: 131, #gens: 13, #ops: 0, parent:-]

--Child created id: 132
--Creating new operations for variant [Variant id: 132, #gens: 13, #ops: 0, parent:131]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, q]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
Transforming shadowed variable in if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) {
	if (imaginary == 0.0) {
		return org.apache.commons.math3.util.FastMath.abs(real);
	}
	double q = real / imaginary;
	return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));
} else {
	if (real == 0.0) {
		return org.apache.commons.math3.util.FastMath.abs(imaginary);
	}
	double q = imaginary / real;
	return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));
}
location: Complex.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 132, #gens: 14, #ops: 1, parent:131] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 132, errors: [Complex.java:125: error: incompatible types: unexpected return value
				return org.apache.commons.math3.util.FastMath.abs(real);
				                                                 ^, Complex.java:128: error: incompatible types: unexpected return value
			return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));
			                                                             ^, Complex.java:131: error: incompatible types: unexpected return value
				return org.apache.commons.math3.util.FastMath.abs(imaginary);
				                                                 ^, Complex.java:134: error: incompatible types: unexpected return value
			return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));
			                                                        ^]
Ingredient counter is Zero
---Undoing: gnrtn(66): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (131(f=1.0), 132(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (131(f=1.0), )
----------Running generation: 67, population size: 1

***** Generation 67 : 0
**Parent Variant: [Variant id: 133, #gens: 13, #ops: 0, parent:-]

--Child created id: 134
--Creating new operations for variant [Variant id: 134, #gens: 13, #ops: 0, parent:133]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
vars from patch [isNaN, real, imaginary]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java103
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 134, #gens: 13, #ops: 1, parent:133] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 134, errors: [Complex.java:103: error: variable isNaN might already have been assigned
		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary);
		                                                                           		^, Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(67): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (133(f=1.0), 134(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (133(f=1.0), )
----------Running generation: 68, population size: 1

***** Generation 68 : 0
**Parent Variant: [Variant id: 135, #gens: 13, #ops: 0, parent:-]

--Child created id: 136
--Creating new operations for variant [Variant id: 136, #gens: 13, #ops: 0, parent:135]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 136, #gens: 14, #ops: 1, parent:135] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 136, errors: [Complex.java:1744: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1744: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1744: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1744: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1744: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1744: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1744: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1746: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1746: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1747: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1747: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1747: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1748: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1749: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1749: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1749: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1750: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1750: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1750: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1750: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1750: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1751: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1752: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1752: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1752: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1752: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1752: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1752: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1752: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1753: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1753: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1753: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1753: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1753: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1753: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1761: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1761: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1761: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1761: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1761: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1761: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1761: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1767: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1767: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1767: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1767: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1767: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1774: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1774: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1776: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1776: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1778: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1778: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(68): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (135(f=1.0), 136(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (135(f=1.0), )
----------Running generation: 69, population size: 1

***** Generation 69 : 0
**Parent Variant: [Variant id: 137, #gens: 13, #ops: 0, parent:-]

--Child created id: 138
--Creating new operations for variant [Variant id: 138, #gens: 13, #ops: 0, parent:137]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 138, #gens: 14, #ops: 1, parent:137] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 138, errors: [Complex.java:301: error: incompatible types: double cannot be converted to org.apache.commons.math3.complex.Complex
	 */ 	public org.apache.commons.math3.complex.Complex reciprocal() { 		return java.lang.Double.POSITIVE_INFINITY; 		if (isNaN) {
	    	                                                               		                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(69): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (137(f=1.0), 138(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (137(f=1.0), )
----------Running generation: 70, population size: 1

***** Generation 70 : 0
**Parent Variant: [Variant id: 139, #gens: 13, #ops: 0, parent:-]

--Child created id: 140
--Creating new operations for variant [Variant id: 140, #gens: 13, #ops: 0, parent:139]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 5
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 140, #gens: 14, #ops: 1, parent:139] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 140
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-140/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(70): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (139(f=1.0), 140(f=1.0), )
Selected to next generation: IDs2--> (139(f=1.0), )
----------Running generation: 71, population size: 1

***** Generation 71 : 0
**Parent Variant: [Variant id: 141, #gens: 13, #ops: 0, parent:-]

--Child created id: 142
--Creating new operations for variant [Variant id: 142, #gens: 13, #ops: 0, parent:141]
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java304
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 142, #gens: 13, #ops: 1, parent:141] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 142, errors: [Complex.java:303: error: incompatible types: double cannot be converted to org.apache.commons.math3.complex.Complex
		} 		if (imaginary == 0.0) { 			return org.apache.commons.math3.util.FastMath.abs(real);}
		  		                        			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(71): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (141(f=1.0), 142(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (141(f=1.0), )
----------Running generation: 72, population size: 1

***** Generation 72 : 0
**Parent Variant: [Variant id: 143, #gens: 13, #ops: 0, parent:-]

--Child created id: 144
--Creating new operations for variant [Variant id: 144, #gens: 13, #ops: 0, parent:143]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return imaginary` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return imaginary` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 144, #gens: 13, #ops: 1, parent:143] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 144, errors: [Complex.java:377: error: incompatible types: double cannot be converted to org.apache.commons.math3.complex.Complex
			return imaginary;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(72): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return imaginary` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (143(f=1.0), 144(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (143(f=1.0), )
----------Running generation: 73, population size: 1

***** Generation 73 : 0
**Parent Variant: [Variant id: 145, #gens: 13, #ops: 0, parent:-]

--Child created id: 146
--Creating new operations for variant [Variant id: 146, #gens: 13, #ops: 0, parent:145]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java102
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 146, #gens: 14, #ops: 1, parent:145] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 146, errors: [Complex.java:352: error: incompatible types: unexpected return value
		return false; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(73): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (145(f=1.0), 146(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (145(f=1.0), )
----------Running generation: 74, population size: 1

***** Generation 74 : 0
**Parent Variant: [Variant id: 147, #gens: 13, #ops: 0, parent:-]

--Child created id: 148
--Creating new operations for variant [Variant id: 148, #gens: 13, #ops: 0, parent:147]
---analyzing modificationPoint position: 0
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 148, #gens: 14, #ops: 1, parent:147] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 148, errors: [Complex.java:367: error: incompatible types: int cannot be converted to org.apache.commons.math3.complex.Complex
		return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
		          ^]
Ingredient counter is Zero
---Undoing: gnrtn(74): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (147(f=1.0), 148(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (147(f=1.0), )
----------Running generation: 75, population size: 1

***** Generation 75 : 0
**Parent Variant: [Variant id: 149, #gens: 13, #ops: 0, parent:-]

--Child created id: 150
--Creating new operations for variant [Variant id: 150, #gens: 13, #ops: 0, parent:149]
---analyzing modificationPoint position: 0
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return org.apache.commons.math3.complex.Complex.ZERO` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return org.apache.commons.math3.complex.Complex.ZERO` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 150, #gens: 13, #ops: 1, parent:149] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 150, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return org.apache.commons.math3.complex.Complex.ZERO;
	    	                    	                                     		                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(75): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return org.apache.commons.math3.complex.Complex.ZERO` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (149(f=1.0), 150(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (149(f=1.0), )
----------Running generation: 76, population size: 1

***** Generation 76 : 0
**Parent Variant: [Variant id: 151, #gens: 13, #ops: 0, parent:-]

--Child created id: 152
--Creating new operations for variant [Variant id: 152, #gens: 13, #ops: 0, parent:151]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 1
---modifPoint 2 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 152, #gens: 12, #ops: 1, parent:151] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 152
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-152/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(76): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (151(f=1.0), 152(f=15.0), )
Selected to next generation: IDs2--> (151(f=1.0), )
----------Running generation: 77, population size: 1

***** Generation 77 : 0
**Parent Variant: [Variant id: 153, #gens: 13, #ops: 0, parent:-]

--Child created id: 154
--Creating new operations for variant [Variant id: 154, #gens: 13, #ops: 0, parent:153]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), 
org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.sinh(imaginary))
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 154, #gens: 14, #ops: 1, parent:153] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 154, errors: [Complex.java:1499: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1499: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1501: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1501: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1502: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1502: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1502: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1503: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1504: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1504: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1504: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1505: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1505: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1505: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1505: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1505: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1506: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1507: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1507: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1507: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1507: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1507: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1507: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1507: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1508: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1508: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1508: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1508: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1508: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1508: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1516: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1516: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1516: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1516: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1516: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1516: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1516: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1522: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1522: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1522: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1522: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1522: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1529: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1529: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1531: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1531: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1533: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1533: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(77): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (153(f=1.0), 154(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (153(f=1.0), )
----------Running generation: 78, population size: 1

***** Generation 78 : 0
**Parent Variant: [Variant id: 155, #gens: 13, #ops: 0, parent:-]

--Child created id: 156
--Creating new operations for variant [Variant id: 156, #gens: 13, #ops: 0, parent:155]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 156, #gens: 12, #ops: 1, parent:155] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 156
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-156/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(78): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (155(f=1.0), 156(f=16.0), )
Selected to next generation: IDs2--> (155(f=1.0), )
----------Running generation: 79, population size: 1

***** Generation 79 : 0
**Parent Variant: [Variant id: 157, #gens: 13, #ops: 0, parent:-]

--Child created id: 158
--Creating new operations for variant [Variant id: 158, #gens: 13, #ops: 0, parent:157]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [isInfinite, isNaN, real, imaginary]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java100
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 158, #gens: 13, #ops: 1, parent:157] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 158, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^, Complex.java:105: error: variable isInfinite might already have been assigned
		(java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)); 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));
		                                                                               		                                                                           		^, Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(79): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (157(f=1.0), 158(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (157(f=1.0), )
----------Running generation: 80, population size: 1

***** Generation 80 : 0
**Parent Variant: [Variant id: 159, #gens: 13, #ops: 0, parent:-]

--Child created id: 160
--Creating new operations for variant [Variant id: 160, #gens: 13, #ops: 0, parent:159]
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in if (imaginary < (-20.0)) {
	return createComplex(0.0, -1.0);
}
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 160, #gens: 14, #ops: 1, parent:159] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 160, errors: [Complex.java:1656: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1656: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1658: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1658: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1659: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1659: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1659: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1660: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1661: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1661: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1661: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1662: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1662: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1662: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1662: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1662: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1663: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1664: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1664: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1664: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1664: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1664: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1664: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1664: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1665: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1665: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1665: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1665: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1665: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1665: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1673: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1673: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1673: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1673: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1679: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1679: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1679: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1679: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1679: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1686: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1686: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1688: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1688: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1690: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1690: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(80): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (159(f=1.0), 160(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (159(f=1.0), )
----------Running generation: 81, population size: 1

***** Generation 81 : 0
**Parent Variant: [Variant id: 161, #gens: 13, #ops: 0, parent:-]

--Child created id: 162
--Creating new operations for variant [Variant id: 162, #gens: 13, #ops: 0, parent:161]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 162, #gens: 12, #ops: 1, parent:161] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 162
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-162/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(81): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (161(f=1.0), 162(f=1.0), )
Selected to next generation: IDs2--> (161(f=1.0), )
----------Running generation: 82, population size: 1

***** Generation 82 : 0
**Parent Variant: [Variant id: 163, #gens: 13, #ops: 0, parent:-]

--Child created id: 164
--Creating new operations for variant [Variant id: 164, #gens: 13, #ops: 0, parent:163]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in if (real == 0.0) {
	return org.apache.commons.math3.util.FastMath.abs(imaginary);
}
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 164, #gens: 14, #ops: 1, parent:163] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 164, errors: [Complex.java:131: error: incompatible types: unexpected return value
			return org.apache.commons.math3.util.FastMath.abs(imaginary);
			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(82): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (163(f=1.0), 164(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (163(f=1.0), )
----------Running generation: 83, population size: 1

***** Generation 83 : 0
**Parent Variant: [Variant id: 165, #gens: 13, #ops: 0, parent:-]

--Child created id: 166
--Creating new operations for variant [Variant id: 166, #gens: 13, #ops: 0, parent:165]
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
Transforming shadowed variable in double expReal = org.apache.commons.math3.util.FastMath.exp(real)
location: Complex.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 166, #gens: 14, #ops: 1, parent:165] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 166, errors: [Complex.java:1375: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1375: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1377: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1377: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1378: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1378: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1378: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1379: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1380: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1380: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1380: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1381: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1381: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1381: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1381: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1381: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1382: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1383: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1383: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1383: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1383: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1383: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1383: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1383: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1384: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1384: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1384: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1384: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1384: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1384: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1392: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1392: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1392: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1392: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1392: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1392: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1392: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1398: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1398: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1398: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1398: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1398: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1405: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1405: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1407: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1407: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1409: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1409: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(83): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (165(f=1.0), 166(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (165(f=1.0), )
----------Running generation: 84, population size: 1

***** Generation 84 : 0
**Parent Variant: [Variant id: 167, #gens: 13, #ops: 0, parent:-]

--Child created id: 168
--Creating new operations for variant [Variant id: 168, #gens: 13, #ops: 0, parent:167]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 168, #gens: 14, #ops: 1, parent:167] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 168, errors: [Complex.java:1706: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1706: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1708: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1708: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1709: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1709: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1709: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1710: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1711: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1711: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1711: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1712: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1712: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1712: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1712: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1712: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1713: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1714: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1714: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1714: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1714: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1714: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1714: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1714: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1715: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1715: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1715: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1715: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1715: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1715: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1723: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1723: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1723: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1723: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1723: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1723: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1723: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1729: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1729: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1729: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1729: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1729: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1736: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1736: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1738: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1738: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1740: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1740: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(84): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (167(f=1.0), 168(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (167(f=1.0), )
----------Running generation: 85, population size: 1

***** Generation 85 : 0
**Parent Variant: [Variant id: 169, #gens: 13, #ops: 0, parent:-]

--Child created id: 170
--Creating new operations for variant [Variant id: 170, #gens: 13, #ops: 0, parent:169]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 0
---modifPoint 2 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real, imaginary, q, scale]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: scale spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 170, #gens: 13, #ops: 1, parent:169] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 170, errors: [Complex.java:343: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}
		  		                                                                                                                			                             			                                               			                    ^, Complex.java:343: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}
		  		                                                                                                                			                             			                                               			                                                 			                             			                                               			                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(85): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (169(f=1.0), 170(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (169(f=1.0), )
----------Running generation: 86, population size: 1

***** Generation 86 : 0
**Parent Variant: [Variant id: 171, #gens: 13, #ops: 0, parent:-]

--Child created id: 172
--Creating new operations for variant [Variant id: 172, #gens: 13, #ops: 0, parent:171]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java100
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 172, #gens: 13, #ops: 1, parent:171] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 172, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(86): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (171(f=1.0), 172(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (171(f=1.0), )
----------Running generation: 87, population size: 1

***** Generation 87 : 0
**Parent Variant: [Variant id: 173, #gens: 13, #ops: 0, parent:-]

--Child created id: 174
--Creating new operations for variant [Variant id: 174, #gens: 13, #ops: 0, parent:173]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 174, #gens: 12, #ops: 1, parent:173] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 174, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(87): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (173(f=1.0), 174(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (173(f=1.0), )
----------Running generation: 88, population size: 1

***** Generation 88 : 0
**Parent Variant: [Variant id: 175, #gens: 13, #ops: 0, parent:-]

--Child created id: 176
--Creating new operations for variant [Variant id: 176, #gens: 13, #ops: 0, parent:175]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, q, scale]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: scale spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 176, #gens: 14, #ops: 1, parent:175] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 176, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}
	    	                    	                                     		                                                                                                                			                             			                                               			                    ^, Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}
	    	                    	                                     		                                                                                                                			                             			                                               			                                                 			                             			                                               			                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(88): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (175(f=1.0), 176(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (175(f=1.0), )
----------Running generation: 89, population size: 1

***** Generation 89 : 0
**Parent Variant: [Variant id: 177, #gens: 13, #ops: 0, parent:-]

--Child created id: 178
--Creating new operations for variant [Variant id: 178, #gens: 13, #ops: 0, parent:177]
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 178, #gens: 14, #ops: 1, parent:177] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 178, errors: [Complex.java:448: error: incompatible types: unexpected return value
		return org.apache.commons.math3.complex.Complex.INF; 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(89): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (177(f=1.0), 178(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (177(f=1.0), )
----------Running generation: 90, population size: 1

***** Generation 90 : 0
**Parent Variant: [Variant id: 179, #gens: 13, #ops: 0, parent:-]

--Child created id: 180
--Creating new operations for variant [Variant id: 180, #gens: 13, #ops: 0, parent:179]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java100
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 180, #gens: 13, #ops: 1, parent:179] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 180, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(90): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (179(f=1.0), 180(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (179(f=1.0), )
----------Running generation: 91, population size: 1

***** Generation 91 : 0
**Parent Variant: [Variant id: 181, #gens: 13, #ops: 0, parent:-]

--Child created id: 182
--Creating new operations for variant [Variant id: 182, #gens: 13, #ops: 0, parent:181]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch []
location: Complex.java348
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(0.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(0.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 182, #gens: 13, #ops: 1, parent:181] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 182, errors: [Complex.java:1466: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1466: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1468: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1468: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1469: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1469: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1469: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1470: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1471: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1471: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1471: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1472: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1472: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1472: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1472: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1472: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1473: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1474: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1474: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1474: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1474: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1474: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1474: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1474: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1475: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1475: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1475: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1475: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1475: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1475: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1483: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1483: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1483: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1483: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1483: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1483: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1483: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1489: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1489: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1489: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1489: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1489: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1496: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1496: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1498: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1498: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1500: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1500: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(91): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(0.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (181(f=1.0), 182(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (181(f=1.0), )
----------Running generation: 92, population size: 1

***** Generation 92 : 0
**Parent Variant: [Variant id: 183, #gens: 13, #ops: 0, parent:-]

--Child created id: 184
--Creating new operations for variant [Variant id: 184, #gens: 13, #ops: 0, parent:183]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 184, #gens: 12, #ops: 1, parent:183] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 184, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(92): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (183(f=1.0), 184(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (183(f=1.0), )
----------Running generation: 93, population size: 1

***** Generation 93 : 0
**Parent Variant: [Variant id: 185, #gens: 13, #ops: 0, parent:-]

--Child created id: 186
--Creating new operations for variant [Variant id: 186, #gens: 13, #ops: 0, parent:185]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [org.apache.commons.math3.complex.Complex.I]
--> var from patch: org.apache.commons.math3.complex.Complex.I spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 186, #gens: 13, #ops: 1, parent:185] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 186, errors: [Complex.java:1154: error: cannot find symbol
		double innerPart = nthPhi;
		                   ^
  symbol:   variable nthPhi
  location: class org.apache.commons.math3.complex.Complex, Complex.java:1157: error: cannot find symbol
			final double realPart = nthRootOfAbs * org.apache.commons.math3.util.FastMath.cos(innerPart);
			                        ^
  symbol:   variable nthRootOfAbs
  location: class org.apache.commons.math3.complex.Complex, Complex.java:1158: error: cannot find symbol
			final double imaginaryPart = nthRootOfAbs * org.apache.commons.math3.util.FastMath.sin(innerPart);
			                             ^
  symbol:   variable nthRootOfAbs
  location: class org.apache.commons.math3.complex.Complex]
Ingredient counter is Zero
---Undoing: gnrtn(93): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (185(f=1.0), 186(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (185(f=1.0), )
----------Running generation: 94, population size: 1

***** Generation 94 : 0
**Parent Variant: [Variant id: 187, #gens: 13, #ops: 0, parent:-]

--Child created id: 188
--Creating new operations for variant [Variant id: 188, #gens: 13, #ops: 0, parent:187]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in if ((real == 0.0) && (imaginary == 0.0)) {
	return createComplex(0.0, 0.0);
}
location: Complex.java102
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 188, #gens: 14, #ops: 1, parent:187] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 188, errors: [Complex.java:1583: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1583: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1583: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1583: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1583: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1583: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1583: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1585: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1585: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1586: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1586: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1586: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1587: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1588: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1588: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1588: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1589: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1589: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1589: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1589: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1589: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1590: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1591: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1591: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1591: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1591: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1591: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1591: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1591: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1592: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1592: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1592: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1592: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1592: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1592: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1600: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1600: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1600: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1600: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1600: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1600: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1600: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1606: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1606: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1606: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1606: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1606: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1613: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1613: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1615: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1615: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1617: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1617: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(94): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (187(f=1.0), 188(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (187(f=1.0), )
----------Running generation: 95, population size: 1

***** Generation 95 : 0
**Parent Variant: [Variant id: 189, #gens: 13, #ops: 0, parent:-]

--Child created id: 190
--Creating new operations for variant [Variant id: 190, #gens: 13, #ops: 0, parent:189]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, isNaN, real, imaginary]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 190, #gens: 14, #ops: 1, parent:189] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 190, errors: [Complex.java:1228: error: cannot assign a value to final variable isInfinite
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));
	    	                    	                                     		^]
Ingredient counter is Zero
---Undoing: gnrtn(95): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (189(f=1.0), 190(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (189(f=1.0), )
----------Running generation: 96, population size: 1

***** Generation 96 : 0
**Parent Variant: [Variant id: 191, #gens: 13, #ops: 0, parent:-]

--Child created id: 192
--Creating new operations for variant [Variant id: 192, #gens: 13, #ops: 0, parent:191]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 192, #gens: 12, #ops: 1, parent:191] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 192, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(96): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (191(f=1.0), 192(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (191(f=1.0), )
----------Running generation: 97, population size: 1

***** Generation 97 : 0
**Parent Variant: [Variant id: 193, #gens: 13, #ops: 0, parent:-]

--Child created id: 194
--Creating new operations for variant [Variant id: 194, #gens: 13, #ops: 0, parent:193]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
Transforming shadowed variable in return createComplex(org.apache.commons.math3.util.FastMath.log(abs()), 
org.apache.commons.math3.util.FastMath.atan2(imaginary, real))
location: Complex.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 194, #gens: 14, #ops: 1, parent:193] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 194, errors: [Complex.java:1421: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1421: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1423: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1423: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1424: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1424: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1424: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1425: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1426: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1426: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1426: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1427: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1427: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1427: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1427: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1427: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1428: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1429: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1429: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1429: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1429: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1429: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1429: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1429: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1430: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1430: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1430: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1430: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1430: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1430: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1438: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1438: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1438: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1438: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1438: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1438: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1438: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1444: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1444: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1444: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1444: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1444: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1451: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1451: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1453: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1453: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1455: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1455: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(97): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (193(f=1.0), 194(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (193(f=1.0), )
----------Running generation: 98, population size: 1

***** Generation 98 : 0
**Parent Variant: [Variant id: 195, #gens: 13, #ops: 0, parent:-]

--Child created id: 196
--Creating new operations for variant [Variant id: 196, #gens: 13, #ops: 0, parent:195]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 196, #gens: 12, #ops: 1, parent:195] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 196
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-196/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(98): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (195(f=1.0), 196(f=1.0), )
Selected to next generation: IDs2--> (195(f=1.0), )
----------Running generation: 99, population size: 1

***** Generation 99 : 0
**Parent Variant: [Variant id: 197, #gens: 13, #ops: 0, parent:-]

--Child created id: 198
--Creating new operations for variant [Variant id: 198, #gens: 13, #ops: 0, parent:197]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 198, #gens: 14, #ops: 1, parent:197] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 198, errors: [Complex.java:1499: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1499: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1501: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1501: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1502: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1502: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1502: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1503: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1504: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1504: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1504: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1505: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1505: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1505: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1505: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1505: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1506: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1507: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1507: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1507: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1507: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1507: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1507: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1507: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1508: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1508: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1508: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1508: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1508: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1508: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1516: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1516: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1516: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1516: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1516: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1516: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1516: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1522: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1522: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1522: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1522: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1522: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1529: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1529: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1531: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1531: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1533: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1533: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(99): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (197(f=1.0), 198(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (197(f=1.0), )
----------Running generation: 100, population size: 1

***** Generation 100 : 0
**Parent Variant: [Variant id: 199, #gens: 13, #ops: 0, parent:-]

--Child created id: 200
--Creating new operations for variant [Variant id: 200, #gens: 13, #ops: 0, parent:199]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java348
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 200, #gens: 14, #ops: 1, parent:199] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 200, errors: [Complex.java:1539: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1539: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1541: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1541: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1542: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1542: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1542: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1543: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1544: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1544: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1544: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1545: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1545: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1545: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1545: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1545: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1546: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1547: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1547: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1547: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1547: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1547: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1547: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1547: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1548: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1548: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1548: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1548: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1548: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1548: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1556: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1556: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1556: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1556: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1556: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1556: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1556: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1562: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1562: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1562: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1562: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1562: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1569: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1569: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1571: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1571: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1573: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1573: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(100): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (199(f=1.0), 200(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (199(f=1.0), )
----------Running generation: 101, population size: 1

***** Generation 101 : 0
**Parent Variant: [Variant id: 201, #gens: 13, #ops: 0, parent:-]

--Child created id: 202
--Creating new operations for variant [Variant id: 202, #gens: 13, #ops: 0, parent:201]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java102
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 202, #gens: 14, #ops: 1, parent:201] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 202, errors: [Complex.java:121: error: incompatible types: unexpected return value
		return java.lang.Double.POSITIVE_INFINITY; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(101): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (201(f=1.0), 202(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (201(f=1.0), )
----------Running generation: 102, population size: 1

***** Generation 102 : 0
**Parent Variant: [Variant id: 203, #gens: 13, #ops: 0, parent:-]

--Child created id: 204
--Creating new operations for variant [Variant id: 204, #gens: 13, #ops: 0, parent:203]
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java300
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 204, #gens: 13, #ops: 1, parent:203] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 204, errors: [Complex.java:1606: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1606: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1608: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1608: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1609: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1609: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1609: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1610: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1611: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1611: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1611: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1612: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1612: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1612: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1612: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1612: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1613: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1614: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1614: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1614: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1614: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1614: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1614: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1614: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1615: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1615: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1615: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1615: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1615: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1615: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1623: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1623: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1623: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1623: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1623: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1623: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1623: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1629: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1629: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1629: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1629: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1629: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1636: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1636: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1638: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1638: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1640: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1640: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(102): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (203(f=1.0), 204(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (203(f=1.0), )
----------Running generation: 103, population size: 1

***** Generation 103 : 0
**Parent Variant: [Variant id: 205, #gens: 13, #ops: 0, parent:-]

--Child created id: 206
--Creating new operations for variant [Variant id: 206, #gens: 13, #ops: 0, parent:205]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real, imaginary, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 206, #gens: 13, #ops: 1, parent:205] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 206, errors: [Complex.java:343: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		} 		if ((real == 0.0) && (imaginary == 0.0)) { 			return org.apache.commons.math3.complex.Complex.NaN;}
		  		                                           			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(103): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (205(f=1.0), 206(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (205(f=1.0), )
----------Running generation: 104, population size: 1

***** Generation 104 : 0
**Parent Variant: [Variant id: 207, #gens: 13, #ops: 0, parent:-]

--Child created id: 208
--Creating new operations for variant [Variant id: 208, #gens: 13, #ops: 0, parent:207]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 208, #gens: 12, #ops: 1, parent:207] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 208, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(104): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (207(f=1.0), 208(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (207(f=1.0), )
----------Running generation: 105, population size: 1

***** Generation 105 : 0
**Parent Variant: [Variant id: 209, #gens: 13, #ops: 0, parent:-]

--Child created id: 210
--Creating new operations for variant [Variant id: 210, #gens: 13, #ops: 0, parent:209]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 210, #gens: 12, #ops: 1, parent:209] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 210, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(105): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (209(f=1.0), 210(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (209(f=1.0), )
----------Running generation: 106, population size: 1

***** Generation 106 : 0
**Parent Variant: [Variant id: 211, #gens: 13, #ops: 0, parent:-]

--Child created id: 212
--Creating new operations for variant [Variant id: 212, #gens: 13, #ops: 0, parent:211]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 212, #gens: 14, #ops: 1, parent:211] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 212, errors: [Complex.java:1706: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1706: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1706: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1708: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1708: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1709: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1709: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1709: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1710: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1711: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1711: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1711: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1712: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1712: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1712: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1712: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1712: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1713: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1714: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1714: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1714: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1714: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1714: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1714: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1714: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1715: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1715: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1715: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1715: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1715: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1715: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1723: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1723: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1723: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1723: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1723: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1723: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1723: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1729: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1729: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1729: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1729: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1729: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1736: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1736: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1738: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1738: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1740: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1740: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(106): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (211(f=1.0), 212(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (211(f=1.0), )
----------Running generation: 107, population size: 1

***** Generation 107 : 0
**Parent Variant: [Variant id: 213, #gens: 13, #ops: 0, parent:-]

--Child created id: 214
--Creating new operations for variant [Variant id: 214, #gens: 13, #ops: 0, parent:213]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 214, #gens: 14, #ops: 1, parent:213] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 214, errors: [Complex.java:1259: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1259: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1261: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1261: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1262: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1262: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1262: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1263: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1264: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1264: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1264: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1265: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1265: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1265: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1265: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1265: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1266: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1267: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1267: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1267: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1267: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1267: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1267: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1267: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1268: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1268: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1268: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1268: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1268: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1268: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1276: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1276: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1276: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1276: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1276: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1276: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1276: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1282: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1282: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1282: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1282: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1282: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1289: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1289: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1291: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1291: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1293: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1293: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(107): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (213(f=1.0), 214(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (213(f=1.0), )
----------Running generation: 108, population size: 1

***** Generation 108 : 0
**Parent Variant: [Variant id: 215, #gens: 13, #ops: 0, parent:-]

--Child created id: 216
--Creating new operations for variant [Variant id: 216, #gens: 13, #ops: 0, parent:215]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 1 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 4 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 216, #gens: 12, #ops: 1, parent:215] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 216
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-216/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(108): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (215(f=1.0), 216(f=1.0), )
Selected to next generation: IDs2--> (215(f=1.0), )
----------Running generation: 109, population size: 1

***** Generation 109 : 0
**Parent Variant: [Variant id: 217, #gens: 13, #ops: 0, parent:-]

--Child created id: 218
--Creating new operations for variant [Variant id: 218, #gens: 13, #ops: 0, parent:217]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return 7` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return 7` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 218, #gens: 14, #ops: 1, parent:217] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 218, errors: [Complex.java:365: error: incompatible types: unexpected return value
		return 7;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(109): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return 7` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (217(f=1.0), 218(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (217(f=1.0), )
----------Running generation: 110, population size: 1

***** Generation 110 : 0
**Parent Variant: [Variant id: 219, #gens: 13, #ops: 0, parent:-]

--Child created id: 220
--Creating new operations for variant [Variant id: 220, #gens: 13, #ops: 0, parent:219]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 220, #gens: 12, #ops: 1, parent:219] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 220, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(110): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (219(f=1.0), 220(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (219(f=1.0), )
----------Running generation: 111, population size: 1

***** Generation 111 : 0
**Parent Variant: [Variant id: 221, #gens: 13, #ops: 0, parent:-]

--Child created id: 222
--Creating new operations for variant [Variant id: 222, #gens: 13, #ops: 0, parent:221]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 222, #gens: 14, #ops: 1, parent:221] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 222, errors: [Complex.java:1551: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1551: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1551: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1551: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1551: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1551: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1551: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1553: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1553: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1554: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1554: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1554: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1555: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1556: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1556: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1556: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1557: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1557: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1557: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1557: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1557: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1558: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1559: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1559: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1559: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1559: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1559: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1559: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1559: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1560: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1560: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1560: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1560: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1560: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1560: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1568: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1568: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1568: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1568: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1568: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1568: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1568: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1574: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1574: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1574: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1574: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1574: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1581: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1581: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1583: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1583: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1585: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1585: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(111): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (221(f=1.0), 222(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (221(f=1.0), )
----------Running generation: 112, population size: 1

***** Generation 112 : 0
**Parent Variant: [Variant id: 223, #gens: 13, #ops: 0, parent:-]

--Child created id: 224
--Creating new operations for variant [Variant id: 224, #gens: 13, #ops: 0, parent:223]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [isInfinite, isNaN, real, imaginary]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java102
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 224, #gens: 13, #ops: 1, parent:223] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 224, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^, Complex.java:105: error: variable isInfinite might already have been assigned
		(java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));
		                                                                               		^]
Ingredient counter is Zero
---Undoing: gnrtn(112): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (223(f=1.0), 224(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (223(f=1.0), )
----------Running generation: 113, population size: 1

***** Generation 113 : 0
**Parent Variant: [Variant id: 225, #gens: 13, #ops: 0, parent:-]

--Child created id: 226
--Creating new operations for variant [Variant id: 226, #gens: 13, #ops: 0, parent:225]
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 226, #gens: 12, #ops: 1, parent:225] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 226, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(113): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (225(f=1.0), 226(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (225(f=1.0), )
----------Running generation: 114, population size: 1

***** Generation 114 : 0
**Parent Variant: [Variant id: 227, #gens: 13, #ops: 0, parent:-]

--Child created id: 228
--Creating new operations for variant [Variant id: 228, #gens: 13, #ops: 0, parent:227]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 228, #gens: 12, #ops: 1, parent:227] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 228, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(114): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (227(f=1.0), 228(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (227(f=1.0), )
----------Running generation: 115, population size: 1

***** Generation 115 : 0
**Parent Variant: [Variant id: 229, #gens: 13, #ops: 0, parent:-]

--Child created id: 230
--Creating new operations for variant [Variant id: 230, #gens: 13, #ops: 0, parent:229]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.real = real
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 230, #gens: 12, #ops: 1, parent:229] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 230
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-230/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(115): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (229(f=1.0), 230(f=1.0), )
Selected to next generation: IDs2--> (229(f=1.0), )
----------Running generation: 116, population size: 1

***** Generation 116 : 0
**Parent Variant: [Variant id: 231, #gens: 13, #ops: 0, parent:-]

--Child created id: 232
--Creating new operations for variant [Variant id: 232, #gens: 13, #ops: 0, parent:231]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java102
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 232, #gens: 13, #ops: 1, parent:231] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 232, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(116): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (231(f=1.0), 232(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (231(f=1.0), )
----------Running generation: 117, population size: 1

***** Generation 117 : 0
**Parent Variant: [Variant id: 233, #gens: 13, #ops: 0, parent:-]

--Child created id: 234
--Creating new operations for variant [Variant id: 234, #gens: 13, #ops: 0, parent:233]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 234, #gens: 13, #ops: 1, parent:233] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 234, errors: [Complex.java:1759: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1759: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1761: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1761: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1762: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1762: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1762: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1763: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1764: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1764: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1764: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1765: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1765: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1765: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1765: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1765: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1766: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1767: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1767: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1767: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1767: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1767: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1767: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1767: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1768: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1768: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1768: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1768: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1768: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1768: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1776: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1776: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1776: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1776: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1776: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1776: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1776: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1782: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1782: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1782: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1782: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1782: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1789: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1789: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1791: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1791: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1793: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1793: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(117): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (233(f=1.0), 234(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (233(f=1.0), )
----------Running generation: 118, population size: 1

***** Generation 118 : 0
**Parent Variant: [Variant id: 235, #gens: 13, #ops: 0, parent:-]

--Child created id: 236
--Creating new operations for variant [Variant id: 236, #gens: 13, #ops: 0, parent:235]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 236, #gens: 13, #ops: 1, parent:235] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 236, errors: [Complex.java:1540: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1540: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1540: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1540: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1540: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1540: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1540: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1542: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1542: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1543: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1543: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1543: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1544: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1545: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1545: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1545: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1546: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1546: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1546: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1546: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1546: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1547: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1548: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1548: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1548: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1548: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1548: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1548: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1548: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1549: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1549: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1549: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1549: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1549: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1549: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1557: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1557: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1557: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1557: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1557: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1557: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1557: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1563: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1563: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1563: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1563: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1563: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1570: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1570: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1572: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1572: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1574: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1574: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(118): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (235(f=1.0), 236(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (235(f=1.0), )
----------Running generation: 119, population size: 1

***** Generation 119 : 0
**Parent Variant: [Variant id: 237, #gens: 13, #ops: 0, parent:-]

--Child created id: 238
--Creating new operations for variant [Variant id: 238, #gens: 13, #ops: 0, parent:237]
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, imaginary, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 238, #gens: 13, #ops: 1, parent:237] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 238, errors: [Complex.java:1600: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1600: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1600: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1600: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1600: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1600: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1600: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1602: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1602: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1603: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1603: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1603: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1604: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1605: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1605: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1605: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1606: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1606: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1606: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1606: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1606: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1607: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1608: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1608: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1608: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1608: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1608: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1608: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1608: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1609: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1609: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1609: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1609: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1609: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1609: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1617: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1617: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1617: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1617: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1617: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1617: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1617: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1623: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1623: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1623: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1623: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1623: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1630: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1630: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1632: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1632: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1634: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1634: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(119): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (237(f=1.0), 238(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (237(f=1.0), )
----------Running generation: 120, population size: 1

***** Generation 120 : 0
**Parent Variant: [Variant id: 239, #gens: 13, #ops: 0, parent:-]

--Child created id: 240
--Creating new operations for variant [Variant id: 240, #gens: 13, #ops: 0, parent:239]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 4
---modifPoint 2 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 4 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 240, #gens: 14, #ops: 1, parent:239] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 240, errors: [Complex.java:1655: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1655: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1657: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1657: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1658: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1658: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1658: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1659: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1660: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1660: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1660: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1661: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1661: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1661: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1661: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1661: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1662: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1663: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1663: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1663: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1663: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1663: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1663: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1663: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1664: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1664: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1664: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1664: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1664: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1664: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1672: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1672: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1672: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1672: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1672: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1672: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1672: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1678: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1678: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1678: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1678: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1678: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1685: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1685: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1687: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1687: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1689: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1689: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(120): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (239(f=1.0), 240(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (239(f=1.0), )
----------Running generation: 121, population size: 1

***** Generation 121 : 0
**Parent Variant: [Variant id: 241, #gens: 13, #ops: 0, parent:-]

--Child created id: 242
--Creating new operations for variant [Variant id: 242, #gens: 13, #ops: 0, parent:241]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 242, #gens: 14, #ops: 1, parent:241] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 242, errors: [Complex.java:386: error: incompatible types: double cannot be converted to boolean
		return real; 		if (other instanceof org.apache.commons.math3.complex.Complex) { 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (c.isNaN) { 				return isNaN;} else { 				return (real == c.real) && (imaginary == c.imaginary);}} 		return false;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(121): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (241(f=1.0), 242(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (241(f=1.0), )
----------Running generation: 122, population size: 1

***** Generation 122 : 0
**Parent Variant: [Variant id: 243, #gens: 13, #ops: 0, parent:-]

--Child created id: 244
--Creating new operations for variant [Variant id: 244, #gens: 13, #ops: 0, parent:243]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 244, #gens: 14, #ops: 1, parent:243] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 244, errors: [Complex.java:1655: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1655: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1655: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1657: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1657: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1658: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1658: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1658: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1659: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1660: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1660: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1660: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1661: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1661: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1661: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1661: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1661: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1662: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1663: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1663: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1663: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1663: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1663: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1663: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1663: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1664: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1664: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1664: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1664: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1664: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1664: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1672: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1672: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1672: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1672: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1672: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1672: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1672: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1678: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1678: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1678: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1678: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1678: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1685: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1685: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1687: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1687: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1689: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1689: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(122): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (243(f=1.0), 244(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (243(f=1.0), )
----------Running generation: 123, population size: 1

***** Generation 123 : 0
**Parent Variant: [Variant id: 245, #gens: 13, #ops: 0, parent:-]

--Child created id: 246
--Creating new operations for variant [Variant id: 246, #gens: 13, #ops: 0, parent:245]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 2 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in return createComplex(-real, -imaginary)
location: Complex.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(-real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(-real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 246, #gens: 14, #ops: 1, parent:245] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 246, errors: [Complex.java:506: error: incompatible types: unexpected return value
		return createComplex(-real, -imaginary); 		this.real = real; 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(123): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(-real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (245(f=1.0), 246(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (245(f=1.0), )
----------Running generation: 124, population size: 1

***** Generation 124 : 0
**Parent Variant: [Variant id: 247, #gens: 13, #ops: 0, parent:-]

--Child created id: 248
--Creating new operations for variant [Variant id: 248, #gens: 13, #ops: 0, parent:247]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
vars from patch [isNaN, real, imaginary]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java99
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 248, #gens: 13, #ops: 1, parent:247] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 248, errors: [Complex.java:103: error: variable isNaN might already have been assigned
		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary);
		                                                                           		                            		^, Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(124): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (247(f=1.0), 248(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (247(f=1.0), )
----------Running generation: 125, population size: 1

***** Generation 125 : 0
**Parent Variant: [Variant id: 249, #gens: 13, #ops: 0, parent:-]

--Child created id: 250
--Creating new operations for variant [Variant id: 250, #gens: 13, #ops: 0, parent:249]
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 250, #gens: 12, #ops: 1, parent:249] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 250
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-250/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(125): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (249(f=1.0), 250(f=1.0), )
Selected to next generation: IDs2--> (249(f=1.0), )
----------Running generation: 126, population size: 1

***** Generation 126 : 0
**Parent Variant: [Variant id: 251, #gens: 13, #ops: 0, parent:-]

--Child created id: 252
--Creating new operations for variant [Variant id: 252, #gens: 13, #ops: 0, parent:251]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 252, #gens: 12, #ops: 1, parent:251] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 252
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-252/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(126): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (251(f=1.0), 252(f=1.0), )
Selected to next generation: IDs2--> (251(f=1.0), )
----------Running generation: 127, population size: 1

***** Generation 127 : 0
**Parent Variant: [Variant id: 253, #gens: 13, #ops: 0, parent:-]

--Child created id: 254
--Creating new operations for variant [Variant id: 254, #gens: 13, #ops: 0, parent:253]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 254, #gens: 12, #ops: 1, parent:253] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 254
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-254/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(127): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (253(f=1.0), 254(f=16.0), )
Selected to next generation: IDs2--> (253(f=1.0), )
----------Running generation: 128, population size: 1

***** Generation 128 : 0
**Parent Variant: [Variant id: 255, #gens: 13, #ops: 0, parent:-]

--Child created id: 256
--Creating new operations for variant [Variant id: 256, #gens: 13, #ops: 0, parent:255]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 256, #gens: 12, #ops: 1, parent:255] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 256, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(128): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (255(f=1.0), 256(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (255(f=1.0), )
----------Running generation: 129, population size: 1

***** Generation 129 : 0
**Parent Variant: [Variant id: 257, #gens: 13, #ops: 0, parent:-]

--Child created id: 258
--Creating new operations for variant [Variant id: 258, #gens: 13, #ops: 0, parent:257]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 258, #gens: 12, #ops: 1, parent:257] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 258
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-258/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(129): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (257(f=1.0), 258(f=15.0), )
Selected to next generation: IDs2--> (257(f=1.0), )
----------Running generation: 130, population size: 1

***** Generation 130 : 0
**Parent Variant: [Variant id: 259, #gens: 13, #ops: 0, parent:-]

--Child created id: 260
--Creating new operations for variant [Variant id: 260, #gens: 13, #ops: 0, parent:259]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 2 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 260, #gens: 14, #ops: 1, parent:259] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 260, errors: [Complex.java:1733: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1733: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1733: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1733: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1733: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1733: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1733: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1735: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1735: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1736: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1736: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1736: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1737: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1738: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1738: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1738: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1739: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1739: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1739: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1739: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1739: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1740: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1741: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1741: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1741: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1741: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1741: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1741: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1741: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1742: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1742: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1742: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1742: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1742: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1742: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1750: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1750: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1750: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1750: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1750: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1750: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1750: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1756: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1756: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1756: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1756: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1756: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1763: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1763: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1765: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1765: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1767: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1767: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(130): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (259(f=1.0), 260(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (259(f=1.0), )
----------Running generation: 131, population size: 1

***** Generation 131 : 0
**Parent Variant: [Variant id: 261, #gens: 13, #ops: 0, parent:-]

--Child created id: 262
--Creating new operations for variant [Variant id: 262, #gens: 13, #ops: 0, parent:261]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 262, #gens: 12, #ops: 1, parent:261] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 262, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(131): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (261(f=1.0), 262(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (261(f=1.0), )
----------Running generation: 132, population size: 1

***** Generation 132 : 0
**Parent Variant: [Variant id: 263, #gens: 13, #ops: 0, parent:-]

--Child created id: 264
--Creating new operations for variant [Variant id: 264, #gens: 13, #ops: 0, parent:263]
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 264, #gens: 12, #ops: 1, parent:263] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 264, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(132): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (263(f=1.0), 264(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (263(f=1.0), )
----------Running generation: 133, population size: 1

***** Generation 133 : 0
**Parent Variant: [Variant id: 265, #gens: 13, #ops: 0, parent:-]

--Child created id: 266
--Creating new operations for variant [Variant id: 266, #gens: 13, #ops: 0, parent:265]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 266, #gens: 12, #ops: 1, parent:265] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 266, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(133): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (265(f=1.0), 266(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (265(f=1.0), )
----------Running generation: 134, population size: 1

***** Generation 134 : 0
**Parent Variant: [Variant id: 267, #gens: 13, #ops: 0, parent:-]

--Child created id: 268
--Creating new operations for variant [Variant id: 268, #gens: 13, #ops: 0, parent:267]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 268, #gens: 14, #ops: 1, parent:267] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 268, errors: [Complex.java:1605: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1605: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1605: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1605: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1605: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1605: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1605: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1607: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1607: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1608: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1608: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1608: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1609: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1610: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1610: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1610: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1611: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1611: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1611: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1611: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1611: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1612: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1613: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1613: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1613: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1613: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1613: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1613: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1613: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1614: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1614: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1614: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1614: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1614: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1614: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1622: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1622: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1622: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1622: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1622: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1622: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1622: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1628: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1628: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1628: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1628: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1628: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1635: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1635: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1637: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1637: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1639: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1639: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(134): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (267(f=1.0), 268(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (267(f=1.0), )
----------Running generation: 135, population size: 1

***** Generation 135 : 0
**Parent Variant: [Variant id: 269, #gens: 13, #ops: 0, parent:-]

--Child created id: 270
--Creating new operations for variant [Variant id: 270, #gens: 13, #ops: 0, parent:269]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
Transforming shadowed variable in if (real > 20.0) {
	return createComplex(1.0, 0.0);
}
location: Complex.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 270, #gens: 14, #ops: 1, parent:269] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 270, errors: [Complex.java:1704: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1704: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1704: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1704: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1704: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1704: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1704: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1706: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1706: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1707: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1707: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1707: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1708: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1709: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1709: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1709: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1710: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1710: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1710: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1710: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1710: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1711: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1712: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1712: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1712: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1712: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1712: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1712: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1712: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1713: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1713: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1713: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1713: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1713: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1713: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1721: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1721: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1721: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1721: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1721: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1721: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1721: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1727: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1727: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1727: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1727: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1727: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1734: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1734: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1736: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1736: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1738: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1738: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(135): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (269(f=1.0), 270(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (269(f=1.0), )
----------Running generation: 136, population size: 1

***** Generation 136 : 0
**Parent Variant: [Variant id: 271, #gens: 13, #ops: 0, parent:-]

--Child created id: 272
--Creating new operations for variant [Variant id: 272, #gens: 13, #ops: 0, parent:271]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 272, #gens: 14, #ops: 1, parent:271] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 272, errors: [Complex.java:1421: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1421: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1423: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1423: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1424: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1424: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1424: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1425: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1426: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1426: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1426: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1427: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1427: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1427: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1427: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1427: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1428: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1429: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1429: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1429: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1429: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1429: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1429: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1429: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1430: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1430: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1430: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1430: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1430: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1430: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1438: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1438: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1438: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1438: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1438: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1438: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1438: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1444: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1444: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1444: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1444: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1444: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1451: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1451: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1453: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1453: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1455: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1455: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(136): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (271(f=1.0), 272(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (271(f=1.0), )
----------Running generation: 137, population size: 1

***** Generation 137 : 0
**Parent Variant: [Variant id: 273, #gens: 13, #ops: 0, parent:-]

--Child created id: 274
--Creating new operations for variant [Variant id: 274, #gens: 13, #ops: 0, parent:273]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 274, #gens: 12, #ops: 1, parent:273] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 274
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-274/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(137): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (273(f=1.0), 274(f=1.0), )
Selected to next generation: IDs2--> (273(f=1.0), )
----------Running generation: 138, population size: 1

***** Generation 138 : 0
**Parent Variant: [Variant id: 275, #gens: 13, #ops: 0, parent:-]

--Child created id: 276
--Creating new operations for variant [Variant id: 276, #gens: 13, #ops: 0, parent:275]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 0
---modifPoint 2 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, isNaN, real, imaginary]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 276, #gens: 14, #ops: 1, parent:275] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 276, errors: [Complex.java:307: error: cannot assign a value to final variable isInfinite
		} 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(138): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (275(f=1.0), 276(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (275(f=1.0), )
----------Running generation: 139, population size: 1

***** Generation 139 : 0
**Parent Variant: [Variant id: 277, #gens: 13, #ops: 0, parent:-]

--Child created id: 278
--Creating new operations for variant [Variant id: 278, #gens: 13, #ops: 0, parent:277]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 278, #gens: 14, #ops: 1, parent:277] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 278, errors: [Complex.java:121: error: incompatible types: unexpected return value
		return java.lang.Double.POSITIVE_INFINITY; 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(139): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (277(f=1.0), 278(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (277(f=1.0), )
----------Running generation: 140, population size: 1

***** Generation 140 : 0
**Parent Variant: [Variant id: 279, #gens: 13, #ops: 0, parent:-]

--Child created id: 280
--Creating new operations for variant [Variant id: 280, #gens: 13, #ops: 0, parent:279]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 1 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, real, imaginary]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 280, #gens: 14, #ops: 1, parent:279] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 280, errors: [Complex.java:345: error: cannot assign a value to final variable isNaN
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary);
			                                                                                                   			^]
Ingredient counter is Zero
---Undoing: gnrtn(140): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (279(f=1.0), 280(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (279(f=1.0), )
----------Running generation: 141, population size: 1

***** Generation 141 : 0
**Parent Variant: [Variant id: 281, #gens: 13, #ops: 0, parent:-]

--Child created id: 282
--Creating new operations for variant [Variant id: 282, #gens: 13, #ops: 0, parent:281]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 282, #gens: 12, #ops: 1, parent:281] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 282, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(141): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (281(f=1.0), 282(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (281(f=1.0), )
----------Running generation: 142, population size: 1

***** Generation 142 : 0
**Parent Variant: [Variant id: 283, #gens: 13, #ops: 0, parent:-]

--Child created id: 284
--Creating new operations for variant [Variant id: 284, #gens: 13, #ops: 0, parent:283]
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java99
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 284, #gens: 13, #ops: 1, parent:283] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 284, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(142): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (283(f=1.0), 284(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (283(f=1.0), )
----------Running generation: 143, population size: 1

***** Generation 143 : 0
**Parent Variant: [Variant id: 285, #gens: 13, #ops: 0, parent:-]

--Child created id: 286
--Creating new operations for variant [Variant id: 286, #gens: 13, #ops: 0, parent:285]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 286, #gens: 12, #ops: 1, parent:285] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 286, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(143): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (285(f=1.0), 286(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (285(f=1.0), )
----------Running generation: 144, population size: 1

***** Generation 144 : 0
**Parent Variant: [Variant id: 287, #gens: 13, #ops: 0, parent:-]

--Child created id: 288
--Creating new operations for variant [Variant id: 288, #gens: 13, #ops: 0, parent:287]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 288, #gens: 12, #ops: 1, parent:287] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 288, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(144): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (287(f=1.0), 288(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (287(f=1.0), )
----------Running generation: 145, population size: 1

***** Generation 145 : 0
**Parent Variant: [Variant id: 289, #gens: 13, #ops: 0, parent:-]

--Child created id: 290
--Creating new operations for variant [Variant id: 290, #gens: 13, #ops: 0, parent:289]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 290, #gens: 12, #ops: 1, parent:289] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 290
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-290/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(145): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (289(f=1.0), 290(f=1.0), )
Selected to next generation: IDs2--> (289(f=1.0), )
----------Running generation: 146, population size: 1

***** Generation 146 : 0
**Parent Variant: [Variant id: 291, #gens: 13, #ops: 0, parent:-]

--Child created id: 292
--Creating new operations for variant [Variant id: 292, #gens: 13, #ops: 0, parent:291]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 292, #gens: 12, #ops: 1, parent:291] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 292
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-292/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(146): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (291(f=1.0), 292(f=1.0), )
Selected to next generation: IDs2--> (291(f=1.0), )
----------Running generation: 147, population size: 1

***** Generation 147 : 0
**Parent Variant: [Variant id: 293, #gens: 13, #ops: 0, parent:-]

--Child created id: 294
--Creating new operations for variant [Variant id: 294, #gens: 13, #ops: 0, parent:293]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 294, #gens: 12, #ops: 1, parent:293] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 294, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(147): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (293(f=1.0), 294(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (293(f=1.0), )
----------Running generation: 148, population size: 1

***** Generation 148 : 0
**Parent Variant: [Variant id: 295, #gens: 13, #ops: 0, parent:-]

--Child created id: 296
--Creating new operations for variant [Variant id: 296, #gens: 13, #ops: 0, parent:295]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
Attempts Base Ingredients  2 total 60
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 2 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 296, #gens: 14, #ops: 1, parent:295] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 296, errors: [Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			return org.apache.commons.math3.util.FastMath.abs(imaginary);
			                                                                                                   			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(148): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (295(f=1.0), 296(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (295(f=1.0), )
----------Running generation: 149, population size: 1

***** Generation 149 : 0
**Parent Variant: [Variant id: 297, #gens: 13, #ops: 0, parent:-]

--Child created id: 298
--Creating new operations for variant [Variant id: 298, #gens: 13, #ops: 0, parent:297]
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, real, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 298, #gens: 13, #ops: 1, parent:297] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 298, errors: [Complex.java:1534: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1534: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1536: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1536: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1537: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1537: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1537: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1538: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1539: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1539: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1539: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1540: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1540: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1540: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1540: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1540: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1541: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1542: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1542: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1542: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1542: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1542: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1542: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1542: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1543: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1543: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1543: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1543: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1543: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1543: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1551: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1551: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1551: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1551: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1551: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1551: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1551: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1557: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1557: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1557: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1557: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1557: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1564: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1564: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1566: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1566: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1568: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1568: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(149): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (297(f=1.0), 298(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (297(f=1.0), )
----------Running generation: 150, population size: 1

***** Generation 150 : 0
**Parent Variant: [Variant id: 299, #gens: 13, #ops: 0, parent:-]

--Child created id: 300
--Creating new operations for variant [Variant id: 300, #gens: 13, #ops: 0, parent:299]
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 300, #gens: 12, #ops: 1, parent:299] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 300
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-300/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(150): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (299(f=1.0), 300(f=1.0), )
Selected to next generation: IDs2--> (299(f=1.0), )
----------Running generation: 151, population size: 1

***** Generation 151 : 0
**Parent Variant: [Variant id: 301, #gens: 13, #ops: 0, parent:-]

--Child created id: 302
--Creating new operations for variant [Variant id: 302, #gens: 13, #ops: 0, parent:301]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 302, #gens: 14, #ops: 1, parent:301] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 302
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-302/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(151): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (301(f=1.0), 302(f=1.0), )
Selected to next generation: IDs2--> (301(f=1.0), )
----------Running generation: 152, population size: 1

***** Generation 152 : 0
**Parent Variant: [Variant id: 303, #gens: 13, #ops: 0, parent:-]

--Child created id: 304
--Creating new operations for variant [Variant id: 304, #gens: 13, #ops: 0, parent:303]
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java343
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(0.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(0.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 304, #gens: 14, #ops: 1, parent:303] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 304, errors: [Complex.java:1466: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1466: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1468: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1468: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1469: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1469: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1469: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1470: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1471: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1471: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1471: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1472: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1472: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1472: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1472: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1472: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1473: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1474: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1474: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1474: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1474: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1474: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1474: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1474: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1475: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1475: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1475: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1475: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1475: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1475: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1483: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1483: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1483: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1483: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1483: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1483: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1483: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1489: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1489: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1489: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1489: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1489: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1496: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1496: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1498: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1498: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1500: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1500: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(152): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(0.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (303(f=1.0), 304(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (303(f=1.0), )
----------Running generation: 153, population size: 1

***** Generation 153 : 0
**Parent Variant: [Variant id: 305, #gens: 13, #ops: 0, parent:-]

--Child created id: 306
--Creating new operations for variant [Variant id: 306, #gens: 13, #ops: 0, parent:305]
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java348
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `double t = org.apache.commons.math3.util.FastMath.sqrt((org.apache.commons.math3.util.FastMath.abs(r[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `double t = org.apache.commons.math3.util.FastMath.sqrt((org.apache.commons.math3.util.FastMath.abs(r[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 306, #gens: 14, #ops: 1, parent:305] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 306, errors: [Complex.java:1469: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1469: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1471: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1471: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1472: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1472: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1472: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1473: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1474: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1474: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1474: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1475: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1475: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1475: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1475: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1475: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1476: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1477: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1477: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1477: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1477: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1477: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1477: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1477: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1478: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1478: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1478: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1478: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1478: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1478: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1486: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1486: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1486: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1486: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1486: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1486: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1486: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1492: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1492: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1492: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1492: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1492: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1499: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1499: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1501: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1501: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1503: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1503: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(153): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `double t = org.apache.commons.math3.util.FastMath.sqrt((org.apache.commons.math3.util.FastMath.abs(r[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (305(f=1.0), 306(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (305(f=1.0), )
----------Running generation: 154, population size: 1

***** Generation 154 : 0
**Parent Variant: [Variant id: 307, #gens: 13, #ops: 0, parent:-]

--Child created id: 308
--Creating new operations for variant [Variant id: 308, #gens: 13, #ops: 0, parent:307]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 308, #gens: 14, #ops: 1, parent:307] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 308, errors: [Complex.java:367: error: incompatible types: int cannot be converted to org.apache.commons.math3.complex.Complex
		return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
		          ^]
Ingredient counter is Zero
---Undoing: gnrtn(154): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (307(f=1.0), 308(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (307(f=1.0), )
----------Running generation: 155, population size: 1

***** Generation 155 : 0
**Parent Variant: [Variant id: 309, #gens: 13, #ops: 0, parent:-]

--Child created id: 310
--Creating new operations for variant [Variant id: 310, #gens: 13, #ops: 0, parent:309]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 310, #gens: 14, #ops: 1, parent:309] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 310, errors: [Complex.java:367: error: incompatible types: int cannot be converted to boolean
		return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
		          ^]
Ingredient counter is Zero
---Undoing: gnrtn(155): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (309(f=1.0), 310(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (309(f=1.0), )
----------Running generation: 156, population size: 1

***** Generation 156 : 0
**Parent Variant: [Variant id: 311, #gens: 13, #ops: 0, parent:-]

--Child created id: 312
--Creating new operations for variant [Variant id: 312, #gens: 13, #ops: 0, parent:311]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 312, #gens: 12, #ops: 1, parent:311] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 312, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(156): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (311(f=1.0), 312(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (311(f=1.0), )
----------Running generation: 157, population size: 1

***** Generation 157 : 0
**Parent Variant: [Variant id: 313, #gens: 13, #ops: 0, parent:-]

--Child created id: 314
--Creating new operations for variant [Variant id: 314, #gens: 13, #ops: 0, parent:313]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `double q = real / imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `double q = real / imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 314, #gens: 14, #ops: 1, parent:313] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 314
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-314/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(157): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `double q = real / imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (313(f=1.0), 314(f=1.0), )
Selected to next generation: IDs2--> (313(f=1.0), )
----------Running generation: 158, population size: 1

***** Generation 158 : 0
**Parent Variant: [Variant id: 315, #gens: 13, #ops: 0, parent:-]

--Child created id: 316
--Creating new operations for variant [Variant id: 316, #gens: 13, #ops: 0, parent:315]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 316, #gens: 13, #ops: 1, parent:315] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 316, errors: [Complex.java:1591: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1591: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1593: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1593: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1594: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1594: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1594: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1595: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1596: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1596: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1596: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1597: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1597: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1597: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1597: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1597: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1598: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1599: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1599: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1599: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1599: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1599: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1599: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1599: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1600: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1600: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1600: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1600: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1600: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1600: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1608: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1608: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1614: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1614: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1614: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1614: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1614: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1621: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1621: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1623: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1623: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1625: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1625: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(158): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (315(f=1.0), 316(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (315(f=1.0), )
----------Running generation: 159, population size: 1

***** Generation 159 : 0
**Parent Variant: [Variant id: 317, #gens: 13, #ops: 0, parent:-]

--Child created id: 318
--Creating new operations for variant [Variant id: 318, #gens: 13, #ops: 0, parent:317]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 318, #gens: 12, #ops: 1, parent:317] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 318
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-318/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(159): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (317(f=1.0), 318(f=16.0), )
Selected to next generation: IDs2--> (317(f=1.0), )
----------Running generation: 160, population size: 1

***** Generation 160 : 0
**Parent Variant: [Variant id: 319, #gens: 13, #ops: 0, parent:-]

--Child created id: 320
--Creating new operations for variant [Variant id: 320, #gens: 13, #ops: 0, parent:319]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 320, #gens: 14, #ops: 1, parent:319] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 320, errors: [Complex.java:343: error: incompatible types: double cannot be converted to boolean
		} 		if (imaginary == 0.0) { 			return org.apache.commons.math3.util.FastMath.abs(real);}
		  		                        			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(160): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (319(f=1.0), 320(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (319(f=1.0), )
----------Running generation: 161, population size: 1

***** Generation 161 : 0
**Parent Variant: [Variant id: 321, #gens: 13, #ops: 0, parent:-]

--Child created id: 322
--Creating new operations for variant [Variant id: 322, #gens: 13, #ops: 0, parent:321]
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 322, #gens: 13, #ops: 1, parent:321] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 322, errors: [Complex.java:1537: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1537: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1539: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1539: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1540: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1540: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1540: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1541: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1542: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1542: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1542: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1543: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1543: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1543: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1543: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1543: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1544: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1545: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1545: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1545: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1545: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1545: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1545: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1545: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1546: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1546: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1546: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1546: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1546: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1546: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1554: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1554: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1554: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1554: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1554: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1554: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1554: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1567: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1567: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1569: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1569: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1571: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1571: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(161): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (321(f=1.0), 322(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (321(f=1.0), )
----------Running generation: 162, population size: 1

***** Generation 162 : 0
**Parent Variant: [Variant id: 323, #gens: 13, #ops: 0, parent:-]

--Child created id: 324
--Creating new operations for variant [Variant id: 324, #gens: 13, #ops: 0, parent:323]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 324, #gens: 12, #ops: 1, parent:323] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 324
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-324/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(162): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (323(f=1.0), 324(f=15.0), )
Selected to next generation: IDs2--> (323(f=1.0), )
----------Running generation: 163, population size: 1

***** Generation 163 : 0
**Parent Variant: [Variant id: 325, #gens: 13, #ops: 0, parent:-]

--Child created id: 326
--Creating new operations for variant [Variant id: 326, #gens: 13, #ops: 0, parent:325]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 326, #gens: 13, #ops: 1, parent:325] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 326, errors: [Complex.java:1228: error: incompatible types: double cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return org.apache.commons.math3.util.FastMath.abs(imaginary);
	    	                    	                                     		                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(163): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (325(f=1.0), 326(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (325(f=1.0), )
----------Running generation: 164, population size: 1

***** Generation 164 : 0
**Parent Variant: [Variant id: 327, #gens: 13, #ops: 0, parent:-]

--Child created id: 328
--Creating new operations for variant [Variant id: 328, #gens: 13, #ops: 0, parent:327]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 328, #gens: 13, #ops: 1, parent:327] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 328, errors: [Complex.java:343: error: incompatible types: double cannot be converted to boolean
		} 		if (isInfinite()) { 			return java.lang.Double.POSITIVE_INFINITY;}
		  		                    			                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(164): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (327(f=1.0), 328(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (327(f=1.0), )
----------Running generation: 165, population size: 1

***** Generation 165 : 0
**Parent Variant: [Variant id: 329, #gens: 13, #ops: 0, parent:-]

--Child created id: 330
--Creating new operations for variant [Variant id: 330, #gens: 13, #ops: 0, parent:329]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 330, #gens: 12, #ops: 1, parent:329] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 330, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(165): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (329(f=1.0), 330(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (329(f=1.0), )
----------Running generation: 166, population size: 1

***** Generation 166 : 0
**Parent Variant: [Variant id: 331, #gens: 13, #ops: 0, parent:-]

--Child created id: 332
--Creating new operations for variant [Variant id: 332, #gens: 13, #ops: 0, parent:331]
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 332, #gens: 14, #ops: 1, parent:331] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 332, errors: [Complex.java:352: error: unreachable statement
		return false; 		if (other instanceof org.apache.commons.math3.complex.Complex) { 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (c.isNaN) { 				return isNaN;} else { 				return (real == c.real) && (imaginary == c.imaginary);}} 		return false;
		              		^]
Ingredient counter is Zero
---Undoing: gnrtn(166): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (331(f=1.0), 332(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (331(f=1.0), )
----------Running generation: 167, population size: 1

***** Generation 167 : 0
**Parent Variant: [Variant id: 333, #gens: 13, #ops: 0, parent:-]

--Child created id: 334
--Creating new operations for variant [Variant id: 334, #gens: 13, #ops: 0, parent:333]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 334, #gens: 14, #ops: 1, parent:333] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 334, errors: [Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (isInfinite()) { 				return java.lang.Double.POSITIVE_INFINITY;}
			                                                                                                   			                    				                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(167): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (333(f=1.0), 334(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (333(f=1.0), )
----------Running generation: 168, population size: 1

***** Generation 168 : 0
**Parent Variant: [Variant id: 335, #gens: 13, #ops: 0, parent:-]

--Child created id: 336
--Creating new operations for variant [Variant id: 336, #gens: 13, #ops: 0, parent:335]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 336, #gens: 12, #ops: 1, parent:335] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 336
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-336/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(168): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (335(f=1.0), 336(f=1.0), )
Selected to next generation: IDs2--> (335(f=1.0), )
----------Running generation: 169, population size: 1

***** Generation 169 : 0
**Parent Variant: [Variant id: 337, #gens: 13, #ops: 0, parent:-]

--Child created id: 338
--Creating new operations for variant [Variant id: 338, #gens: 13, #ops: 0, parent:337]
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 338, #gens: 12, #ops: 1, parent:337] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 338
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-338/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(169): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (337(f=1.0), 338(f=1.0), )
Selected to next generation: IDs2--> (337(f=1.0), )
----------Running generation: 170, population size: 1

***** Generation 170 : 0
**Parent Variant: [Variant id: 339, #gens: 13, #ops: 0, parent:-]

--Child created id: 340
--Creating new operations for variant [Variant id: 340, #gens: 13, #ops: 0, parent:339]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 340, #gens: 12, #ops: 1, parent:339] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 340
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-340/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(170): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (339(f=1.0), 340(f=1.0), )
Selected to next generation: IDs2--> (339(f=1.0), )
----------Running generation: 171, population size: 1

***** Generation 171 : 0
**Parent Variant: [Variant id: 341, #gens: 13, #ops: 0, parent:-]

--Child created id: 342
--Creating new operations for variant [Variant id: 342, #gens: 13, #ops: 0, parent:341]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return 7` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return 7` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 342, #gens: 14, #ops: 1, parent:341] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 342, errors: [Complex.java:365: error: incompatible types: unexpected return value
		return 7; 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(171): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return 7` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (341(f=1.0), 342(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (341(f=1.0), )
----------Running generation: 172, population size: 1

***** Generation 172 : 0
**Parent Variant: [Variant id: 343, #gens: 13, #ops: 0, parent:-]

--Child created id: 344
--Creating new operations for variant [Variant id: 344, #gens: 13, #ops: 0, parent:343]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 1
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
Attempts Base Ingredients  2 total 24
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 3 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 4 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 344, #gens: 12, #ops: 1, parent:343] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 344
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-344/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(172): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (343(f=1.0), 344(f=1.0), )
Selected to next generation: IDs2--> (343(f=1.0), )
----------Running generation: 173, population size: 1

***** Generation 173 : 0
**Parent Variant: [Variant id: 345, #gens: 13, #ops: 0, parent:-]

--Child created id: 346
--Creating new operations for variant [Variant id: 346, #gens: 13, #ops: 0, parent:345]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java345
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 346, #gens: 14, #ops: 1, parent:345] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 346, errors: [Complex.java:345: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (isInfinite) { 				return org.apache.commons.math3.complex.Complex.ZERO;}
			                                                                                                   			                  				                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(173): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (345(f=1.0), 346(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (345(f=1.0), )
----------Running generation: 174, population size: 1

***** Generation 174 : 0
**Parent Variant: [Variant id: 347, #gens: 13, #ops: 0, parent:-]

--Child created id: 348
--Creating new operations for variant [Variant id: 348, #gens: 13, #ops: 0, parent:347]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 348, #gens: 12, #ops: 1, parent:347] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 348, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(174): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (347(f=1.0), 348(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (347(f=1.0), )
----------Running generation: 175, population size: 1

***** Generation 175 : 0
**Parent Variant: [Variant id: 349, #gens: 13, #ops: 0, parent:-]

--Child created id: 350
--Creating new operations for variant [Variant id: 350, #gens: 13, #ops: 0, parent:349]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
Attempts Base Ingredients  2 total 24
Attempts Base Ingredients  3 total 24
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java344
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double t = org.apache.commons.math3.util.FastMath.sqrt((org.apache.commons.math3.util.FastMath.abs(r[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double t = org.apache.commons.math3.util.FastMath.sqrt((org.apache.commons.math3.util.FastMath.abs(r[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 350, #gens: 13, #ops: 1, parent:349] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 350, errors: [Complex.java:1469: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1469: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1469: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1471: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1471: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1472: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1472: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1472: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1473: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1474: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1474: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1474: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1475: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1475: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1475: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1475: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1475: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1476: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1477: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1477: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1477: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1477: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1477: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1477: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1477: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1478: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1478: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1478: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1478: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1478: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1478: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1486: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1486: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1486: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1486: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1486: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1486: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1486: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1492: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1492: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1492: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1492: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1492: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1499: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1499: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1501: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1501: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1503: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1503: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(175): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double t = org.apache.commons.math3.util.FastMath.sqrt((org.apache.commons.math3.util.FastMath.abs(r[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (349(f=1.0), 350(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (349(f=1.0), )
----------Running generation: 176, population size: 1

***** Generation 176 : 0
**Parent Variant: [Variant id: 351, #gens: 13, #ops: 0, parent:-]

--Child created id: 352
--Creating new operations for variant [Variant id: 352, #gens: 13, #ops: 0, parent:351]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java100
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 352, #gens: 14, #ops: 1, parent:351] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 352, errors: [Complex.java:131: error: incompatible types: unexpected return value
			return org.apache.commons.math3.util.FastMath.abs(imaginary);
			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(176): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (351(f=1.0), 352(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (351(f=1.0), )
----------Running generation: 177, population size: 1

***** Generation 177 : 0
**Parent Variant: [Variant id: 353, #gens: 13, #ops: 0, parent:-]

--Child created id: 354
--Creating new operations for variant [Variant id: 354, #gens: 13, #ops: 0, parent:353]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 354, #gens: 14, #ops: 1, parent:353] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 354, errors: [Complex.java:310: error: incompatible types: unexpected return value
			return org.apache.commons.math3.complex.Complex.ZERO;
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(177): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (353(f=1.0), 354(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (353(f=1.0), )
----------Running generation: 178, population size: 1

***** Generation 178 : 0
**Parent Variant: [Variant id: 355, #gens: 13, #ops: 0, parent:-]

--Child created id: 356
--Creating new operations for variant [Variant id: 356, #gens: 13, #ops: 0, parent:355]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
Transforming shadowed variable in return real
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 356, #gens: 14, #ops: 1, parent:355] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 356, errors: [Complex.java:386: error: incompatible types: unexpected return value
		return real; 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(178): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (355(f=1.0), 356(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (355(f=1.0), )
----------Running generation: 179, population size: 1

***** Generation 179 : 0
**Parent Variant: [Variant id: 357, #gens: 13, #ops: 0, parent:-]

--Child created id: 358
--Creating new operations for variant [Variant id: 358, #gens: 13, #ops: 0, parent:357]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 358, #gens: 12, #ops: 1, parent:357] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 358
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-358/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(179): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (357(f=1.0), 358(f=1.0), )
Selected to next generation: IDs2--> (357(f=1.0), )
----------Running generation: 180, population size: 1

***** Generation 180 : 0
**Parent Variant: [Variant id: 359, #gens: 13, #ops: 0, parent:-]

--Child created id: 360
--Creating new operations for variant [Variant id: 360, #gens: 13, #ops: 0, parent:359]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 1 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 360, #gens: 14, #ops: 1, parent:359] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 360, errors: [Complex.java:340: error: incompatible types: double cannot be converted to boolean
	public boolean equals(java.lang.Object other) { 		if (isInfinite()) { 			return java.lang.Double.POSITIVE_INFINITY;}
	                                                		                    			                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(180): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (359(f=1.0), 360(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (359(f=1.0), )
----------Running generation: 181, population size: 1

***** Generation 181 : 0
**Parent Variant: [Variant id: 361, #gens: 13, #ops: 0, parent:-]

--Child created id: 362
--Creating new operations for variant [Variant id: 362, #gens: 13, #ops: 0, parent:361]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 362, #gens: 14, #ops: 1, parent:361] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 362, errors: [Complex.java:1552: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1552: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1552: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1552: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1552: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1552: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1552: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1554: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1554: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1555: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1555: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1555: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1556: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1557: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1557: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1557: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1558: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1558: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1558: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1558: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1558: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1559: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1560: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1560: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1560: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1560: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1560: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1560: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1560: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1561: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1561: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1561: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1561: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1561: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1561: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1569: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1569: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1569: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1569: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1569: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1569: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1569: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1575: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1575: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1575: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1575: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1575: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1582: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1582: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1584: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1584: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1586: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1586: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(181): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (361(f=1.0), 362(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (361(f=1.0), )
----------Running generation: 182, population size: 1

***** Generation 182 : 0
**Parent Variant: [Variant id: 363, #gens: 13, #ops: 0, parent:-]

--Child created id: 364
--Creating new operations for variant [Variant id: 364, #gens: 13, #ops: 0, parent:363]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 364, #gens: 14, #ops: 1, parent:363] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 364, errors: [Complex.java:468: error: incompatible types: unexpected return value
		return org.apache.commons.math3.complex.Complex.INF; 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(182): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (363(f=1.0), 364(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (363(f=1.0), )
----------Running generation: 183, population size: 1

***** Generation 183 : 0
**Parent Variant: [Variant id: 365, #gens: 13, #ops: 0, parent:-]

--Child created id: 366
--Creating new operations for variant [Variant id: 366, #gens: 13, #ops: 0, parent:365]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [((org.apache.commons.math3.complex.Complex) (other))]
--> var from patch: ((org.apache.commons.math3.complex.Complex) (other)) spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 366, #gens: 13, #ops: 1, parent:365] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 366
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-366/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(183): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (365(f=1.0), 366(f=1.0), )
Selected to next generation: IDs2--> (365(f=1.0), )
----------Running generation: 184, population size: 1

***** Generation 184 : 0
**Parent Variant: [Variant id: 367, #gens: 13, #ops: 0, parent:-]

--Child created id: 368
--Creating new operations for variant [Variant id: 368, #gens: 13, #ops: 0, parent:367]
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 368, #gens: 12, #ops: 1, parent:367] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 368
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-368/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(184): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (367(f=1.0), 368(f=1.0), )
Selected to next generation: IDs2--> (367(f=1.0), )
----------Running generation: 185, population size: 1

***** Generation 185 : 0
**Parent Variant: [Variant id: 369, #gens: 13, #ops: 0, parent:-]

--Child created id: 370
--Creating new operations for variant [Variant id: 370, #gens: 13, #ops: 0, parent:369]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 370, #gens: 14, #ops: 1, parent:369] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 370, errors: [Complex.java:345: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if ((real == 0.0) && (imaginary == 0.0)) { 				return org.apache.commons.math3.complex.Complex.NaN;}
			                                                                                                   			                                           				                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(185): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (369(f=1.0), 370(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (369(f=1.0), )
----------Running generation: 186, population size: 1

***** Generation 186 : 0
**Parent Variant: [Variant id: 371, #gens: 13, #ops: 0, parent:-]

--Child created id: 372
--Creating new operations for variant [Variant id: 372, #gens: 13, #ops: 0, parent:371]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 372, #gens: 14, #ops: 1, parent:371] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 372, errors: [Complex.java:1537: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1537: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1539: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1539: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1540: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1540: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1540: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1541: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1542: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1542: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1542: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1543: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1543: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1543: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1543: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1543: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1544: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1545: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1545: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1545: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1545: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1545: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1545: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1545: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1546: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1546: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1546: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1546: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1546: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1546: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1554: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1554: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1554: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1554: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1554: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1554: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1554: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1567: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1567: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1569: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1569: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1571: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1571: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(186): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (371(f=1.0), 372(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (371(f=1.0), )
----------Running generation: 187, population size: 1

***** Generation 187 : 0
**Parent Variant: [Variant id: 373, #gens: 13, #ops: 0, parent:-]

--Child created id: 374
--Creating new operations for variant [Variant id: 374, #gens: 13, #ops: 0, parent:373]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java100
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 374, #gens: 14, #ops: 1, parent:373] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 374, errors: [Complex.java:352: error: incompatible types: unexpected return value
		return false; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(187): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (373(f=1.0), 374(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (373(f=1.0), )
----------Running generation: 188, population size: 1

***** Generation 188 : 0
**Parent Variant: [Variant id: 375, #gens: 13, #ops: 0, parent:-]

--Child created id: 376
--Creating new operations for variant [Variant id: 376, #gens: 13, #ops: 0, parent:375]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.real = real
---analyzing modificationPoint position: 1
---modifPoint 2 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 376, #gens: 12, #ops: 1, parent:375] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 376
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-376/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(188): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (375(f=1.0), 376(f=1.0), )
Selected to next generation: IDs2--> (375(f=1.0), )
----------Running generation: 189, population size: 1

***** Generation 189 : 0
**Parent Variant: [Variant id: 377, #gens: 13, #ops: 0, parent:-]

--Child created id: 378
--Creating new operations for variant [Variant id: 378, #gens: 13, #ops: 0, parent:377]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 378, #gens: 14, #ops: 1, parent:377] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 378, errors: [Complex.java:1511: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1511: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1511: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1511: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1511: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1511: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1511: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1513: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1513: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1514: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1514: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1514: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1515: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1516: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1516: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1516: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1517: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1517: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1517: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1517: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1517: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1518: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1519: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1519: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1519: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1519: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1519: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1519: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1519: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1520: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1520: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1520: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1520: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1520: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1520: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1528: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1528: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1528: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1528: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1528: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1528: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1528: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1534: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1534: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1534: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1534: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1534: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1541: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1541: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1543: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1543: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1545: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1545: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(189): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (377(f=1.0), 378(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (377(f=1.0), )
----------Running generation: 190, population size: 1

***** Generation 190 : 0
**Parent Variant: [Variant id: 379, #gens: 13, #ops: 0, parent:-]

--Child created id: 380
--Creating new operations for variant [Variant id: 380, #gens: 13, #ops: 0, parent:379]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 380, #gens: 14, #ops: 1, parent:379] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 380, errors: [Complex.java:343: error: incompatible types: double cannot be converted to boolean
		} 		if (real == 0.0) { 			return org.apache.commons.math3.util.FastMath.abs(imaginary);}
		  		                   			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(190): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (379(f=1.0), 380(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (379(f=1.0), )
----------Running generation: 191, population size: 1

***** Generation 191 : 0
**Parent Variant: [Variant id: 381, #gens: 13, #ops: 0, parent:-]

--Child created id: 382
--Creating new operations for variant [Variant id: 382, #gens: 13, #ops: 0, parent:381]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 382, #gens: 12, #ops: 1, parent:381] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 382, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(191): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (381(f=1.0), 382(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (381(f=1.0), )
----------Running generation: 192, population size: 1

***** Generation 192 : 0
**Parent Variant: [Variant id: 383, #gens: 13, #ops: 0, parent:-]

--Child created id: 384
--Creating new operations for variant [Variant id: 384, #gens: 13, #ops: 0, parent:383]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 384, #gens: 12, #ops: 1, parent:383] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 384, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(192): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (383(f=1.0), 384(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (383(f=1.0), )
----------Running generation: 193, population size: 1

***** Generation 193 : 0
**Parent Variant: [Variant id: 385, #gens: 13, #ops: 0, parent:-]

--Child created id: 386
--Creating new operations for variant [Variant id: 386, #gens: 13, #ops: 0, parent:385]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.cosh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.cosh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 386, #gens: 13, #ops: 1, parent:385] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 386, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return createComplex(org.apache.commons.math3.util.FastMath.cosh(real) * org.apache.commons.math3.util.FastMath.cos(imaginary), org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.util.FastMath.sin(imaginary));
	    	                    	                                     		                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(193): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.cosh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (385(f=1.0), 386(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (385(f=1.0), )
----------Running generation: 194, population size: 1

***** Generation 194 : 0
**Parent Variant: [Variant id: 387, #gens: 13, #ops: 0, parent:-]

--Child created id: 388
--Creating new operations for variant [Variant id: 388, #gens: 13, #ops: 0, parent:387]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 388, #gens: 12, #ops: 1, parent:387] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 388, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(194): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (387(f=1.0), 388(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (387(f=1.0), )
----------Running generation: 195, population size: 1

***** Generation 195 : 0
**Parent Variant: [Variant id: 389, #gens: 13, #ops: 0, parent:-]

--Child created id: 390
--Creating new operations for variant [Variant id: 390, #gens: 13, #ops: 0, parent:389]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 0
---modifPoint 1 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 390, #gens: 12, #ops: 1, parent:389] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 390, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(195): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (389(f=1.0), 390(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (389(f=1.0), )
----------Running generation: 196, population size: 1

***** Generation 196 : 0
**Parent Variant: [Variant id: 391, #gens: 13, #ops: 0, parent:-]

--Child created id: 392
--Creating new operations for variant [Variant id: 392, #gens: 13, #ops: 0, parent:391]
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 392, #gens: 12, #ops: 1, parent:391] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 392
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-392/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(196): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (391(f=1.0), 392(f=16.0), )
Selected to next generation: IDs2--> (391(f=1.0), )
----------Running generation: 197, population size: 1

***** Generation 197 : 0
**Parent Variant: [Variant id: 393, #gens: 13, #ops: 0, parent:-]

--Child created id: 394
--Creating new operations for variant [Variant id: 394, #gens: 13, #ops: 0, parent:393]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, java.lang.Double.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: java.lang.Double.NaN spoon.support.reflect.code.CtFieldReadImpl
SameName: // CHECKSTYLE: stop ConstantName
/**
 * A complex number representing "NaN + NaNi"
 */ public static final org.apache.commons.math3.complex.Complex NaN = new org.apache.commons.math3.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);
Transforming shadowed variable in if (isNaN) {
	return java.lang.Double.NaN;
}
location: Complex.java345
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isNaN) { 	return java.lang.Double.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isNaN) { 	return java.lang.Double.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 394, #gens: 14, #ops: 1, parent:393] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 394, errors: [Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (isNaN) { 				return java.lang.Double.NaN;}
			                                                                                                   			             				                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(197): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isNaN) { 	return java.lang.Double.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (393(f=1.0), 394(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (393(f=1.0), )
----------Running generation: 198, population size: 1

***** Generation 198 : 0
**Parent Variant: [Variant id: 395, #gens: 13, #ops: 0, parent:-]

--Child created id: 396
--Creating new operations for variant [Variant id: 396, #gens: 13, #ops: 0, parent:395]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 396, #gens: 12, #ops: 1, parent:395] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 396, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(198): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (395(f=1.0), 396(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (395(f=1.0), )
----------Running generation: 199, population size: 1

***** Generation 199 : 0
**Parent Variant: [Variant id: 397, #gens: 13, #ops: 0, parent:-]

--Child created id: 398
--Creating new operations for variant [Variant id: 398, #gens: 13, #ops: 0, parent:397]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 398, #gens: 12, #ops: 1, parent:397] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 398, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(199): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (397(f=1.0), 398(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (397(f=1.0), )
----------Running generation: 200, population size: 1

***** Generation 200 : 0
**Parent Variant: [Variant id: 399, #gens: 13, #ops: 0, parent:-]

--Child created id: 400
--Creating new operations for variant [Variant id: 400, #gens: 13, #ops: 0, parent:399]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [((org.apache.commons.math3.complex.Complex) (other))]
--> var from patch: ((org.apache.commons.math3.complex.Complex) (other)) spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 400, #gens: 14, #ops: 1, parent:399] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 400, errors: [Complex.java:345: error: variable c is already defined in method equals(java.lang.Object)
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                                                                                   			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(200): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (399(f=1.0), 400(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (399(f=1.0), )
----------Running generation: 201, population size: 1

***** Generation 201 : 0
**Parent Variant: [Variant id: 401, #gens: 13, #ops: 0, parent:-]

--Child created id: 402
--Creating new operations for variant [Variant id: 402, #gens: 13, #ops: 0, parent:401]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [org.apache.commons.math3.complex.Complex.I]
--> var from patch: org.apache.commons.math3.complex.Complex.I spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(o[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(o[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 402, #gens: 13, #ops: 1, parent:401] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 402, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());
	    	                    	                                     		                                                                                                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(201): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(o[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (401(f=1.0), 402(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (401(f=1.0), )
----------Running generation: 202, population size: 1

***** Generation 202 : 0
**Parent Variant: [Variant id: 403, #gens: 13, #ops: 0, parent:-]

--Child created id: 404
--Creating new operations for variant [Variant id: 404, #gens: 13, #ops: 0, parent:403]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 404, #gens: 12, #ops: 1, parent:403] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 404, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(202): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (403(f=1.0), 404(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (403(f=1.0), )
----------Running generation: 203, population size: 1

***** Generation 203 : 0
**Parent Variant: [Variant id: 405, #gens: 13, #ops: 0, parent:-]

--Child created id: 406
--Creating new operations for variant [Variant id: 406, #gens: 13, #ops: 0, parent:405]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 406, #gens: 14, #ops: 1, parent:405] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 406, errors: [Complex.java:448: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		return org.apache.commons.math3.complex.Complex.INF; 		return false;} 	/**
		                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(203): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (405(f=1.0), 406(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (405(f=1.0), )
----------Running generation: 204, population size: 1

***** Generation 204 : 0
**Parent Variant: [Variant id: 407, #gens: 13, #ops: 0, parent:-]

--Child created id: 408
--Creating new operations for variant [Variant id: 408, #gens: 13, #ops: 0, parent:407]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
Transforming shadowed variable in if (imaginary == 0.0) {
	return org.apache.commons.math3.util.FastMath.abs(real);
}
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 408, #gens: 14, #ops: 1, parent:407] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 408, errors: [Complex.java:125: error: incompatible types: unexpected return value
			return org.apache.commons.math3.util.FastMath.abs(real);
			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(204): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (407(f=1.0), 408(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (407(f=1.0), )
----------Running generation: 205, population size: 1

***** Generation 205 : 0
**Parent Variant: [Variant id: 409, #gens: 13, #ops: 0, parent:-]

--Child created id: 410
--Creating new operations for variant [Variant id: 410, #gens: 13, #ops: 0, parent:409]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 5
---modifPoint 1 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.I]
--> var from patch: org.apache.commons.math3.complex.Complex.I spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(o[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(o[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 410, #gens: 14, #ops: 1, parent:409] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 410, errors: [Complex.java:574: error: unreachable statement
		return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate()); 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if ((real == 0.0) && (imaginary == 0.0)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
		                                                                                                                                                         		^]
Ingredient counter is Zero
---Undoing: gnrtn(205): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(o[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (409(f=1.0), 410(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (409(f=1.0), )
----------Running generation: 206, population size: 1

***** Generation 206 : 0
**Parent Variant: [Variant id: 411, #gens: 13, #ops: 0, parent:-]

--Child created id: 412
--Creating new operations for variant [Variant id: 412, #gens: 13, #ops: 0, parent:411]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 412, #gens: 14, #ops: 1, parent:411] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 412, errors: [Complex.java:347: error: unreachable statement
			return isNaN; 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (c.isNaN) { 				return isNaN;
			              			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(206): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (411(f=1.0), 412(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (411(f=1.0), )
----------Running generation: 207, population size: 1

***** Generation 207 : 0
**Parent Variant: [Variant id: 413, #gens: 13, #ops: 0, parent:-]

--Child created id: 414
--Creating new operations for variant [Variant id: 414, #gens: 13, #ops: 0, parent:413]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in return imaginary
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return imaginary` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return imaginary` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 414, #gens: 14, #ops: 1, parent:413] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 414, errors: [Complex.java:377: error: incompatible types: unexpected return value
		return imaginary; 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(207): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return imaginary` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (413(f=1.0), 414(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (413(f=1.0), )
----------Running generation: 208, population size: 1

***** Generation 208 : 0
**Parent Variant: [Variant id: 415, #gens: 13, #ops: 0, parent:-]

--Child created id: 416
--Creating new operations for variant [Variant id: 416, #gens: 13, #ops: 0, parent:415]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 416, #gens: 12, #ops: 1, parent:415] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 416
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-416/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(208): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (415(f=1.0), 416(f=1.0), )
Selected to next generation: IDs2--> (415(f=1.0), )
----------Running generation: 209, population size: 1

***** Generation 209 : 0
**Parent Variant: [Variant id: 417, #gens: 13, #ops: 0, parent:-]

--Child created id: 418
--Creating new operations for variant [Variant id: 418, #gens: 13, #ops: 0, parent:417]
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 418, #gens: 12, #ops: 1, parent:417] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 418
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-418/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(209): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (417(f=1.0), 418(f=1.0), )
Selected to next generation: IDs2--> (417(f=1.0), )
----------Running generation: 210, population size: 1

***** Generation 210 : 0
**Parent Variant: [Variant id: 419, #gens: 13, #ops: 0, parent:-]

--Child created id: 420
--Creating new operations for variant [Variant id: 420, #gens: 13, #ops: 0, parent:419]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java345
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 420, #gens: 14, #ops: 1, parent:419] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 420, errors: [Complex.java:448: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			return org.apache.commons.math3.complex.Complex.INF;} 		return false;} 	/**
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(210): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (419(f=1.0), 420(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (419(f=1.0), )
----------Running generation: 211, population size: 1

***** Generation 211 : 0
**Parent Variant: [Variant id: 421, #gens: 13, #ops: 0, parent:-]

--Child created id: 422
--Creating new operations for variant [Variant id: 422, #gens: 13, #ops: 0, parent:421]
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.cosh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.cosh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 422, #gens: 14, #ops: 1, parent:421] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 422, errors: [Complex.java:1234: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1234: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1234: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1234: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1234: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1234: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1234: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1236: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1236: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1237: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1237: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1237: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1238: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1239: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1239: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1239: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1240: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1240: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1240: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1240: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1240: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1241: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1242: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1242: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1242: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1242: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1242: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1242: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1242: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1243: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1243: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1243: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1243: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1243: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1243: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1251: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1251: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1251: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1251: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1251: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1251: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1251: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1257: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1257: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1257: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1257: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1257: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1264: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1264: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1266: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1266: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1268: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1268: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(211): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.cosh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (421(f=1.0), 422(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (421(f=1.0), )
----------Running generation: 212, population size: 1

***** Generation 212 : 0
**Parent Variant: [Variant id: 423, #gens: 13, #ops: 0, parent:-]

--Child created id: 424
--Creating new operations for variant [Variant id: 424, #gens: 13, #ops: 0, parent:423]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 424, #gens: 14, #ops: 1, parent:423] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 424, errors: [Complex.java:468: error: incompatible types: unexpected return value
		return org.apache.commons.math3.complex.Complex.INF; 		this.real = real; 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(212): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (423(f=1.0), 424(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (423(f=1.0), )
----------Running generation: 213, population size: 1

***** Generation 213 : 0
**Parent Variant: [Variant id: 425, #gens: 13, #ops: 0, parent:-]

--Child created id: 426
--Creating new operations for variant [Variant id: 426, #gens: 13, #ops: 0, parent:425]
---analyzing modificationPoint position: 0
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 426, #gens: 12, #ops: 1, parent:425] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 426, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(213): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (425(f=1.0), 426(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (425(f=1.0), )
----------Running generation: 214, population size: 1

***** Generation 214 : 0
**Parent Variant: [Variant id: 427, #gens: 13, #ops: 0, parent:-]

--Child created id: 428
--Creating new operations for variant [Variant id: 428, #gens: 13, #ops: 0, parent:427]
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 428, #gens: 12, #ops: 1, parent:427] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 428
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-428/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(214): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (427(f=1.0), 428(f=1.0), )
Selected to next generation: IDs2--> (427(f=1.0), )
----------Running generation: 215, population size: 1

***** Generation 215 : 0
**Parent Variant: [Variant id: 429, #gens: 13, #ops: 0, parent:-]

--Child created id: 430
--Creating new operations for variant [Variant id: 430, #gens: 13, #ops: 0, parent:429]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 430, #gens: 14, #ops: 1, parent:429] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 430, errors: [Complex.java:307: error: cannot assign a value to final variable real
		} 		real = real;
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(215): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (429(f=1.0), 430(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (429(f=1.0), )
----------Running generation: 216, population size: 1

***** Generation 216 : 0
**Parent Variant: [Variant id: 431, #gens: 13, #ops: 0, parent:-]

--Child created id: 432
--Creating new operations for variant [Variant id: 432, #gens: 13, #ops: 0, parent:431]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 432, #gens: 13, #ops: 1, parent:431] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 432, errors: [Complex.java:1482: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1482: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1482: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1482: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1482: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1482: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1482: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1484: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1484: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1485: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1485: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1485: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1486: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1487: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1487: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1487: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1488: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1488: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1488: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1488: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1488: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1489: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1490: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1490: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1490: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1490: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1490: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1490: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1490: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1491: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1491: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1491: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1491: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1491: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1491: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1499: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1499: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1499: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1499: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1499: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1499: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1499: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1505: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1505: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1505: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1505: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1505: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1512: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1512: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1514: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1514: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1516: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1516: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(216): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (431(f=1.0), 432(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (431(f=1.0), )
----------Running generation: 217, population size: 1

***** Generation 217 : 0
**Parent Variant: [Variant id: 433, #gens: 13, #ops: 0, parent:-]

--Child created id: 434
--Creating new operations for variant [Variant id: 434, #gens: 13, #ops: 0, parent:433]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 1
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 2 not mutation generated in  this.real = real
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java100
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 434, #gens: 14, #ops: 1, parent:433] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 434, errors: [Complex.java:386: error: incompatible types: unexpected return value
		return real; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(217): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (433(f=1.0), 434(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (433(f=1.0), )
----------Running generation: 218, population size: 1

***** Generation 218 : 0
**Parent Variant: [Variant id: 435, #gens: 13, #ops: 0, parent:-]

--Child created id: 436
--Creating new operations for variant [Variant id: 436, #gens: 13, #ops: 0, parent:435]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 436, #gens: 12, #ops: 1, parent:435] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 436, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(218): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (435(f=1.0), 436(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (435(f=1.0), )
----------Running generation: 219, population size: 1

***** Generation 219 : 0
**Parent Variant: [Variant id: 437, #gens: 13, #ops: 0, parent:-]

--Child created id: 438
--Creating new operations for variant [Variant id: 438, #gens: 13, #ops: 0, parent:437]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 438, #gens: 14, #ops: 1, parent:437] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 438, errors: [Complex.java:1652: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1652: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1654: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1654: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1655: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1655: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1655: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1656: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1657: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1657: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1657: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1658: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1658: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1658: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1658: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1658: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1659: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1660: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1660: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1660: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1660: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1660: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1660: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1660: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1661: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1661: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1661: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1661: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1661: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1661: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1669: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1669: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1669: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1669: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1669: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1669: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1669: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1675: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1675: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1675: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1675: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1675: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1682: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1682: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1684: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1684: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1686: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1686: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(219): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (437(f=1.0), 438(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (437(f=1.0), )
----------Running generation: 220, population size: 1

***** Generation 220 : 0
**Parent Variant: [Variant id: 439, #gens: 13, #ops: 0, parent:-]

--Child created id: 440
--Creating new operations for variant [Variant id: 440, #gens: 13, #ops: 0, parent:439]
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, imaginary, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 440, #gens: 13, #ops: 1, parent:439] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 440, errors: [Complex.java:1585: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1585: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1587: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1587: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1588: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1588: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1588: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1589: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1590: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1590: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1590: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1591: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1591: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1591: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1591: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1591: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1592: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1593: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1593: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1593: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1593: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1593: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1593: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1593: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1594: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1594: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1594: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1594: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1594: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1594: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1602: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1602: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1602: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1602: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1602: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1602: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1602: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1615: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1615: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1617: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1617: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1619: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1619: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(220): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (439(f=1.0), 440(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (439(f=1.0), )
----------Running generation: 221, population size: 1

***** Generation 221 : 0
**Parent Variant: [Variant id: 441, #gens: 13, #ops: 0, parent:-]

--Child created id: 442
--Creating new operations for variant [Variant id: 442, #gens: 13, #ops: 0, parent:441]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 442, #gens: 12, #ops: 1, parent:441] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 442
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-442/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(221): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (441(f=1.0), 442(f=15.0), )
Selected to next generation: IDs2--> (441(f=1.0), )
----------Running generation: 222, population size: 1

***** Generation 222 : 0
**Parent Variant: [Variant id: 443, #gens: 13, #ops: 0, parent:-]

--Child created id: 444
--Creating new operations for variant [Variant id: 444, #gens: 13, #ops: 0, parent:443]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java102
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 444, #gens: 14, #ops: 1, parent:443] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 444, errors: [Complex.java:347: error: incompatible types: unexpected return value
		return isNaN; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(222): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (443(f=1.0), 444(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (443(f=1.0), )
----------Running generation: 223, population size: 1

***** Generation 223 : 0
**Parent Variant: [Variant id: 445, #gens: 13, #ops: 0, parent:-]

--Child created id: 446
--Creating new operations for variant [Variant id: 446, #gens: 13, #ops: 0, parent:445]
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 0
---modifPoint 3 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 4 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 446, #gens: 12, #ops: 1, parent:445] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 446
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-446/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(223): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (445(f=1.0), 446(f=1.0), )
Selected to next generation: IDs2--> (445(f=1.0), )
----------Running generation: 224, population size: 1

***** Generation 224 : 0
**Parent Variant: [Variant id: 447, #gens: 13, #ops: 0, parent:-]

--Child created id: 448
--Creating new operations for variant [Variant id: 448, #gens: 13, #ops: 0, parent:447]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 448, #gens: 14, #ops: 1, parent:447] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 448, errors: [Complex.java:1228: error: cannot assign a value to final variable real
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		real = real;
	    	                    	                                     		^]
Ingredient counter is Zero
---Undoing: gnrtn(224): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `real = real` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (447(f=1.0), 448(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (447(f=1.0), )
----------Running generation: 225, population size: 1

***** Generation 225 : 0
**Parent Variant: [Variant id: 449, #gens: 13, #ops: 0, parent:-]

--Child created id: 450
--Creating new operations for variant [Variant id: 450, #gens: 13, #ops: 0, parent:449]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 450, #gens: 12, #ops: 1, parent:449] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 450, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(225): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (449(f=1.0), 450(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (449(f=1.0), )
----------Running generation: 226, population size: 1

***** Generation 226 : 0
**Parent Variant: [Variant id: 451, #gens: 13, #ops: 0, parent:-]

--Child created id: 452
--Creating new operations for variant [Variant id: 452, #gens: 13, #ops: 0, parent:451]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 452, #gens: 12, #ops: 1, parent:451] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 452, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(226): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (451(f=1.0), 452(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (451(f=1.0), )
----------Running generation: 227, population size: 1

***** Generation 227 : 0
**Parent Variant: [Variant id: 453, #gens: 13, #ops: 0, parent:-]

--Child created id: 454
--Creating new operations for variant [Variant id: 454, #gens: 13, #ops: 0, parent:453]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [org.apache.commons.math3.complex.Complex.ZERO, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.comp[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.comp[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 454, #gens: 13, #ops: 1, parent:453] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 454
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-454/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(227): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.comp[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (453(f=1.0), 454(f=1.0), )
Selected to next generation: IDs2--> (453(f=1.0), )
----------Running generation: 228, population size: 1

***** Generation 228 : 0
**Parent Variant: [Variant id: 455, #gens: 13, #ops: 0, parent:-]

--Child created id: 456
--Creating new operations for variant [Variant id: 456, #gens: 13, #ops: 0, parent:455]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, q, scale]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: scale spoon.support.reflect.code.CtVariableReadImpl
Transforming shadowed variable in if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) {
	double q = real / imaginary;
	double scale = 1.0 / ((real * q) + imaginary);
	return createComplex(scale * q, -scale);
} else {
	double q = imaginary / real;
	double scale = 1.0 / ((imaginary * q) + real);
	return createComplex(scale, (-scale) * q);
}
location: Complex.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 456, #gens: 14, #ops: 1, parent:455] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 456, errors: [Complex.java:316: error: incompatible types: unexpected return value
			return createComplex(scale * q, -scale);
			                    ^, Complex.java:320: error: incompatible types: unexpected return value
			return createComplex(scale, (-scale) * q);
			                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(228): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (455(f=1.0), 456(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (455(f=1.0), )
----------Running generation: 229, population size: 1

***** Generation 229 : 0
**Parent Variant: [Variant id: 457, #gens: 13, #ops: 0, parent:-]

--Child created id: 458
--Creating new operations for variant [Variant id: 458, #gens: 13, #ops: 0, parent:457]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 458, #gens: 12, #ops: 1, parent:457] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 458, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(229): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (457(f=1.0), 458(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (457(f=1.0), )
----------Running generation: 230, population size: 1

***** Generation 230 : 0
**Parent Variant: [Variant id: 459, #gens: 13, #ops: 0, parent:-]

--Child created id: 460
--Creating new operations for variant [Variant id: 460, #gens: 13, #ops: 0, parent:459]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 460, #gens: 12, #ops: 1, parent:459] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 460
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-460/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(230): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (459(f=1.0), 460(f=1.0), )
Selected to next generation: IDs2--> (459(f=1.0), )
----------Running generation: 231, population size: 1

***** Generation 231 : 0
**Parent Variant: [Variant id: 461, #gens: 13, #ops: 0, parent:-]

--Child created id: 462
--Creating new operations for variant [Variant id: 462, #gens: 13, #ops: 0, parent:461]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 462, #gens: 12, #ops: 1, parent:461] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 462, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(231): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (461(f=1.0), 462(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (461(f=1.0), )
----------Running generation: 232, population size: 1

***** Generation 232 : 0
**Parent Variant: [Variant id: 463, #gens: 13, #ops: 0, parent:-]

--Child created id: 464
--Creating new operations for variant [Variant id: 464, #gens: 13, #ops: 0, parent:463]
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 1
---modifPoint 2 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 0
---modifPoint 3 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 464, #gens: 12, #ops: 1, parent:463] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 464
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-464/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(232): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (463(f=1.0), 464(f=1.0), )
Selected to next generation: IDs2--> (463(f=1.0), )
----------Running generation: 233, population size: 1

***** Generation 233 : 0
**Parent Variant: [Variant id: 465, #gens: 13, #ops: 0, parent:-]

--Child created id: 466
--Creating new operations for variant [Variant id: 466, #gens: 13, #ops: 0, parent:465]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch []
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return org.apache.commons.math3.complex.ComplexField.getInstance()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return org.apache.commons.math3.complex.ComplexField.getInstance()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 466, #gens: 13, #ops: 1, parent:465] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 466, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.ComplexField cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();
	    	                    	                                     		                                                                ^]
Ingredient counter is Zero
---Undoing: gnrtn(233): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return org.apache.commons.math3.complex.ComplexField.getInstance()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (465(f=1.0), 466(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (465(f=1.0), )
----------Running generation: 234, population size: 1

***** Generation 234 : 0
**Parent Variant: [Variant id: 467, #gens: 13, #ops: 0, parent:-]

--Child created id: 468
--Creating new operations for variant [Variant id: 468, #gens: 13, #ops: 0, parent:467]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 2 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 3 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 468, #gens: 12, #ops: 1, parent:467] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 468, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(234): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (467(f=1.0), 468(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (467(f=1.0), )
----------Running generation: 235, population size: 1

***** Generation 235 : 0
**Parent Variant: [Variant id: 469, #gens: 13, #ops: 0, parent:-]

--Child created id: 470
--Creating new operations for variant [Variant id: 470, #gens: 13, #ops: 0, parent:469]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 5
---modifPoint 1 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 470, #gens: 12, #ops: 1, parent:469] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 470, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(235): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (469(f=1.0), 470(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (469(f=1.0), )
----------Running generation: 236, population size: 1

***** Generation 236 : 0
**Parent Variant: [Variant id: 471, #gens: 13, #ops: 0, parent:-]

--Child created id: 472
--Creating new operations for variant [Variant id: 472, #gens: 13, #ops: 0, parent:471]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 472, #gens: 13, #ops: 1, parent:471] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 472, errors: [Complex.java:1438: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1438: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1438: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1440: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1440: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1441: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1441: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1441: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1442: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1443: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1443: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1443: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1444: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1444: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1444: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1444: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1444: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1445: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1446: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1446: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1446: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1446: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1446: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1446: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1446: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1447: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1447: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1447: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1447: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1447: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1447: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1455: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1455: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1455: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1455: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1455: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1455: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1455: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1461: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1461: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1461: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1461: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1461: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1468: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1468: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1470: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1470: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1472: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1472: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(236): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (471(f=1.0), 472(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (471(f=1.0), )
----------Running generation: 237, population size: 1

***** Generation 237 : 0
**Parent Variant: [Variant id: 473, #gens: 13, #ops: 0, parent:-]

--Child created id: 474
--Creating new operations for variant [Variant id: 474, #gens: 13, #ops: 0, parent:473]
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 474, #gens: 13, #ops: 1, parent:473] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 474, errors: [Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (isInfinite()) { 				return java.lang.Double.POSITIVE_INFINITY;}
			                                                                                                   			                    				                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(237): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (473(f=1.0), 474(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (473(f=1.0), )
----------Running generation: 238, population size: 1

***** Generation 238 : 0
**Parent Variant: [Variant id: 475, #gens: 13, #ops: 0, parent:-]

--Child created id: 476
--Creating new operations for variant [Variant id: 476, #gens: 13, #ops: 0, parent:475]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
Attempts Base Ingredients  2 total 24
Attempts Base Ingredients  3 total 24
Attempts Base Ingredients  4 total 24
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java344
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double real2 = 2.0 * real` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double real2 = 2.0 * real` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 476, #gens: 13, #ops: 1, parent:475] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 476, errors: [Complex.java:1542: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1542: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1542: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1542: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1542: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1542: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1542: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1544: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1544: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1545: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1545: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1545: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1546: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1547: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1547: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1547: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1548: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1548: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1548: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1548: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1548: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1549: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1550: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1550: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1550: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1550: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1550: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1550: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1550: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1551: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1551: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1551: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1551: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1551: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1551: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1559: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1559: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1559: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1559: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1565: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1565: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1565: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1565: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1565: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1572: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1572: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1574: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1574: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1576: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1576: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(238): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double real2 = 2.0 * real` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (475(f=1.0), 476(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (475(f=1.0), )
----------Running generation: 239, population size: 1

***** Generation 239 : 0
**Parent Variant: [Variant id: 477, #gens: 13, #ops: 0, parent:-]

--Child created id: 478
--Creating new operations for variant [Variant id: 478, #gens: 13, #ops: 0, parent:477]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 478, #gens: 12, #ops: 1, parent:477] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 478, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(239): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (477(f=1.0), 478(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (477(f=1.0), )
----------Running generation: 240, population size: 1

***** Generation 240 : 0
**Parent Variant: [Variant id: 479, #gens: 13, #ops: 0, parent:-]

--Child created id: 480
--Creating new operations for variant [Variant id: 480, #gens: 13, #ops: 0, parent:479]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 480, #gens: 12, #ops: 1, parent:479] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 480, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(240): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (479(f=1.0), 480(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (479(f=1.0), )
----------Running generation: 241, population size: 1

***** Generation 241 : 0
**Parent Variant: [Variant id: 481, #gens: 13, #ops: 0, parent:-]

--Child created id: 482
--Creating new operations for variant [Variant id: 482, #gens: 13, #ops: 0, parent:481]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java100
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 482, #gens: 14, #ops: 1, parent:481] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 482
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-482/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(241): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (481(f=1.0), 482(f=1.0), )
Selected to next generation: IDs2--> (481(f=1.0), )
----------Running generation: 242, population size: 1

***** Generation 242 : 0
**Parent Variant: [Variant id: 483, #gens: 13, #ops: 0, parent:-]

--Child created id: 484
--Creating new operations for variant [Variant id: 484, #gens: 13, #ops: 0, parent:483]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 484, #gens: 12, #ops: 1, parent:483] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 484, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(242): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (483(f=1.0), 484(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (483(f=1.0), )
----------Running generation: 243, population size: 1

***** Generation 243 : 0
**Parent Variant: [Variant id: 485, #gens: 13, #ops: 0, parent:-]

--Child created id: 486
--Creating new operations for variant [Variant id: 486, #gens: 13, #ops: 0, parent:485]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 486, #gens: 14, #ops: 1, parent:485] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 486
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-486/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(243): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (485(f=1.0), 486(f=1.0), )
Selected to next generation: IDs2--> (485(f=1.0), )
----------Running generation: 244, population size: 1

***** Generation 244 : 0
**Parent Variant: [Variant id: 487, #gens: 13, #ops: 0, parent:-]

--Child created id: 488
--Creating new operations for variant [Variant id: 488, #gens: 13, #ops: 0, parent:487]
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java304
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 488, #gens: 13, #ops: 1, parent:487] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 488
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-488/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(244): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (487(f=1.0), 488(f=1.0), )
Selected to next generation: IDs2--> (487(f=1.0), )
----------Running generation: 245, population size: 1

***** Generation 245 : 0
**Parent Variant: [Variant id: 489, #gens: 13, #ops: 0, parent:-]

--Child created id: 490
--Creating new operations for variant [Variant id: 490, #gens: 13, #ops: 0, parent:489]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [other]
--> var from patch: other spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if (this == other) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if (this == other) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 490, #gens: 14, #ops: 1, parent:489] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 490
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-490/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(245): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if (this == other) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (489(f=1.0), 490(f=1.0), )
Selected to next generation: IDs2--> (489(f=1.0), )
----------Running generation: 246, population size: 1

***** Generation 246 : 0
**Parent Variant: [Variant id: 491, #gens: 13, #ops: 0, parent:-]

--Child created id: 492
--Creating new operations for variant [Variant id: 492, #gens: 13, #ops: 0, parent:491]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 492, #gens: 12, #ops: 1, parent:491] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 492
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-492/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(246): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (491(f=1.0), 492(f=15.0), )
Selected to next generation: IDs2--> (491(f=1.0), )
----------Running generation: 247, population size: 1

***** Generation 247 : 0
**Parent Variant: [Variant id: 493, #gens: 13, #ops: 0, parent:-]

--Child created id: 494
--Creating new operations for variant [Variant id: 494, #gens: 13, #ops: 0, parent:493]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 494, #gens: 12, #ops: 1, parent:493] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 494
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-494/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(247): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (493(f=1.0), 494(f=1.0), )
Selected to next generation: IDs2--> (493(f=1.0), )
----------Running generation: 248, population size: 1

***** Generation 248 : 0
**Parent Variant: [Variant id: 495, #gens: 13, #ops: 0, parent:-]

--Child created id: 496
--Creating new operations for variant [Variant id: 496, #gens: 13, #ops: 0, parent:495]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, real, imaginary]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 496, #gens: 14, #ops: 1, parent:495] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 496, errors: [Complex.java:103: error: variable isNaN might already have been assigned
		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary);
		                                                                           		                            		^]
Ingredient counter is Zero
---Undoing: gnrtn(248): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (495(f=1.0), 496(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (495(f=1.0), )
----------Running generation: 249, population size: 1

***** Generation 249 : 0
**Parent Variant: [Variant id: 497, #gens: 13, #ops: 0, parent:-]

--Child created id: 498
--Creating new operations for variant [Variant id: 498, #gens: 13, #ops: 0, parent:497]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
Attempts Base Ingredients  3 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.I]
--> var from patch: org.apache.commons.math3.complex.Complex.I spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 498, #gens: 14, #ops: 1, parent:497] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 498, errors: [Complex.java:1154: error: cannot find symbol
		double innerPart = nthPhi;
		                   ^
  symbol:   variable nthPhi
  location: class org.apache.commons.math3.complex.Complex, Complex.java:1157: error: cannot find symbol
			final double realPart = nthRootOfAbs * org.apache.commons.math3.util.FastMath.cos(innerPart);
			                        ^
  symbol:   variable nthRootOfAbs
  location: class org.apache.commons.math3.complex.Complex, Complex.java:1158: error: cannot find symbol
			final double imaginaryPart = nthRootOfAbs * org.apache.commons.math3.util.FastMath.sin(innerPart);
			                             ^
  symbol:   variable nthRootOfAbs
  location: class org.apache.commons.math3.complex.Complex]
Ingredient counter is Zero
---Undoing: gnrtn(249): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (497(f=1.0), 498(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (497(f=1.0), )
----------Running generation: 250, population size: 1

***** Generation 250 : 0
**Parent Variant: [Variant id: 499, #gens: 13, #ops: 0, parent:-]

--Child created id: 500
--Creating new operations for variant [Variant id: 500, #gens: 13, #ops: 0, parent:499]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 500, #gens: 14, #ops: 1, parent:499] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 500, errors: [Complex.java:1759: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1759: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1761: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1761: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1762: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1762: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1762: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1763: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1764: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1764: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1764: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1765: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1765: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1765: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1765: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1765: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1766: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1767: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1767: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1767: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1767: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1767: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1767: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1767: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1768: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1768: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1768: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1768: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1768: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1768: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1776: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1776: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1776: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1776: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1776: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1776: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1776: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1782: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1782: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1782: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1782: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1782: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1789: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1789: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1791: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1791: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1793: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1793: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(250): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (499(f=1.0), 500(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (499(f=1.0), )
----------Running generation: 251, population size: 1

***** Generation 251 : 0
**Parent Variant: [Variant id: 501, #gens: 13, #ops: 0, parent:-]

--Child created id: 502
--Creating new operations for variant [Variant id: 502, #gens: 13, #ops: 0, parent:501]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 502, #gens: 12, #ops: 1, parent:501] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 502
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-502/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(251): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (501(f=1.0), 502(f=1.0), )
Selected to next generation: IDs2--> (501(f=1.0), )
----------Running generation: 252, population size: 1

***** Generation 252 : 0
**Parent Variant: [Variant id: 503, #gens: 13, #ops: 0, parent:-]

--Child created id: 504
--Creating new operations for variant [Variant id: 504, #gens: 13, #ops: 0, parent:503]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java340
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 504, #gens: 14, #ops: 1, parent:503] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 504, errors: [Complex.java:1496: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1496: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1496: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1498: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1498: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1499: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1499: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1499: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1500: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1501: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1501: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1501: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1502: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1502: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1502: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1502: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1502: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1503: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1504: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1504: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1504: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1504: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1504: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1504: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1504: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1505: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1505: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1505: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1505: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1505: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1505: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1513: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1513: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1513: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1513: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1513: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1513: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1513: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1519: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1519: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1519: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1519: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1519: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1526: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1526: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1528: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1528: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1530: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1530: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(252): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (503(f=1.0), 504(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (503(f=1.0), )
----------Running generation: 253, population size: 1

***** Generation 253 : 0
**Parent Variant: [Variant id: 505, #gens: 13, #ops: 0, parent:-]

--Child created id: 506
--Creating new operations for variant [Variant id: 506, #gens: 13, #ops: 0, parent:505]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
Transforming shadowed variable in return org.apache.commons.math3.util.FastMath.abs(real)
location: Complex.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 506, #gens: 14, #ops: 1, parent:505] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 506, errors: [Complex.java:125: error: incompatible types: unexpected return value
		return org.apache.commons.math3.util.FastMath.abs(real);} 	/**
		                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(253): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (505(f=1.0), 506(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (505(f=1.0), )
----------Running generation: 254, population size: 1

***** Generation 254 : 0
**Parent Variant: [Variant id: 507, #gens: 13, #ops: 0, parent:-]

--Child created id: 508
--Creating new operations for variant [Variant id: 508, #gens: 13, #ops: 0, parent:507]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 508, #gens: 13, #ops: 1, parent:507] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 508, errors: [Complex.java:1537: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1537: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1537: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1539: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1539: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1540: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1540: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1540: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1541: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1542: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1542: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1542: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1543: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1543: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1543: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1543: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1543: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1544: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1545: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1545: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1545: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1545: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1545: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1545: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1545: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1546: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1546: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1546: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1546: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1546: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1546: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1554: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1554: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1554: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1554: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1554: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1554: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1554: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1567: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1567: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1569: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1569: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1571: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1571: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(254): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (507(f=1.0), 508(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (507(f=1.0), )
----------Running generation: 255, population size: 1

***** Generation 255 : 0
**Parent Variant: [Variant id: 509, #gens: 13, #ops: 0, parent:-]

--Child created id: 510
--Creating new operations for variant [Variant id: 510, #gens: 13, #ops: 0, parent:509]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 510, #gens: 12, #ops: 1, parent:509] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 510, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(255): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (509(f=1.0), 510(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (509(f=1.0), )
----------Running generation: 256, population size: 1

***** Generation 256 : 0
**Parent Variant: [Variant id: 511, #gens: 13, #ops: 0, parent:-]

--Child created id: 512
--Creating new operations for variant [Variant id: 512, #gens: 13, #ops: 0, parent:511]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, q]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 512, #gens: 14, #ops: 1, parent:511] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 512, errors: [Complex.java:351: error: incompatible types: double cannot be converted to boolean
		} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			if (imaginary == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(real);} 			double q = real / imaginary; 			return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 			if (real == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(imaginary);} 			double q = imaginary / real; 			return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
		  		                                                                                                                			                        				                                                 ^, Complex.java:351: error: incompatible types: double cannot be converted to boolean
		} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			if (imaginary == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(real);} 			double q = real / imaginary; 			return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 			if (real == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(imaginary);} 			double q = imaginary / real; 			return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
		  		                                                                                                                			                        				                                                          			                             			                                                             ^, Complex.java:351: error: incompatible types: double cannot be converted to boolean
		} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			if (imaginary == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(real);} 			double q = real / imaginary; 			return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 			if (real == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(imaginary);} 			double q = imaginary / real; 			return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
		  		                                                                                                                			                        				                                                          			                             			                                                                                                                                 			                   				                                                 ^, Complex.java:351: error: incompatible types: double cannot be converted to boolean
		} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			if (imaginary == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(real);} 			double q = real / imaginary; 			return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 			if (real == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(imaginary);} 			double q = imaginary / real; 			return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
		  		                                                                                                                			                        				                                                          			                             			                                                                                                                                 			                   				                                                               			                             			                                                        ^]
Ingredient counter is Zero
---Undoing: gnrtn(256): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (511(f=1.0), 512(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (511(f=1.0), )
----------Running generation: 257, population size: 1

***** Generation 257 : 0
**Parent Variant: [Variant id: 513, #gens: 13, #ops: 0, parent:-]

--Child created id: 514
--Creating new operations for variant [Variant id: 514, #gens: 13, #ops: 0, parent:513]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch []
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 514, #gens: 13, #ops: 1, parent:513] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 514, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return createComplex(0.0, 1.0);
	    	                    	                                     		                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(257): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (513(f=1.0), 514(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (513(f=1.0), )
----------Running generation: 258, population size: 1

***** Generation 258 : 0
**Parent Variant: [Variant id: 515, #gens: 13, #ops: 0, parent:-]

--Child created id: 516
--Creating new operations for variant [Variant id: 516, #gens: 13, #ops: 0, parent:515]
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java344
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double q = imaginary / real` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double q = imaginary / real` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 516, #gens: 13, #ops: 1, parent:515] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 516, errors: [Complex.java:346: error: cannot find symbol
			if (c.isNaN) {
			    ^
  symbol:   variable c
  location: class org.apache.commons.math3.complex.Complex, Complex.java:346: error: illegal start of type
			if (c.isNaN) {
			   ^, Complex.java:349: error: cannot find symbol
				return (real == c.real) && (imaginary == c.imaginary);
				                ^
  symbol:   variable c
  location: class org.apache.commons.math3.complex.Complex, Complex.java:349: error: cannot find symbol
				return (real == c.real) && (imaginary == c.imaginary);
				                                         ^
  symbol:   variable c
  location: class org.apache.commons.math3.complex.Complex]
Ingredient counter is Zero
---Undoing: gnrtn(258): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double q = imaginary / real` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (515(f=1.0), 516(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (515(f=1.0), )
----------Running generation: 259, population size: 1

***** Generation 259 : 0
**Parent Variant: [Variant id: 517, #gens: 13, #ops: 0, parent:-]

--Child created id: 518
--Creating new operations for variant [Variant id: 518, #gens: 13, #ops: 0, parent:517]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 518, #gens: 14, #ops: 1, parent:517] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 518, errors: [Complex.java:1759: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1759: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1759: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1761: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1761: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1762: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1762: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1762: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1763: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1764: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1764: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1764: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1765: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1765: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1765: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1765: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1765: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1766: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1767: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1767: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1767: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1767: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1767: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1767: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1767: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1768: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1768: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1768: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1768: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1768: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1768: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1776: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1776: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1776: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1776: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1776: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1776: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1776: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1782: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1782: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1782: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1782: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1782: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1789: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1789: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1791: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1791: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1793: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1793: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(259): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (517(f=1.0), 518(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (517(f=1.0), )
----------Running generation: 260, population size: 1

***** Generation 260 : 0
**Parent Variant: [Variant id: 519, #gens: 13, #ops: 0, parent:-]

--Child created id: 520
--Creating new operations for variant [Variant id: 520, #gens: 13, #ops: 0, parent:519]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 520, #gens: 14, #ops: 1, parent:519] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 520, errors: [Complex.java:303: error: incompatible types: double cannot be converted to org.apache.commons.math3.complex.Complex
		} 		if (real == 0.0) { 			return org.apache.commons.math3.util.FastMath.abs(imaginary);}
		  		                   			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(260): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (519(f=1.0), 520(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (519(f=1.0), )
----------Running generation: 261, population size: 1

***** Generation 261 : 0
**Parent Variant: [Variant id: 521, #gens: 13, #ops: 0, parent:-]

--Child created id: 522
--Creating new operations for variant [Variant id: 522, #gens: 13, #ops: 0, parent:521]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch []
location: Complex.java348
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 522, #gens: 13, #ops: 1, parent:521] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 522, errors: [Complex.java:1590: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1590: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1590: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1592: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1592: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1593: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1593: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1593: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1594: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1595: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1595: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1595: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1596: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1596: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1596: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1596: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1596: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1597: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1598: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1598: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1598: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1598: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1598: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1598: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1598: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1599: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1599: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1599: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1599: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1599: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1599: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1607: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1607: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1607: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1607: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1607: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1607: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1607: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1613: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1613: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1613: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1613: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1613: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1620: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1620: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1622: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1622: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1624: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1624: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(261): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(-1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (521(f=1.0), 522(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (521(f=1.0), )
----------Running generation: 262, population size: 1

***** Generation 262 : 0
**Parent Variant: [Variant id: 523, #gens: 13, #ops: 0, parent:-]

--Child created id: 524
--Creating new operations for variant [Variant id: 524, #gens: 13, #ops: 0, parent:523]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 3 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 0
---modifPoint 4 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 524, #gens: 12, #ops: 1, parent:523] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 524, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(262): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (523(f=1.0), 524(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (523(f=1.0), )
----------Running generation: 263, population size: 1

***** Generation 263 : 0
**Parent Variant: [Variant id: 525, #gens: 13, #ops: 0, parent:-]

--Child created id: 526
--Creating new operations for variant [Variant id: 526, #gens: 13, #ops: 0, parent:525]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 526, #gens: 12, #ops: 1, parent:525] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 526, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(263): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (525(f=1.0), 526(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (525(f=1.0), )
----------Running generation: 264, population size: 1

***** Generation 264 : 0
**Parent Variant: [Variant id: 527, #gens: 13, #ops: 0, parent:-]

--Child created id: 528
--Creating new operations for variant [Variant id: 528, #gens: 13, #ops: 0, parent:527]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 528, #gens: 12, #ops: 1, parent:527] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 528, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(264): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (527(f=1.0), 528(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (527(f=1.0), )
----------Running generation: 265, population size: 1

***** Generation 265 : 0
**Parent Variant: [Variant id: 529, #gens: 13, #ops: 0, parent:-]

--Child created id: 530
--Creating new operations for variant [Variant id: 530, #gens: 13, #ops: 0, parent:529]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 530, #gens: 12, #ops: 1, parent:529] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 530
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-530/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(265): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (529(f=1.0), 530(f=1.0), )
Selected to next generation: IDs2--> (529(f=1.0), )
----------Running generation: 266, population size: 1

***** Generation 266 : 0
**Parent Variant: [Variant id: 531, #gens: 13, #ops: 0, parent:-]

--Child created id: 532
--Creating new operations for variant [Variant id: 532, #gens: 13, #ops: 0, parent:531]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 532, #gens: 14, #ops: 1, parent:531] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 532, errors: [Complex.java:386: error: incompatible types: double cannot be converted to org.apache.commons.math3.complex.Complex
		return real; 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if ((real == 0.0) && (imaginary == 0.0)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(266): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (531(f=1.0), 532(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (531(f=1.0), )
----------Running generation: 267, population size: 1

***** Generation 267 : 0
**Parent Variant: [Variant id: 533, #gens: 13, #ops: 0, parent:-]

--Child created id: 534
--Creating new operations for variant [Variant id: 534, #gens: 13, #ops: 0, parent:533]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java305
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 534, #gens: 14, #ops: 1, parent:533] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 534, errors: [Complex.java:386: error: incompatible types: double cannot be converted to org.apache.commons.math3.complex.Complex
			return real; 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(267): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (533(f=1.0), 534(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (533(f=1.0), )
----------Running generation: 268, population size: 1

***** Generation 268 : 0
**Parent Variant: [Variant id: 535, #gens: 13, #ops: 0, parent:-]

--Child created id: 536
--Creating new operations for variant [Variant id: 536, #gens: 13, #ops: 0, parent:535]
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 536, #gens: 13, #ops: 1, parent:535] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 536, errors: [Complex.java:340: error: incompatible types: double cannot be converted to boolean
	public boolean equals(java.lang.Object other) { 		if (isInfinite()) { 			return java.lang.Double.POSITIVE_INFINITY;}
	                                                		                    			                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(268): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (535(f=1.0), 536(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (535(f=1.0), )
----------Running generation: 269, population size: 1

***** Generation 269 : 0
**Parent Variant: [Variant id: 537, #gens: 13, #ops: 0, parent:-]

--Child created id: 538
--Creating new operations for variant [Variant id: 538, #gens: 13, #ops: 0, parent:537]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in double imaginary2 = 2.0 * imaginary
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 538, #gens: 14, #ops: 1, parent:537] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 538, errors: [Complex.java:1659: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1659: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1659: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1659: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1659: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1659: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1659: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1661: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1661: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1662: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1662: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1662: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1663: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1664: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1664: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1664: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1665: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1665: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1665: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1665: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1665: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1666: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1667: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1667: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1667: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1667: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1667: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1667: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1667: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1668: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1668: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1668: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1668: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1668: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1668: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1676: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1676: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1676: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1676: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1676: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1676: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1676: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1682: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1682: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1682: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1682: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1682: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1689: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1689: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1691: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1691: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1693: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1693: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(269): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (537(f=1.0), 538(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (537(f=1.0), )
----------Running generation: 270, population size: 1

***** Generation 270 : 0
**Parent Variant: [Variant id: 539, #gens: 13, #ops: 0, parent:-]

--Child created id: 540
--Creating new operations for variant [Variant id: 540, #gens: 13, #ops: 0, parent:539]
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 3 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java100
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 540, #gens: 14, #ops: 1, parent:539] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 540, errors: [Complex.java:1703: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1703: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1703: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1703: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1703: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1703: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1703: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1705: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1705: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1706: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1706: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1706: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1707: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1708: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1708: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1708: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1709: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1709: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1709: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1709: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1709: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1710: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1711: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1711: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1711: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1711: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1711: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1711: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1711: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1712: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1712: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1712: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1712: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1712: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1712: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1720: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1720: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1720: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1720: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1720: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1720: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1720: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1726: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1726: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1726: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1726: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1726: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1733: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1733: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1735: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1735: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1737: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1737: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(270): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (539(f=1.0), 540(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (539(f=1.0), )
----------Running generation: 271, population size: 1

***** Generation 271 : 0
**Parent Variant: [Variant id: 541, #gens: 13, #ops: 0, parent:-]

--Child created id: 542
--Creating new operations for variant [Variant id: 542, #gens: 13, #ops: 0, parent:541]
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 542, #gens: 12, #ops: 1, parent:541] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 542, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(271): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (541(f=1.0), 542(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (541(f=1.0), )
----------Running generation: 272, population size: 1

***** Generation 272 : 0
**Parent Variant: [Variant id: 543, #gens: 13, #ops: 0, parent:-]

--Child created id: 544
--Creating new operations for variant [Variant id: 544, #gens: 13, #ops: 0, parent:543]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 544, #gens: 12, #ops: 1, parent:543] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 544
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-544/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(272): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (543(f=1.0), 544(f=1.0), )
Selected to next generation: IDs2--> (543(f=1.0), )
----------Running generation: 273, population size: 1

***** Generation 273 : 0
**Parent Variant: [Variant id: 545, #gens: 13, #ops: 0, parent:-]

--Child created id: 546
--Creating new operations for variant [Variant id: 546, #gens: 13, #ops: 0, parent:545]
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
vars from patch [isNaN, real, imaginary]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java305
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 546, #gens: 14, #ops: 1, parent:545] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 546, errors: [Complex.java:305: error: cannot assign a value to final variable isNaN
		if ((real == 0.0) && (imaginary == 0.0)) { 			isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary);
		                                           			^]
Ingredient counter is Zero
---Undoing: gnrtn(273): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (545(f=1.0), 546(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (545(f=1.0), )
----------Running generation: 274, population size: 1

***** Generation 274 : 0
**Parent Variant: [Variant id: 547, #gens: 13, #ops: 0, parent:-]

--Child created id: 548
--Creating new operations for variant [Variant id: 548, #gens: 13, #ops: 0, parent:547]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 548, #gens: 14, #ops: 1, parent:547] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 548, errors: [Complex.java:1591: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1591: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1593: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1593: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1594: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1594: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1594: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1595: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1596: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1596: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1596: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1597: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1597: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1597: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1597: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1597: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1598: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1599: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1599: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1599: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1599: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1599: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1599: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1599: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1600: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1600: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1600: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1600: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1600: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1600: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1608: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1608: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1614: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1614: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1614: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1614: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1614: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1621: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1621: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1623: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1623: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1625: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1625: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(274): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (547(f=1.0), 548(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (547(f=1.0), )
----------Running generation: 275, population size: 1

***** Generation 275 : 0
**Parent Variant: [Variant id: 549, #gens: 13, #ops: 0, parent:-]

--Child created id: 550
--Creating new operations for variant [Variant id: 550, #gens: 13, #ops: 0, parent:549]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 550, #gens: 12, #ops: 1, parent:549] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 550
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-550/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(275): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (549(f=1.0), 550(f=1.0), )
Selected to next generation: IDs2--> (549(f=1.0), )
----------Running generation: 276, population size: 1

***** Generation 276 : 0
**Parent Variant: [Variant id: 551, #gens: 13, #ops: 0, parent:-]

--Child created id: 552
--Creating new operations for variant [Variant id: 552, #gens: 13, #ops: 0, parent:551]
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 552, #gens: 12, #ops: 1, parent:551] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 552, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(276): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (551(f=1.0), 552(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (551(f=1.0), )
----------Running generation: 277, population size: 1

***** Generation 277 : 0
**Parent Variant: [Variant id: 553, #gens: 13, #ops: 0, parent:-]

--Child created id: 554
--Creating new operations for variant [Variant id: 554, #gens: 13, #ops: 0, parent:553]
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
---modifPoint 0 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 554, #gens: 14, #ops: 1, parent:553] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 554, errors: [Complex.java:1423: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1423: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1423: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1423: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1423: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1423: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1423: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1425: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1425: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1426: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1426: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1426: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1427: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1428: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1428: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1428: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1429: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1429: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1429: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1429: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1429: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1430: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1431: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1431: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1431: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1431: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1431: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1431: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1431: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1432: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1432: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1432: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1432: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1432: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1432: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1440: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1440: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1440: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1440: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1440: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1440: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1440: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1446: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1446: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1446: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1446: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1446: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1453: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1453: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1455: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1455: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1457: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1457: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(277): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sinh(real) * org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (553(f=1.0), 554(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (553(f=1.0), )
----------Running generation: 278, population size: 1

***** Generation 278 : 0
**Parent Variant: [Variant id: 555, #gens: 13, #ops: 0, parent:-]

--Child created id: 556
--Creating new operations for variant [Variant id: 556, #gens: 13, #ops: 0, parent:555]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 0
---modifPoint 1 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 3 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 556, #gens: 12, #ops: 1, parent:555] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 556, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(278): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (555(f=1.0), 556(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (555(f=1.0), )
----------Running generation: 279, population size: 1

***** Generation 279 : 0
**Parent Variant: [Variant id: 557, #gens: 13, #ops: 0, parent:-]

--Child created id: 558
--Creating new operations for variant [Variant id: 558, #gens: 13, #ops: 0, parent:557]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 558, #gens: 12, #ops: 1, parent:557] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 558, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(279): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (557(f=1.0), 558(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (557(f=1.0), )
----------Running generation: 280, population size: 1

***** Generation 280 : 0
**Parent Variant: [Variant id: 559, #gens: 13, #ops: 0, parent:-]

--Child created id: 560
--Creating new operations for variant [Variant id: 560, #gens: 13, #ops: 0, parent:559]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.ZERO, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.comp[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.comp[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 560, #gens: 14, #ops: 1, parent:559] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 560, errors: [Complex.java:293: error: incompatible types: unexpected return value
		return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.complex.Complex.NaN; 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                     ^]
Ingredient counter is Zero
---Undoing: gnrtn(280): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return !isInfinite() ? org.apache.commons.math3.complex.Complex.ZERO : org.apache.commons.math3.comp[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (559(f=1.0), 560(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (559(f=1.0), )
----------Running generation: 281, population size: 1

***** Generation 281 : 0
**Parent Variant: [Variant id: 561, #gens: 13, #ops: 0, parent:-]

--Child created id: 562
--Creating new operations for variant [Variant id: 562, #gens: 13, #ops: 0, parent:561]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
---modifPoint 1 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 562, #gens: 12, #ops: 1, parent:561] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 562
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-562/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(281): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (561(f=1.0), 562(f=1.0), )
Selected to next generation: IDs2--> (561(f=1.0), )
----------Running generation: 282, population size: 1

***** Generation 282 : 0
**Parent Variant: [Variant id: 563, #gens: 13, #ops: 0, parent:-]

--Child created id: 564
--Creating new operations for variant [Variant id: 564, #gens: 13, #ops: 0, parent:563]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 564, #gens: 12, #ops: 1, parent:563] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 564
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-564/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(282): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (563(f=1.0), 564(f=1.0), )
Selected to next generation: IDs2--> (563(f=1.0), )
----------Running generation: 283, population size: 1

***** Generation 283 : 0
**Parent Variant: [Variant id: 565, #gens: 13, #ops: 0, parent:-]

--Child created id: 566
--Creating new operations for variant [Variant id: 566, #gens: 13, #ops: 0, parent:565]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 566, #gens: 12, #ops: 1, parent:565] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 566, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(283): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (565(f=1.0), 566(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (565(f=1.0), )
----------Running generation: 284, population size: 1

***** Generation 284 : 0
**Parent Variant: [Variant id: 567, #gens: 13, #ops: 0, parent:-]

--Child created id: 568
--Creating new operations for variant [Variant id: 568, #gens: 13, #ops: 0, parent:567]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 568, #gens: 14, #ops: 1, parent:567] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 568, errors: [Complex.java:343: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		} 		return createComplex(real, -imaginary);
		  		                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(284): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (567(f=1.0), 568(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (567(f=1.0), )
----------Running generation: 285, population size: 1

***** Generation 285 : 0
**Parent Variant: [Variant id: 569, #gens: 13, #ops: 0, parent:-]

--Child created id: 570
--Creating new operations for variant [Variant id: 570, #gens: 13, #ops: 0, parent:569]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, org.apache.commons.math3.complex.Complex.INF]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
Transforming shadowed variable in if (java.lang.Double.isInfinite(real) || 
java.lang.Double.isInfinite(imaginary)) {
	return org.apache.commons.math3.complex.Complex.INF;
}
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (java.lang.Double.isInfinite(real) ||  java.lang.Double.isInfinite(imaginary)) { 	return org.apac[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (java.lang.Double.isInfinite(real) ||  java.lang.Double.isInfinite(imaginary)) { 	return org.apac[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 570, #gens: 14, #ops: 1, parent:569] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 570, errors: [Complex.java:468: error: incompatible types: unexpected return value
			return org.apache.commons.math3.complex.Complex.INF;
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(285): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (java.lang.Double.isInfinite(real) ||  java.lang.Double.isInfinite(imaginary)) { 	return org.apac[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (569(f=1.0), 570(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (569(f=1.0), )
----------Running generation: 286, population size: 1

***** Generation 286 : 0
**Parent Variant: [Variant id: 571, #gens: 13, #ops: 0, parent:-]

--Child created id: 572
--Creating new operations for variant [Variant id: 572, #gens: 13, #ops: 0, parent:571]
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 572, #gens: 12, #ops: 1, parent:571] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 572
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-572/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(286): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (571(f=1.0), 572(f=16.0), )
Selected to next generation: IDs2--> (571(f=1.0), )
----------Running generation: 287, population size: 1

***** Generation 287 : 0
**Parent Variant: [Variant id: 573, #gens: 13, #ops: 0, parent:-]

--Child created id: 574
--Creating new operations for variant [Variant id: 574, #gens: 13, #ops: 0, parent:573]
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
vars from patch [real, imaginary, q, scale]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: scale spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 574, #gens: 13, #ops: 1, parent:573] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 574, errors: [Complex.java:345: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 				double q = real / imaginary; 				double scale = 1.0 / ((real * q) + imaginary); 				return createComplex(scale * q, -scale);} else { 				double q = imaginary / real; 				double scale = 1.0 / ((imaginary * q) + real); 				return createComplex(scale, (-scale) * q);}
			                                                                                                   			                                                                                                                				                             				                                               				                    ^, Complex.java:345: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 				double q = real / imaginary; 				double scale = 1.0 / ((real * q) + imaginary); 				return createComplex(scale * q, -scale);} else { 				double q = imaginary / real; 				double scale = 1.0 / ((imaginary * q) + real); 				return createComplex(scale, (-scale) * q);}
			                                                                                                   			                                                                                                                				                             				                                               				                                                 				                             				                                               				                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(287): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (573(f=1.0), 574(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (573(f=1.0), )
----------Running generation: 288, population size: 1

***** Generation 288 : 0
**Parent Variant: [Variant id: 575, #gens: 13, #ops: 0, parent:-]

--Child created id: 576
--Creating new operations for variant [Variant id: 576, #gens: 13, #ops: 0, parent:575]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 1
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 576, #gens: 14, #ops: 1, parent:575] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 576, errors: [Complex.java:306: error: incompatible types: unexpected return value
			return org.apache.commons.math3.complex.Complex.NaN;
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(288): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (575(f=1.0), 576(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (575(f=1.0), )
----------Running generation: 289, population size: 1

***** Generation 289 : 0
**Parent Variant: [Variant id: 577, #gens: 13, #ops: 0, parent:-]

--Child created id: 578
--Creating new operations for variant [Variant id: 578, #gens: 13, #ops: 0, parent:577]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 578, #gens: 12, #ops: 1, parent:577] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 578, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(289): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (577(f=1.0), 578(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (577(f=1.0), )
----------Running generation: 290, population size: 1

***** Generation 290 : 0
**Parent Variant: [Variant id: 579, #gens: 13, #ops: 0, parent:-]

--Child created id: 580
--Creating new operations for variant [Variant id: 580, #gens: 13, #ops: 0, parent:579]
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 580, #gens: 12, #ops: 1, parent:579] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 580
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-580/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(290): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (579(f=1.0), 580(f=16.0), )
Selected to next generation: IDs2--> (579(f=1.0), )
----------Running generation: 291, population size: 1

***** Generation 291 : 0
**Parent Variant: [Variant id: 581, #gens: 13, #ops: 0, parent:-]

--Child created id: 582
--Creating new operations for variant [Variant id: 582, #gens: 13, #ops: 0, parent:581]
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, real, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 582, #gens: 13, #ops: 1, parent:581] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 582, errors: [Complex.java:1534: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1534: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1534: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1536: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1536: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1537: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1537: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1537: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1538: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1539: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1539: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1539: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1540: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1540: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1540: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1540: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1540: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1541: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1542: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1542: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1542: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1542: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1542: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1542: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1542: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1543: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1543: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1543: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1543: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1543: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1543: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1551: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1551: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1551: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1551: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1551: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1551: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1551: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1557: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1557: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1557: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1557: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1557: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1564: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1564: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1566: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1566: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1568: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1568: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(291): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (581(f=1.0), 582(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (581(f=1.0), )
----------Running generation: 292, population size: 1

***** Generation 292 : 0
**Parent Variant: [Variant id: 583, #gens: 13, #ops: 0, parent:-]

--Child created id: 584
--Creating new operations for variant [Variant id: 584, #gens: 13, #ops: 0, parent:583]
---analyzing modificationPoint position: 0
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 584, #gens: 14, #ops: 1, parent:583] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 584, errors: [Complex.java:310: error: incompatible types: unexpected return value
			return org.apache.commons.math3.complex.Complex.ZERO;
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(292): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (583(f=1.0), 584(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (583(f=1.0), )
----------Running generation: 293, population size: 1

***** Generation 293 : 0
**Parent Variant: [Variant id: 585, #gens: 13, #ops: 0, parent:-]

--Child created id: 586
--Creating new operations for variant [Variant id: 586, #gens: 13, #ops: 0, parent:585]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 586, #gens: 14, #ops: 1, parent:585] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 586, errors: [Complex.java:303: error: cannot assign a value to final variable imaginary
		} 		imaginary = imaginary;
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(293): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (585(f=1.0), 586(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (585(f=1.0), )
----------Running generation: 294, population size: 1

***** Generation 294 : 0
**Parent Variant: [Variant id: 587, #gens: 13, #ops: 0, parent:-]

--Child created id: 588
--Creating new operations for variant [Variant id: 588, #gens: 13, #ops: 0, parent:587]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in double q = real / imaginary
location: Complex.java102
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `double q = real / imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `double q = real / imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 588, #gens: 14, #ops: 1, parent:587] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 588
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-588/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(294): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `double q = real / imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (587(f=1.0), 588(f=1.0), )
Selected to next generation: IDs2--> (587(f=1.0), )
----------Running generation: 295, population size: 1

***** Generation 295 : 0
**Parent Variant: [Variant id: 589, #gens: 13, #ops: 0, parent:-]

--Child created id: 590
--Creating new operations for variant [Variant id: 590, #gens: 13, #ops: 0, parent:589]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 590, #gens: 14, #ops: 1, parent:589] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 590, errors: [Complex.java:448: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			return org.apache.commons.math3.complex.Complex.INF; 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (c.isNaN) { 				return isNaN;} else { 				return (real == c.real) && (imaginary == c.imaginary);}} 		return false;} 	/**
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(295): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (589(f=1.0), 590(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (589(f=1.0), )
----------Running generation: 296, population size: 1

***** Generation 296 : 0
**Parent Variant: [Variant id: 591, #gens: 13, #ops: 0, parent:-]

--Child created id: 592
--Creating new operations for variant [Variant id: 592, #gens: 13, #ops: 0, parent:591]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 592, #gens: 12, #ops: 1, parent:591] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 592, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(296): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (591(f=1.0), 592(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (591(f=1.0), )
----------Running generation: 297, population size: 1

***** Generation 297 : 0
**Parent Variant: [Variant id: 593, #gens: 13, #ops: 0, parent:-]

--Child created id: 594
--Creating new operations for variant [Variant id: 594, #gens: 13, #ops: 0, parent:593]
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 594, #gens: 12, #ops: 1, parent:593] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 594
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-594/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(297): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (593(f=1.0), 594(f=16.0), )
Selected to next generation: IDs2--> (593(f=1.0), )
----------Running generation: 298, population size: 1

***** Generation 298 : 0
**Parent Variant: [Variant id: 595, #gens: 13, #ops: 0, parent:-]

--Child created id: 596
--Creating new operations for variant [Variant id: 596, #gens: 13, #ops: 0, parent:595]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
Attempts Base Ingredients  2 total 24
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 2 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 596, #gens: 13, #ops: 1, parent:595] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 596, errors: [Complex.java:1229: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
		return org.apache.commons.math3.complex.Complex.INF;
		                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(298): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `// we don't use isInfinite() to avoid testing for NaN again return org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (595(f=1.0), 596(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (595(f=1.0), )
----------Running generation: 299, population size: 1

***** Generation 299 : 0
**Parent Variant: [Variant id: 597, #gens: 13, #ops: 0, parent:-]

--Child created id: 598
--Creating new operations for variant [Variant id: 598, #gens: 13, #ops: 0, parent:597]
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 598, #gens: 12, #ops: 1, parent:597] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 598, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(299): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (597(f=1.0), 598(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (597(f=1.0), )
----------Running generation: 300, population size: 1

***** Generation 300 : 0
**Parent Variant: [Variant id: 599, #gens: 13, #ops: 0, parent:-]

--Child created id: 600
--Creating new operations for variant [Variant id: 600, #gens: 13, #ops: 0, parent:599]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java348
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return org.apache.commons.math3.complex.Complex.NaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return org.apache.commons.math3.complex.Complex.NaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 600, #gens: 14, #ops: 1, parent:599] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 600, errors: [Complex.java:348: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			} else { 				return org.apache.commons.math3.complex.Complex.NaN;
			         				                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(300): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return org.apache.commons.math3.complex.Complex.NaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (599(f=1.0), 600(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (599(f=1.0), )
----------Running generation: 301, population size: 1

***** Generation 301 : 0
**Parent Variant: [Variant id: 601, #gens: 13, #ops: 0, parent:-]

--Child created id: 602
--Creating new operations for variant [Variant id: 602, #gens: 13, #ops: 0, parent:601]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 602, #gens: 12, #ops: 1, parent:601] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 602
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-602/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(301): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (601(f=1.0), 602(f=1.0), )
Selected to next generation: IDs2--> (601(f=1.0), )
----------Running generation: 302, population size: 1

***** Generation 302 : 0
**Parent Variant: [Variant id: 603, #gens: 13, #ops: 0, parent:-]

--Child created id: 604
--Creating new operations for variant [Variant id: 604, #gens: 13, #ops: 0, parent:603]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 604, #gens: 12, #ops: 1, parent:603] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 604, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(302): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (603(f=1.0), 604(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (603(f=1.0), )
----------Running generation: 303, population size: 1

***** Generation 303 : 0
**Parent Variant: [Variant id: 605, #gens: 13, #ops: 0, parent:-]

--Child created id: 606
--Creating new operations for variant [Variant id: 606, #gens: 13, #ops: 0, parent:605]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
Attempts Base Ingredients  4 total 42
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 606, #gens: 13, #ops: 1, parent:605] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 606, errors: [Complex.java:1467: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1467: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1469: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1469: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1470: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1470: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1470: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1471: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1472: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1472: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1472: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1473: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1473: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1473: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1473: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1473: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1474: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1475: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1475: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1475: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1475: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1475: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1475: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1475: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1476: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1476: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1476: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1476: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1476: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1476: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1484: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1484: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1484: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1484: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1484: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1484: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1484: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1490: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1490: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1490: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1490: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1490: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1497: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1497: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1499: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1499: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1501: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1501: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(303): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (605(f=1.0), 606(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (605(f=1.0), )
----------Running generation: 304, population size: 1

***** Generation 304 : 0
**Parent Variant: [Variant id: 607, #gens: 13, #ops: 0, parent:-]

--Child created id: 608
--Creating new operations for variant [Variant id: 608, #gens: 13, #ops: 0, parent:607]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, q, scale]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: scale spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 608, #gens: 14, #ops: 1, parent:607] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 608, errors: [Complex.java:321: error: unreachable statement
		} 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if ((real == 0.0) && (imaginary == 0.0)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(304): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (607(f=1.0), 608(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (607(f=1.0), )
----------Running generation: 305, population size: 1

***** Generation 305 : 0
**Parent Variant: [Variant id: 609, #gens: 13, #ops: 0, parent:-]

--Child created id: 610
--Creating new operations for variant [Variant id: 610, #gens: 13, #ops: 0, parent:609]
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 610, #gens: 12, #ops: 1, parent:609] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 610
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-610/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(305): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (609(f=1.0), 610(f=1.0), )
Selected to next generation: IDs2--> (609(f=1.0), )
----------Running generation: 306, population size: 1

***** Generation 306 : 0
**Parent Variant: [Variant id: 611, #gens: 13, #ops: 0, parent:-]

--Child created id: 612
--Creating new operations for variant [Variant id: 612, #gens: 13, #ops: 0, parent:611]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 612, #gens: 12, #ops: 1, parent:611] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 612, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(306): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (611(f=1.0), 612(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (611(f=1.0), )
----------Running generation: 307, population size: 1

***** Generation 307 : 0
**Parent Variant: [Variant id: 613, #gens: 13, #ops: 0, parent:-]

--Child created id: 614
--Creating new operations for variant [Variant id: 614, #gens: 13, #ops: 0, parent:613]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch []
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 614, #gens: 13, #ops: 1, parent:613] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 614, errors: [Complex.java:342: error: incompatible types: boolean cannot be converted to org.apache.commons.math3.complex.Complex
			return true;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(307): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (613(f=1.0), 614(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (613(f=1.0), )
----------Running generation: 308, population size: 1

***** Generation 308 : 0
**Parent Variant: [Variant id: 615, #gens: 13, #ops: 0, parent:-]

--Child created id: 616
--Creating new operations for variant [Variant id: 616, #gens: 13, #ops: 0, parent:615]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [other]
--> var from patch: other spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (this == other) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (this == other) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 616, #gens: 13, #ops: 1, parent:615] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 616
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-616/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(308): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (this == other) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (615(f=1.0), 616(f=1.0), )
Selected to next generation: IDs2--> (615(f=1.0), )
----------Running generation: 309, population size: 1

***** Generation 309 : 0
**Parent Variant: [Variant id: 617, #gens: 13, #ops: 0, parent:-]

--Child created id: 618
--Creating new operations for variant [Variant id: 618, #gens: 13, #ops: 0, parent:617]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 618, #gens: 12, #ops: 1, parent:617] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 618, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(309): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (617(f=1.0), 618(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (617(f=1.0), )
----------Running generation: 310, population size: 1

***** Generation 310 : 0
**Parent Variant: [Variant id: 619, #gens: 13, #ops: 0, parent:-]

--Child created id: 620
--Creating new operations for variant [Variant id: 620, #gens: 13, #ops: 0, parent:619]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 620, #gens: 12, #ops: 1, parent:619] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 620, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(310): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (619(f=1.0), 620(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (619(f=1.0), )
----------Running generation: 311, population size: 1

***** Generation 311 : 0
**Parent Variant: [Variant id: 621, #gens: 13, #ops: 0, parent:-]

--Child created id: 622
--Creating new operations for variant [Variant id: 622, #gens: 13, #ops: 0, parent:621]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 622, #gens: 14, #ops: 1, parent:621] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 622, errors: [Complex.java:1558: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1558: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1558: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1558: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1558: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1558: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1558: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1560: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1560: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1561: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1561: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1561: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1562: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1563: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1563: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1563: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1564: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1564: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1564: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1564: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1564: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1565: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1566: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1566: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1566: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1566: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1566: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1566: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1566: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1567: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1567: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1567: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1567: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1567: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1567: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1575: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1575: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1575: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1575: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1575: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1575: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1575: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1581: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1581: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1581: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1581: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1581: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1588: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1588: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1590: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1590: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1592: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1592: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(311): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (621(f=1.0), 622(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (621(f=1.0), )
----------Running generation: 312, population size: 1

***** Generation 312 : 0
**Parent Variant: [Variant id: 623, #gens: 13, #ops: 0, parent:-]

--Child created id: 624
--Creating new operations for variant [Variant id: 624, #gens: 13, #ops: 0, parent:623]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.real = real
---analyzing modificationPoint position: 0
---modifPoint 2 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 624, #gens: 12, #ops: 1, parent:623] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 624
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-624/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(312): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (623(f=1.0), 624(f=1.0), )
Selected to next generation: IDs2--> (623(f=1.0), )
----------Running generation: 313, population size: 1

***** Generation 313 : 0
**Parent Variant: [Variant id: 625, #gens: 13, #ops: 0, parent:-]

--Child created id: 626
--Creating new operations for variant [Variant id: 626, #gens: 13, #ops: 0, parent:625]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 626, #gens: 12, #ops: 1, parent:625] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 626
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-626/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(313): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (625(f=1.0), 626(f=15.0), )
Selected to next generation: IDs2--> (625(f=1.0), )
----------Running generation: 314, population size: 1

***** Generation 314 : 0
**Parent Variant: [Variant id: 627, #gens: 13, #ops: 0, parent:-]

--Child created id: 628
--Creating new operations for variant [Variant id: 628, #gens: 13, #ops: 0, parent:627]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [isNaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 628, #gens: 13, #ops: 1, parent:627] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 628, errors: [Complex.java:347: error: incompatible types: boolean cannot be converted to org.apache.commons.math3.complex.Complex
			return isNaN;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(314): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (627(f=1.0), 628(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (627(f=1.0), )
----------Running generation: 315, population size: 1

***** Generation 315 : 0
**Parent Variant: [Variant id: 629, #gens: 13, #ops: 0, parent:-]

--Child created id: 630
--Creating new operations for variant [Variant id: 630, #gens: 13, #ops: 0, parent:629]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `this(real, 0.0)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `this(real, 0.0)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 630, #gens: 14, #ops: 1, parent:629] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 630, errors: [Complex.java:307: error: call to this must be first statement in constructor
		} 		this(real, 0.0);
		  		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(315): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `this(real, 0.0)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (629(f=1.0), 630(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (629(f=1.0), )
----------Running generation: 316, population size: 1

***** Generation 316 : 0
**Parent Variant: [Variant id: 631, #gens: 13, #ops: 0, parent:-]

--Child created id: 632
--Creating new operations for variant [Variant id: 632, #gens: 13, #ops: 0, parent:631]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 632, #gens: 12, #ops: 1, parent:631] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 632, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(316): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (631(f=1.0), 632(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (631(f=1.0), )
----------Running generation: 317, population size: 1

***** Generation 317 : 0
**Parent Variant: [Variant id: 633, #gens: 13, #ops: 0, parent:-]

--Child created id: 634
--Creating new operations for variant [Variant id: 634, #gens: 13, #ops: 0, parent:633]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 634, #gens: 12, #ops: 1, parent:633] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 634
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-634/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(317): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (633(f=1.0), 634(f=16.0), )
Selected to next generation: IDs2--> (633(f=1.0), )
----------Running generation: 318, population size: 1

***** Generation 318 : 0
**Parent Variant: [Variant id: 635, #gens: 13, #ops: 0, parent:-]

--Child created id: 636
--Creating new operations for variant [Variant id: 636, #gens: 13, #ops: 0, parent:635]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 636, #gens: 12, #ops: 1, parent:635] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 636
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-636/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(318): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (635(f=1.0), 636(f=1.0), )
Selected to next generation: IDs2--> (635(f=1.0), )
----------Running generation: 319, population size: 1

***** Generation 319 : 0
**Parent Variant: [Variant id: 637, #gens: 13, #ops: 0, parent:-]

--Child created id: 638
--Creating new operations for variant [Variant id: 638, #gens: 13, #ops: 0, parent:637]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 638, #gens: 12, #ops: 1, parent:637] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 638
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-638/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(319): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (637(f=1.0), 638(f=1.0), )
Selected to next generation: IDs2--> (637(f=1.0), )
----------Running generation: 320, population size: 1

***** Generation 320 : 0
**Parent Variant: [Variant id: 639, #gens: 13, #ops: 0, parent:-]

--Child created id: 640
--Creating new operations for variant [Variant id: 640, #gens: 13, #ops: 0, parent:639]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return imaginary` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return imaginary` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 640, #gens: 14, #ops: 1, parent:639] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 640, errors: [Complex.java:377: error: incompatible types: unexpected return value
		return imaginary; 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(320): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return imaginary` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (639(f=1.0), 640(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (639(f=1.0), )
----------Running generation: 321, population size: 1

***** Generation 321 : 0
**Parent Variant: [Variant id: 641, #gens: 13, #ops: 0, parent:-]

--Child created id: 642
--Creating new operations for variant [Variant id: 642, #gens: 13, #ops: 0, parent:641]
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.complex.ComplexField.getInstance()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.complex.ComplexField.getInstance()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 642, #gens: 14, #ops: 1, parent:641] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 642, errors: [Complex.java:1738: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1738: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1738: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1740: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1740: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1741: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1741: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1741: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1742: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1743: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1743: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1743: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1744: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1744: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1744: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1744: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1744: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1745: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1746: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1746: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1746: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1746: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1746: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1746: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1746: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1747: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1747: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1747: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1747: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1747: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1747: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1755: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1755: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1755: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1755: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1755: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1755: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1755: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1761: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1761: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1761: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1761: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1761: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1768: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1768: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1770: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1770: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1772: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1772: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(321): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.complex.ComplexField.getInstance()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (641(f=1.0), 642(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (641(f=1.0), )
----------Running generation: 322, population size: 1

***** Generation 322 : 0
**Parent Variant: [Variant id: 643, #gens: 13, #ops: 0, parent:-]

--Child created id: 644
--Creating new operations for variant [Variant id: 644, #gens: 13, #ops: 0, parent:643]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 644, #gens: 12, #ops: 1, parent:643] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 644, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(322): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (643(f=1.0), 644(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (643(f=1.0), )
----------Running generation: 323, population size: 1

***** Generation 323 : 0
**Parent Variant: [Variant id: 645, #gens: 13, #ops: 0, parent:-]

--Child created id: 646
--Creating new operations for variant [Variant id: 646, #gens: 13, #ops: 0, parent:645]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, java.lang.Double.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: java.lang.Double.NaN spoon.support.reflect.code.CtFieldReadImpl
SameName: // CHECKSTYLE: stop ConstantName
/**
 * A complex number representing "NaN + NaNi"
 */ public static final org.apache.commons.math3.complex.Complex NaN = new org.apache.commons.math3.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);
Transforming shadowed variable in if (isNaN) {
	return java.lang.Double.NaN;
}
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return java.lang.Double.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return java.lang.Double.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 646, #gens: 13, #ops: 1, parent:645] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 646, errors: [Complex.java:343: error: incompatible types: double cannot be converted to boolean
		} 		if (isNaN) { 			return java.lang.Double.NaN;}
		  		             			                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(323): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return java.lang.Double.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (645(f=1.0), 646(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (645(f=1.0), )
----------Running generation: 324, population size: 1

***** Generation 324 : 0
**Parent Variant: [Variant id: 647, #gens: 13, #ops: 0, parent:-]

--Child created id: 648
--Creating new operations for variant [Variant id: 648, #gens: 13, #ops: 0, parent:647]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 0
---modifPoint 2 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 1
---modifPoint 3 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 4 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 5 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 6 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 648, #gens: 12, #ops: 1, parent:647] gen mutated: 1 , gen not mut: 7, gen not applied  0
-The child compiles: id 648
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-648/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(324): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (647(f=1.0), 648(f=15.0), )
Selected to next generation: IDs2--> (647(f=1.0), )
----------Running generation: 325, population size: 1

***** Generation 325 : 0
**Parent Variant: [Variant id: 649, #gens: 13, #ops: 0, parent:-]

--Child created id: 650
--Creating new operations for variant [Variant id: 650, #gens: 13, #ops: 0, parent:649]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 650, #gens: 12, #ops: 1, parent:649] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 650
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-650/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(325): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (649(f=1.0), 650(f=1.0), )
Selected to next generation: IDs2--> (649(f=1.0), )
----------Running generation: 326, population size: 1

***** Generation 326 : 0
**Parent Variant: [Variant id: 651, #gens: 13, #ops: 0, parent:-]

--Child created id: 652
--Creating new operations for variant [Variant id: 652, #gens: 13, #ops: 0, parent:651]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 652, #gens: 12, #ops: 1, parent:651] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 652
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-652/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(326): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (651(f=1.0), 652(f=1.0), )
Selected to next generation: IDs2--> (651(f=1.0), )
----------Running generation: 327, population size: 1

***** Generation 327 : 0
**Parent Variant: [Variant id: 653, #gens: 13, #ops: 0, parent:-]

--Child created id: 654
--Creating new operations for variant [Variant id: 654, #gens: 13, #ops: 0, parent:653]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
Attempts Base Ingredients  2 total 60
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 654, #gens: 13, #ops: 1, parent:653] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 654, errors: [Complex.java:386: error: incompatible types: double cannot be converted to org.apache.commons.math3.complex.Complex
			return real;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(327): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (653(f=1.0), 654(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (653(f=1.0), )
----------Running generation: 328, population size: 1

***** Generation 328 : 0
**Parent Variant: [Variant id: 655, #gens: 13, #ops: 0, parent:-]

--Child created id: 656
--Creating new operations for variant [Variant id: 656, #gens: 13, #ops: 0, parent:655]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 656, #gens: 12, #ops: 1, parent:655] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 656, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(328): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (655(f=1.0), 656(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (655(f=1.0), )
----------Running generation: 329, population size: 1

***** Generation 329 : 0
**Parent Variant: [Variant id: 657, #gens: 13, #ops: 0, parent:-]

--Child created id: 658
--Creating new operations for variant [Variant id: 658, #gens: 13, #ops: 0, parent:657]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 658, #gens: 13, #ops: 1, parent:657] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 658, errors: [Complex.java:1555: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1555: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1555: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1557: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1557: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1558: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1558: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1558: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1559: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1560: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1560: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1560: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1561: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1561: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1561: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1561: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1561: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1562: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1563: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1563: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1563: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1563: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1563: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1563: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1563: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1564: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1564: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1564: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1564: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1564: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1564: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1572: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1572: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1572: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1572: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1572: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1572: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1572: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1578: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1578: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1578: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1578: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1578: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1585: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1585: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1587: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1587: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1589: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1589: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(329): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (657(f=1.0), 658(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (657(f=1.0), )
----------Running generation: 330, population size: 1

***** Generation 330 : 0
**Parent Variant: [Variant id: 659, #gens: 13, #ops: 0, parent:-]

--Child created id: 660
--Creating new operations for variant [Variant id: 660, #gens: 13, #ops: 0, parent:659]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
Attempts Base Ingredients  2 total 24
Attempts Base Ingredients  3 total 24
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN) { 	return 7; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN) { 	return 7; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 660, #gens: 14, #ops: 1, parent:659] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 660, errors: [Complex.java:365: error: incompatible types: int cannot be converted to org.apache.commons.math3.complex.Complex
			return 7;
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(330): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN) { 	return 7; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (659(f=1.0), 660(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (659(f=1.0), )
----------Running generation: 331, population size: 1

***** Generation 331 : 0
**Parent Variant: [Variant id: 661, #gens: 13, #ops: 0, parent:-]

--Child created id: 662
--Creating new operations for variant [Variant id: 662, #gens: 13, #ops: 0, parent:661]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 662, #gens: 12, #ops: 1, parent:661] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 662, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(331): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (661(f=1.0), 662(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (661(f=1.0), )
----------Running generation: 332, population size: 1

***** Generation 332 : 0
**Parent Variant: [Variant id: 663, #gens: 13, #ops: 0, parent:-]

--Child created id: 664
--Creating new operations for variant [Variant id: 664, #gens: 13, #ops: 0, parent:663]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 664, #gens: 14, #ops: 1, parent:663] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 664, errors: [Complex.java:1603: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1603: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1603: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1603: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1603: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1603: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1603: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1605: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1605: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1606: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1606: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1606: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1607: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1608: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1608: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1608: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1609: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1609: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1609: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1609: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1609: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1610: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1611: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1611: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1611: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1611: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1611: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1611: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1611: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1612: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1612: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1612: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1612: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1612: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1612: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1620: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1620: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1620: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1620: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1620: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1620: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1620: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1626: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1626: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1626: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1626: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1626: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1633: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1633: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1635: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1635: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1637: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1637: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(332): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (663(f=1.0), 664(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (663(f=1.0), )
----------Running generation: 333, population size: 1

***** Generation 333 : 0
**Parent Variant: [Variant id: 665, #gens: 13, #ops: 0, parent:-]

--Child created id: 666
--Creating new operations for variant [Variant id: 666, #gens: 13, #ops: 0, parent:665]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 666, #gens: 12, #ops: 1, parent:665] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 666
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-666/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(333): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (665(f=1.0), 666(f=15.0), )
Selected to next generation: IDs2--> (665(f=1.0), )
----------Running generation: 334, population size: 1

***** Generation 334 : 0
**Parent Variant: [Variant id: 667, #gens: 13, #ops: 0, parent:-]

--Child created id: 668
--Creating new operations for variant [Variant id: 668, #gens: 13, #ops: 0, parent:667]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 668, #gens: 14, #ops: 1, parent:667] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 668
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-668/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(334): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (667(f=1.0), 668(f=1.0), )
Selected to next generation: IDs2--> (667(f=1.0), )
----------Running generation: 335, population size: 1

***** Generation 335 : 0
**Parent Variant: [Variant id: 669, #gens: 13, #ops: 0, parent:-]

--Child created id: 670
--Creating new operations for variant [Variant id: 670, #gens: 13, #ops: 0, parent:669]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 670, #gens: 12, #ops: 1, parent:669] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 670
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-670/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(335): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (669(f=1.0), 670(f=15.0), )
Selected to next generation: IDs2--> (669(f=1.0), )
----------Running generation: 336, population size: 1

***** Generation 336 : 0
**Parent Variant: [Variant id: 671, #gens: 13, #ops: 0, parent:-]

--Child created id: 672
--Creating new operations for variant [Variant id: 672, #gens: 13, #ops: 0, parent:671]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 672, #gens: 12, #ops: 1, parent:671] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 672
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-672/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(336): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (671(f=1.0), 672(f=15.0), )
Selected to next generation: IDs2--> (671(f=1.0), )
----------Running generation: 337, population size: 1

***** Generation 337 : 0
**Parent Variant: [Variant id: 673, #gens: 13, #ops: 0, parent:-]

--Child created id: 674
--Creating new operations for variant [Variant id: 674, #gens: 13, #ops: 0, parent:673]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, imaginary, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 674, #gens: 13, #ops: 1, parent:673] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 674, errors: [Complex.java:1585: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1585: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1587: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1587: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1588: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1588: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1588: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1589: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1590: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1590: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1590: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1591: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1591: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1591: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1591: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1591: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1592: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1593: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1593: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1593: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1593: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1593: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1593: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1593: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1594: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1594: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1594: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1594: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1594: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1594: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1602: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1602: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1602: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1602: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1602: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1602: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1602: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1615: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1615: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1617: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1617: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1619: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1619: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(337): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (673(f=1.0), 674(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (673(f=1.0), )
----------Running generation: 338, population size: 1

***** Generation 338 : 0
**Parent Variant: [Variant id: 675, #gens: 13, #ops: 0, parent:-]

--Child created id: 676
--Creating new operations for variant [Variant id: 676, #gens: 13, #ops: 0, parent:675]
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 676, #gens: 13, #ops: 1, parent:675] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 676, errors: [Complex.java:1588: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1588: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1590: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1590: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1591: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1591: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1591: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1592: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1593: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1593: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1593: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1594: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1594: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1594: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1594: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1594: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1595: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1596: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1596: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1596: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1596: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1596: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1596: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1596: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1597: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1597: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1597: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1597: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1597: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1597: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1605: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1605: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1605: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1605: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1605: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1605: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1605: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1611: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1611: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1611: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1611: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1611: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1618: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1618: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1620: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1620: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1622: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1622: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(338): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (675(f=1.0), 676(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (675(f=1.0), )
----------Running generation: 339, population size: 1

***** Generation 339 : 0
**Parent Variant: [Variant id: 677, #gens: 13, #ops: 0, parent:-]

--Child created id: 678
--Creating new operations for variant [Variant id: 678, #gens: 13, #ops: 0, parent:677]
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 678, #gens: 13, #ops: 1, parent:677] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 678, errors: [Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (real == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(imaginary);}
			                                                                                                   			                   				                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(339): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (real == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(imaginary); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (677(f=1.0), 678(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (677(f=1.0), )
----------Running generation: 340, population size: 1

***** Generation 340 : 0
**Parent Variant: [Variant id: 679, #gens: 13, #ops: 0, parent:-]

--Child created id: 680
--Creating new operations for variant [Variant id: 680, #gens: 13, #ops: 0, parent:679]
---analyzing modificationPoint position: 0
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 680, #gens: 12, #ops: 1, parent:679] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 680
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-680/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(340): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (679(f=1.0), 680(f=1.0), )
Selected to next generation: IDs2--> (679(f=1.0), )
----------Running generation: 341, population size: 1

***** Generation 341 : 0
**Parent Variant: [Variant id: 681, #gens: 13, #ops: 0, parent:-]

--Child created id: 682
--Creating new operations for variant [Variant id: 682, #gens: 13, #ops: 0, parent:681]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 1
---modifPoint 2 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 4 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 682, #gens: 12, #ops: 1, parent:681] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 682, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(341): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (681(f=1.0), 682(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (681(f=1.0), )
----------Running generation: 342, population size: 1

***** Generation 342 : 0
**Parent Variant: [Variant id: 683, #gens: 13, #ops: 0, parent:-]

--Child created id: 684
--Creating new operations for variant [Variant id: 684, #gens: 13, #ops: 0, parent:683]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 684, #gens: 12, #ops: 1, parent:683] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 684, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(342): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (683(f=1.0), 684(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (683(f=1.0), )
----------Running generation: 343, population size: 1

***** Generation 343 : 0
**Parent Variant: [Variant id: 685, #gens: 13, #ops: 0, parent:-]

--Child created id: 686
--Creating new operations for variant [Variant id: 686, #gens: 13, #ops: 0, parent:685]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.real = real
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
Attempts Base Ingredients  2 total 60
Attempts Base Ingredients  3 total 60
---modifPoint 3 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 4 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 686, #gens: 12, #ops: 1, parent:685] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 686
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-686/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(343): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (685(f=1.0), 686(f=15.0), )
Selected to next generation: IDs2--> (685(f=1.0), )
----------Running generation: 344, population size: 1

***** Generation 344 : 0
**Parent Variant: [Variant id: 687, #gens: 13, #ops: 0, parent:-]

--Child created id: 688
--Creating new operations for variant [Variant id: 688, #gens: 13, #ops: 0, parent:687]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 688, #gens: 13, #ops: 1, parent:687] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 688, errors: [Complex.java:1588: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1588: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1588: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1590: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1590: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1591: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1591: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1591: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1592: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1593: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1593: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1593: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1594: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1594: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1594: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1594: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1594: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1595: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1596: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1596: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1596: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1596: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1596: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1596: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1596: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1597: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1597: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1597: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1597: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1597: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1597: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1605: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1605: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1605: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1605: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1605: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1605: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1605: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1611: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1611: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1611: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1611: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1611: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1618: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1618: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1620: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1620: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1622: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1622: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(344): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (real > 20.0) { 	return createComplex(1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (687(f=1.0), 688(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (687(f=1.0), )
----------Running generation: 345, population size: 1

***** Generation 345 : 0
**Parent Variant: [Variant id: 689, #gens: 13, #ops: 0, parent:-]

--Child created id: 690
--Creating new operations for variant [Variant id: 690, #gens: 13, #ops: 0, parent:689]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 690, #gens: 12, #ops: 1, parent:689] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 690
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-690/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(345): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (689(f=1.0), 690(f=1.0), )
Selected to next generation: IDs2--> (689(f=1.0), )
----------Running generation: 346, population size: 1

***** Generation 346 : 0
**Parent Variant: [Variant id: 691, #gens: 13, #ops: 0, parent:-]

--Child created id: 692
--Creating new operations for variant [Variant id: 692, #gens: 13, #ops: 0, parent:691]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 692, #gens: 14, #ops: 1, parent:691] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 692, errors: [Complex.java:468: error: incompatible types: unexpected return value
		return org.apache.commons.math3.complex.Complex.INF; 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(346): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (691(f=1.0), 692(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (691(f=1.0), )
----------Running generation: 347, population size: 1

***** Generation 347 : 0
**Parent Variant: [Variant id: 693, #gens: 13, #ops: 0, parent:-]

--Child created id: 694
--Creating new operations for variant [Variant id: 694, #gens: 13, #ops: 0, parent:693]
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 694, #gens: 13, #ops: 1, parent:693] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 694, errors: [Complex.java:1606: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1606: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1606: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1608: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1608: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1609: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1609: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1609: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1610: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1611: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1611: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1611: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1612: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1612: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1612: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1612: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1612: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1613: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1614: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1614: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1614: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1614: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1614: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1614: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1614: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1615: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1615: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1615: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1615: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1615: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1615: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1623: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1623: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1623: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1623: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1623: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1623: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1623: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1629: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1629: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1629: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1629: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1629: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1636: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1636: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1638: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1638: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1640: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1640: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(347): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (693(f=1.0), 694(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (693(f=1.0), )
----------Running generation: 348, population size: 1

***** Generation 348 : 0
**Parent Variant: [Variant id: 695, #gens: 13, #ops: 0, parent:-]

--Child created id: 696
--Creating new operations for variant [Variant id: 696, #gens: 13, #ops: 0, parent:695]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 696, #gens: 12, #ops: 1, parent:695] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 696
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-696/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(348): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (695(f=1.0), 696(f=16.0), )
Selected to next generation: IDs2--> (695(f=1.0), )
----------Running generation: 349, population size: 1

***** Generation 349 : 0
**Parent Variant: [Variant id: 697, #gens: 13, #ops: 0, parent:-]

--Child created id: 698
--Creating new operations for variant [Variant id: 698, #gens: 13, #ops: 0, parent:697]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 698, #gens: 14, #ops: 1, parent:697] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 698, errors: [Complex.java:468: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			return org.apache.commons.math3.complex.Complex.INF; 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (c.isNaN) { 				return isNaN;} else { 				return (real == c.real) && (imaginary == c.imaginary);}} 		return false;} 	/**
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(349): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (697(f=1.0), 698(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (697(f=1.0), )
----------Running generation: 350, population size: 1

***** Generation 350 : 0
**Parent Variant: [Variant id: 699, #gens: 13, #ops: 0, parent:-]

--Child created id: 700
--Creating new operations for variant [Variant id: 700, #gens: 13, #ops: 0, parent:699]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 700, #gens: 12, #ops: 1, parent:699] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 700
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-700/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(350): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (699(f=1.0), 700(f=1.0), )
Selected to next generation: IDs2--> (699(f=1.0), )
----------Running generation: 351, population size: 1

***** Generation 351 : 0
**Parent Variant: [Variant id: 701, #gens: 13, #ops: 0, parent:-]

--Child created id: 702
--Creating new operations for variant [Variant id: 702, #gens: 13, #ops: 0, parent:701]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch []
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 702, #gens: 13, #ops: 1, parent:701] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 702, errors: [Complex.java:1602: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1602: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1602: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1602: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1602: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1602: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1602: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1604: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1604: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1605: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1605: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1605: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1606: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1607: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1607: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1607: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1608: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1608: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1608: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1608: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1608: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1609: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1610: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1610: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1610: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1610: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1610: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1610: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1610: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1611: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1611: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1611: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1611: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1611: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1611: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1619: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1619: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1619: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1619: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1619: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1619: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1619: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1625: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1625: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1625: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1625: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1625: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1632: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1632: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1634: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1634: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1636: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1636: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(351): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (701(f=1.0), 702(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (701(f=1.0), )
----------Running generation: 352, population size: 1

***** Generation 352 : 0
**Parent Variant: [Variant id: 703, #gens: 13, #ops: 0, parent:-]

--Child created id: 704
--Creating new operations for variant [Variant id: 704, #gens: 13, #ops: 0, parent:703]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 704, #gens: 12, #ops: 1, parent:703] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 704
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-704/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(352): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (703(f=1.0), 704(f=16.0), )
Selected to next generation: IDs2--> (703(f=1.0), )
----------Running generation: 353, population size: 1

***** Generation 353 : 0
**Parent Variant: [Variant id: 705, #gens: 13, #ops: 0, parent:-]

--Child created id: 706
--Creating new operations for variant [Variant id: 706, #gens: 13, #ops: 0, parent:705]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, java.lang.Double.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: java.lang.Double.NaN spoon.support.reflect.code.CtFieldReadImpl
SameName: // CHECKSTYLE: stop ConstantName
/**
 * A complex number representing "NaN + NaNi"
 */ public static final org.apache.commons.math3.complex.Complex NaN = new org.apache.commons.math3.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);
Transforming shadowed variable in if (isNaN) {
	return java.lang.Double.NaN;
}
location: Complex.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (isNaN) { 	return java.lang.Double.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (isNaN) { 	return java.lang.Double.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 706, #gens: 14, #ops: 1, parent:705] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 706, errors: [Complex.java:118: error: incompatible types: unexpected return value
			return java.lang.Double.NaN;
			                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(353): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `if (isNaN) { 	return java.lang.Double.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (705(f=1.0), 706(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (705(f=1.0), )
----------Running generation: 354, population size: 1

***** Generation 354 : 0
**Parent Variant: [Variant id: 707, #gens: 13, #ops: 0, parent:-]

--Child created id: 708
--Creating new operations for variant [Variant id: 708, #gens: 13, #ops: 0, parent:707]
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java348
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 708, #gens: 14, #ops: 1, parent:707] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 708, errors: [Complex.java:1591: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1591: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1591: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1593: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1593: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1594: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1594: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1594: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1595: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1596: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1596: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1596: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1597: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1597: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1597: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1597: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1597: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1598: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1599: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1599: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1599: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1599: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1599: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1599: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1599: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1600: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1600: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1600: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1600: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1600: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1600: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1608: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1608: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1614: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1614: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1614: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1614: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1614: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1621: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1621: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1623: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1623: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1625: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1625: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(354): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (707(f=1.0), 708(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (707(f=1.0), )
----------Running generation: 355, population size: 1

***** Generation 355 : 0
**Parent Variant: [Variant id: 709, #gens: 13, #ops: 0, parent:-]

--Child created id: 710
--Creating new operations for variant [Variant id: 710, #gens: 13, #ops: 0, parent:709]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [other, c, c.isNaN, real, imaginary]
--> var from patch: other spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: c spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: c.isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 710, #gens: 13, #ops: 1, parent:709] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 710
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-710/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(355): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (709(f=1.0), 710(f=1.0), )
Selected to next generation: IDs2--> (709(f=1.0), )
----------Running generation: 356, population size: 1

***** Generation 356 : 0
**Parent Variant: [Variant id: 711, #gens: 13, #ops: 0, parent:-]

--Child created id: 712
--Creating new operations for variant [Variant id: 712, #gens: 13, #ops: 0, parent:711]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 712, #gens: 13, #ops: 1, parent:711] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 712, errors: [Complex.java:1543: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1543: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1545: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1545: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1546: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1546: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1546: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1547: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1548: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1548: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1548: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1549: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1549: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1549: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1549: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1549: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1550: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1551: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1551: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1551: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1551: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1551: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1551: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1551: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1552: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1552: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1552: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1552: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1552: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1552: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1560: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1560: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1566: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1566: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1566: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1566: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1566: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1573: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1573: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1575: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1575: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1577: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1577: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(356): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (711(f=1.0), 712(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (711(f=1.0), )
----------Running generation: 357, population size: 1

***** Generation 357 : 0
**Parent Variant: [Variant id: 713, #gens: 13, #ops: 0, parent:-]

--Child created id: 714
--Creating new operations for variant [Variant id: 714, #gens: 13, #ops: 0, parent:713]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.I]
--> var from patch: org.apache.commons.math3.complex.Complex.I spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 714, #gens: 14, #ops: 1, parent:713] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 714, errors: [Complex.java:622: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(
		                                                                                                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(357): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (713(f=1.0), 714(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (713(f=1.0), )
----------Running generation: 358, population size: 1

***** Generation 358 : 0
**Parent Variant: [Variant id: 715, #gens: 13, #ops: 0, parent:-]

--Child created id: 716
--Creating new operations for variant [Variant id: 716, #gens: 13, #ops: 0, parent:715]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 716, #gens: 13, #ops: 1, parent:715] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 716, errors: [Complex.java:343: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		} 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;}
		  		             			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(358): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (715(f=1.0), 716(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (715(f=1.0), )
----------Running generation: 359, population size: 1

***** Generation 359 : 0
**Parent Variant: [Variant id: 717, #gens: 13, #ops: 0, parent:-]

--Child created id: 718
--Creating new operations for variant [Variant id: 718, #gens: 13, #ops: 0, parent:717]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, real, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
Transforming shadowed variable in if (isNaN || java.lang.Double.isInfinite(real)) {
	return org.apache.commons.math3.complex.Complex.NaN;
}
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 718, #gens: 14, #ops: 1, parent:717] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 718, errors: [Complex.java:1650: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1650: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1652: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1652: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1653: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1653: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1653: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1654: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1655: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1655: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1655: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1656: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1656: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1656: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1656: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1656: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1657: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1658: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1658: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1658: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1658: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1658: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1658: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1658: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1659: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1659: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1659: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1659: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1659: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1659: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1667: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1667: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1667: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1667: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1667: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1667: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1667: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1673: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1673: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1680: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1680: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1682: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1682: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1684: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1684: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(359): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (717(f=1.0), 718(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (717(f=1.0), )
----------Running generation: 360, population size: 1

***** Generation 360 : 0
**Parent Variant: [Variant id: 719, #gens: 13, #ops: 0, parent:-]

--Child created id: 720
--Creating new operations for variant [Variant id: 720, #gens: 13, #ops: 0, parent:719]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 720, #gens: 12, #ops: 1, parent:719] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 720, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(360): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (719(f=1.0), 720(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (719(f=1.0), )
----------Running generation: 361, population size: 1

***** Generation 361 : 0
**Parent Variant: [Variant id: 721, #gens: 13, #ops: 0, parent:-]

--Child created id: 722
--Creating new operations for variant [Variant id: 722, #gens: 13, #ops: 0, parent:721]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 722, #gens: 12, #ops: 1, parent:721] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 722, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(361): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (721(f=1.0), 722(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (721(f=1.0), )
----------Running generation: 362, population size: 1

***** Generation 362 : 0
**Parent Variant: [Variant id: 723, #gens: 13, #ops: 0, parent:-]

--Child created id: 724
--Creating new operations for variant [Variant id: 724, #gens: 13, #ops: 0, parent:723]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  this.real = real
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 724, #gens: 12, #ops: 1, parent:723] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 724
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-724/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(362): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (723(f=1.0), 724(f=1.0), )
Selected to next generation: IDs2--> (723(f=1.0), )
----------Running generation: 363, population size: 1

***** Generation 363 : 0
**Parent Variant: [Variant id: 725, #gens: 13, #ops: 0, parent:-]

--Child created id: 726
--Creating new operations for variant [Variant id: 726, #gens: 13, #ops: 0, parent:725]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java340
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 726, #gens: 14, #ops: 1, parent:725] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 726, errors: [Complex.java:1539: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1539: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1539: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1541: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1541: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1542: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1542: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1542: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1543: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1544: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1544: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1544: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1545: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1545: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1545: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1545: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1545: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1546: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1547: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1547: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1547: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1547: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1547: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1547: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1547: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1548: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1548: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1548: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1548: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1548: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1548: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1556: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1556: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1556: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1556: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1556: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1556: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1556: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1562: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1562: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1562: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1562: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1562: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1569: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1569: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1571: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1571: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1573: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1573: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(363): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (725(f=1.0), 726(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (725(f=1.0), )
----------Running generation: 364, population size: 1

***** Generation 364 : 0
**Parent Variant: [Variant id: 727, #gens: 13, #ops: 0, parent:-]

--Child created id: 728
--Creating new operations for variant [Variant id: 728, #gens: 13, #ops: 0, parent:727]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 728, #gens: 14, #ops: 1, parent:727] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 728, errors: [Complex.java:1656: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1656: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1656: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1658: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1658: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1659: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1659: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1659: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1660: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1661: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1661: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1661: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1662: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1662: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1662: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1662: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1662: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1663: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1664: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1664: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1664: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1664: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1664: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1664: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1664: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1665: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1665: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1665: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1665: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1665: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1665: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1673: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1673: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1673: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1673: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1679: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1679: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1679: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1679: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1679: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1686: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1686: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1688: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1688: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1690: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1690: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(364): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (imaginary < (-20.0)) { 	return createComplex(0.0, -1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (727(f=1.0), 728(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (727(f=1.0), )
----------Running generation: 365, population size: 1

***** Generation 365 : 0
**Parent Variant: [Variant id: 729, #gens: 13, #ops: 0, parent:-]

--Child created id: 730
--Creating new operations for variant [Variant id: 730, #gens: 13, #ops: 0, parent:729]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
---modifPoint 1 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 730, #gens: 12, #ops: 1, parent:729] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 730
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-730/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(365): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (729(f=1.0), 730(f=1.0), )
Selected to next generation: IDs2--> (729(f=1.0), )
----------Running generation: 366, population size: 1

***** Generation 366 : 0
**Parent Variant: [Variant id: 731, #gens: 13, #ops: 0, parent:-]

--Child created id: 732
--Creating new operations for variant [Variant id: 732, #gens: 13, #ops: 0, parent:731]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 732, #gens: 12, #ops: 1, parent:731] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 732, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(366): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (731(f=1.0), 732(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (731(f=1.0), )
----------Running generation: 367, population size: 1

***** Generation 367 : 0
**Parent Variant: [Variant id: 733, #gens: 13, #ops: 0, parent:-]

--Child created id: 734
--Creating new operations for variant [Variant id: 734, #gens: 13, #ops: 0, parent:733]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in return ((("(" + real) + ", ") + imaginary) + ")"
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 734, #gens: 14, #ops: 1, parent:733] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 734, errors: [Complex.java:1860: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1860: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1860: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1860: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1860: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1860: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1860: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1862: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1862: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1863: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1863: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1863: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1864: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1865: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1865: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1865: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1866: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1866: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1866: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1866: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1866: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1867: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1868: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1868: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1868: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1868: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1868: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1868: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1868: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1869: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1869: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1869: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1869: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1869: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1869: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1877: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1877: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1877: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1877: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1877: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1877: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1877: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1883: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1883: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1883: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1883: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1883: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1890: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1890: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1892: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1892: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1894: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1894: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(367): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return ((("(" + real) + ", ") + imaginary) + ")"` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (733(f=1.0), 734(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (733(f=1.0), )
----------Running generation: 368, population size: 1

***** Generation 368 : 0
**Parent Variant: [Variant id: 735, #gens: 13, #ops: 0, parent:-]

--Child created id: 736
--Creating new operations for variant [Variant id: 736, #gens: 13, #ops: 0, parent:735]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 3 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 736, #gens: 13, #ops: 1, parent:735] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 736, errors: [Complex.java:1228: error: incompatible types: double cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return real;
	    	                    	                                     		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(368): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return real` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (735(f=1.0), 736(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (735(f=1.0), )
----------Running generation: 369, population size: 1

***** Generation 369 : 0
**Parent Variant: [Variant id: 737, #gens: 13, #ops: 0, parent:-]

--Child created id: 738
--Creating new operations for variant [Variant id: 738, #gens: 13, #ops: 0, parent:737]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 738, #gens: 12, #ops: 1, parent:737] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 738, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(369): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (737(f=1.0), 738(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (737(f=1.0), )
----------Running generation: 370, population size: 1

***** Generation 370 : 0
**Parent Variant: [Variant id: 739, #gens: 13, #ops: 0, parent:-]

--Child created id: 740
--Creating new operations for variant [Variant id: 740, #gens: 13, #ops: 0, parent:739]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java345
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 740, #gens: 14, #ops: 1, parent:739] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 740, errors: [Complex.java:1543: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1543: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1545: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1545: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1546: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1546: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1546: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1547: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1548: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1548: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1548: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1549: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1549: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1549: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1549: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1549: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1550: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1551: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1551: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1551: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1551: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1551: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1551: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1551: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1552: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1552: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1552: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1552: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1552: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1552: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1560: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1560: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1566: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1566: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1566: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1566: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1566: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1573: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1573: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1575: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1575: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1577: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1577: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(370): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (739(f=1.0), 740(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (739(f=1.0), )
----------Running generation: 371, population size: 1

***** Generation 371 : 0
**Parent Variant: [Variant id: 741, #gens: 13, #ops: 0, parent:-]

--Child created id: 742
--Creating new operations for variant [Variant id: 742, #gens: 13, #ops: 0, parent:741]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java348
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 742, #gens: 13, #ops: 1, parent:741] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 742, errors: [Complex.java:348: error: incompatible types: double cannot be converted to boolean
			} else { 				return org.apache.commons.math3.util.FastMath.abs(real);
			         				                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(371): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (741(f=1.0), 742(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (741(f=1.0), )
----------Running generation: 372, population size: 1

***** Generation 372 : 0
**Parent Variant: [Variant id: 743, #gens: 13, #ops: 0, parent:-]

--Child created id: 744
--Creating new operations for variant [Variant id: 744, #gens: 13, #ops: 0, parent:743]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double q = real / imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double q = real / imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 744, #gens: 13, #ops: 1, parent:743] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 744, errors: [Complex.java:346: error: cannot find symbol
			if (c.isNaN) {
			    ^
  symbol:   variable c
  location: class org.apache.commons.math3.complex.Complex, Complex.java:346: error: illegal start of type
			if (c.isNaN) {
			   ^, Complex.java:349: error: cannot find symbol
				return (real == c.real) && (imaginary == c.imaginary);
				                ^
  symbol:   variable c
  location: class org.apache.commons.math3.complex.Complex, Complex.java:349: error: cannot find symbol
				return (real == c.real) && (imaginary == c.imaginary);
				                                         ^
  symbol:   variable c
  location: class org.apache.commons.math3.complex.Complex]
Ingredient counter is Zero
---Undoing: gnrtn(372): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double q = real / imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (743(f=1.0), 744(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (743(f=1.0), )
----------Running generation: 373, population size: 1

***** Generation 373 : 0
**Parent Variant: [Variant id: 745, #gens: 13, #ops: 0, parent:-]

--Child created id: 746
--Creating new operations for variant [Variant id: 746, #gens: 13, #ops: 0, parent:745]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 746, #gens: 12, #ops: 1, parent:745] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 746
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-746/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(373): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (745(f=1.0), 746(f=1.0), )
Selected to next generation: IDs2--> (745(f=1.0), )
----------Running generation: 374, population size: 1

***** Generation 374 : 0
**Parent Variant: [Variant id: 747, #gens: 13, #ops: 0, parent:-]

--Child created id: 748
--Creating new operations for variant [Variant id: 748, #gens: 13, #ops: 0, parent:747]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 2 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 748, #gens: 12, #ops: 1, parent:747] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 748, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(374): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (747(f=1.0), 748(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (747(f=1.0), )
----------Running generation: 375, population size: 1

***** Generation 375 : 0
**Parent Variant: [Variant id: 749, #gens: 13, #ops: 0, parent:-]

--Child created id: 750
--Creating new operations for variant [Variant id: 750, #gens: 13, #ops: 0, parent:749]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 750, #gens: 12, #ops: 1, parent:749] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 750
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-750/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(375): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (749(f=1.0), 750(f=1.0), )
Selected to next generation: IDs2--> (749(f=1.0), )
----------Running generation: 376, population size: 1

***** Generation 376 : 0
**Parent Variant: [Variant id: 751, #gens: 13, #ops: 0, parent:-]

--Child created id: 752
--Creating new operations for variant [Variant id: 752, #gens: 13, #ops: 0, parent:751]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java102
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 752, #gens: 14, #ops: 1, parent:751] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 752, errors: [Complex.java:1421: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1421: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1421: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1423: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1423: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1424: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1424: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1424: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1425: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1426: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1426: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1426: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1427: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1427: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1427: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1427: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1427: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1428: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1429: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1429: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1429: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1429: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1429: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1429: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1429: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1430: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1430: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1430: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1430: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1430: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1430: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1438: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1438: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1438: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1438: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1438: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1438: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1438: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1444: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1444: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1444: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1444: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1444: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1451: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1451: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1453: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1453: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1455: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1455: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(376): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (751(f=1.0), 752(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (751(f=1.0), )
----------Running generation: 377, population size: 1

***** Generation 377 : 0
**Parent Variant: [Variant id: 753, #gens: 13, #ops: 0, parent:-]

--Child created id: 754
--Creating new operations for variant [Variant id: 754, #gens: 13, #ops: 0, parent:753]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, q, scale]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: scale spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java340
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 754, #gens: 14, #ops: 1, parent:753] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 754, errors: [Complex.java:340: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
	public boolean equals(java.lang.Object other) { 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}
	                                                		                                                                                                                			                             			                                               			                    ^, Complex.java:340: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
	public boolean equals(java.lang.Object other) { 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}
	                                                		                                                                                                                			                             			                                               			                                                 			                             			                                               			                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(377): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (753(f=1.0), 754(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (753(f=1.0), )
----------Running generation: 378, population size: 1

***** Generation 378 : 0
**Parent Variant: [Variant id: 755, #gens: 13, #ops: 0, parent:-]

--Child created id: 756
--Creating new operations for variant [Variant id: 756, #gens: 13, #ops: 0, parent:755]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 5
---modifPoint 1 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 756, #gens: 12, #ops: 1, parent:755] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 756, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(378): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (755(f=1.0), 756(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (755(f=1.0), )
----------Running generation: 379, population size: 1

***** Generation 379 : 0
**Parent Variant: [Variant id: 757, #gens: 13, #ops: 0, parent:-]

--Child created id: 758
--Creating new operations for variant [Variant id: 758, #gens: 13, #ops: 0, parent:757]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 758, #gens: 12, #ops: 1, parent:757] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 758
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-758/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(379): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (757(f=1.0), 758(f=15.0), )
Selected to next generation: IDs2--> (757(f=1.0), )
----------Running generation: 380, population size: 1

***** Generation 380 : 0
**Parent Variant: [Variant id: 759, #gens: 13, #ops: 0, parent:-]

--Child created id: 760
--Creating new operations for variant [Variant id: 760, #gens: 13, #ops: 0, parent:759]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isInfinite, org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 760, #gens: 14, #ops: 1, parent:759] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 760, errors: [Complex.java:351: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;}
		  		                  			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(380): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (759(f=1.0), 760(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (759(f=1.0), )
----------Running generation: 381, population size: 1

***** Generation 381 : 0
**Parent Variant: [Variant id: 761, #gens: 13, #ops: 0, parent:-]

--Child created id: 762
--Creating new operations for variant [Variant id: 762, #gens: 13, #ops: 0, parent:761]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 762, #gens: 12, #ops: 1, parent:761] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 762
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-762/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(381): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (761(f=1.0), 762(f=15.0), )
Selected to next generation: IDs2--> (761(f=1.0), )
----------Running generation: 382, population size: 1

***** Generation 382 : 0
**Parent Variant: [Variant id: 763, #gens: 13, #ops: 0, parent:-]

--Child created id: 764
--Creating new operations for variant [Variant id: 764, #gens: 13, #ops: 0, parent:763]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 764, #gens: 12, #ops: 1, parent:763] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 764
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-764/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(382): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (763(f=1.0), 764(f=15.0), )
Selected to next generation: IDs2--> (763(f=1.0), )
----------Running generation: 383, population size: 1

***** Generation 383 : 0
**Parent Variant: [Variant id: 765, #gens: 13, #ops: 0, parent:-]

--Child created id: 766
--Creating new operations for variant [Variant id: 766, #gens: 13, #ops: 0, parent:765]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
Attempts Base Ingredients  4 total 42
Attempts Base Ingredients  5 total 42
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 766, #gens: 12, #ops: 1, parent:765] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 766
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-766/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(383): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (765(f=1.0), 766(f=1.0), )
Selected to next generation: IDs2--> (765(f=1.0), )
----------Running generation: 384, population size: 1

***** Generation 384 : 0
**Parent Variant: [Variant id: 767, #gens: 13, #ops: 0, parent:-]

--Child created id: 768
--Creating new operations for variant [Variant id: 768, #gens: 13, #ops: 0, parent:767]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 768, #gens: 14, #ops: 1, parent:767] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 768, errors: [Complex.java:1587: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1587: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1589: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1589: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1590: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1590: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1590: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1591: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1592: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1592: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1592: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1593: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1593: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1593: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1593: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1593: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1594: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1595: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1595: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1595: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1595: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1595: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1595: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1595: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1596: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1596: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1596: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1596: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1596: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1596: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1604: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1604: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1604: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1604: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1604: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1604: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1604: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1610: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1610: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1610: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1610: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1610: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1617: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1617: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1619: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1619: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1621: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1621: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(384): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (767(f=1.0), 768(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (767(f=1.0), )
----------Running generation: 385, population size: 1

***** Generation 385 : 0
**Parent Variant: [Variant id: 769, #gens: 13, #ops: 0, parent:-]

--Child created id: 770
--Creating new operations for variant [Variant id: 770, #gens: 13, #ops: 0, parent:769]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, org.apache.commons.math3.complex.Complex.INF]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (java.lang.Double.isInfinite(real) ||  java.lang.Double.isInfinite(imaginary)) { 	return org.apac[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (java.lang.Double.isInfinite(real) ||  java.lang.Double.isInfinite(imaginary)) { 	return org.apac[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 770, #gens: 14, #ops: 1, parent:769] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 770, errors: [Complex.java:468: error: incompatible types: unexpected return value
			return org.apache.commons.math3.complex.Complex.INF;
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(385): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (java.lang.Double.isInfinite(real) ||  java.lang.Double.isInfinite(imaginary)) { 	return org.apac[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (769(f=1.0), 770(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (769(f=1.0), )
----------Running generation: 386, population size: 1

***** Generation 386 : 0
**Parent Variant: [Variant id: 771, #gens: 13, #ops: 0, parent:-]

--Child created id: 772
--Creating new operations for variant [Variant id: 772, #gens: 13, #ops: 0, parent:771]
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 772, #gens: 13, #ops: 1, parent:771] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 772, errors: [Complex.java:345: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (isNaN) { 				return org.apache.commons.math3.complex.Complex.NaN;}
			                                                                                                   			             				                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(386): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (771(f=1.0), 772(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (771(f=1.0), )
----------Running generation: 387, population size: 1

***** Generation 387 : 0
**Parent Variant: [Variant id: 773, #gens: 13, #ops: 0, parent:-]

--Child created id: 774
--Creating new operations for variant [Variant id: 774, #gens: 13, #ops: 0, parent:773]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 774, #gens: 14, #ops: 1, parent:773] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 774, errors: [Complex.java:1228: error: incompatible types: double cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		if (isInfinite()) { 			return java.lang.Double.POSITIVE_INFINITY;}
	    	                    	                                     		                    			                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(387): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (isInfinite()) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (773(f=1.0), 774(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (773(f=1.0), )
----------Running generation: 388, population size: 1

***** Generation 388 : 0
**Parent Variant: [Variant id: 775, #gens: 13, #ops: 0, parent:-]

--Child created id: 776
--Creating new operations for variant [Variant id: 776, #gens: 13, #ops: 0, parent:775]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 776, #gens: 12, #ops: 1, parent:775] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 776
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-776/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(388): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (775(f=1.0), 776(f=16.0), )
Selected to next generation: IDs2--> (775(f=1.0), )
----------Running generation: 389, population size: 1

***** Generation 389 : 0
**Parent Variant: [Variant id: 777, #gens: 13, #ops: 0, parent:-]

--Child created id: 778
--Creating new operations for variant [Variant id: 778, #gens: 13, #ops: 0, parent:777]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 778, #gens: 14, #ops: 1, parent:777] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 778, errors: [Complex.java:1499: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1499: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1499: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1501: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1501: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1502: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1502: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1502: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1503: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1504: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1504: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1504: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1505: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1505: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1505: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1505: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1505: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1506: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1507: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1507: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1507: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1507: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1507: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1507: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1507: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1508: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1508: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1508: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1508: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1508: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1508: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1516: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1516: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1516: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1516: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1516: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1516: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1516: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1522: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1522: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1522: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1522: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1522: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1529: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1529: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1531: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1531: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1533: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1533: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(389): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (777(f=1.0), 778(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (777(f=1.0), )
----------Running generation: 390, population size: 1

***** Generation 390 : 0
**Parent Variant: [Variant id: 779, #gens: 13, #ops: 0, parent:-]

--Child created id: 780
--Creating new operations for variant [Variant id: 780, #gens: 13, #ops: 0, parent:779]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (isNaN) { 	return 7; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (isNaN) { 	return 7; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 780, #gens: 14, #ops: 1, parent:779] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 780, errors: [Complex.java:365: error: incompatible types: unexpected return value
			return 7;
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(390): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (isNaN) { 	return 7; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (779(f=1.0), 780(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (779(f=1.0), )
----------Running generation: 391, population size: 1

***** Generation 391 : 0
**Parent Variant: [Variant id: 781, #gens: 13, #ops: 0, parent:-]

--Child created id: 782
--Creating new operations for variant [Variant id: 782, #gens: 13, #ops: 0, parent:781]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 782, #gens: 14, #ops: 1, parent:781] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 782, errors: [Complex.java:1259: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1259: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1259: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1261: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1261: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1262: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1262: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1262: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1263: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1264: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1264: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1264: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1265: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1265: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1265: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1265: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1265: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1266: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1267: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1267: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1267: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1267: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1267: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1267: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1267: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1268: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1268: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1268: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1268: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1268: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1268: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1276: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1276: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1276: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1276: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1276: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1276: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1276: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1282: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1282: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1282: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1282: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1282: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1289: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1289: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1291: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1291: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1293: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1293: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(391): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (781(f=1.0), 782(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (781(f=1.0), )
----------Running generation: 392, population size: 1

***** Generation 392 : 0
**Parent Variant: [Variant id: 783, #gens: 13, #ops: 0, parent:-]

--Child created id: 784
--Creating new operations for variant [Variant id: 784, #gens: 13, #ops: 0, parent:783]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 784, #gens: 12, #ops: 1, parent:783] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 784
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-784/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(392): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (783(f=1.0), 784(f=1.0), )
Selected to next generation: IDs2--> (783(f=1.0), )
----------Running generation: 393, population size: 1

***** Generation 393 : 0
**Parent Variant: [Variant id: 785, #gens: 13, #ops: 0, parent:-]

--Child created id: 786
--Creating new operations for variant [Variant id: 786, #gens: 13, #ops: 0, parent:785]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 0
---modifPoint 1 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 786, #gens: 14, #ops: 1, parent:785] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 786
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-786/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(393): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `imaginary = imaginary` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (785(f=1.0), 786(f=1.0), )
Selected to next generation: IDs2--> (785(f=1.0), )
----------Running generation: 394, population size: 1

***** Generation 394 : 0
**Parent Variant: [Variant id: 787, #gens: 13, #ops: 0, parent:-]

--Child created id: 788
--Creating new operations for variant [Variant id: 788, #gens: 13, #ops: 0, parent:787]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java348
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 788, #gens: 13, #ops: 1, parent:787] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 788, errors: [Complex.java:367: error: incompatible types: int cannot be converted to boolean
				return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
				          ^]
Ingredient counter is Zero
---Undoing: gnrtn(394): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (787(f=1.0), 788(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (787(f=1.0), )
----------Running generation: 395, population size: 1

***** Generation 395 : 0
**Parent Variant: [Variant id: 789, #gens: 13, #ops: 0, parent:-]

--Child created id: 790
--Creating new operations for variant [Variant id: 790, #gens: 13, #ops: 0, parent:789]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 790, #gens: 13, #ops: 1, parent:789] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 790, errors: [Complex.java:1467: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1467: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1467: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1469: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1469: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1470: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1470: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1470: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1471: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1472: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1472: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1472: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1473: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1473: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1473: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1473: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1473: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1474: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1475: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1475: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1475: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1475: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1475: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1475: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1475: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1476: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1476: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1476: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1476: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1476: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1476: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1484: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1484: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1484: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1484: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1484: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1484: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1484: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1490: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1490: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1490: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1490: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1490: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1497: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1497: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1499: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1499: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1501: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1501: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(395): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if ((real == 0.0) && (imaginary == 0.0)) { 	return createComplex(0.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (789(f=1.0), 790(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (789(f=1.0), )
----------Running generation: 396, population size: 1

***** Generation 396 : 0
**Parent Variant: [Variant id: 791, #gens: 13, #ops: 0, parent:-]

--Child created id: 792
--Creating new operations for variant [Variant id: 792, #gens: 13, #ops: 0, parent:791]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 0
---modifPoint 1 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 792, #gens: 12, #ops: 1, parent:791] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 792, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(396): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (791(f=1.0), 792(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (791(f=1.0), )
----------Running generation: 397, population size: 1

***** Generation 397 : 0
**Parent Variant: [Variant id: 793, #gens: 13, #ops: 0, parent:-]

--Child created id: 794
--Creating new operations for variant [Variant id: 794, #gens: 13, #ops: 0, parent:793]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 1 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, q, scale]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: scale spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java305
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 794, #gens: 14, #ops: 1, parent:793] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 794, errors: [Complex.java:321: error: unreachable statement
			} 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}
			  			^]
Ingredient counter is Zero
---Undoing: gnrtn(397): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (793(f=1.0), 794(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (793(f=1.0), )
----------Running generation: 398, population size: 1

***** Generation 398 : 0
**Parent Variant: [Variant id: 795, #gens: 13, #ops: 0, parent:-]

--Child created id: 796
--Creating new operations for variant [Variant id: 796, #gens: 13, #ops: 0, parent:795]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, real, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 796, #gens: 14, #ops: 1, parent:795] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 796, errors: [Complex.java:1650: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1650: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1650: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1652: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1652: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1653: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1653: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1653: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1654: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1655: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1655: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1655: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1656: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1656: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1656: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1656: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1656: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1657: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1658: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1658: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1658: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1658: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1658: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1658: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1658: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1659: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1659: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1659: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1659: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1659: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1659: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1667: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1667: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1667: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1667: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1667: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1667: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1667: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1673: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1673: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1673: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1680: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1680: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1682: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1682: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1684: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1684: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(398): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (795(f=1.0), 796(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (795(f=1.0), )
----------Running generation: 399, population size: 1

***** Generation 399 : 0
**Parent Variant: [Variant id: 797, #gens: 13, #ops: 0, parent:-]

--Child created id: 798
--Creating new operations for variant [Variant id: 798, #gens: 13, #ops: 0, parent:797]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
vars from patch [isNaN, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 798, #gens: 14, #ops: 1, parent:797] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 798, errors: [Complex.java:199: error: incompatible types: unexpected return value
			return org.apache.commons.math3.complex.Complex.NaN;
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(399): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (797(f=1.0), 798(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (797(f=1.0), )
----------Running generation: 400, population size: 1

***** Generation 400 : 0
**Parent Variant: [Variant id: 799, #gens: 13, #ops: 0, parent:-]

--Child created id: 800
--Creating new operations for variant [Variant id: 800, #gens: 13, #ops: 0, parent:799]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 800, #gens: 14, #ops: 1, parent:799] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 800, errors: [Complex.java:1748: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1748: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1748: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1748: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1748: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1748: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1748: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1750: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1750: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1751: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1751: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1751: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1752: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1753: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1753: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1753: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1754: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1754: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1754: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1754: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1754: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1755: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1756: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1756: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1756: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1756: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1756: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1756: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1756: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1757: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1757: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1757: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1757: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1757: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1757: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1765: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1765: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1765: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1765: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1765: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1765: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1765: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1771: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1771: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1771: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1771: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1771: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1778: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1778: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1780: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1780: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1782: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1782: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(400): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (799(f=1.0), 800(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (799(f=1.0), )
----------Running generation: 401, population size: 1

***** Generation 401 : 0
**Parent Variant: [Variant id: 801, #gens: 13, #ops: 0, parent:-]

--Child created id: 802
--Creating new operations for variant [Variant id: 802, #gens: 13, #ops: 0, parent:801]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 802, #gens: 12, #ops: 1, parent:801] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 802, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(401): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (801(f=1.0), 802(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (801(f=1.0), )
----------Running generation: 402, population size: 1

***** Generation 402 : 0
**Parent Variant: [Variant id: 803, #gens: 13, #ops: 0, parent:-]

--Child created id: 804
--Creating new operations for variant [Variant id: 804, #gens: 13, #ops: 0, parent:803]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 804, #gens: 13, #ops: 1, parent:803] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 804, errors: [Complex.java:343: error: incompatible types: double cannot be converted to boolean
		} 		if (imaginary == 0.0) { 			return org.apache.commons.math3.util.FastMath.abs(real);}
		  		                        			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(402): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (803(f=1.0), 804(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (803(f=1.0), )
----------Running generation: 403, population size: 1

***** Generation 403 : 0
**Parent Variant: [Variant id: 805, #gens: 13, #ops: 0, parent:-]

--Child created id: 806
--Creating new operations for variant [Variant id: 806, #gens: 13, #ops: 0, parent:805]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 806, #gens: 12, #ops: 1, parent:805] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 806
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-806/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(403): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (805(f=1.0), 806(f=1.0), )
Selected to next generation: IDs2--> (805(f=1.0), )
----------Running generation: 404, population size: 1

***** Generation 404 : 0
**Parent Variant: [Variant id: 807, #gens: 13, #ops: 0, parent:-]

--Child created id: 808
--Creating new operations for variant [Variant id: 808, #gens: 13, #ops: 0, parent:807]
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return org.apache.commons.math3.complex.Complex.ZERO` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return org.apache.commons.math3.complex.Complex.ZERO` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 808, #gens: 14, #ops: 1, parent:807] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 808, errors: [Complex.java:301: error: unreachable statement
	 */ 	public org.apache.commons.math3.complex.Complex reciprocal() { 		return org.apache.commons.math3.complex.Complex.ZERO; 		if (isNaN) {
	    	                                                               		                                                      		^]
Ingredient counter is Zero
---Undoing: gnrtn(404): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return org.apache.commons.math3.complex.Complex.ZERO` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (807(f=1.0), 808(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (807(f=1.0), )
----------Running generation: 405, population size: 1

***** Generation 405 : 0
**Parent Variant: [Variant id: 809, #gens: 13, #ops: 0, parent:-]

--Child created id: 810
--Creating new operations for variant [Variant id: 810, #gens: 13, #ops: 0, parent:809]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 2 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 5
---modifPoint 3 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 810, #gens: 14, #ops: 1, parent:809] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 810, errors: [Complex.java:1320: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1320: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1320: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1322: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1322: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1323: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1323: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1323: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1324: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1325: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1325: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1325: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1326: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1326: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1326: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1326: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1326: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1327: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1328: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1328: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1328: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1328: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1328: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1328: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1328: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1329: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1329: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1329: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1329: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1329: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1329: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1337: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1337: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1337: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1337: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1337: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1337: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1337: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1343: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1343: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1343: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1343: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1343: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1350: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1350: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1352: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1352: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1354: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1354: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(405): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (809(f=1.0), 810(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (809(f=1.0), )
----------Running generation: 406, population size: 1

***** Generation 406 : 0
**Parent Variant: [Variant id: 811, #gens: 13, #ops: 0, parent:-]

--Child created id: 812
--Creating new operations for variant [Variant id: 812, #gens: 13, #ops: 0, parent:811]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 812, #gens: 12, #ops: 1, parent:811] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 812, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(406): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (811(f=1.0), 812(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (811(f=1.0), )
----------Running generation: 407, population size: 1

***** Generation 407 : 0
**Parent Variant: [Variant id: 813, #gens: 13, #ops: 0, parent:-]

--Child created id: 814
--Creating new operations for variant [Variant id: 814, #gens: 13, #ops: 0, parent:813]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 814, #gens: 12, #ops: 1, parent:813] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 814
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-814/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(407): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (813(f=1.0), 814(f=15.0), )
Selected to next generation: IDs2--> (813(f=1.0), )
----------Running generation: 408, population size: 1

***** Generation 408 : 0
**Parent Variant: [Variant id: 815, #gens: 13, #ops: 0, parent:-]

--Child created id: 816
--Creating new operations for variant [Variant id: 816, #gens: 13, #ops: 0, parent:815]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java345
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 816, #gens: 14, #ops: 1, parent:815] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 816, errors: [Complex.java:1587: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1587: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1587: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1589: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1589: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1590: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1590: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1590: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1591: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1592: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1592: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1592: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1593: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1593: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1593: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1593: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1593: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1594: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1595: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1595: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1595: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1595: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1595: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1595: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1595: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1596: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1596: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1596: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1596: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1596: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1596: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1604: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1604: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1604: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1604: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1604: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1604: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1604: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1610: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1610: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1610: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1610: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1610: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1617: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1617: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1619: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1619: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1621: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1621: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(408): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return createComplex(1.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (815(f=1.0), 816(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (815(f=1.0), )
----------Running generation: 409, population size: 1

***** Generation 409 : 0
**Parent Variant: [Variant id: 817, #gens: 13, #ops: 0, parent:-]

--Child created id: 818
--Creating new operations for variant [Variant id: 818, #gens: 13, #ops: 0, parent:817]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 818, #gens: 12, #ops: 1, parent:817] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 818
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-818/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(409): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (817(f=1.0), 818(f=15.0), )
Selected to next generation: IDs2--> (817(f=1.0), )
----------Running generation: 410, population size: 1

***** Generation 410 : 0
**Parent Variant: [Variant id: 819, #gens: 13, #ops: 0, parent:-]

--Child created id: 820
--Creating new operations for variant [Variant id: 820, #gens: 13, #ops: 0, parent:819]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 820, #gens: 14, #ops: 1, parent:819] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 820, errors: [Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			return org.apache.commons.math3.util.FastMath.abs(real);
			                                                                                                   			                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(410): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (819(f=1.0), 820(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (819(f=1.0), )
----------Running generation: 411, population size: 1

***** Generation 411 : 0
**Parent Variant: [Variant id: 821, #gens: 13, #ops: 0, parent:-]

--Child created id: 822
--Creating new operations for variant [Variant id: 822, #gens: 13, #ops: 0, parent:821]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 822, #gens: 14, #ops: 1, parent:821] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 822, errors: [Complex.java:1543: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1543: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1543: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1545: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1545: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1546: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1546: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1546: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1547: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1548: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1548: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1548: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1549: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1549: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1549: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1549: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1549: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1550: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1551: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1551: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1551: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1551: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1551: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1551: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1551: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1552: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1552: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1552: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1552: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1552: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1552: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1560: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1560: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1560: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1560: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1566: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1566: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1566: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1566: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1566: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1573: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1573: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1575: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1575: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1577: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1577: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(411): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `double imaginary2 = 2.0 * imaginary` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (821(f=1.0), 822(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (821(f=1.0), )
----------Running generation: 412, population size: 1

***** Generation 412 : 0
**Parent Variant: [Variant id: 823, #gens: 13, #ops: 0, parent:-]

--Child created id: 824
--Creating new operations for variant [Variant id: 824, #gens: 13, #ops: 0, parent:823]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
Attempts Base Ingredients  2 total 24
Attempts Base Ingredients  3 total 24
Attempts Base Ingredients  4 total 24
Attempts Base Ingredients  5 total 24
vars from patch []
location: Complex.java344
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `final java.util.List<org.apache.commons.math3.complex.Complex> result = new java.util.ArrayList<org.[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `final java.util.List<org.apache.commons.math3.complex.Complex> result = new java.util.ArrayList<org.[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 824, #gens: 13, #ops: 1, parent:823] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 824, errors: [Complex.java:1652: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1652: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1652: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1654: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1654: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1655: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1655: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1655: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1656: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1657: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1657: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1657: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1658: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1658: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1658: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1658: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1658: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1659: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1660: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1660: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1660: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1660: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1660: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1660: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1660: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1661: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1661: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1661: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1661: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1661: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1661: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1669: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1669: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1669: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1669: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1669: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1669: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1669: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1675: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1675: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1675: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1675: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1675: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1682: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1682: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1684: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1684: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1686: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1686: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(412): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `final java.util.List<org.apache.commons.math3.complex.Complex> result = new java.util.ArrayList<org.[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (823(f=1.0), 824(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (823(f=1.0), )
----------Running generation: 413, population size: 1

***** Generation 413 : 0
**Parent Variant: [Variant id: 825, #gens: 13, #ops: 0, parent:-]

--Child created id: 826
--Creating new operations for variant [Variant id: 826, #gens: 13, #ops: 0, parent:825]
---analyzing modificationPoint position: 0
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 826, #gens: 12, #ops: 1, parent:825] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 826, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(413): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (825(f=1.0), 826(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (825(f=1.0), )
----------Running generation: 414, population size: 1

***** Generation 414 : 0
**Parent Variant: [Variant id: 827, #gens: 13, #ops: 0, parent:-]

--Child created id: 828
--Creating new operations for variant [Variant id: 828, #gens: 13, #ops: 0, parent:827]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
---modifPoint 2 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 3 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java348
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 828, #gens: 13, #ops: 1, parent:827] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 828, errors: [Complex.java:1179: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1179: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1179: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1179: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1179: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1179: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1179: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1181: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1181: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1182: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1182: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1182: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1183: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1184: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1184: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1184: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1185: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1185: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1185: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1185: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1185: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1186: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1187: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1187: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1187: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1187: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1187: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1187: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1187: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1188: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1188: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1188: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1188: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1188: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1188: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1196: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1196: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1196: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1196: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1196: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1196: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1196: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1202: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) {
	    	^, Complex.java:1202: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) {
	    	       ^, Complex.java:1202: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) {
	    	                 ^, Complex.java:1202: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) {
	    	                                                              ^, Complex.java:1202: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) {
	    	                                                                              ^, Complex.java:1217: error: illegal start of expression
	protected final java.lang.Object readResolve() {
	^, Complex.java:1217: error: ';' expected
	protected final java.lang.Object readResolve() {
	                                            ^, Complex.java:1223: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();
	    	^, Complex.java:1223: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();
	    	                                                             ^, Complex.java:1228: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() {
	    	                    	                                ^, Complex.java:1232: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(414): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (827(f=1.0), 828(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (827(f=1.0), )
----------Running generation: 415, population size: 1

***** Generation 415 : 0
**Parent Variant: [Variant id: 829, #gens: 13, #ops: 0, parent:-]

--Child created id: 830
--Creating new operations for variant [Variant id: 830, #gens: 13, #ops: 0, parent:829]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
Attempts Base Ingredients  3 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in return createComplex(real, -imaginary)
location: Complex.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 100, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 830, #gens: 14, #ops: 1, parent:829] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 830, errors: [Complex.java:202: error: incompatible types: unexpected return value
		return createComplex(real, -imaginary); 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(415): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (829(f=1.0), 830(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (829(f=1.0), )
----------Running generation: 416, population size: 1

***** Generation 416 : 0
**Parent Variant: [Variant id: 831, #gens: 13, #ops: 0, parent:-]

--Child created id: 832
--Creating new operations for variant [Variant id: 832, #gens: 13, #ops: 0, parent:831]
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 832, #gens: 12, #ops: 1, parent:831] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 832, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(416): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (831(f=1.0), 832(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (831(f=1.0), )
----------Running generation: 417, population size: 1

***** Generation 417 : 0
**Parent Variant: [Variant id: 833, #gens: 13, #ops: 0, parent:-]

--Child created id: 834
--Creating new operations for variant [Variant id: 834, #gens: 13, #ops: 0, parent:833]
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 834, #gens: 12, #ops: 1, parent:833] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 834, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(417): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (833(f=1.0), 834(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (833(f=1.0), )
----------Running generation: 418, population size: 1

***** Generation 418 : 0
**Parent Variant: [Variant id: 835, #gens: 13, #ops: 0, parent:-]

--Child created id: 836
--Creating new operations for variant [Variant id: 836, #gens: 13, #ops: 0, parent:835]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 836, #gens: 14, #ops: 1, parent:835] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 836
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-836/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(418): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (835(f=1.0), 836(f=1.0), )
Selected to next generation: IDs2--> (835(f=1.0), )
----------Running generation: 419, population size: 1

***** Generation 419 : 0
**Parent Variant: [Variant id: 837, #gens: 13, #ops: 0, parent:-]

--Child created id: 838
--Creating new operations for variant [Variant id: 838, #gens: 13, #ops: 0, parent:837]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 838, #gens: 12, #ops: 1, parent:837] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 838
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-838/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(419): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (837(f=1.0), 838(f=1.0), )
Selected to next generation: IDs2--> (837(f=1.0), )
----------Running generation: 420, population size: 1

***** Generation 420 : 0
**Parent Variant: [Variant id: 839, #gens: 13, #ops: 0, parent:-]

--Child created id: 840
--Creating new operations for variant [Variant id: 840, #gens: 13, #ops: 0, parent:839]
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 840, #gens: 12, #ops: 1, parent:839] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 840
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-840/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(420): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (839(f=1.0), 840(f=1.0), )
Selected to next generation: IDs2--> (839(f=1.0), )
----------Running generation: 421, population size: 1

***** Generation 421 : 0
**Parent Variant: [Variant id: 841, #gens: 13, #ops: 0, parent:-]

--Child created id: 842
--Creating new operations for variant [Variant id: 842, #gens: 13, #ops: 0, parent:841]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 842, #gens: 12, #ops: 1, parent:841] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 842, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(421): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (841(f=1.0), 842(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (841(f=1.0), )
----------Running generation: 422, population size: 1

***** Generation 422 : 0
**Parent Variant: [Variant id: 843, #gens: 13, #ops: 0, parent:-]

--Child created id: 844
--Creating new operations for variant [Variant id: 844, #gens: 13, #ops: 0, parent:843]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 844, #gens: 14, #ops: 1, parent:843] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 844, errors: [Complex.java:1375: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1375: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1375: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1377: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1377: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1378: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1378: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1378: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1379: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1380: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1380: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1380: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1381: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1381: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1381: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1381: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1381: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1382: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1383: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1383: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1383: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1383: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1383: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1383: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1383: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1384: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1384: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1384: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1384: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1384: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1384: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1392: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1392: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1392: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1392: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1392: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1392: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1392: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1398: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1398: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1398: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1398: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1398: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1405: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1405: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1407: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1407: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1409: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1409: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(422): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `double expReal = org.apache.commons.math3.util.FastMath.exp(real)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (843(f=1.0), 844(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (843(f=1.0), )
----------Running generation: 423, population size: 1

***** Generation 423 : 0
**Parent Variant: [Variant id: 845, #gens: 13, #ops: 0, parent:-]

--Child created id: 846
--Creating new operations for variant [Variant id: 846, #gens: 13, #ops: 0, parent:845]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
vars from patch [java.lang.Double.NaN]
--> var from patch: java.lang.Double.NaN spoon.support.reflect.code.CtFieldReadImpl
SameName: // CHECKSTYLE: stop ConstantName
/**
 * A complex number representing "NaN + NaNi"
 */ public static final org.apache.commons.math3.complex.Complex NaN = new org.apache.commons.math3.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);
Transforming shadowed variable in return java.lang.Double.NaN
location: Complex.java340
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return java.lang.Double.NaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return java.lang.Double.NaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 846, #gens: 14, #ops: 1, parent:845] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 846, errors: [Complex.java:343: error: incompatible types: double cannot be converted to boolean
		} 		return java.lang.Double.NaN;
		  		                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(423): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return java.lang.Double.NaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (845(f=1.0), 846(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (845(f=1.0), )
----------Running generation: 424, population size: 1

***** Generation 424 : 0
**Parent Variant: [Variant id: 847, #gens: 13, #ops: 0, parent:-]

--Child created id: 848
--Creating new operations for variant [Variant id: 848, #gens: 13, #ops: 0, parent:847]
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 848, #gens: 12, #ops: 1, parent:847] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 848
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-848/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(424): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (847(f=1.0), 848(f=1.0), )
Selected to next generation: IDs2--> (847(f=1.0), )
----------Running generation: 425, population size: 1

***** Generation 425 : 0
**Parent Variant: [Variant id: 849, #gens: 13, #ops: 0, parent:-]

--Child created id: 850
--Creating new operations for variant [Variant id: 850, #gens: 13, #ops: 0, parent:849]
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, real, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 850, #gens: 14, #ops: 1, parent:849] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 850, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		if (isNaN || java.lang.Double.isInfinite(real)) { 			return org.apache.commons.math3.complex.Complex.NaN;}
	    	                    	                                     		                                                  			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(425): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(real)) { 	return org.apache.commons.math3.complex.Complex.N[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (849(f=1.0), 850(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (849(f=1.0), )
----------Running generation: 426, population size: 1

***** Generation 426 : 0
**Parent Variant: [Variant id: 851, #gens: 13, #ops: 0, parent:-]

--Child created id: 852
--Creating new operations for variant [Variant id: 852, #gens: 13, #ops: 0, parent:851]
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
Attempts Base Ingredients  4 total 42
Attempts Base Ingredients  5 total 42
Attempts Base Ingredients  6 total 42
Attempts Base Ingredients  7 total 42
Attempts Base Ingredients  8 total 42
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
Attempts Base Ingredients  2 total 60
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 852, #gens: 12, #ops: 1, parent:851] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 852, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(426): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (851(f=1.0), 852(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (851(f=1.0), )
----------Running generation: 427, population size: 1

***** Generation 427 : 0
**Parent Variant: [Variant id: 853, #gens: 13, #ops: 0, parent:-]

--Child created id: 854
--Creating new operations for variant [Variant id: 854, #gens: 13, #ops: 0, parent:853]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 854, #gens: 14, #ops: 1, parent:853] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 854, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.sinh(imaginary));
	    	                    	                                     		                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(427): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.sin(real) * org.apache.commons.math3.uti[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (853(f=1.0), 854(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (853(f=1.0), )
----------Running generation: 428, population size: 1

***** Generation 428 : 0
**Parent Variant: [Variant id: 855, #gens: 13, #ops: 0, parent:-]

--Child created id: 856
--Creating new operations for variant [Variant id: 856, #gens: 13, #ops: 0, parent:855]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 3 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `final java.util.List<org.apache.commons.math3.complex.Complex> result = new java.util.ArrayList<org.[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `final java.util.List<org.apache.commons.math3.complex.Complex> result = new java.util.ArrayList<org.[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 856, #gens: 14, #ops: 1, parent:855] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 856, errors: [Complex.java:1667: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1667: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1667: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1667: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1667: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1667: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1667: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1669: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1669: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1670: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1670: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1670: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1671: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1672: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1672: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1672: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1673: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1673: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1673: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1673: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1673: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1674: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1675: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1675: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1675: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1675: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1675: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1675: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1675: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1676: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1676: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1676: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1676: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1676: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1676: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1684: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1684: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1684: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1684: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1684: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1684: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1684: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1690: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1690: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1690: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1690: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1690: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1697: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1697: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1699: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1699: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1701: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1701: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(428): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `final java.util.List<org.apache.commons.math3.complex.Complex> result = new java.util.ArrayList<org.[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (855(f=1.0), 856(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (855(f=1.0), )
----------Running generation: 429, population size: 1

***** Generation 429 : 0
**Parent Variant: [Variant id: 857, #gens: 13, #ops: 0, parent:-]

--Child created id: 858
--Creating new operations for variant [Variant id: 858, #gens: 13, #ops: 0, parent:857]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 858, #gens: 12, #ops: 1, parent:857] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 858, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(429): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (857(f=1.0), 858(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (857(f=1.0), )
----------Running generation: 430, population size: 1

***** Generation 430 : 0
**Parent Variant: [Variant id: 859, #gens: 13, #ops: 0, parent:-]

--Child created id: 860
--Creating new operations for variant [Variant id: 860, #gens: 13, #ops: 0, parent:859]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
Attempts Base Ingredients  2 total 24
Attempts Base Ingredients  3 total 24
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java348
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 860, #gens: 13, #ops: 1, parent:859] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 860, errors: [Complex.java:348: error: incompatible types: double cannot be converted to boolean
			} else { 				return java.lang.Double.POSITIVE_INFINITY;
			         				                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(430): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (859(f=1.0), 860(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (859(f=1.0), )
----------Running generation: 431, population size: 1

***** Generation 431 : 0
**Parent Variant: [Variant id: 861, #gens: 13, #ops: 0, parent:-]

--Child created id: 862
--Creating new operations for variant [Variant id: 862, #gens: 13, #ops: 0, parent:861]
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real, imaginary, org.apache.commons.math3.complex.Complex.INF]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (java.lang.Double.isInfinite(real) ||  java.lang.Double.isInfinite(imaginary)) { 	return org.apac[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (java.lang.Double.isInfinite(real) ||  java.lang.Double.isInfinite(imaginary)) { 	return org.apac[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 862, #gens: 13, #ops: 1, parent:861] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 862, errors: [Complex.java:468: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
			return org.apache.commons.math3.complex.Complex.INF;
			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(431): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (java.lang.Double.isInfinite(real) ||  java.lang.Double.isInfinite(imaginary)) { 	return org.apac[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (861(f=1.0), 862(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (861(f=1.0), )
----------Running generation: 432, population size: 1

***** Generation 432 : 0
**Parent Variant: [Variant id: 863, #gens: 13, #ops: 0, parent:-]

--Child created id: 864
--Creating new operations for variant [Variant id: 864, #gens: 13, #ops: 0, parent:863]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
SameName: double real
SameName: double real
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in return createComplex(real, imaginary)
location: Complex.java102
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 102, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 864, #gens: 14, #ops: 1, parent:863] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 864, errors: [Complex.java:1849: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1849: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1851: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1851: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1852: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1852: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1852: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1853: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1854: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1854: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1854: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1855: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1855: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1855: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1855: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1855: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1856: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1857: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1857: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1857: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1857: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1857: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1857: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1857: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1858: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1858: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1858: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1858: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1858: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1858: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1866: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1866: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1866: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1866: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1866: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1866: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1866: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1872: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1872: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1872: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1872: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1872: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1879: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1879: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1881: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1881: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1883: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1883: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(432): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (863(f=1.0), 864(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (863(f=1.0), )
----------Running generation: 433, population size: 1

***** Generation 433 : 0
**Parent Variant: [Variant id: 865, #gens: 13, #ops: 0, parent:-]

--Child created id: 866
--Creating new operations for variant [Variant id: 866, #gens: 13, #ops: 0, parent:865]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return org.apache.commons.math3.util.FastMath.atan2(getImaginary(), getReal())` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return org.apache.commons.math3.util.FastMath.atan2(getImaginary(), getReal())` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 866, #gens: 14, #ops: 1, parent:865] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 866, errors: [Complex.java:1736: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1736: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1736: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1736: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1736: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1736: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1736: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1738: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1738: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1739: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1739: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1739: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1740: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1741: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1741: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1741: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1742: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1742: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1742: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1742: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1742: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1743: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1744: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1744: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1744: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1744: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1744: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1744: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1744: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1745: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1745: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1745: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1745: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1745: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1745: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1753: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1753: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1753: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1753: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1753: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1753: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1753: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1759: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1759: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1759: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1759: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1759: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1766: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1766: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1768: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1768: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1770: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1770: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(433): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return org.apache.commons.math3.util.FastMath.atan2(getImaginary(), getReal())` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (865(f=1.0), 866(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (865(f=1.0), )
----------Running generation: 434, population size: 1

***** Generation 434 : 0
**Parent Variant: [Variant id: 867, #gens: 13, #ops: 0, parent:-]

--Child created id: 868
--Creating new operations for variant [Variant id: 868, #gens: 13, #ops: 0, parent:867]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 868, #gens: 14, #ops: 1, parent:867] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 868, errors: [Complex.java:1849: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1849: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1849: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1851: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1851: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1852: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1852: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1852: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1853: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1854: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1854: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1854: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1855: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1855: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1855: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1855: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1855: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1856: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1857: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1857: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1857: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1857: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1857: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1857: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1857: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1858: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1858: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1858: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1858: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1858: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1858: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1866: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1866: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1866: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1866: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1866: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1866: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1866: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1872: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1872: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1872: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1872: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1872: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1879: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1879: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1881: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1881: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1883: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1883: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(434): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return createComplex(real, imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (867(f=1.0), 868(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (867(f=1.0), )
----------Running generation: 435, population size: 1

***** Generation 435 : 0
**Parent Variant: [Variant id: 869, #gens: 13, #ops: 0, parent:-]

--Child created id: 870
--Creating new operations for variant [Variant id: 870, #gens: 13, #ops: 0, parent:869]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java345
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 870, #gens: 14, #ops: 1, parent:869] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 870, errors: [Complex.java:367: error: incompatible types: int cannot be converted to boolean
			return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
			          ^]
Ingredient counter is Zero
---Undoing: gnrtn(435): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) +  org.apache.commons.ma[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (869(f=1.0), 870(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (869(f=1.0), )
----------Running generation: 436, population size: 1

***** Generation 436 : 0
**Parent Variant: [Variant id: 871, #gens: 13, #ops: 0, parent:-]

--Child created id: 872
--Creating new operations for variant [Variant id: 872, #gens: 13, #ops: 0, parent:871]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 872, #gens: 12, #ops: 1, parent:871] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 872, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(436): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (871(f=1.0), 872(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (871(f=1.0), )
----------Running generation: 437, population size: 1

***** Generation 437 : 0
**Parent Variant: [Variant id: 873, #gens: 13, #ops: 0, parent:-]

--Child created id: 874
--Creating new operations for variant [Variant id: 874, #gens: 13, #ops: 0, parent:873]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 874, #gens: 14, #ops: 1, parent:873] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 874, errors: [Complex.java:1554: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1554: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1554: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1554: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1554: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1554: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1554: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1556: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1556: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1557: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1557: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1557: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1558: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1559: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1559: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1559: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1560: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1560: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1560: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1560: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1560: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1561: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1562: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1562: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1562: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1562: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1562: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1562: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1562: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1563: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1563: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1563: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1563: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1563: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1563: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1571: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1571: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1571: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1571: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1571: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1571: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1571: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1577: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1577: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1577: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1577: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1577: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1584: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1584: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1586: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1586: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1588: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1588: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(437): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return createComplex(0.0, -1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (873(f=1.0), 874(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (873(f=1.0), )
----------Running generation: 438, population size: 1

***** Generation 438 : 0
**Parent Variant: [Variant id: 875, #gens: 13, #ops: 0, parent:-]

--Child created id: 876
--Creating new operations for variant [Variant id: 876, #gens: 13, #ops: 0, parent:875]
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 876, #gens: 12, #ops: 1, parent:875] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 876, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(438): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (875(f=1.0), 876(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (875(f=1.0), )
----------Running generation: 439, population size: 1

***** Generation 439 : 0
**Parent Variant: [Variant id: 877, #gens: 13, #ops: 0, parent:-]

--Child created id: 878
--Creating new operations for variant [Variant id: 878, #gens: 13, #ops: 0, parent:877]
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 878, #gens: 12, #ops: 1, parent:877] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 878, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(439): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (877(f=1.0), 878(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (877(f=1.0), )
----------Running generation: 440, population size: 1

***** Generation 440 : 0
**Parent Variant: [Variant id: 879, #gens: 13, #ops: 0, parent:-]

--Child created id: 880
--Creating new operations for variant [Variant id: 880, #gens: 13, #ops: 0, parent:879]
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 880, #gens: 14, #ops: 1, parent:879] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 880, errors: [Complex.java:125: error: incompatible types: unexpected return value
		return org.apache.commons.math3.util.FastMath.abs(real); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(440): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (879(f=1.0), 880(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (879(f=1.0), )
----------Running generation: 441, population size: 1

***** Generation 441 : 0
**Parent Variant: [Variant id: 881, #gens: 13, #ops: 0, parent:-]

--Child created id: 882
--Creating new operations for variant [Variant id: 882, #gens: 13, #ops: 0, parent:881]
---analyzing modificationPoint position: 7
location: Complex.java343
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 882, #gens: 12, #ops: 1, parent:881] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 882
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-882/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 16, was successful: false, cases executed: 123] ,[]
-Valid?: |false|16|123|[]|, fitness 16.0
Ingredient counter is Zero
---Undoing: gnrtn(441): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (881(f=1.0), 882(f=16.0), )
Selected to next generation: IDs2--> (881(f=1.0), )
----------Running generation: 442, population size: 1

***** Generation 442 : 0
**Parent Variant: [Variant id: 883, #gens: 13, #ops: 0, parent:-]

--Child created id: 884
--Creating new operations for variant [Variant id: 884, #gens: 13, #ops: 0, parent:883]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 11
location: Complex.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 884, #gens: 12, #ops: 1, parent:883] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 884, errors: [Complex.java:104: error: variable isNaN might not have been initialized
		isInfinite = (!isNaN) && 
		               ^]
Ingredient counter is Zero
---Undoing: gnrtn(442): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (883(f=1.0), 884(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (883(f=1.0), )
----------Running generation: 443, population size: 1

***** Generation 443 : 0
**Parent Variant: [Variant id: 885, #gens: 13, #ops: 0, parent:-]

--Child created id: 886
--Creating new operations for variant [Variant id: 886, #gens: 13, #ops: 0, parent:885]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return org.apache.commons.math3.complex.Complex.NaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return org.apache.commons.math3.complex.Complex.NaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 886, #gens: 14, #ops: 1, parent:885] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 886, errors: [Complex.java:160: error: incompatible types: unexpected return value
		return org.apache.commons.math3.complex.Complex.NaN;} 	/**
		                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(443): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return org.apache.commons.math3.complex.Complex.NaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (885(f=1.0), 886(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (885(f=1.0), )
----------Running generation: 444, population size: 1

***** Generation 444 : 0
**Parent Variant: [Variant id: 887, #gens: 13, #ops: 0, parent:-]

--Child created id: 888
--Creating new operations for variant [Variant id: 888, #gens: 13, #ops: 0, parent:887]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 2 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 3 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 4 not mutation generated in  this.real = real
---analyzing modificationPoint position: 11
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 5 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java300
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 888, #gens: 14, #ops: 1, parent:887] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child does NOT compile: 888, errors: [Complex.java:342: error: incompatible types: boolean cannot be converted to org.apache.commons.math3.complex.Complex
		return true; 		if ((real == 0.0) && (imaginary == 0.0)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(444): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (887(f=1.0), 888(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (887(f=1.0), )
----------Running generation: 445, population size: 1

***** Generation 445 : 0
**Parent Variant: [Variant id: 889, #gens: 13, #ops: 0, parent:-]

--Child created id: 890
--Creating new operations for variant [Variant id: 890, #gens: 13, #ops: 0, parent:889]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch []
location: Complex.java348
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 890, #gens: 13, #ops: 1, parent:889] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 890, errors: [Complex.java:1536: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1536: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1538: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1538: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1539: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1539: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1539: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1540: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1541: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1541: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1541: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1542: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1542: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1542: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1542: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1542: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1543: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1544: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1544: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1544: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1544: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1544: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1544: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1544: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1545: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1545: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1545: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1545: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1545: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1545: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1553: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1553: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1553: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1553: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1553: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1553: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1553: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1559: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1559: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1566: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1566: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1568: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1568: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1570: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1570: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(445): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (889(f=1.0), 890(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (889(f=1.0), )
----------Running generation: 446, population size: 1

***** Generation 446 : 0
**Parent Variant: [Variant id: 891, #gens: 13, #ops: 0, parent:-]

--Child created id: 892
--Creating new operations for variant [Variant id: 892, #gens: 13, #ops: 0, parent:891]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 1
---modifPoint 1 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 5
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 3 not mutation generated in  this.real = real
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 4 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 7
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
---modifPoint 5 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 6 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 892, #gens: 12, #ops: 1, parent:891] gen mutated: 1 , gen not mut: 7, gen not applied  0
-The child compiles: id 892
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-892/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(446): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (891(f=1.0), 892(f=1.0), )
Selected to next generation: IDs2--> (891(f=1.0), )
----------Running generation: 447, population size: 1

***** Generation 447 : 0
**Parent Variant: [Variant id: 893, #gens: 13, #ops: 0, parent:-]

--Child created id: 894
--Creating new operations for variant [Variant id: 894, #gens: 13, #ops: 0, parent:893]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  this.real = real
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isInfinite, org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java300
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 894, #gens: 13, #ops: 1, parent:893] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 894
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-894/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(447): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (893(f=1.0), 894(f=1.0), )
Selected to next generation: IDs2--> (893(f=1.0), )
----------Running generation: 448, population size: 1

***** Generation 448 : 0
**Parent Variant: [Variant id: 895, #gens: 13, #ops: 0, parent:-]

--Child created id: 896
--Creating new operations for variant [Variant id: 896, #gens: 13, #ops: 0, parent:895]
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 1
---modifPoint 3 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 4 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java345
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 896, #gens: 14, #ops: 1, parent:895] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 896, errors: [Complex.java:1536: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1536: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1536: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1538: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1538: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1539: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1539: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1539: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1540: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1541: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1541: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1541: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1542: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1542: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1542: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1542: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1542: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1543: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1544: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1544: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1544: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1544: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1544: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1544: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1544: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1545: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1545: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1545: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1545: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1545: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1545: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1553: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1553: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1553: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1553: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1553: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1553: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1553: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1559: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1559: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1559: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1566: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1566: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1568: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1568: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1570: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1570: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(448): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return createComplex(0.0, 1.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (895(f=1.0), 896(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (895(f=1.0), )
----------Running generation: 449, population size: 1

***** Generation 449 : 0
**Parent Variant: [Variant id: 897, #gens: 13, #ops: 0, parent:-]

--Child created id: 898
--Creating new operations for variant [Variant id: 898, #gens: 13, #ops: 0, parent:897]
---analyzing modificationPoint position: 5
Templates availables24
Attempts Base Ingredients  1 total 24
Attempts Base Ingredients  2 total 24
Attempts Base Ingredients  3 total 24
Attempts Base Ingredients  4 total 24
Attempts Base Ingredients  5 total 24
Attempts Base Ingredients  6 total 24
Attempts Base Ingredients  7 total 24
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 898, #gens: 12, #ops: 1, parent:897] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 898
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-898/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(449): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (897(f=1.0), 898(f=1.0), )
Selected to next generation: IDs2--> (897(f=1.0), )
----------Running generation: 450, population size: 1

***** Generation 450 : 0
**Parent Variant: [Variant id: 899, #gens: 13, #ops: 0, parent:-]

--Child created id: 900
--Creating new operations for variant [Variant id: 900, #gens: 13, #ops: 0, parent:899]
---analyzing modificationPoint position: 12
location: Complex.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 900, #gens: 12, #ops: 1, parent:899] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 900, errors: [Complex.java:106: error: variable isInfinite might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(450): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (899(f=1.0), 900(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (899(f=1.0), )
----------Running generation: 451, population size: 1

***** Generation 451 : 0
**Parent Variant: [Variant id: 901, #gens: 13, #ops: 0, parent:-]

--Child created id: 902
--Creating new operations for variant [Variant id: 902, #gens: 13, #ops: 0, parent:901]
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 902, #gens: 12, #ops: 1, parent:901] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 902
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-902/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(451): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (901(f=1.0), 902(f=15.0), )
Selected to next generation: IDs2--> (901(f=1.0), )
----------Running generation: 452, population size: 1

***** Generation 452 : 0
**Parent Variant: [Variant id: 903, #gens: 13, #ops: 0, parent:-]

--Child created id: 904
--Creating new operations for variant [Variant id: 904, #gens: 13, #ops: 0, parent:903]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 904, #gens: 14, #ops: 1, parent:903] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 904, errors: [Complex.java:351: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		} 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;}
		  		             			                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(452): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (903(f=1.0), 904(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (903(f=1.0), )
----------Running generation: 453, population size: 1

***** Generation 453 : 0
**Parent Variant: [Variant id: 905, #gens: 13, #ops: 0, parent:-]

--Child created id: 906
--Creating new operations for variant [Variant id: 906, #gens: 13, #ops: 0, parent:905]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 906, #gens: 12, #ops: 1, parent:905] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 906, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(453): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (905(f=1.0), 906(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (905(f=1.0), )
----------Running generation: 454, population size: 1

***** Generation 454 : 0
**Parent Variant: [Variant id: 907, #gens: 13, #ops: 0, parent:-]

--Child created id: 908
--Creating new operations for variant [Variant id: 908, #gens: 13, #ops: 0, parent:907]
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 908, #gens: 14, #ops: 1, parent:907] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 908, errors: [Complex.java:343: error: incompatible types: double cannot be converted to boolean
		} 		return org.apache.commons.math3.util.FastMath.abs(real);
		  		                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(454): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return org.apache.commons.math3.util.FastMath.abs(real)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (907(f=1.0), 908(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (907(f=1.0), )
----------Running generation: 455, population size: 1

***** Generation 455 : 0
**Parent Variant: [Variant id: 909, #gens: 13, #ops: 0, parent:-]

--Child created id: 910
--Creating new operations for variant [Variant id: 910, #gens: 13, #ops: 0, parent:909]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 1
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 910, #gens: 14, #ops: 1, parent:909] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 910, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		if (real < (-20.0)) { 			return createComplex(-1.0, 0.0);}
	    	                    	                                     		                      			                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(455): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `if (real < (-20.0)) { 	return createComplex(-1.0, 0.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (909(f=1.0), 910(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (909(f=1.0), )
----------Running generation: 456, population size: 1

***** Generation 456 : 0
**Parent Variant: [Variant id: 911, #gens: 13, #ops: 0, parent:-]

--Child created id: 912
--Creating new operations for variant [Variant id: 912, #gens: 13, #ops: 0, parent:911]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isInfinite, org.apache.commons.math3.complex.Complex.ZERO]
--> var from patch: isInfinite spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.ZERO spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java304
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 912, #gens: 13, #ops: 1, parent:911] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 912
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-912/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(456): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (isInfinite) { 	return org.apache.commons.math3.complex.Complex.ZERO; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (911(f=1.0), 912(f=1.0), )
Selected to next generation: IDs2--> (911(f=1.0), )
----------Running generation: 457, population size: 1

***** Generation 457 : 0
**Parent Variant: [Variant id: 913, #gens: 13, #ops: 0, parent:-]

--Child created id: 914
--Creating new operations for variant [Variant id: 914, #gens: 13, #ops: 0, parent:913]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 914, #gens: 14, #ops: 1, parent:913] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 914, errors: [Complex.java:351: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		} 		return createComplex(real, -imaginary);
		  		                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(457): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (913(f=1.0), 914(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (913(f=1.0), )
----------Running generation: 458, population size: 1

***** Generation 458 : 0
**Parent Variant: [Variant id: 915, #gens: 13, #ops: 0, parent:-]

--Child created id: 916
--Creating new operations for variant [Variant id: 916, #gens: 13, #ops: 0, parent:915]
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 8
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java340
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(0.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(0.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 916, #gens: 14, #ops: 1, parent:915] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 916, errors: [Complex.java:1466: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1466: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1466: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1468: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1468: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1469: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1469: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1469: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1470: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1471: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1471: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1471: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1472: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1472: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1472: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1472: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1472: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1473: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1474: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1474: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1474: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1474: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1474: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1474: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1474: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1475: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1475: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1475: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1475: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1475: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1475: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1483: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1483: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1483: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1483: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1483: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1483: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1483: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1489: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1489: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1489: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1489: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1489: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1496: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1496: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1498: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1498: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1500: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1500: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(458): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `return createComplex(0.0, 0.0)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (915(f=1.0), 916(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (915(f=1.0), )
----------Running generation: 459, population size: 1

***** Generation 459 : 0
**Parent Variant: [Variant id: 917, #gens: 13, #ops: 0, parent:-]

--Child created id: 918
--Creating new operations for variant [Variant id: 918, #gens: 13, #ops: 0, parent:917]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 918, #gens: 14, #ops: 1, parent:917] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 918, errors: [Complex.java:343: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		} 		return createComplex(real, -imaginary);
		  		                    ^]
Ingredient counter is Zero
---Undoing: gnrtn(459): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return createComplex(real, -imaginary)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (917(f=1.0), 918(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (917(f=1.0), )
----------Running generation: 460, population size: 1

***** Generation 460 : 0
**Parent Variant: [Variant id: 919, #gens: 13, #ops: 0, parent:-]

--Child created id: 920
--Creating new operations for variant [Variant id: 920, #gens: 13, #ops: 0, parent:919]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 0
---modifPoint 1 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [isNaN, imaginary, org.apache.commons.math3.complex.Complex.NaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math3.complex.Complex.NaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 920, #gens: 13, #ops: 1, parent:919] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 920, errors: [Complex.java:1585: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1585: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1585: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1587: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1587: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1588: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1588: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1588: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1589: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1590: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1590: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1590: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1591: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1591: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1591: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1591: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1591: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1592: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1593: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1593: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1593: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1593: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1593: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1593: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1593: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1594: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1594: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1594: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1594: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1594: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1594: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1602: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1602: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1602: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1602: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1602: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1602: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1602: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1608: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1608: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1615: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1615: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1617: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1617: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1619: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1619: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(460): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (isNaN || java.lang.Double.isInfinite(imaginary)) { 	return org.apache.commons.math3.complex.Comp[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (919(f=1.0), 920(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (919(f=1.0), )
----------Running generation: 461, population size: 1

***** Generation 461 : 0
**Parent Variant: [Variant id: 921, #gens: 13, #ops: 0, parent:-]

--Child created id: 922
--Creating new operations for variant [Variant id: 922, #gens: 13, #ops: 0, parent:921]
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 922, #gens: 12, #ops: 1, parent:921] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 922
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-922/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(461): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (921(f=1.0), 922(f=1.0), )
Selected to next generation: IDs2--> (921(f=1.0), )
----------Running generation: 462, population size: 1

***** Generation 462 : 0
**Parent Variant: [Variant id: 923, #gens: 13, #ops: 0, parent:-]

--Child created id: 924
--Creating new operations for variant [Variant id: 924, #gens: 13, #ops: 0, parent:923]
---analyzing modificationPoint position: 11
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary)
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
---modifPoint 1 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 5
---modifPoint 3 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 2
location: Complex.java304
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 924, #gens: 12, #ops: 1, parent:923] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 924
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-924/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(462): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (923(f=1.0), 924(f=1.0), )
Selected to next generation: IDs2--> (923(f=1.0), )
----------Running generation: 463, population size: 1

***** Generation 463 : 0
**Parent Variant: [Variant id: 925, #gens: 13, #ops: 0, parent:-]

--Child created id: 926
--Creating new operations for variant [Variant id: 926, #gens: 13, #ops: 0, parent:925]
---analyzing modificationPoint position: 4
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 0
---modifPoint 1 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java344
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 344, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 926, #gens: 14, #ops: 1, parent:925] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 926, errors: [Complex.java:345: error: incompatible types: double cannot be converted to boolean
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (imaginary == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(real);}
			                                                                                                   			                        				                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(463): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)) ` -topatch--> `if (imaginary == 0.0) { 	return org.apache.commons.math3.util.FastMath.abs(real); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (925(f=1.0), 926(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (925(f=1.0), )
----------Running generation: 464, population size: 1

***** Generation 464 : 0
**Parent Variant: [Variant id: 927, #gens: 13, #ops: 0, parent:-]

--Child created id: 928
--Creating new operations for variant [Variant id: 928, #gens: 13, #ops: 0, parent:927]
---analyzing modificationPoint position: 3
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 4
location: Complex.java348
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 928, #gens: 12, #ops: 1, parent:927] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 928
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-928/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 15, was successful: false, cases executed: 123] ,[]
-Valid?: |false|15|123|[]|, fitness 15.0
Ingredient counter is Zero
---Undoing: gnrtn(464): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (927(f=1.0), 928(f=15.0), )
Selected to next generation: IDs2--> (927(f=1.0), )
----------Running generation: 465, population size: 1

***** Generation 465 : 0
**Parent Variant: [Variant id: 929, #gens: 13, #ops: 0, parent:-]

--Child created id: 930
--Creating new operations for variant [Variant id: 930, #gens: 13, #ops: 0, parent:929]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 4
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java348
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 348, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 930, #gens: 14, #ops: 1, parent:929] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 930, errors: [Complex.java:352: error: unreachable statement
				return false; 				return (real == c.real) && (imaginary == c.imaginary);}} 		return false;
				              				^]
Ingredient counter is Zero
---Undoing: gnrtn(465): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return (real == c.real) && (imaginary == c.imaginary) ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (929(f=1.0), 930(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (929(f=1.0), )
----------Running generation: 466, population size: 1

***** Generation 466 : 0
**Parent Variant: [Variant id: 931, #gens: 13, #ops: 0, parent:-]

--Child created id: 932
--Creating new operations for variant [Variant id: 932, #gens: 13, #ops: 0, parent:931]
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [other, c, c.isNaN, real, imaginary]
--> var from patch: other spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: c spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: c.isNaN spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: real spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 932, #gens: 14, #ops: 1, parent:931] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 932
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-932/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(466): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (931(f=1.0), 932(f=1.0), )
Selected to next generation: IDs2--> (931(f=1.0), )
----------Running generation: 467, population size: 1

***** Generation 467 : 0
**Parent Variant: [Variant id: 933, #gens: 13, #ops: 0, parent:-]

--Child created id: 934
--Creating new operations for variant [Variant id: 934, #gens: 13, #ops: 0, parent:933]
---analyzing modificationPoint position: 1
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 10
location: Complex.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 934, #gens: 12, #ops: 1, parent:933] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 934, errors: [Complex.java:106: error: variable imaginary might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(467): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.imaginary = imaginary ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (933(f=1.0), 934(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (933(f=1.0), )
----------Running generation: 468, population size: 1

***** Generation 468 : 0
**Parent Variant: [Variant id: 935, #gens: 13, #ops: 0, parent:-]

--Child created id: 936
--Creating new operations for variant [Variant id: 936, #gens: 13, #ops: 0, parent:935]
---analyzing modificationPoint position: 12
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 0 not mutation generated in  isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch []
location: Complex.java345
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 936, #gens: 14, #ops: 1, parent:935] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 936, errors: [Complex.java:352: error: unreachable statement
			return false;} 		return false;
			^]
Ingredient counter is Zero
---Undoing: gnrtn(468): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (935(f=1.0), 936(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (935(f=1.0), )
----------Running generation: 469, population size: 1

***** Generation 469 : 0
**Parent Variant: [Variant id: 937, #gens: 13, #ops: 0, parent:-]

--Child created id: 938
--Creating new operations for variant [Variant id: 938, #gens: 13, #ops: 0, parent:937]
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 9
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 1 not mutation generated in  this.real = real
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
location: Complex.java300
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 938, #gens: 12, #ops: 1, parent:937] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 938
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-938/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(469): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (937(f=1.0), 938(f=1.0), )
Selected to next generation: IDs2--> (937(f=1.0), )
----------Running generation: 470, population size: 1

***** Generation 470 : 0
**Parent Variant: [Variant id: 939, #gens: 13, #ops: 0, parent:-]

--Child created id: 940
--Creating new operations for variant [Variant id: 940, #gens: 13, #ops: 0, parent:939]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 0
location: Complex.java305
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 940, #gens: 12, #ops: 1, parent:939] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 940
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-940/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(470): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (939(f=1.0), 940(f=1.0), )
Selected to next generation: IDs2--> (939(f=1.0), )
----------Running generation: 471, population size: 1

***** Generation 471 : 0
**Parent Variant: [Variant id: 941, #gens: 13, #ops: 0, parent:-]

--Child created id: 942
--Creating new operations for variant [Variant id: 942, #gens: 13, #ops: 0, parent:941]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [java.lang.Double.NaN]
--> var from patch: java.lang.Double.NaN spoon.support.reflect.code.CtFieldReadImpl
SameName: // CHECKSTYLE: stop ConstantName
/**
 * A complex number representing "NaN + NaNi"
 */ public static final org.apache.commons.math3.complex.Complex NaN = new org.apache.commons.math3.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);
Transforming shadowed variable in return java.lang.Double.NaN
location: Complex.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return java.lang.Double.NaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 300, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return java.lang.Double.NaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 942, #gens: 14, #ops: 1, parent:941] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 942, errors: [Complex.java:301: error: incompatible types: double cannot be converted to org.apache.commons.math3.complex.Complex
	 */ 	public org.apache.commons.math3.complex.Complex reciprocal() { 		return java.lang.Double.NaN; 		if (isNaN) {
	    	                                                               		                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(471): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `return java.lang.Double.NaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (941(f=1.0), 942(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (941(f=1.0), )
----------Running generation: 472, population size: 1

***** Generation 472 : 0
**Parent Variant: [Variant id: 943, #gens: 13, #ops: 0, parent:-]

--Child created id: 944
--Creating new operations for variant [Variant id: 944, #gens: 13, #ops: 0, parent:943]
---analyzing modificationPoint position: 7
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [org.apache.commons.math3.complex.Complex.I]
--> var from patch: org.apache.commons.math3.complex.Complex.I spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java343
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(o[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 343, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(o[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 944, #gens: 14, #ops: 1, parent:943] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 944, errors: [Complex.java:574: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to boolean
		return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate()); 		return false;} 	/**
		                                                                                                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(472): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (other instanceof org.apache.commons.math3.complex.Complex) { 	org.apache.commons.math3.complex.C[...] ` -topatch--> `return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(o[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (943(f=1.0), 944(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (943(f=1.0), )
----------Running generation: 473, population size: 1

***** Generation 473 : 0
**Parent Variant: [Variant id: 945, #gens: 13, #ops: 0, parent:-]

--Child created id: 946
--Creating new operations for variant [Variant id: 946, #gens: 13, #ops: 0, parent:945]
---analyzing modificationPoint position: 6
Templates availables42
Attempts Base Ingredients  1 total 42
---modifPoint 0 not mutation generated in  if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); }
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
vars from patch [real, imaginary, q]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 340, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 946, #gens: 13, #ops: 1, parent:945] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 946, errors: [Complex.java:340: error: incompatible types: double cannot be converted to boolean
	public boolean equals(java.lang.Object other) { 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			if (imaginary == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(real);} 			double q = real / imaginary; 			return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 			if (real == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(imaginary);} 			double q = imaginary / real; 			return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
	                                                		                                                                                                                			                        				                                                 ^, Complex.java:340: error: incompatible types: double cannot be converted to boolean
	public boolean equals(java.lang.Object other) { 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			if (imaginary == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(real);} 			double q = real / imaginary; 			return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 			if (real == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(imaginary);} 			double q = imaginary / real; 			return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
	                                                		                                                                                                                			                        				                                                          			                             			                                                             ^, Complex.java:340: error: incompatible types: double cannot be converted to boolean
	public boolean equals(java.lang.Object other) { 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			if (imaginary == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(real);} 			double q = real / imaginary; 			return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 			if (real == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(imaginary);} 			double q = imaginary / real; 			return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
	                                                		                                                                                                                			                        				                                                          			                             			                                                                                                                                 			                   				                                                 ^, Complex.java:340: error: incompatible types: double cannot be converted to boolean
	public boolean equals(java.lang.Object other) { 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			if (imaginary == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(real);} 			double q = real / imaginary; 			return org.apache.commons.math3.util.FastMath.abs(imaginary) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));} else { 			if (real == 0.0) { 				return org.apache.commons.math3.util.FastMath.abs(imaginary);} 			double q = imaginary / real; 			return org.apache.commons.math3.util.FastMath.abs(real) * org.apache.commons.math3.util.FastMath.sqrt(1 + (q * q));}
	                                                		                                                                                                                			                        				                                                          			                             			                                                                                                                                 			                   				                                                               			                             			                                                        ^]
Ingredient counter is Zero
---Undoing: gnrtn(473): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (945(f=1.0), 946(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (945(f=1.0), )
----------Running generation: 474, population size: 1

***** Generation 474 : 0
**Parent Variant: [Variant id: 947, #gens: 13, #ops: 0, parent:-]

--Child created id: 948
--Creating new operations for variant [Variant id: 948, #gens: 13, #ops: 0, parent:947]
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 5
---modifPoint 1 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 0
---modifPoint 2 not mutation generated in  return org.apache.commons.math3.complex.Complex.NaN
---analyzing modificationPoint position: 8
location: Complex.java340
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 948, #gens: 12, #ops: 1, parent:947] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 948
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-948/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 123] ,[]
-Valid?: |false|1|123|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(474): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == other) { 	return true; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (947(f=1.0), 948(f=1.0), )
Selected to next generation: IDs2--> (947(f=1.0), )
----------Running generation: 475, population size: 1

***** Generation 475 : 0
**Parent Variant: [Variant id: 949, #gens: 13, #ops: 0, parent:-]

--Child created id: 950
--Creating new operations for variant [Variant id: 950, #gens: 13, #ops: 0, parent:949]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
vars from patch [imaginary, real]
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java345
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 950, #gens: 14, #ops: 1, parent:949] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 950, errors: [Complex.java:1305: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1305: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1305: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1305: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1305: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1305: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1305: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1307: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1307: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1308: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1308: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1308: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1309: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1310: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1310: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1310: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1311: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1311: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1311: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1311: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1311: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1312: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1313: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1313: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1313: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1313: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1313: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1313: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1313: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1314: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1314: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1314: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1314: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1314: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1314: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1322: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1322: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1322: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1322: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1322: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1322: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1322: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1328: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1328: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1328: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1328: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1328: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1335: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1335: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1337: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1337: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1339: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1339: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(475): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return createComplex(org.apache.commons.math3.util.FastMath.log(abs()),  org.apache.commons.math3.ut[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (949(f=1.0), 950(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (949(f=1.0), )
----------Running generation: 476, population size: 1

***** Generation 476 : 0
**Parent Variant: [Variant id: 951, #gens: 13, #ops: 0, parent:-]

--Child created id: 952
--Creating new operations for variant [Variant id: 952, #gens: 13, #ops: 0, parent:951]
---analyzing modificationPoint position: 6
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [java.lang.Double.NaN]
--> var from patch: java.lang.Double.NaN spoon.support.reflect.code.CtFieldReadImpl
SameName: // CHECKSTYLE: stop ConstantName
/**
 * A complex number representing "NaN + NaNi"
 */ public static final org.apache.commons.math3.complex.Complex NaN = new org.apache.commons.math3.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);
Transforming shadowed variable in return java.lang.Double.NaN
location: Complex.java345
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return java.lang.Double.NaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 345, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return java.lang.Double.NaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 952, #gens: 14, #ops: 1, parent:951] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 952, errors: [Complex.java:350: error: incompatible types: double cannot be converted to boolean
			} 			return java.lang.Double.NaN;
			  			                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(476): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `return java.lang.Double.NaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (951(f=1.0), 952(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (951(f=1.0), )
----------Running generation: 477, population size: 1

***** Generation 477 : 0
**Parent Variant: [Variant id: 953, #gens: 13, #ops: 0, parent:-]

--Child created id: 954
--Creating new operations for variant [Variant id: 954, #gens: 13, #ops: 0, parent:953]
---analyzing modificationPoint position: 6
location: Complex.java345
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 954, #gens: 12, #ops: 1, parent:953] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 954, errors: [Complex.java:345: error: variable declaration not allowed here
			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(477): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (c.isNaN) { 	return isNaN; } else { 	return (real == c.real) && (imaginary == c.imaginary); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (953(f=1.0), 954(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (953(f=1.0), )
----------Running generation: 478, population size: 1

***** Generation 478 : 0
**Parent Variant: [Variant id: 955, #gens: 13, #ops: 0, parent:-]

--Child created id: 956
--Creating new operations for variant [Variant id: 956, #gens: 13, #ops: 0, parent:955]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [org.apache.commons.math3.complex.Complex.I]
--> var from patch: org.apache.commons.math3.complex.Complex.I spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java1228
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.ap[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 1228, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.ap[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 956, #gens: 13, #ops: 1, parent:955] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 956, errors: [Complex.java:1228: error: incompatible types: org.apache.commons.math3.complex.Complex cannot be converted to java.lang.String
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());
	    	                    	                                     		                                                                                             ^]
Ingredient counter is Zero
---Undoing: gnrtn(478): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ((("(" + real) + ", ") + imaginary) + ")" ` -topatch--> `return sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.ap[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (955(f=1.0), 956(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (955(f=1.0), )
----------Running generation: 479, population size: 1

***** Generation 479 : 0
**Parent Variant: [Variant id: 957, #gens: 13, #ops: 0, parent:-]

--Child created id: 958
--Creating new operations for variant [Variant id: 958, #gens: 13, #ops: 0, parent:957]
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
Attempts Base Ingredients  2 total 142
---modifPoint 0 not mutation generated in  this.real = real
---analyzing modificationPoint position: 8
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
---modifPoint 1 not mutation generated in  if (this == other) { 	return true; }
---analyzing modificationPoint position: 4
---modifPoint 2 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 12
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 103, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 958, #gens: 14, #ops: 1, parent:957] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 958, errors: [Complex.java:121: error: incompatible types: unexpected return value
		return java.lang.Double.POSITIVE_INFINITY; 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(479): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `isInfinite = (!isNaN) &&  (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginar[...] ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (957(f=1.0), 958(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (957(f=1.0), )
----------Running generation: 480, population size: 1

***** Generation 480 : 0
**Parent Variant: [Variant id: 959, #gens: 13, #ops: 0, parent:-]

--Child created id: 960
--Creating new operations for variant [Variant id: 960, #gens: 13, #ops: 0, parent:959]
---analyzing modificationPoint position: 9
location: Complex.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 960, #gens: 12, #ops: 1, parent:959] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 960, errors: [Complex.java:106: error: variable real might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(480): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (959(f=1.0), 960(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (959(f=1.0), )
----------Running generation: 481, population size: 1

***** Generation 481 : 0
**Parent Variant: [Variant id: 961, #gens: 13, #ops: 0, parent:-]

--Child created id: 962
--Creating new operations for variant [Variant id: 962, #gens: 13, #ops: 0, parent:961]
---analyzing modificationPoint position: 4
---modifPoint 0 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 2
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [real, imaginary, q, scale]
--> var from patch: real spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: imaginary spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: q spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: scale spoon.support.reflect.code.CtVariableReadImpl
location: Complex.java304
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 304, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 962, #gens: 14, #ops: 1, parent:961] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 962, errors: [Complex.java:321: error: unreachable statement
		} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(481): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; } ` -topatch--> `if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(im[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (961(f=1.0), 962(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (961(f=1.0), )
----------Running generation: 482, population size: 1

***** Generation 482 : 0
**Parent Variant: [Variant id: 963, #gens: 13, #ops: 0, parent:-]

--Child created id: 964
--Creating new operations for variant [Variant id: 964, #gens: 13, #ops: 0, parent:963]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 2
Templates availables42
Attempts Base Ingredients  1 total 42
Attempts Base Ingredients  2 total 42
Attempts Base Ingredients  3 total 42
---modifPoint 1 not mutation generated in  if ((real == 0.0) && (imaginary == 0.0)) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 10
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 2 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [imaginary]
--> var from patch: imaginary spoon.support.reflect.code.CtFieldReadImpl
SameName: double imaginary
SameName: double imaginary
Transforming shadowed variable in if (imaginary > 20.0) {
	return createComplex(0.0, 1.0);
}
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 964, #gens: 14, #ops: 1, parent:963] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 964, errors: [Complex.java:1653: error: illegal start of expression
	 * Create a complex number given the real and imaginary parts.
	 ^, Complex.java:1653: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	         ^, Complex.java:1653: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                   ^, Complex.java:1653: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                ^, Complex.java:1653: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                         ^, Complex.java:1653: error: ';' expected
	 * Create a complex number given the real and imaginary parts.
	                                                       ^, Complex.java:1653: error: <identifier> expected
	 * Create a complex number given the real and imaginary parts.
	                                                              ^, Complex.java:1655: error: illegal start of expression
	 * @param realPart
	 ^, Complex.java:1655: error: illegal start of expression
	 * @param realPart
	   ^, Complex.java:1656: error: not a statement
	 * 		Real part.
	 ^, Complex.java:1656: error: ';' expected
	 * 		Real part.
	   		    ^, Complex.java:1656: error: <identifier> expected
	 * 		Real part.
	   		          ^, Complex.java:1657: error: illegal start of expression
	 * @param imaginaryPart
	   ^, Complex.java:1658: error: not a statement
	 * 		Imaginary part.
	 ^, Complex.java:1658: error: ';' expected
	 * 		Imaginary part.
	   		         ^, Complex.java:1658: error: <identifier> expected
	 * 		Imaginary part.
	   		               ^, Complex.java:1659: error: <identifier> expected
	 * @return a new complex number instance.
	    ^, Complex.java:1659: error: not a statement
	 * @return a new complex number instance.
	 ^, Complex.java:1659: error: ';' expected
	 * @return a new complex number instance.
	            ^, Complex.java:1659: error: ';' expected
	 * @return a new complex number instance.
	                               ^, Complex.java:1659: error: <identifier> expected
	 * @return a new complex number instance.
	                                         ^, Complex.java:1660: error: illegal start of expression
	 * @since 1.2
	   ^, Complex.java:1661: error: illegal character: '#'
	 * @see #valueOf(double, double)
	        ^, Complex.java:1661: error: not a statement
	 * @see #valueOf(double, double)
	 ^, Complex.java:1661: error: ';' expected
	 * @see #valueOf(double, double)
	         ^, Complex.java:1661: error: ')' expected
	 * @see #valueOf(double, double)
	                       ^, Complex.java:1661: error: not a statement
	 * @see #valueOf(double, double)
	                ^, Complex.java:1661: error: ';' expected
	 * @see #valueOf(double, double)
	                        ^, Complex.java:1661: error: illegal start of expression
	 * @see #valueOf(double, double)
	                               ^, Complex.java:1662: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	  ^, Complex.java:1662: error: illegal start of expression
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1662: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                ^, Complex.java:1662: error: <identifier> expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                 ^, Complex.java:1662: error: not a statement
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                         ^, Complex.java:1662: error: ';' expected
	 */ 	protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart) { 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                      ^, Complex.java:1670: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	^, Complex.java:1670: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	       ^, Complex.java:1670: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                 ^, Complex.java:1670: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                              ^, Complex.java:1670: error: <identifier> expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                               ^, Complex.java:1670: error: not a statement
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                       ^, Complex.java:1670: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart) { 		if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart, imaginaryPart);} 	/**
	    	                                                                                                    ^, Complex.java:1676: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	^, Complex.java:1676: error: illegal start of expression
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	       ^, Complex.java:1676: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                 ^, Complex.java:1676: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                              ^, Complex.java:1676: error: ';' expected
	 */ 	public static org.apache.commons.math3.complex.Complex valueOf(double realPart) { 		if (java.lang.Double.isNaN(realPart)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return new org.apache.commons.math3.complex.Complex(realPart);} 	/**
	    	                                                                              ^, Complex.java:1683: error: illegal start of expression
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	^, Complex.java:1683: error: ';' expected
	 */ 	protected final java.lang.Object readResolve() { 		return createComplex(real, imaginary);} 	/**
	    	                                            ^, Complex.java:1685: error: illegal start of expression
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	^, Complex.java:1685: error: ';' expected
	 */ 	public org.apache.commons.math3.complex.ComplexField getField() { 		return org.apache.commons.math3.complex.ComplexField.getInstance();} 	/**
	    	                                                             ^, Complex.java:1687: error: ';' expected
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                ^, Complex.java:1687: error: reached end of file while parsing
	 */ 	@java.lang.Override 	public java.lang.String toString() { 		return ((("(" + real) + ", ") + imaginary) + ")";}}
	    	                    	                                     		                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(482): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `if (imaginary > 20.0) { 	return createComplex(0.0, 1.0); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (963(f=1.0), 964(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (963(f=1.0), )
----------Running generation: 483, population size: 1

***** Generation 483 : 0
**Parent Variant: [Variant id: 965, #gens: 13, #ops: 0, parent:-]

--Child created id: 966
--Creating new operations for variant [Variant id: 966, #gens: 13, #ops: 0, parent:965]
---analyzing modificationPoint position: 3
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 0 not mutation generated in  if (isNaN) { 	return org.apache.commons.math3.complex.Complex.NaN; }
---analyzing modificationPoint position: 5
Templates availables142
Attempts Base Ingredients  1 total 142
---modifPoint 1 not mutation generated in  org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other))
---analyzing modificationPoint position: 9
Templates availables142
Attempts Base Ingredients  1 total 142
vars from patch [isNaN]
--> var from patch: isNaN spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 966, #gens: 14, #ops: 1, parent:965] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 966, errors: [Complex.java:347: error: incompatible types: unexpected return value
		return isNaN; 		this.imaginary = imaginary; 		isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary); 		isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(483): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.real = real ` -topatch--> `return isNaN` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (965(f=1.0), 966(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (965(f=1.0), )
----------Running generation: 484, population size: 1

***** Generation 484 : 0
**Parent Variant: [Variant id: 967, #gens: 13, #ops: 0, parent:-]

--Child created id: 968
--Creating new operations for variant [Variant id: 968, #gens: 13, #ops: 0, parent:967]
---analyzing modificationPoint position: 1
Templates availables60
Attempts Base Ingredients  1 total 60
---modifPoint 0 not mutation generated in  return ((("(" + real) + ", ") + imaginary) + ")"
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  return (real == c.real) && (imaginary == c.imaginary)
---analyzing modificationPoint position: 10
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
Attempts Base Ingredients  3 total 4
Attempts Base Ingredients  4 total 4
--- no mutation left to apply in element spoon.support.reflect.code.CtAssignmentImpl@1, search space size: 4
---modifPoint 2 not mutation generated in  this.imaginary = imaginary
---analyzing modificationPoint position: 0
Templates availables60
Attempts Base Ingredients  1 total 60
vars from patch [org.apache.commons.math3.complex.Complex.INF]
--> var from patch: org.apache.commons.math3.complex.Complex.INF spoon.support.reflect.code.CtFieldReadImpl
location: Complex.java305
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math3.complex.Complex line: 305, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 968, #gens: 13, #ops: 1, parent:967] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 968
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-968/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.complex.ComplexTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 123] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout6010secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/variant-968/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-5/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math3.stat.inference.TTestTest  org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest  org.apache.commons.math3.analysis.solvers.MullerSolverTest  org.apache.commons.math3.analysis.differentiation.DSCompilerTest  org.apache.commons.math3.stat.inference.OneWayAnovaTest  org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest  org.apache.commons.math3.distribution.AbstractIntegerDistributionTest  org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math3.ode.FirstOrderConverterTest  org.apache.commons.math3.linear.BiDiagonalTransformerTest  org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest  org.apache.commons.math3.random.Well19937cTest  org.apache.commons.math3.optim.SimpleValueCheckerTest  org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest  org.apache.commons.math3.linear.ArrayRealVectorTest  org.apache.commons.math3.distribution.TriangularDistributionTest  org.apache.commons.math3.random.UniformRandomGeneratorTest  org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest  org.apache.commons.math3.distribution.BetaDistributionTest  org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math3.linear.QRSolverTest  org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest  org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math3.genetics.ChromosomeTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest  org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math3.ode.JacobianMatricesTest  org.apache.commons.math3.linear.FieldMatrixImplTest  org.apache.commons.math3.geometry.euclidean.twod.SegmentTest  org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest  org.apache.commons.math3.util.OpenIntToFieldTest  org.apache.commons.math3.linear.OpenMapRealMatrixTest  org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math3.linear.EigenDecompositionTest  org.apache.commons.math3.exception.util.ArgUtilsTest  org.apache.commons.math3.genetics.ListPopulationTest  org.apache.commons.math3.primes.PrimesTest  org.apache.commons.math3.special.ErfTest  org.apache.commons.math3.ode.events.ReappearingEventTest  org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math3.fraction.FractionTest  org.apache.commons.math3.util.IncrementorTest  org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math3.special.GammaTest  org.apache.commons.math3.analysis.solvers.IllinoisSolverTest  org.apache.commons.math3.genetics.FixedElapsedTimeTest  org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest  org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest  org.apache.commons.math3.linear.MatrixUtilsTest  org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest  org.apache.commons.math3.random.Well512aTest  org.apache.commons.math3.optimization.fitting.PolynomialFitterTest  org.apache.commons.math3.stat.descriptive.moment.InteractionTest  org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math3.fraction.BigFractionFormatTest  org.apache.commons.math3.optimization.linear.SimplexSolverTest  org.apache.commons.math3.util.FastMathTest  org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest  org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest  org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest  org.apache.commons.math3.optim.univariate.BracketFinderTest  org.apache.commons.math3.linear.RealVectorTest  org.apache.commons.math3.analysis.solvers.SecantSolverTest  org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest  org.apache.commons.math3.geometry.euclidean.oned.IntervalTest  org.apache.commons.math3.distribution.NormalDistributionTest  org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math3.exception.NotPositiveExceptionTest  org.apache.commons.math3.linear.RealVectorFormatTest  org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest  org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math3.util.TransformerMapTest  org.apache.commons.math3.distribution.LogNormalDistributionTest  org.apache.commons.math3.analysis.integration.RombergIntegratorTest  org.apache.commons.math3.optim.PointVectorValuePairTest  org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math3.util.OpenIntToDoubleHashMapTest  org.apache.commons.math3.complex.ComplexFieldTest  org.apache.commons.math3.analysis.differentiation.GradientFunctionTest  org.apache.commons.math3.random.RandomDataGeneratorTest  org.apache.commons.math3.util.FastMathStrictComparisonTest  org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest  org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest  org.apache.commons.math3.optim.PointValuePairTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest  org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math3.genetics.UniformCrossoverTest  org.apache.commons.math3.genetics.BinaryMutationTest  org.apache.commons.math3.stat.FrequencyTest  org.apache.commons.math3.genetics.TournamentSelectionTest  org.apache.commons.math3.analysis.solvers.MullerSolver2Test  org.apache.commons.math3.geometry.euclidean.twod.SubLineTest  org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest  org.apache.commons.math3.exception.MaxCountExceededExceptionTest  org.apache.commons.math3.random.BitsStreamGeneratorTest  org.apache.commons.math3.analysis.function.SincTest  org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest  org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math3.fitting.CurveFitterTest  org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest  org.apache.commons.math3.analysis.solvers.BrentSolverTest  org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest  org.apache.commons.math3.random.Well44497aTest  org.apache.commons.math3.exception.OutOfRangeExceptionTest  org.apache.commons.math3.stat.inference.GTestTest  org.apache.commons.math3.RetryRunnerTest  org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math3.genetics.RandomKeyTest  org.apache.commons.math3.genetics.BinaryChromosomeTest  org.apache.commons.math3.optim.linear.SimplexSolverTest  org.apache.commons.math3.stat.descriptive.rank.MaxTest  org.apache.commons.math3.analysis.function.GaussianTest  org.apache.commons.math3.random.AbstractRandomGeneratorTest  org.apache.commons.math3.linear.SchurTransformerTest  org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math3.genetics.FitnessCachingTest  org.apache.commons.math3.genetics.OnePointCrossoverTest  org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest  org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest  org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest  org.apache.commons.math3.linear.RRQRSolverTest  org.apache.commons.math3.genetics.NPointCrossoverTest  org.apache.commons.math3.geometry.euclidean.twod.LineTest  org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math3.linear.TriDiagonalTransformerTest  org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest  org.apache.commons.math3.genetics.RandomKeyMutationTest  org.apache.commons.math3.util.ArithmeticUtilsTest  org.apache.commons.math3.stat.StatUtilsTest  org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math3.stat.clustering.DBSCANClustererTest  org.apache.commons.math3.distribution.FDistributionTest  org.apache.commons.math3.optimization.direct.CMAESOptimizerTest  org.apache.commons.math3.filter.KalmanFilterTest  org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest  org.apache.commons.math3.analysis.solvers.LaguerreSolverTest  org.apache.commons.math3.complex.QuaternionTest  org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest  org.apache.commons.math3.distribution.CauchyDistributionTest  org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math3.distribution.ZipfDistributionTest  org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest  org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest  org.apache.commons.math3.transform.FastFourierTransformerTest  org.apache.commons.math3.linear.HessenbergTransformerTest  org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest  org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math3.fraction.BigFractionTest  org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest  org.apache.commons.math3.stat.descriptive.moment.KurtosisTest  org.apache.commons.math3.fraction.BigFractionFieldTest  org.apache.commons.math3.analysis.function.SigmoidTest  org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest  org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest  org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest  org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math3.stat.descriptive.rank.MedianTest  org.apache.commons.math3.util.PairTest  org.apache.commons.math3.analysis.function.SqrtTest  org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest  org.apache.commons.math3.linear.EigenSolverTest  org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest  org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math3.stat.correlation.StorelessCovarianceTest  org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math3.ode.events.OverlappingEventsTest  org.apache.commons.math3.fraction.FractionFieldTest  org.apache.commons.math3.analysis.function.LogisticTest  org.apache.commons.math3.util.DefaultTransformerTest  org.apache.commons.math3.optimization.general.MinpackTest  org.apache.commons.math3.linear.BlockRealMatrixTest  org.apache.commons.math3.linear.LUDecompositionTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation  org.apache.commons.math3.optim.univariate.BrentOptimizerTest  org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest  org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest  org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest  org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest  org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest  org.apache.commons.math3.analysis.solvers.PegasusSolverTest  org.apache.commons.math3.complex.FrenchComplexFormatTest  org.apache.commons.math3.optimization.univariate.BrentOptimizerTest  org.apache.commons.math3.dfp.DfpDecTest  org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest  org.apache.commons.math3.analysis.FunctionUtilsTest  org.apache.commons.math3.complex.ComplexUtilsTest  org.apache.commons.math3.complex.RootsOfUnityTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest  org.apache.commons.math3.linear.SparseRealMatrixTest  org.apache.commons.math3.util.ResizableDoubleArrayTest  org.apache.commons.math3.optimization.fitting.HarmonicFitterTest  org.apache.commons.math3.distribution.UniformRealDistributionTest  org.apache.commons.math3.analysis.solvers.RiddersSolverTest  org.apache.commons.math3.distribution.AbstractRealDistributionTest  org.apache.commons.math3.dfp.DfpTest  org.apache.commons.math3.stat.correlation.CovarianceTest  org.apache.commons.math3.analysis.function.StepFunctionTest  org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math3.transform.FastSineTransformerTest  org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest  org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest  org.apache.commons.math3.fitting.GaussianFitterTest  org.apache.commons.math3.linear.SingularValueSolverTest  org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math3.linear.RRQRDecompositionTest  org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math3.linear.FrenchRealVectorFormatTest  org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest  org.apache.commons.math3.optimization.fitting.GaussianFitterTest  org.apache.commons.math3.stat.inference.MannWhitneyUTestTest  org.apache.commons.math3.stat.descriptive.moment.MeanTest  org.apache.commons.math3.optimization.linear.SimplexTableauTest  org.apache.commons.math3.util.BigRealFieldTest  org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest  org.apache.commons.math3.linear.BlockFieldMatrixTest  org.apache.commons.math3.util.Decimal64Test  org.apache.commons.math3.genetics.FixedGenerationCountTest  org.apache.commons.math3.distribution.BinomialDistributionTest  org.apache.commons.math3.stat.descriptive.summary.SumSqTest  org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest  org.apache.commons.math3.optim.SimplePointCheckerTest  org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest  org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math3.random.Well1024aTest  org.apache.commons.math3.linear.CholeskySolverTest  org.apache.commons.math3.util.FastMathTestPerformance  org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest  org.apache.commons.math3.stat.descriptive.summary.SumLogTest  org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest  org.apache.commons.math3.stat.data.LotteryTest  org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest  org.apache.commons.math3.random.UnitSphereRandomVectorGeneratorTest  org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math3.geometry.euclidean.threed.LineTest  org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest  org.apache.commons.math3.stat.descriptive.moment.SkewnessTest  org.apache.commons.math3.distribution.ExponentialDistributionTest  org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math3.random.MersenneTwisterTest  org.apache.commons.math3.stat.descriptive.summary.ProductTest  org.apache.commons.math3.geometry.euclidean.threed.PlaneTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest  org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest  org.apache.commons.math3.distribution.WeibullDistributionTest  org.apache.commons.math3.distribution.HypergeometricDistributionTest  org.apache.commons.math3.linear.ConjugateGradientTest  org.apache.commons.math3.stat.inference.ChiSquareTestTest  org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest  org.apache.commons.math3.random.RandomAdaptorTest  org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest  org.apache.commons.math3.linear.QRDecompositionTest  org.apache.commons.math3.linear.SparseFieldMatrixTest  org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest  org.apache.commons.math3.stat.descriptive.rank.PercentileTest  org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest  org.apache.commons.math3.util.MultidimensionalCounterTest  org.apache.commons.math3.ode.sampling.StepNormalizerTest  org.apache.commons.math3.stat.descriptive.moment.VarianceTest  org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest  org.apache.commons.math3.ode.events.EventStateTest  org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest  org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math3.transform.FastHadamardTransformerTest  org.apache.commons.math3.stat.descriptive.rank.MinTest  org.apache.commons.math3.analysis.solvers.BisectionSolverTest  org.apache.commons.math3.exception.util.LocalizedFormatsTest  org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest  org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math3.transform.FastCosineTransformerTest  org.apache.commons.math3.linear.SparseFieldVectorTest  org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest  org.apache.commons.math3.linear.ArrayFieldVectorTest  org.apache.commons.math3.complex.ComplexTest  org.apache.commons.math3.optimization.univariate.BracketFinderTest  org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation  org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest  org.apache.commons.math3.optim.SimpleVectorValueCheckerTest  org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math3.optimization.fitting.CurveFitterTest  org.apache.commons.math3.distribution.MultivariateNormalDistributionTest  org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math3.fitting.HarmonicFitterTest  org.apache.commons.math3.linear.FieldLUDecompositionTest  org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest  org.apache.commons.math3.exception.DimensionMismatchExceptionTest  org.apache.commons.math3.fitting.PolynomialFitterTest  org.apache.commons.math3.ode.events.EventFilterTest  org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math3.dfp.DfpMathTest  org.apache.commons.math3.optimization.SimplePointCheckerTest  org.apache.commons.math3.util.MathUtilsTest  org.apache.commons.math3.linear.LUSolverTest  org.apache.commons.math3.genetics.ElitisticListPopulationTest  org.apache.commons.math3.random.ISAACTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest  org.apache.commons.math3.special.BetaTest  org.apache.commons.math3.random.ValueServerTest  org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest  org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest  org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest  org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math3.geometry.euclidean.threed.RotationTest  org.apache.commons.math3.distribution.PoissonDistributionTest  org.apache.commons.math3.analysis.integration.gauss.LegendreTest  org.apache.commons.math3.linear.FieldLUSolverTest  org.apache.commons.math3.optimization.PointVectorValuePairTest  org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest  org.apache.commons.math3.stat.CertifiedDataTest  org.apache.commons.math3.util.ContinuedFractionTest  org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest  org.apache.commons.math3.optimization.direct.PowellOptimizerTest  org.apache.commons.math3.distribution.LevyDistributionTest  org.apache.commons.math3.random.GaussianRandomGeneratorTest  org.apache.commons.math3.util.PrecisionTest  org.apache.commons.math3.distribution.EnumeratedRealDistributionTest  org.apache.commons.math3.stat.ranking.NaturalRankingTest  org.apache.commons.math3.linear.SymmLQTest  org.apache.commons.math3.linear.SingularValueDecompositionTest  org.apache.commons.math3.random.Well44497bTest  org.apache.commons.math3.util.MathArraysTest  org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest  org.apache.commons.math3.optim.linear.SimplexTableauTest  org.apache.commons.math3.random.SynchronizedRandomGeneratorTest  org.apache.commons.math3.geometry.euclidean.threed.SubLineTest  org.apache.commons.math3.distribution.TDistributionTest  org.apache.commons.math3.analysis.solvers.NewtonSolverTest  org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest  org.apache.commons.math3.analysis.function.HarmonicOscillatorTest  org.apache.commons.math3.util.BigRealTest  org.apache.commons.math3.linear.DiagonalMatrixTest  org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math3.linear.Array2DRowRealMatrixTest  org.apache.commons.math3.genetics.CycleCrossoverTest  org.apache.commons.math3.genetics.OrderedCrossoverTest  org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest  org.apache.commons.math3.distribution.ChiSquaredDistributionTest  org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest  org.apache.commons.math3.distribution.UniformIntegerDistributionTest  org.apache.commons.math3.exception.util.ExceptionContextTest  org.apache.commons.math3.ode.ContinuousOutputModelTest  org.apache.commons.math3.random.StableRandomGeneratorTest  org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest  org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math3.linear.SparseRealVectorTest  org.apache.commons.math3.ode.nonstiff.GillIntegratorTest  org.apache.commons.math3.stat.regression.SimpleRegressionTest  org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest  org.apache.commons.math3.complex.ComplexFormatTest  org.apache.commons.math3.linear.CholeskyDecompositionTest  org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest  org.apache.commons.math3.fraction.FractionFormatTest  org.apache.commons.math3.analysis.function.LogitTest  org.apache.commons.math3.stat.data.LewTest  org.apache.commons.math3.linear.RealMatrixFormatTest  org.apache.commons.math3.distribution.GammaDistributionTest  org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest  org.apache.commons.math3.stat.descriptive.summary.SumTest  org.apache.commons.math3.stat.inference.TestUtilsTest  org.apache.commons.math3.random.EmpiricalDistributionTest  org.apache.commons.math3.distribution.PascalDistributionTest  org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math3.random.Well19937aTest  org.apache.commons.math3.optimization.PointValuePairTest  org.apache.commons.math3.optimization.SimpleValueCheckerTest  org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 4949] ,[]
-Valid?: |true|0|4949|[]|, fitness 0.0
-Found Solution, child variant #968
Ingredient counter is Zero

Attempts to find patch Id 968: 0, successful 0, failing 0

-Saving child on disk variant #968 at /Users/marekmazur/astor/./output_astor/AstorMain-math-5//src//variant-968

-Saving child on disk variant #968 at /Users/marekmazur/astor/./output_astor/AstorMain-math-5//src//variant-968_f
---Undoing: gnrtn(484): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math3.complex.Complex.NaN ` -topatch--> `return org.apache.commons.math3.complex.Complex.INF` (spoon.support.reflect.code.CtReturnImpl) 
/Users/marekmazur/astor/./output_astor/AstorMain-math-5/src/default_f/org/apache/commons/math3/complex/Complex.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-5/src/variant-968_f/org/apache/commons/math3/complex/Complex.java
diff command : diff -w -b  --label=/src/main/java/org/apache/commons/math3/complex/Complex.java --label=/src/main/java/org/apache/commons/math3/complex/Complex.java /Users/marekmazur/astor/./output_astor/AstorMain-math-5/src/default_f/org/apache/commons/math3/complex/Complex.java /Users/marekmazur/astor/./output_astor/AstorMain-math-5/src/variant-968_f/org/apache/commons/math3/complex/Complex.java --unified=0
/Users/marekmazur/astor/./output_astor/AstorMain-math-5/src/default/org/apache/commons/math3/complex/Complex.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-5/src/variant-968/org/apache/commons/math3/complex/Complex.java
diff command : diff -w -b  --label=/src/main/java/org/apache/commons/math3/complex/Complex.java --label=/src/main/java/org/apache/commons/math3/complex/Complex.java /Users/marekmazur/astor/./output_astor/AstorMain-math-5/src/default/org/apache/commons/math3/complex/Complex.java /Users/marekmazur/astor/./output_astor/AstorMain-math-5/src/variant-968/org/apache/commons/math3/complex/Complex.java --unified=0
Generation 1
Generation 2
Generation 3
Generation 4
Generation 5
Generation 6
Generation 7
Generation 8
Generation 9
Generation 10
Generation 11
Generation 12
Generation 13
Generation 14
Generation 15
Generation 16
Generation 17
Generation 18
Generation 19
Generation 20
Generation 21
Generation 22
Generation 23
Generation 24
Generation 25
Generation 26
Generation 27
Generation 28
Generation 29
Generation 30
Generation 31
Generation 32
Generation 33
Generation 34
Generation 35
Generation 36
Generation 37
Generation 38
Generation 39
Generation 40
Generation 41
Generation 42
Generation 43
Generation 44
Generation 45
Generation 46
Generation 47
Generation 48
Generation 49
Generation 50
Generation 51
Generation 52
Generation 53
Generation 54
Generation 55
Generation 56
Generation 57
Generation 58
Generation 59
Generation 60
Generation 61
Generation 62
Generation 63
Generation 64
Generation 65
Generation 66
Generation 67
Generation 68
Generation 69
Generation 70
Generation 71
Generation 72
Generation 73
Generation 74
Generation 75
Generation 76
Generation 77
Generation 78
Generation 79
Generation 80
Generation 81
Generation 82
Generation 83
Generation 84
Generation 85
Generation 86
Generation 87
Generation 88
Generation 89
Generation 90
Generation 91
Generation 92
Generation 93
Generation 94
Generation 95
Generation 96
Generation 97
Generation 98
Generation 99
Generation 100
Generation 101
Generation 102
Generation 103
Generation 104
Generation 105
Generation 106
Generation 107
Generation 108
Generation 109
Generation 110
Generation 111
Generation 112
Generation 113
Generation 114
Generation 115
Generation 116
Generation 117
Generation 118
Generation 119
Generation 120
Generation 121
Generation 122
Generation 123
Generation 124
Generation 125
Generation 126
Generation 127
Generation 128
Generation 129
Generation 130
Generation 131
Generation 132
Generation 133
Generation 134
Generation 135
Generation 136
Generation 137
Generation 138
Generation 139
Generation 140
Generation 141
Generation 142
Generation 143
Generation 144
Generation 145
Generation 146
Generation 147
Generation 148
Generation 149
Generation 150
Generation 151
Generation 152
Generation 153
Generation 154
Generation 155
Generation 156
Generation 157
Generation 158
Generation 159
Generation 160
Generation 161
Generation 162
Generation 163
Generation 164
Generation 165
Generation 166
Generation 167
Generation 168
Generation 169
Generation 170
Generation 171
Generation 172
Generation 173
Generation 174
Generation 175
Generation 176
Generation 177
Generation 178
Generation 179
Generation 180
Generation 181
Generation 182
Generation 183
Generation 184
Generation 185
Generation 186
Generation 187
Generation 188
Generation 189
Generation 190
Generation 191
Generation 192
Generation 193
Generation 194
Generation 195
Generation 196
Generation 197
Generation 198
Generation 199
Generation 200
Generation 201
Generation 202
Generation 203
Generation 204
Generation 205
Generation 206
Generation 207
Generation 208
Generation 209
Generation 210
Generation 211
Generation 212
Generation 213
Generation 214
Generation 215
Generation 216
Generation 217
Generation 218
Generation 219
Generation 220
Generation 221
Generation 222
Generation 223
Generation 224
Generation 225
Generation 226
Generation 227
Generation 228
Generation 229
Generation 230
Generation 231
Generation 232
Generation 233
Generation 234
Generation 235
Generation 236
Generation 237
Generation 238
Generation 239
Generation 240
Generation 241
Generation 242
Generation 243
Generation 244
Generation 245
Generation 246
Generation 247
Generation 248
Generation 249
Generation 250
Generation 251
Generation 252
Generation 253
Generation 254
Generation 255
Generation 256
Generation 257
Generation 258
Generation 259
Generation 260
Generation 261
Generation 262
Generation 263
Generation 264
Generation 265
Generation 266
Generation 267
Generation 268
Generation 269
Generation 270
Generation 271
Generation 272
Generation 273
Generation 274
Generation 275
Generation 276
Generation 277
Generation 278
Generation 279
Generation 280
Generation 281
Generation 282
Generation 283
Generation 284
Generation 285
Generation 286
Generation 287
Generation 288
Generation 289
Generation 290
Generation 291
Generation 292
Generation 293
Generation 294
Generation 295
Generation 296
Generation 297
Generation 298
Generation 299
Generation 300
Generation 301
Generation 302
Generation 303
Generation 304
Generation 305
Generation 306
Generation 307
Generation 308
Generation 309
Generation 310
Generation 311
Generation 312
Generation 313
Generation 314
Generation 315
Generation 316
Generation 317
Generation 318
Generation 319
Generation 320
Generation 321
Generation 322
Generation 323
Generation 324
Generation 325
Generation 326
Generation 327
Generation 328
Generation 329
Generation 330
Generation 331
Generation 332
Generation 333
Generation 334
Generation 335
Generation 336
Generation 337
Generation 338
Generation 339
Generation 340
Generation 341
Generation 342
Generation 343
Generation 344
Generation 345
Generation 346
Generation 347
Generation 348
Generation 349
Generation 350
Generation 351
Generation 352
Generation 353
Generation 354
Generation 355
Generation 356
Generation 357
Generation 358
Generation 359
Generation 360
Generation 361
Generation 362
Generation 363
Generation 364
Generation 365
Generation 366
Generation 367
Generation 368
Generation 369
Generation 370
Generation 371
Generation 372
Generation 373
Generation 374
Generation 375
Generation 376
Generation 377
Generation 378
Generation 379
Generation 380
Generation 381
Generation 382
Generation 383
Generation 384
Generation 385
Generation 386
Generation 387
Generation 388
Generation 389
Generation 390
Generation 391
Generation 392
Generation 393
Generation 394
Generation 395
Generation 396
Generation 397
Generation 398
Generation 399
Generation 400
Generation 401
Generation 402
Generation 403
Generation 404
Generation 405
Generation 406
Generation 407
Generation 408
Generation 409
Generation 410
Generation 411
Generation 412
Generation 413
Generation 414
Generation 415
Generation 416
Generation 417
Generation 418
Generation 419
Generation 420
Generation 421
Generation 422
Generation 423
Generation 424
Generation 425
Generation 426
Generation 427
Generation 428
Generation 429
Generation 430
Generation 431
Generation 432
Generation 433
Generation 434
Generation 435
Generation 436
Generation 437
Generation 438
Generation 439
Generation 440
Generation 441
Generation 442
Generation 443
Generation 444
Generation 445
Generation 446
Generation 447
Generation 448
Generation 449
Generation 450
Generation 451
Generation 452
Generation 453
Generation 454
Generation 455
Generation 456
Generation 457
Generation 458
Generation 459
Generation 460
Generation 461
Generation 462
Generation 463
Generation 464
Generation 465
Generation 466
Generation 467
Generation 468
Generation 469
Generation 470
Generation 471
Generation 472
Generation 473
Generation 474
Generation 475
Generation 476
Generation 477
Generation 478
Generation 479
Generation 480
Generation 481
Generation 482
Generation 483
Generation 484
Storing ing JSON at ./diffSolutions/patchinfo_968.json
./diffSolutions/patchinfo_968.json:
{"VARIANT_ID":"968","VALIDATION":"|true|0|4949|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math3.complex.Complex","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-5\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"1","INGREDIENT_PARENT":"return org.apache.commons.math3.complex.Complex.INF","PATCH_HUNK_TYPE":"CtReturnImpl|CtBlockImpl","ORIGINAL_CODE":"return org.apache.commons.math3.complex.Complex.NaN","BUGGY_CODE_TYPE":"CtReturnImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-5\\\/\\\/src\\\/\\\/variant-968\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java","LINE":"305","MP_RANKING":"0","PATCH_HUNK_CODE":"return org.apache.commons.math3.complex.Complex.INF"}],"TIME":"283","GENERATION":"484","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-5\\\/\\\/src\\\/\\\/variant-968","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java\\n@@ -305,2 +304,0 @@\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n@@ -308,3 +305,0 @@\\n-\\t\\tif (isInfinite) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;\\n-\\t\\t}\\n@@ -312,10 +306,0 @@\\n-\\t\\tif (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) {\\n-\\t\\t\\tdouble q = real \\\/ imaginary;\\n-\\t\\t\\tdouble scale = 1.0 \\\/ ((real * q) + imaginary);\\n-\\t\\t\\treturn createComplex(scale * q, -scale);\\n-\\t\\t} else {\\n-\\t\\t\\tdouble q = imaginary \\\/ real;\\n-\\t\\t\\tdouble scale = 1.0 \\\/ ((imaginary * q) + real);\\n-\\t\\t\\treturn createComplex(scale, (-scale) * q);\\n-\\t\\t}\\n-\\t}\\n@@ -323 +308,160 @@\\n-\\t\\\/**\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\tif (isInfinite) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;} \\t\\tif (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { \\t\\t\\tdouble q = real \\\/ imaginary; \\t\\t\\tdouble scale = 1.0 \\\/ ((real * q) + imaginary); \\t\\t\\treturn createComplex(scale * q, -scale);} else { \\t\\t\\tdouble q = imaginary \\\/ real; \\t\\t\\tdouble scale = 1.0 \\\/ ((imaginary * q) + real); \\t\\t\\treturn createComplex(scale, (-scale) * q);}} \\t\\\/**\\n@@ -338,17 +482 @@\\n-\\t *\\\/ \\t@java.lang.Override\\n-\\tpublic boolean equals(java.lang.Object other) {\\n-\\t\\tif (this == other) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) {\\n-\\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));\\n-\\t\\t\\tif (c.isNaN) {\\n-\\t\\t\\t\\treturn isNaN;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\treturn (real == c.real) && (imaginary == c.imaginary);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn false;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\t@java.lang.Override \\tpublic boolean equals(java.lang.Object other) { \\t\\tif (this == other) { \\t\\t\\treturn true;} \\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) { \\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); \\t\\t\\tif (c.isNaN) { \\t\\t\\t\\treturn isNaN;} else { \\t\\t\\t\\treturn (real == c.real) && (imaginary == c.imaginary);}} \\t\\treturn false;} \\t\\\/**\\n@@ -360,11 +488 @@\\n-\\t *\\\/\\n-\\t@java.lang.Override\\n-\\tpublic int hashCode() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn 7;\\n-\\t\\t}\\n-\\t\\treturn 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + \\n-\\t\\torg.apache.commons.math3.util.MathUtils.hash(real));\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\t@java.lang.Override \\tpublic int hashCode() { \\t\\tif (isNaN) { \\t\\t\\treturn 7;} \\t\\treturn 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + org.apache.commons.math3.util.MathUtils.hash(real));} \\t\\\/**\\n@@ -374,6 +492 @@\\n-\\t *\\\/\\n-\\tpublic double getImaginary() {\\n-\\t\\treturn imaginary;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic double getImaginary() { \\t\\treturn imaginary;} \\t\\\/**\\n@@ -383,6 +496 @@\\n-\\t *\\\/\\n-\\tpublic double getReal() {\\n-\\t\\treturn real;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic double getReal() { \\t\\treturn real;} \\t\\\/**\\n@@ -394,6 +502 @@\\n-\\t *\\\/\\n-\\tpublic boolean isNaN() {\\n-\\t\\treturn isNaN;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic boolean isNaN() { \\t\\treturn isNaN;} \\t\\\/**\\n@@ -407,6 +510 @@\\n-\\t *\\\/\\n-\\tpublic boolean isInfinite() {\\n-\\t\\treturn isInfinite;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic boolean isInfinite() { \\t\\treturn isInfinite;} \\t\\\/**\\n@@ -437,17 +535,2 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor);\\n-\\t\\tif (isNaN || factor.isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif (((java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor.real)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor.imaginary)) {\\n-\\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex((real * factor.real) - (imaginary * factor.imaginary), \\n-\\t\\t(real * factor.imaginary) + (imaginary * factor.real));\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor); \\t\\tif (isNaN || factor.isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif (((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor.real)) || java.lang.Double.isInfinite(factor.imaginary)) { \\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex((real * factor.real) - (imaginary * factor.imaginary), (real * factor.imaginary) + (imaginary * factor.real));} \\t\\\/**\\n@@ -461,12 +544 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(final int factor) {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif (java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real * factor, imaginary * factor);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(final int factor) { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex(real * factor, imaginary * factor);} \\t\\\/**\\n@@ -480,14 +552,2 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(double factor) {\\n-\\t\\tif (isNaN || java.lang.Double.isNaN(factor)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif ((java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor)) {\\n-\\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real * factor, imaginary * factor);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(double factor) { \\t\\tif (isNaN || java.lang.Double.isNaN(factor)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif ((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor)) { \\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex(real * factor, imaginary * factor);} \\t\\\/**\\n@@ -499,10 +559 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex negate() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(-real, -imaginary);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex negate() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(-real, -imaginary);} \\t\\\/**\\n@@ -527,11 +578 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend);\\n-\\t\\tif (isNaN || subtrahend.isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(real - subtrahend.getReal(), \\n-\\t\\timaginary - subtrahend.getImaginary());\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend); \\t\\tif (isNaN || subtrahend.isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());} \\t\\\/**\\n@@ -545,8 +586 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(double subtrahend) {\\n-\\t\\tif (isNaN || java.lang.Double.isNaN(subtrahend)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real - subtrahend, imaginary);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(double subtrahend) { \\t\\tif (isNaN || java.lang.Double.isNaN(subtrahend)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(real - subtrahend, imaginary);} \\t\\\/**\\n@@ -567,10 +601 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex acos() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex acos() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} \\t\\\/**\\n@@ -591,10 +616 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex asin() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex asin() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} \\t\\\/**\\n@@ -615,11 +631 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex atan() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(\\n-\\t\\torg.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex atan() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));} \\t\\\/**\\n@@ -656,7 +662 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex cos() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), \\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex cos() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), \\n\\n"}
Saving patch info at ./diffSolutions/patchinfo_968.json
Storing ing JSON at /Users/marekmazur/astor/./diffSolutions/patch_283450_968.diff
/Users/marekmazur/astor/./diffSolutions/patch_283450_968.diff:
{"VARIANT_ID":"968","VALIDATION":"|true|0|4949|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math3.complex.Complex","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-5\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"1","INGREDIENT_PARENT":"return org.apache.commons.math3.complex.Complex.INF","PATCH_HUNK_TYPE":"CtReturnImpl|CtBlockImpl","ORIGINAL_CODE":"return org.apache.commons.math3.complex.Complex.NaN","BUGGY_CODE_TYPE":"CtReturnImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-5\\\/\\\/src\\\/\\\/variant-968\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java","LINE":"305","MP_RANKING":"0","PATCH_HUNK_CODE":"return org.apache.commons.math3.complex.Complex.INF"}],"TIME":"283","GENERATION":"484","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-5\\\/\\\/src\\\/\\\/variant-968","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java\\n@@ -305,2 +304,0 @@\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n@@ -308,3 +305,0 @@\\n-\\t\\tif (isInfinite) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;\\n-\\t\\t}\\n@@ -312,10 +306,0 @@\\n-\\t\\tif (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) {\\n-\\t\\t\\tdouble q = real \\\/ imaginary;\\n-\\t\\t\\tdouble scale = 1.0 \\\/ ((real * q) + imaginary);\\n-\\t\\t\\treturn createComplex(scale * q, -scale);\\n-\\t\\t} else {\\n-\\t\\t\\tdouble q = imaginary \\\/ real;\\n-\\t\\t\\tdouble scale = 1.0 \\\/ ((imaginary * q) + real);\\n-\\t\\t\\treturn createComplex(scale, (-scale) * q);\\n-\\t\\t}\\n-\\t}\\n@@ -323 +308,160 @@\\n-\\t\\\/**\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\tif (isInfinite) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;} \\t\\tif (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { \\t\\t\\tdouble q = real \\\/ imaginary; \\t\\t\\tdouble scale = 1.0 \\\/ ((real * q) + imaginary); \\t\\t\\treturn createComplex(scale * q, -scale);} else { \\t\\t\\tdouble q = imaginary \\\/ real; \\t\\t\\tdouble scale = 1.0 \\\/ ((imaginary * q) + real); \\t\\t\\treturn createComplex(scale, (-scale) * q);}} \\t\\\/**\\n@@ -338,17 +482 @@\\n-\\t *\\\/ \\t@java.lang.Override\\n-\\tpublic boolean equals(java.lang.Object other) {\\n-\\t\\tif (this == other) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) {\\n-\\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));\\n-\\t\\t\\tif (c.isNaN) {\\n-\\t\\t\\t\\treturn isNaN;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\treturn (real == c.real) && (imaginary == c.imaginary);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn false;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\t@java.lang.Override \\tpublic boolean equals(java.lang.Object other) { \\t\\tif (this == other) { \\t\\t\\treturn true;} \\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) { \\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); \\t\\t\\tif (c.isNaN) { \\t\\t\\t\\treturn isNaN;} else { \\t\\t\\t\\treturn (real == c.real) && (imaginary == c.imaginary);}} \\t\\treturn false;} \\t\\\/**\\n@@ -360,11 +488 @@\\n-\\t *\\\/\\n-\\t@java.lang.Override\\n-\\tpublic int hashCode() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn 7;\\n-\\t\\t}\\n-\\t\\treturn 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + \\n-\\t\\torg.apache.commons.math3.util.MathUtils.hash(real));\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\t@java.lang.Override \\tpublic int hashCode() { \\t\\tif (isNaN) { \\t\\t\\treturn 7;} \\t\\treturn 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + org.apache.commons.math3.util.MathUtils.hash(real));} \\t\\\/**\\n@@ -374,6 +492 @@\\n-\\t *\\\/\\n-\\tpublic double getImaginary() {\\n-\\t\\treturn imaginary;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic double getImaginary() { \\t\\treturn imaginary;} \\t\\\/**\\n@@ -383,6 +496 @@\\n-\\t *\\\/\\n-\\tpublic double getReal() {\\n-\\t\\treturn real;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic double getReal() { \\t\\treturn real;} \\t\\\/**\\n@@ -394,6 +502 @@\\n-\\t *\\\/\\n-\\tpublic boolean isNaN() {\\n-\\t\\treturn isNaN;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic boolean isNaN() { \\t\\treturn isNaN;} \\t\\\/**\\n@@ -407,6 +510 @@\\n-\\t *\\\/\\n-\\tpublic boolean isInfinite() {\\n-\\t\\treturn isInfinite;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic boolean isInfinite() { \\t\\treturn isInfinite;} \\t\\\/**\\n@@ -437,17 +535,2 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor);\\n-\\t\\tif (isNaN || factor.isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif (((java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor.real)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor.imaginary)) {\\n-\\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex((real * factor.real) - (imaginary * factor.imaginary), \\n-\\t\\t(real * factor.imaginary) + (imaginary * factor.real));\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor); \\t\\tif (isNaN || factor.isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif (((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor.real)) || java.lang.Double.isInfinite(factor.imaginary)) { \\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex((real * factor.real) - (imaginary * factor.imaginary), (real * factor.imaginary) + (imaginary * factor.real));} \\t\\\/**\\n@@ -461,12 +544 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(final int factor) {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif (java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real * factor, imaginary * factor);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(final int factor) { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex(real * factor, imaginary * factor);} \\t\\\/**\\n@@ -480,14 +552,2 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(double factor) {\\n-\\t\\tif (isNaN || java.lang.Double.isNaN(factor)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif ((java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor)) {\\n-\\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real * factor, imaginary * factor);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(double factor) { \\t\\tif (isNaN || java.lang.Double.isNaN(factor)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif ((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor)) { \\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex(real * factor, imaginary * factor);} \\t\\\/**\\n@@ -499,10 +559 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex negate() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(-real, -imaginary);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex negate() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(-real, -imaginary);} \\t\\\/**\\n@@ -527,11 +578 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend);\\n-\\t\\tif (isNaN || subtrahend.isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(real - subtrahend.getReal(), \\n-\\t\\timaginary - subtrahend.getImaginary());\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend); \\t\\tif (isNaN || subtrahend.isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());} \\t\\\/**\\n@@ -545,8 +586 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(double subtrahend) {\\n-\\t\\tif (isNaN || java.lang.Double.isNaN(subtrahend)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real - subtrahend, imaginary);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(double subtrahend) { \\t\\tif (isNaN || java.lang.Double.isNaN(subtrahend)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(real - subtrahend, imaginary);} \\t\\\/**\\n@@ -567,10 +601 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex acos() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex acos() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} \\t\\\/**\\n@@ -591,10 +616 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex asin() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex asin() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} \\t\\\/**\\n@@ -615,11 +631 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex atan() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(\\n-\\t\\torg.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex atan() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));} \\t\\\/**\\n@@ -656,7 +662 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex cos() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), \\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex cos() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), \\n\\n"}
Saving patch diff at /Users/marekmazur/astor/./diffSolutions/patch_283450_968.diff
End analysis generation - Solutions found:--> (968(SOLUTION)(f=0.0), )
Variants to next generation from: 2-->IDs: (968(f=0.0)[SOL], 967(f=1.0), )
Selected to next generation: IDs2--> (967(f=1.0), )
Max Solution found 1
Time Repair Loop (s): 283.459
generationsexecuted: 484
----SUMMARY_EXECUTION---
End Repair Search: Found solution
Solution stored at: /Users/marekmazur/astor/./output_astor/AstorMain-math-5//src/
Number solutions:1
f (sol): 0.0, [Variant id: 968 (SOL) , #gens: 13, #ops: 1, parent:967]
All variants:
f 1.0, [Variant id: 969, #gens: 13, #ops: 0, parent:-]
Number suspicious:1

 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 968
 
time(sec)= 283
operation: ReplaceOp
location= org.apache.commons.math3.complex.Complex
line= 305
lineSuspiciousness= 1
lineSuspiciousness= 0
original statement= return org.apache.commons.math3.complex.Complex.NaN
buggy kind= CtReturnImpl|CtBlockImpl
fixed statement= return org.apache.commons.math3.complex.Complex.INF
Patch kind= CtReturnImpl|CtBlockImpl
generation= 484
ingredientScope= LOCAL
validation=|true|0|4949|[]|
diffpatch=--- /src/main/java/org/apache/commons/math3/complex/Complex.java
+++ /src/main/java/org/apache/commons/math3/complex/Complex.java
@@ -300 +300 @@
-			return org.apache.commons.math3.complex.Complex.NaN;
+			return org.apache.commons.math3.complex.Complex.INF;


diffpatchoriginal=--- /src/main/java/org/apache/commons/math3/complex/Complex.java
+++ /src/main/java/org/apache/commons/math3/complex/Complex.java
@@ -305,2 +304,0 @@
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
@@ -308,3 +305,0 @@
-		if (isInfinite) {
-			return org.apache.commons.math3.complex.Complex.ZERO;
-		}
@@ -312,10 +306,0 @@
-		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) {
-			double q = real / imaginary;
-			double scale = 1.0 / ((real * q) + imaginary);
-			return createComplex(scale * q, -scale);
-		} else {
-			double q = imaginary / real;
-			double scale = 1.0 / ((imaginary * q) + real);
-			return createComplex(scale, (-scale) * q);
-		}
-	}
@@ -323 +308,160 @@
-	/**
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+			return org.apache.commons.math3.complex.Complex.INF;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
@@ -338,17 +482 @@
-	 */ 	@java.lang.Override
-	public boolean equals(java.lang.Object other) {
-		if (this == other) {
-			return true;
-		}
-		if (other instanceof org.apache.commons.math3.complex.Complex) {
-			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
-			if (c.isNaN) {
-				return isNaN;
-			} else {
-				return (real == c.real) && (imaginary == c.imaginary);
-			}
-		}
-		return false;
-	}
-
-	/**
+	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other instanceof org.apache.commons.math3.complex.Complex) { 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (c.isNaN) { 				return isNaN;} else { 				return (real == c.real) && (imaginary == c.imaginary);}} 		return false;} 	/**
@@ -360,11 +488 @@
-	 */
-	@java.lang.Override
-	public int hashCode() {
-		if (isNaN) {
-			return 7;
-		}
-		return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
-		org.apache.commons.math3.util.MathUtils.hash(real));
-	}
-
-	/**
+	 */ 	@java.lang.Override 	public int hashCode() { 		if (isNaN) { 			return 7;} 		return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + org.apache.commons.math3.util.MathUtils.hash(real));} 	/**
@@ -374,6 +492 @@
-	 */
-	public double getImaginary() {
-		return imaginary;
-	}
-
-	/**
+	 */ 	public double getImaginary() { 		return imaginary;} 	/**
@@ -383,6 +496 @@
-	 */
-	public double getReal() {
-		return real;
-	}
-
-	/**
+	 */ 	public double getReal() { 		return real;} 	/**
@@ -394,6 +502 @@
-	 */
-	public boolean isNaN() {
-		return isNaN;
-	}
-
-	/**
+	 */ 	public boolean isNaN() { 		return isNaN;} 	/**
@@ -407,6 +510 @@
-	 */
-	public boolean isInfinite() {
-		return isInfinite;
-	}
-
-	/**
+	 */ 	public boolean isInfinite() { 		return isInfinite;} 	/**
@@ -437,17 +535,2 @@
-	 */ 	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException {
-		org.apache.commons.math3.util.MathUtils.checkNotNull(factor);
-		if (isNaN || factor.isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		if (((java.lang.Double.isInfinite(real) || 
-		java.lang.Double.isInfinite(imaginary)) || 
-		java.lang.Double.isInfinite(factor.real)) || 
-		java.lang.Double.isInfinite(factor.imaginary)) {
-			// we don't use isInfinite() to avoid testing for NaN again
-			return org.apache.commons.math3.complex.Complex.INF;
-		}
-		return createComplex((real * factor.real) - (imaginary * factor.imaginary), 
-		(real * factor.imaginary) + (imaginary * factor.real));
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { 		org.apache.commons.math3.util.MathUtils.checkNotNull(factor); 		if (isNaN || factor.isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor.real)) || java.lang.Double.isInfinite(factor.imaginary)) { 			// we don't use isInfinite() to avoid testing for NaN again
+			return org.apache.commons.math3.complex.Complex.INF;} 		return createComplex((real * factor.real) - (imaginary * factor.imaginary), (real * factor.imaginary) + (imaginary * factor.real));} 	/**
@@ -461,12 +544 @@
-	 */ 	public org.apache.commons.math3.complex.Complex multiply(final int factor) {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		if (java.lang.Double.isInfinite(real) || 
-		java.lang.Double.isInfinite(imaginary)) {
-			return org.apache.commons.math3.complex.Complex.INF;
-		}
-		return createComplex(real * factor, imaginary * factor);
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex multiply(final int factor) { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) { 			return org.apache.commons.math3.complex.Complex.INF;} 		return createComplex(real * factor, imaginary * factor);} 	/**
@@ -480,14 +552,2 @@
-	 */ 	public org.apache.commons.math3.complex.Complex multiply(double factor) {
-		if (isNaN || java.lang.Double.isNaN(factor)) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		if ((java.lang.Double.isInfinite(real) || 
-		java.lang.Double.isInfinite(imaginary)) || 
-		java.lang.Double.isInfinite(factor)) {
-			// we don't use isInfinite() to avoid testing for NaN again
-			return org.apache.commons.math3.complex.Complex.INF;
-		}
-		return createComplex(real * factor, imaginary * factor);
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex multiply(double factor) { 		if (isNaN || java.lang.Double.isNaN(factor)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if ((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor)) { 			// we don't use isInfinite() to avoid testing for NaN again
+			return org.apache.commons.math3.complex.Complex.INF;} 		return createComplex(real * factor, imaginary * factor);} 	/**
@@ -499,10 +559 @@
-	 */
-	public org.apache.commons.math3.complex.Complex negate() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return createComplex(-real, -imaginary);
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex negate() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return createComplex(-real, -imaginary);} 	/**
@@ -527,11 +578 @@
-	 */ 	public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException {
-		org.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend);
-		if (isNaN || subtrahend.isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return createComplex(real - subtrahend.getReal(), 
-		imaginary - subtrahend.getImaginary());
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException { 		org.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend); 		if (isNaN || subtrahend.isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());} 	/**
@@ -545,8 +586 @@
-	 */ 	public org.apache.commons.math3.complex.Complex subtract(double subtrahend) {
-		if (isNaN || java.lang.Double.isNaN(subtrahend)) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		return createComplex(real - subtrahend, imaginary);
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex subtract(double subtrahend) { 		if (isNaN || java.lang.Double.isNaN(subtrahend)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return createComplex(real - subtrahend, imaginary);} 	/**
@@ -567,10 +601 @@
-	 */
-	public org.apache.commons.math3.complex.Complex acos() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex acos() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} 	/**
@@ -591,10 +616 @@
-	 */
-	public org.apache.commons.math3.complex.Complex asin() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex asin() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} 	/**
@@ -615,11 +631 @@
-	 */
-	public org.apache.commons.math3.complex.Complex atan() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(
-		org.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex atan() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));} 	/**
@@ -656,7 +662 @@
-	 */
-	public org.apache.commons.math3.complex.Complex cos() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), 
+	 */ 	public org.apache.commons.math3.complex.Complex cos() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), 



Astor Output:

General stats:
EXECUTION_IDENTIFIER=
TOTAL_TIME=283.459
NR_GENERATIONS=484
NR_RIGHT_COMPILATIONS=124
NR_FAILLING_COMPILATIONS=360
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND
FAULT_LOCALIZATION=flacoco

Patch stats:

Patch 1
VARIANT_ID=968
TIME=283
VALIDATION=|true|0|4949|[]|
GENERATION=484
FOLDER_SOLUTION_CODE=/Users/marekmazur/astor/./output_astor/AstorMain-math-5//src//variant-968
--Patch Hunk #1
OPERATOR=ReplaceOp

LOCATION=org.apache.commons.math3.complex.Complex

PATH=/Users/marekmazur/astor/defects4j/math-5/src/main/java/org/apache/commons/math3/complex/Complex.java

MODIFIED_FILE_PATH=/Users/marekmazur/astor/./output_astor/AstorMain-math-5//src//variant-968/org/apache/commons/math3/complex/Complex.java

LINE=305

SUSPICIOUNESS=1

MP_RANKING=0

ORIGINAL_CODE=return org.apache.commons.math3.complex.Complex.NaN

BUGGY_CODE_TYPE=CtReturnImpl|CtBlockImpl

PATCH_HUNK_CODE=return org.apache.commons.math3.complex.Complex.INF

PATCH_HUNK_TYPE=CtReturnImpl|CtBlockImpl

INGREDIENT_SCOPE=LOCAL

INGREDIENT_PARENT=return org.apache.commons.math3.complex.Complex.INF

PATCH_DIFF_ORIG=--- /src/main/java/org/apache/commons/math3/complex/Complex.java
+++ /src/main/java/org/apache/commons/math3/complex/Complex.java
@@ -305,2 +304,0 @@
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
@@ -308,3 +305,0 @@
-		if (isInfinite) {
-			return org.apache.commons.math3.complex.Complex.ZERO;
-		}
@@ -312,10 +306,0 @@
-		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) {
-			double q = real / imaginary;
-			double scale = 1.0 / ((real * q) + imaginary);
-			return createComplex(scale * q, -scale);
-		} else {
-			double q = imaginary / real;
-			double scale = 1.0 / ((imaginary * q) + real);
-			return createComplex(scale, (-scale) * q);
-		}
-	}
@@ -323 +308,160 @@
-	/**
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+			return org.apache.commons.math3.complex.Complex.INF;} 		if (isInfinite) { 			return org.apache.commons.math3.complex.Complex.ZERO;} 		if (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { 			double q = real / imaginary; 			double scale = 1.0 / ((real * q) + imaginary); 			return createComplex(scale * q, -scale);} else { 			double q = imaginary / real; 			double scale = 1.0 / ((imaginary * q) + real); 			return createComplex(scale, (-scale) * q);}} 	/**
@@ -338,17 +482 @@
-	 */ 	@java.lang.Override
-	public boolean equals(java.lang.Object other) {
-		if (this == other) {
-			return true;
-		}
-		if (other instanceof org.apache.commons.math3.complex.Complex) {
-			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));
-			if (c.isNaN) {
-				return isNaN;
-			} else {
-				return (real == c.real) && (imaginary == c.imaginary);
-			}
-		}
-		return false;
-	}
-
-	/**
+	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other instanceof org.apache.commons.math3.complex.Complex) { 			org.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); 			if (c.isNaN) { 				return isNaN;} else { 				return (real == c.real) && (imaginary == c.imaginary);}} 		return false;} 	/**
@@ -360,11 +488 @@
-	 */
-	@java.lang.Override
-	public int hashCode() {
-		if (isNaN) {
-			return 7;
-		}
-		return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + 
-		org.apache.commons.math3.util.MathUtils.hash(real));
-	}
-
-	/**
+	 */ 	@java.lang.Override 	public int hashCode() { 		if (isNaN) { 			return 7;} 		return 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + org.apache.commons.math3.util.MathUtils.hash(real));} 	/**
@@ -374,6 +492 @@
-	 */
-	public double getImaginary() {
-		return imaginary;
-	}
-
-	/**
+	 */ 	public double getImaginary() { 		return imaginary;} 	/**
@@ -383,6 +496 @@
-	 */
-	public double getReal() {
-		return real;
-	}
-
-	/**
+	 */ 	public double getReal() { 		return real;} 	/**
@@ -394,6 +502 @@
-	 */
-	public boolean isNaN() {
-		return isNaN;
-	}
-
-	/**
+	 */ 	public boolean isNaN() { 		return isNaN;} 	/**
@@ -407,6 +510 @@
-	 */
-	public boolean isInfinite() {
-		return isInfinite;
-	}
-
-	/**
+	 */ 	public boolean isInfinite() { 		return isInfinite;} 	/**
@@ -437,17 +535,2 @@
-	 */ 	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException {
-		org.apache.commons.math3.util.MathUtils.checkNotNull(factor);
-		if (isNaN || factor.isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		if (((java.lang.Double.isInfinite(real) || 
-		java.lang.Double.isInfinite(imaginary)) || 
-		java.lang.Double.isInfinite(factor.real)) || 
-		java.lang.Double.isInfinite(factor.imaginary)) {
-			// we don't use isInfinite() to avoid testing for NaN again
-			return org.apache.commons.math3.complex.Complex.INF;
-		}
-		return createComplex((real * factor.real) - (imaginary * factor.imaginary), 
-		(real * factor.imaginary) + (imaginary * factor.real));
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { 		org.apache.commons.math3.util.MathUtils.checkNotNull(factor); 		if (isNaN || factor.isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor.real)) || java.lang.Double.isInfinite(factor.imaginary)) { 			// we don't use isInfinite() to avoid testing for NaN again
+			return org.apache.commons.math3.complex.Complex.INF;} 		return createComplex((real * factor.real) - (imaginary * factor.imaginary), (real * factor.imaginary) + (imaginary * factor.real));} 	/**
@@ -461,12 +544 @@
-	 */ 	public org.apache.commons.math3.complex.Complex multiply(final int factor) {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		if (java.lang.Double.isInfinite(real) || 
-		java.lang.Double.isInfinite(imaginary)) {
-			return org.apache.commons.math3.complex.Complex.INF;
-		}
-		return createComplex(real * factor, imaginary * factor);
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex multiply(final int factor) { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) { 			return org.apache.commons.math3.complex.Complex.INF;} 		return createComplex(real * factor, imaginary * factor);} 	/**
@@ -480,14 +552,2 @@
-	 */ 	public org.apache.commons.math3.complex.Complex multiply(double factor) {
-		if (isNaN || java.lang.Double.isNaN(factor)) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		if ((java.lang.Double.isInfinite(real) || 
-		java.lang.Double.isInfinite(imaginary)) || 
-		java.lang.Double.isInfinite(factor)) {
-			// we don't use isInfinite() to avoid testing for NaN again
-			return org.apache.commons.math3.complex.Complex.INF;
-		}
-		return createComplex(real * factor, imaginary * factor);
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex multiply(double factor) { 		if (isNaN || java.lang.Double.isNaN(factor)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		if ((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor)) { 			// we don't use isInfinite() to avoid testing for NaN again
+			return org.apache.commons.math3.complex.Complex.INF;} 		return createComplex(real * factor, imaginary * factor);} 	/**
@@ -499,10 +559 @@
-	 */
-	public org.apache.commons.math3.complex.Complex negate() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return createComplex(-real, -imaginary);
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex negate() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return createComplex(-real, -imaginary);} 	/**
@@ -527,11 +578 @@
-	 */ 	public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException {
-		org.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend);
-		if (isNaN || subtrahend.isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return createComplex(real - subtrahend.getReal(), 
-		imaginary - subtrahend.getImaginary());
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException { 		org.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend); 		if (isNaN || subtrahend.isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());} 	/**
@@ -545,8 +586 @@
-	 */ 	public org.apache.commons.math3.complex.Complex subtract(double subtrahend) {
-		if (isNaN || java.lang.Double.isNaN(subtrahend)) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-		return createComplex(real - subtrahend, imaginary);
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex subtract(double subtrahend) { 		if (isNaN || java.lang.Double.isNaN(subtrahend)) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return createComplex(real - subtrahend, imaginary);} 	/**
@@ -567,10 +601 @@
-	 */
-	public org.apache.commons.math3.complex.Complex acos() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex acos() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} 	/**
@@ -591,10 +616 @@
-	 */
-	public org.apache.commons.math3.complex.Complex asin() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex asin() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} 	/**
@@ -615,11 +631 @@
-	 */
-	public org.apache.commons.math3.complex.Complex atan() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(
-		org.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));
-	}
-
-	/**
+	 */ 	public org.apache.commons.math3.complex.Complex atan() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));} 	/**
@@ -656,7 +662 @@
-	 */
-	public org.apache.commons.math3.complex.Complex cos() {
-		if (isNaN) {
-			return org.apache.commons.math3.complex.Complex.NaN;
-		}
-
-		return createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), 
+	 */ 	public org.apache.commons.math3.complex.Complex cos() { 		if (isNaN) { 			return org.apache.commons.math3.complex.Complex.NaN;} 		return createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), 



Storing ing JSON at /Users/marekmazur/astor/./output_astor/AstorMain-math-5//astor_output.json
astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":124,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"","FAULT_LOCALIZATION":"flacoco","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":360,"NR_GENERATIONS":484,"TOTAL_TIME":283.459,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"968","VALIDATION":"|true|0|4949|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math3.complex.Complex","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-5\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"1","INGREDIENT_PARENT":"return org.apache.commons.math3.complex.Complex.INF","PATCH_HUNK_TYPE":"CtReturnImpl|CtBlockImpl","ORIGINAL_CODE":"return org.apache.commons.math3.complex.Complex.NaN","BUGGY_CODE_TYPE":"CtReturnImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-5\\\/\\\/src\\\/\\\/variant-968\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java","LINE":"305","MP_RANKING":"0","PATCH_HUNK_CODE":"return org.apache.commons.math3.complex.Complex.INF"}],"TIME":"283","GENERATION":"484","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-5\\\/\\\/src\\\/\\\/variant-968","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math3\\\/complex\\\/Complex.java\\n@@ -305,2 +304,0 @@\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n@@ -308,3 +305,0 @@\\n-\\t\\tif (isInfinite) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;\\n-\\t\\t}\\n@@ -312,10 +306,0 @@\\n-\\t\\tif (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) {\\n-\\t\\t\\tdouble q = real \\\/ imaginary;\\n-\\t\\t\\tdouble scale = 1.0 \\\/ ((real * q) + imaginary);\\n-\\t\\t\\treturn createComplex(scale * q, -scale);\\n-\\t\\t} else {\\n-\\t\\t\\tdouble q = imaginary \\\/ real;\\n-\\t\\t\\tdouble scale = 1.0 \\\/ ((imaginary * q) + real);\\n-\\t\\t\\treturn createComplex(scale, (-scale) * q);\\n-\\t\\t}\\n-\\t}\\n@@ -323 +308,160 @@\\n-\\t\\\/**\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\tif (isInfinite) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;} \\t\\tif (org.apache.commons.math3.util.FastMath.abs(real) < org.apache.commons.math3.util.FastMath.abs(imaginary)) { \\t\\t\\tdouble q = real \\\/ imaginary; \\t\\t\\tdouble scale = 1.0 \\\/ ((real * q) + imaginary); \\t\\t\\treturn createComplex(scale * q, -scale);} else { \\t\\t\\tdouble q = imaginary \\\/ real; \\t\\t\\tdouble scale = 1.0 \\\/ ((imaginary * q) + real); \\t\\t\\treturn createComplex(scale, (-scale) * q);}} \\t\\\/**\\n@@ -338,17 +482 @@\\n-\\t *\\\/ \\t@java.lang.Override\\n-\\tpublic boolean equals(java.lang.Object other) {\\n-\\t\\tif (this == other) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) {\\n-\\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));\\n-\\t\\t\\tif (c.isNaN) {\\n-\\t\\t\\t\\treturn isNaN;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\treturn (real == c.real) && (imaginary == c.imaginary);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn false;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\t@java.lang.Override \\tpublic boolean equals(java.lang.Object other) { \\t\\tif (this == other) { \\t\\t\\treturn true;} \\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) { \\t\\t\\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); \\t\\t\\tif (c.isNaN) { \\t\\t\\t\\treturn isNaN;} else { \\t\\t\\t\\treturn (real == c.real) && (imaginary == c.imaginary);}} \\t\\treturn false;} \\t\\\/**\\n@@ -360,11 +488 @@\\n-\\t *\\\/\\n-\\t@java.lang.Override\\n-\\tpublic int hashCode() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn 7;\\n-\\t\\t}\\n-\\t\\treturn 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + \\n-\\t\\torg.apache.commons.math3.util.MathUtils.hash(real));\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\t@java.lang.Override \\tpublic int hashCode() { \\t\\tif (isNaN) { \\t\\t\\treturn 7;} \\t\\treturn 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + org.apache.commons.math3.util.MathUtils.hash(real));} \\t\\\/**\\n@@ -374,6 +492 @@\\n-\\t *\\\/\\n-\\tpublic double getImaginary() {\\n-\\t\\treturn imaginary;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic double getImaginary() { \\t\\treturn imaginary;} \\t\\\/**\\n@@ -383,6 +496 @@\\n-\\t *\\\/\\n-\\tpublic double getReal() {\\n-\\t\\treturn real;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic double getReal() { \\t\\treturn real;} \\t\\\/**\\n@@ -394,6 +502 @@\\n-\\t *\\\/\\n-\\tpublic boolean isNaN() {\\n-\\t\\treturn isNaN;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic boolean isNaN() { \\t\\treturn isNaN;} \\t\\\/**\\n@@ -407,6 +510 @@\\n-\\t *\\\/\\n-\\tpublic boolean isInfinite() {\\n-\\t\\treturn isInfinite;\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic boolean isInfinite() { \\t\\treturn isInfinite;} \\t\\\/**\\n@@ -437,17 +535,2 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor);\\n-\\t\\tif (isNaN || factor.isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif (((java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor.real)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor.imaginary)) {\\n-\\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex((real * factor.real) - (imaginary * factor.imaginary), \\n-\\t\\t(real * factor.imaginary) + (imaginary * factor.real));\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor); \\t\\tif (isNaN || factor.isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif (((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor.real)) || java.lang.Double.isInfinite(factor.imaginary)) { \\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex((real * factor.real) - (imaginary * factor.imaginary), (real * factor.imaginary) + (imaginary * factor.real));} \\t\\\/**\\n@@ -461,12 +544 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(final int factor) {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif (java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real * factor, imaginary * factor);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(final int factor) { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex(real * factor, imaginary * factor);} \\t\\\/**\\n@@ -480,14 +552,2 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(double factor) {\\n-\\t\\tif (isNaN || java.lang.Double.isNaN(factor)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif ((java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor)) {\\n-\\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real * factor, imaginary * factor);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(double factor) { \\t\\tif (isNaN || java.lang.Double.isNaN(factor)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif ((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor)) { \\t\\t\\t\\\/\\\/ we don't use isInfinite() to avoid testing for NaN again\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex(real * factor, imaginary * factor);} \\t\\\/**\\n@@ -499,10 +559 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex negate() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(-real, -imaginary);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex negate() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(-real, -imaginary);} \\t\\\/**\\n@@ -527,11 +578 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend);\\n-\\t\\tif (isNaN || subtrahend.isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(real - subtrahend.getReal(), \\n-\\t\\timaginary - subtrahend.getImaginary());\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend); \\t\\tif (isNaN || subtrahend.isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());} \\t\\\/**\\n@@ -545,8 +586 @@\\n-\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(double subtrahend) {\\n-\\t\\tif (isNaN || java.lang.Double.isNaN(subtrahend)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real - subtrahend, imaginary);\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(double subtrahend) { \\t\\tif (isNaN || java.lang.Double.isNaN(subtrahend)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(real - subtrahend, imaginary);} \\t\\\/**\\n@@ -567,10 +601 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex acos() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex acos() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} \\t\\\/**\\n@@ -591,10 +616 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex asin() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex asin() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn sqrt1z().add(this.multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} \\t\\\/**\\n@@ -615,11 +631 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex atan() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(\\n-\\t\\torg.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));\\n-\\t}\\n-\\n-\\t\\\/**\\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex atan() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn this.add(org.apache.commons.math3.complex.Complex.I).divide(org.apache.commons.math3.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math3.complex.Complex.I.divide(createComplex(2.0, 0.0)));} \\t\\\/**\\n@@ -656,7 +662 @@\\n-\\t *\\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex cos() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), \\n+\\t *\\\/ \\tpublic org.apache.commons.math3.complex.Complex cos() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(org.apache.commons.math3.util.FastMath.cos(real) * org.apache.commons.math3.util.FastMath.cosh(imaginary), \\n\\n"}]}
Time Total(s): 1102.305
