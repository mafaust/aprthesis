{
  "general": {
    "NR_RIGHT_COMPILATIONS": 50,
    "EXECUTION_IDENTIFIER": "",
    "FAULT_LOCALIZATION": "flacoco",
    "OUTPUT_STATUS": "STOP_BY_PATCH_FOUND",
    "NR_FAILLING_COMPILATIONS": 104,
    "NR_GENERATIONS": 154,
    "TOTAL_TIME": 227.044
  },
  "patches": [
    {
      "VARIANT_ID": "308",
      "VALIDATION": "|true|0|4949|[]|",
      "patchhunks": [
        {
          "LOCATION": "org.apache.commons.math3.complex.Complex",
          "PATH": "\\/Users\\/marekmazur\\/astor\\/defects4j\\/math-5\\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/complex\\/Complex.java",
          "INGREDIENT_SCOPE": "LOCAL",
          "SUSPICIOUNESS": "1",
          "INGREDIENT_PARENT": "\\/\\/ we don\u0027t use isInfinite() to avoid testing for NaN again\\nreturn org.apache.commons.math3.complex.Complex.INF",
          "PATCH_HUNK_TYPE": "CtReturnImpl|CtBlockImpl",
          "ORIGINAL_CODE": "return org.apache.commons.math3.complex.Complex.NaN",
          "BUGGY_CODE_TYPE": "CtReturnImpl|CtBlockImpl",
          "OPERATOR": "ReplaceOp",
          "MODIFIED_FILE_PATH": "\\/Users\\/marekmazur\\/astor\\/.\\/output_astor\\/AstorMain-math-5\\/\\/src\\/\\/variant-308\\/org\\/apache\\/commons\\/math3\\/complex\\/Complex.java",
          "LINE": "305",
          "MP_RANKING": "0",
          "PATCH_HUNK_CODE": "\\/\\/ we don\u0027t use isInfinite() to avoid testing for NaN again\\nreturn org.apache.commons.math3.complex.Complex.INF"
        }
      ],
      "TIME": "226",
      "GENERATION": "154",
      "FOLDER_SOLUTION_CODE": "\\/Users\\/marekmazur\\/astor\\/.\\/output_astor\\/AstorMain-math-5\\/\\/src\\/\\/variant-308",
      "PATCH_DIFF_ORIG": "--- \\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/complex\\/Complex.java\\n+++ \\/src\\/main\\/java\\/org\\/apache\\/commons\\/math3\\/complex\\/Complex.java\\n@@ -305,2 +304,0 @@\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n@@ -308,3 +305,0 @@\\n-\\t\\tif (isInfinite) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;\\n-\\t\\t}\\n@@ -312,10 +306,0 @@\\n-\\t\\tif (org.apache.commons.math3.util.FastMath.abs(real) \u003c org.apache.commons.math3.util.FastMath.abs(imaginary)) {\\n-\\t\\t\\tdouble q \u003d real \\/ imaginary;\\n-\\t\\t\\tdouble scale \u003d 1.0 \\/ ((real * q) + imaginary);\\n-\\t\\t\\treturn createComplex(scale * q, -scale);\\n-\\t\\t} else {\\n-\\t\\t\\tdouble q \u003d imaginary \\/ real;\\n-\\t\\t\\tdouble scale \u003d 1.0 \\/ ((imaginary * q) + real);\\n-\\t\\t\\treturn createComplex(scale, (-scale) * q);\\n-\\t\\t}\\n-\\t}\\n@@ -323 +308,140 @@\\n-\\t\\/**\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\/\\/ we don\u0027t use isInfinite() to avoid testing for NaN again\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\tif (isInfinite) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.ZERO;} \\t\\tif (org.apache.commons.math3.util.FastMath.abs(real) \u003c org.apache.commons.math3.util.FastMath.abs(imaginary)) { \\t\\t\\tdouble q \u003d real \\/ imaginary; \\t\\t\\tdouble scale \u003d 1.0 \\/ ((real * q) + imaginary); \\t\\t\\treturn createComplex(scale * q, -scale);} else { \\t\\t\\tdouble q \u003d imaginary \\/ real; \\t\\t\\tdouble scale \u003d 1.0 \\/ ((imaginary * q) + real); \\t\\t\\treturn createComplex(scale, (-scale) * q);}} \\t\\/**\\n@@ -338,17 +462 @@\\n-\\t *\\/ \\t@java.lang.Override\\n-\\tpublic boolean equals(java.lang.Object other) {\\n-\\t\\tif (this \u003d\u003d other) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) {\\n-\\t\\t\\torg.apache.commons.math3.complex.Complex c \u003d ((org.apache.commons.math3.complex.Complex) (other));\\n-\\t\\t\\tif (c.isNaN) {\\n-\\t\\t\\t\\treturn isNaN;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\treturn (real \u003d\u003d c.real) \u0026\u0026 (imaginary \u003d\u003d c.imaginary);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn false;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\t@java.lang.Override \\tpublic boolean equals(java.lang.Object other) { \\t\\tif (this \u003d\u003d other) { \\t\\t\\treturn true;} \\t\\tif (other instanceof org.apache.commons.math3.complex.Complex) { \\t\\t\\torg.apache.commons.math3.complex.Complex c \u003d ((org.apache.commons.math3.complex.Complex) (other)); \\t\\t\\tif (c.isNaN) { \\t\\t\\t\\treturn isNaN;} else { \\t\\t\\t\\treturn (real \u003d\u003d c.real) \u0026\u0026 (imaginary \u003d\u003d c.imaginary);}} \\t\\treturn false;} \\t\\/**\\n@@ -360,11 +468 @@\\n-\\t *\\/\\n-\\t@java.lang.Override\\n-\\tpublic int hashCode() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn 7;\\n-\\t\\t}\\n-\\t\\treturn 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + \\n-\\t\\torg.apache.commons.math3.util.MathUtils.hash(real));\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\t@java.lang.Override \\tpublic int hashCode() { \\t\\tif (isNaN) { \\t\\t\\treturn 7;} \\t\\treturn 37 * ((17 * org.apache.commons.math3.util.MathUtils.hash(imaginary)) + org.apache.commons.math3.util.MathUtils.hash(real));} \\t\\/**\\n@@ -374,6 +472 @@\\n-\\t *\\/\\n-\\tpublic double getImaginary() {\\n-\\t\\treturn imaginary;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic double getImaginary() { \\t\\treturn imaginary;} \\t\\/**\\n@@ -383,6 +476 @@\\n-\\t *\\/\\n-\\tpublic double getReal() {\\n-\\t\\treturn real;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic double getReal() { \\t\\treturn real;} \\t\\/**\\n@@ -394,6 +482 @@\\n-\\t *\\/\\n-\\tpublic boolean isNaN() {\\n-\\t\\treturn isNaN;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic boolean isNaN() { \\t\\treturn isNaN;} \\t\\/**\\n@@ -407,6 +490 @@\\n-\\t *\\/\\n-\\tpublic boolean isInfinite() {\\n-\\t\\treturn isInfinite;\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic boolean isInfinite() { \\t\\treturn isInfinite;} \\t\\/**\\n@@ -437,17 +515,2 @@\\n-\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor);\\n-\\t\\tif (isNaN || factor.isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif (((java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor.real)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor.imaginary)) {\\n-\\t\\t\\t\\/\\/ we don\u0027t use isInfinite() to avoid testing for NaN again\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex((real * factor.real) - (imaginary * factor.imaginary), \\n-\\t\\t(real * factor.imaginary) + (imaginary * factor.real));\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor); \\t\\tif (isNaN || factor.isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif (((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor.real)) || java.lang.Double.isInfinite(factor.imaginary)) { \\t\\t\\t\\/\\/ we don\u0027t use isInfinite() to avoid testing for NaN again\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex((real * factor.real) - (imaginary * factor.imaginary), (real * factor.imaginary) + (imaginary * factor.real));} \\t\\/**\\n@@ -461,12 +524 @@\\n-\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(final int factor) {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif (java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real * factor, imaginary * factor);\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(final int factor) { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex(real * factor, imaginary * factor);} \\t\\/**\\n@@ -480,14 +532,2 @@\\n-\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(double factor) {\\n-\\t\\tif (isNaN || java.lang.Double.isNaN(factor)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\tif ((java.lang.Double.isInfinite(real) || \\n-\\t\\tjava.lang.Double.isInfinite(imaginary)) || \\n-\\t\\tjava.lang.Double.isInfinite(factor)) {\\n-\\t\\t\\t\\/\\/ we don\u0027t use isInfinite() to avoid testing for NaN again\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real * factor, imaginary * factor);\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex multiply(double factor) { \\t\\tif (isNaN || java.lang.Double.isNaN(factor)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\tif ((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor)) { \\t\\t\\t\\/\\/ we don\u0027t use isInfinite() to avoid testing for NaN again\\n+\\t\\t\\treturn org.apache.commons.math3.complex.Complex.INF;} \\t\\treturn createComplex(real * factor, imaginary * factor);} \\t\\/**\\n@@ -499,10 +539 @@\\n-\\t *\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex negate() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(-real, -imaginary);\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex negate() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(-real, -imaginary);} \\t\\/**\\n@@ -527,11 +558 @@\\n-\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException {\\n-\\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend);\\n-\\t\\tif (isNaN || subtrahend.isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn createComplex(real - subtrahend.getReal(), \\n-\\t\\timaginary - subtrahend.getImaginary());\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend) throws org.apache.commons.math3.exception.NullArgumentException { \\t\\torg.apache.commons.math3.util.MathUtils.checkNotNull(subtrahend); \\t\\tif (isNaN || subtrahend.isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());} \\t\\/**\\n@@ -545,8 +566 @@\\n-\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(double subtrahend) {\\n-\\t\\tif (isNaN || java.lang.Double.isNaN(subtrahend)) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\t\\treturn createComplex(real - subtrahend, imaginary);\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex subtract(double subtrahend) { \\t\\tif (isNaN || java.lang.Double.isNaN(subtrahend)) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn createComplex(real - subtrahend, imaginary);} \\t\\/**\\n@@ -567,10 +581 @@\\n-\\t *\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex acos() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n-\\t\\treturn this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex acos() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;} \\t\\treturn this.add(this.sqrt1z().multiply(org.apache.commons.math3.complex.Complex.I)).log().multiply(org.apache.commons.math3.complex.Complex.I.negate());} \\t\\/**\\n@@ -591,6 +596 @@\\n-\\t *\\/\\n-\\tpublic org.apache.commons.math3.complex.Complex asin() {\\n-\\t\\tif (isNaN) {\\n-\\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;\\n-\\t\\t}\\n-\\n+\\t *\\/ \\tpublic org.apache.commons.math3.complex.Complex asin() { \\t\\tif (isNaN) { \\t\\t\\treturn org.apache.commons.math3.complex.Complex.NaN;}\\n\\n"
    }
  ]
}